using ConanExiles;
using ConanExiles.Memory;
using ConanExiles.UnrealClasses;
using ConanExiles.UnrealStructures;
using ConanExilesGame.Script;


namespace ConanExilesGame.Script
{
	/// <summary>
	/// UBlueprintAsyncActionBase:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UBlueprintAsyncActionBase:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAddGuildMemberCallProxy:UBlueprintAsyncActionBase
	/// Size: 0x68
	/// Properties: 2
	/// </summary>
	public class UAddGuildMemberCallProxy:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: PlayerId
		/// Type: ObjectProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public UUniqueID PlayerId => ReadUObject<UUniqueID>(0x50);
		
		/// <summary>
		/// Name: guildId
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UUniqueID guildId => ReadUObject<UUniqueID>(0x58);
		
	}


	/// <summary>
	/// UActorComponent:UObject
	/// Size: 0xD8
	/// Properties: 15
	/// </summary>
	public class UActorComponent:UObject
	{
		public override int ObjectSize => 216;
		/// <summary>
		/// Name: PrimaryComponentTick
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x60
		/// </summary>
		public FActorComponentTickFunction PrimaryComponentTick => ReadStruct<FActorComponentTickFunction>(0x30);
		
		/// <summary>
		/// Name: ComponentTags
		/// Type: TArray<FName>
		/// Offset: 0x90
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> ComponentTags => new TArray<FName>(BaseAddress+0x90);
		
		/// <summary>
		/// Name: AssetUserData
		/// Type: TArray<UAssetUserData>
		/// Offset: 0xA0
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UAssetUserData> AssetUserData => new TArray<UAssetUserData>(BaseAddress+0xA0);
		
		/// <summary>
		/// Name: bReplicates
		/// Type: BoolProperty
		/// Offset: 0xB0
		/// Size: 0x01
		/// </summary>
		public bool bReplicates => (ReadByte(0x00B0) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bIsClientOnly
		/// Type: BoolProperty
		/// Offset: 0xB0
		/// Size: 0x01
		/// </summary>
		public bool bIsClientOnly => (ReadByte(0x00B0) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bNetAddressable
		/// Type: BoolProperty
		/// Offset: 0xB0
		/// Size: 0x01
		/// </summary>
		public bool bNetAddressable => (ReadByte(0x00B0) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bCreatedByConstructionScript
		/// Type: BoolProperty
		/// Offset: 0xB1
		/// Size: 0x01
		/// </summary>
		public bool bCreatedByConstructionScript => (ReadByte(0x00B1) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bInstanceComponent
		/// Type: BoolProperty
		/// Offset: 0xB2
		/// Size: 0x01
		/// </summary>
		public bool bInstanceComponent => (ReadByte(0x00B2) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bAutoActivate
		/// Type: BoolProperty
		/// Offset: 0xB2
		/// Size: 0x01
		/// </summary>
		public bool bAutoActivate => (ReadByte(0x00B2) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bIsActive
		/// Type: BoolProperty
		/// Offset: 0xB2
		/// Size: 0x01
		/// </summary>
		public bool bIsActive => (ReadByte(0x00B2) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bEditableWhenInherited
		/// Type: BoolProperty
		/// Offset: 0xB2
		/// Size: 0x01
		/// </summary>
		public bool bEditableWhenInherited => (ReadByte(0x00B2) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bCanEverAffectNavigation
		/// Type: BoolProperty
		/// Offset: 0xB2
		/// Size: 0x01
		/// </summary>
		public bool bCanEverAffectNavigation => (ReadByte(0x00B2) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bWantsBeginPlay
		/// Type: BoolProperty
		/// Offset: 0xB2
		/// Size: 0x01
		/// </summary>
		public bool bWantsBeginPlay => (ReadByte(0x00B2) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: CreationMethod
		/// Type: ByteProperty
		/// Offset: 0xB4
		/// Size: 0x01
		/// </summary>
		public byte CreationMethod
		{
			get
			{
				return ReadByte(0xB4);
			}
			set
			{
				WriteByte(0xB4,value);
			}
		}
		
		/// <summary>
		/// Name: UCSModifiedProperties
		/// Type: TArray<FSimpleMemberReference>
		/// Offset: 0xC0
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FSimpleMemberReference> UCSModifiedProperties => new TArray<FSimpleMemberReference>(BaseAddress+0xC0);
		
	}


	/// <summary>
	/// USceneComponent:UActorComponent
	/// Size: 0x220
	/// Properties: 20
	/// </summary>
	public class USceneComponent:UActorComponent
	{
		public override int ObjectSize => 544;
		/// <summary>
		/// Name: AttachParent
		/// Type: ObjectProperty
		/// Offset: 0xD8
		/// Size: 0x08
		/// </summary>
		public USceneComponent AttachParent => ReadUObject<USceneComponent>(0xD8);
		
		/// <summary>
		/// Name: AttachChildren
		/// Type: TArray<USceneComponent>
		/// Offset: 0xE0
		/// Size: 0x10
		/// SubElement Size: 0x220
		/// </summary>
		public TArray<USceneComponent> AttachChildren => new TArray<USceneComponent>(BaseAddress+0xE0);
		
		/// <summary>
		/// Name: AttachSocketName
		/// Type: NameProperty
		/// Offset: 0xF0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bWorldToComponentUpdated
		/// Type: BoolProperty
		/// Offset: 0xF8
		/// Size: 0x01
		/// </summary>
		public bool bWorldToComponentUpdated => (ReadByte(0x00F8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bAbsoluteLocation
		/// Type: BoolProperty
		/// Offset: 0xF8
		/// Size: 0x01
		/// </summary>
		public bool bAbsoluteLocation => (ReadByte(0x00F8) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bAbsoluteRotation
		/// Type: BoolProperty
		/// Offset: 0xF8
		/// Size: 0x01
		/// </summary>
		public bool bAbsoluteRotation => (ReadByte(0x00F8) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bAbsoluteScale
		/// Type: BoolProperty
		/// Offset: 0xF8
		/// Size: 0x01
		/// </summary>
		public bool bAbsoluteScale => (ReadByte(0x00F8) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bVisible
		/// Type: BoolProperty
		/// Offset: 0xF8
		/// Size: 0x01
		/// </summary>
		public bool bVisible => (ReadByte(0x00F8) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bHiddenInGame
		/// Type: BoolProperty
		/// Offset: 0xF8
		/// Size: 0x01
		/// </summary>
		public bool bHiddenInGame => (ReadByte(0x00F8) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bShouldUpdatePhysicsVolume
		/// Type: BoolProperty
		/// Offset: 0xF8
		/// Size: 0x01
		/// </summary>
		public bool bShouldUpdatePhysicsVolume => (ReadByte(0x00F8) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bBoundsChangeTriggersStreamingDataRebuild
		/// Type: BoolProperty
		/// Offset: 0xF9
		/// Size: 0x01
		/// </summary>
		public bool bBoundsChangeTriggersStreamingDataRebuild => (ReadByte(0x00F9) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUseAttachParentBound
		/// Type: BoolProperty
		/// Offset: 0xF9
		/// Size: 0x01
		/// </summary>
		public bool bUseAttachParentBound => (ReadByte(0x00F9) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bAbsoluteTranslation
		/// Type: BoolProperty
		/// Offset: 0xF9
		/// Size: 0x01
		/// </summary>
		public bool bAbsoluteTranslation => (ReadByte(0x00F9) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: RelativeLocation
		/// Type: StructProperty
		/// Offset: 0x170
		/// Size: 0x0C
		/// </summary>
		public FVector RelativeLocation => ReadStruct<FVector>(0x170);
		
		/// <summary>
		/// Name: RelativeRotation
		/// Type: StructProperty
		/// Offset: 0x17C
		/// Size: 0x0C
		/// </summary>
		public FRotator RelativeRotation => ReadStruct<FRotator>(0x17C);
		
		/// <summary>
		/// Name: RelativeScale3D
		/// Type: StructProperty
		/// Offset: 0x1B0
		/// Size: 0x0C
		/// </summary>
		public FVector RelativeScale3D => ReadStruct<FVector>(0x1B0);
		
		/// <summary>
		/// Name: RelativeTranslation
		/// Type: StructProperty
		/// Offset: 0x1BC
		/// Size: 0x0C
		/// </summary>
		public FVector RelativeTranslation => ReadStruct<FVector>(0x1BC);
		
		/// <summary>
		/// Name: Mobility
		/// Type: ByteProperty
		/// Offset: 0x1C8
		/// Size: 0x01
		/// </summary>
		public byte Mobility
		{
			get
			{
				return ReadByte(0x1C8);
			}
			set
			{
				WriteByte(0x1C8,value);
			}
		}
		
		/// <summary>
		/// Name: DetailMode
		/// Type: ByteProperty
		/// Offset: 0x1C9
		/// Size: 0x01
		/// </summary>
		public byte DetailMode
		{
			get
			{
				return ReadByte(0x1C9);
			}
			set
			{
				WriteByte(0x1C9,value);
			}
		}
		
		/// <summary>
		/// Name: ComponentVelocity
		/// Type: StructProperty
		/// Offset: 0x1E0
		/// Size: 0x0C
		/// </summary>
		public FVector ComponentVelocity => ReadStruct<FVector>(0x1E0);
		
	}


	/// <summary>
	/// UCameraComponent:USceneComponent
	/// Size: 0x640
	/// Properties: 13
	/// </summary>
	public class UCameraComponent:USceneComponent
	{
		public override int ObjectSize => 1600;
		/// <summary>
		/// Name: FieldOfView
		/// Type: FloatProperty
		/// Offset: 0x218
		/// Size: 0x04
		/// </summary>
		public float FieldOfView
		{
			get
			{
				return ReadSingle(0x218);
			}
			set
			{
				WriteSingle(0x218,value);
			}
		}
		
		/// <summary>
		/// Name: OrthoWidth
		/// Type: FloatProperty
		/// Offset: 0x21C
		/// Size: 0x04
		/// </summary>
		public float OrthoWidth
		{
			get
			{
				return ReadSingle(0x21C);
			}
			set
			{
				WriteSingle(0x21C,value);
			}
		}
		
		/// <summary>
		/// Name: OrthoNearClipPlane
		/// Type: FloatProperty
		/// Offset: 0x220
		/// Size: 0x04
		/// </summary>
		public float OrthoNearClipPlane
		{
			get
			{
				return ReadSingle(0x220);
			}
			set
			{
				WriteSingle(0x220,value);
			}
		}
		
		/// <summary>
		/// Name: OrthoFarClipPlane
		/// Type: FloatProperty
		/// Offset: 0x224
		/// Size: 0x04
		/// </summary>
		public float OrthoFarClipPlane
		{
			get
			{
				return ReadSingle(0x224);
			}
			set
			{
				WriteSingle(0x224,value);
			}
		}
		
		/// <summary>
		/// Name: AspectRatio
		/// Type: FloatProperty
		/// Offset: 0x228
		/// Size: 0x04
		/// </summary>
		public float AspectRatio
		{
			get
			{
				return ReadSingle(0x228);
			}
			set
			{
				WriteSingle(0x228,value);
			}
		}
		
		/// <summary>
		/// Name: bConstrainAspectRatio
		/// Type: BoolProperty
		/// Offset: 0x22C
		/// Size: 0x01
		/// </summary>
		public bool bConstrainAspectRatio => (ReadByte(0x022C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUseFieldOfViewForLOD
		/// Type: BoolProperty
		/// Offset: 0x22C
		/// Size: 0x01
		/// </summary>
		public bool bUseFieldOfViewForLOD => (ReadByte(0x022C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bLockToHmd
		/// Type: BoolProperty
		/// Offset: 0x22C
		/// Size: 0x01
		/// </summary>
		public bool bLockToHmd => (ReadByte(0x022C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bUsePawnControlRotation
		/// Type: BoolProperty
		/// Offset: 0x22C
		/// Size: 0x01
		/// </summary>
		public bool bUsePawnControlRotation => (ReadByte(0x022C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: ProjectionMode
		/// Type: ByteProperty
		/// Offset: 0x230
		/// Size: 0x01
		/// </summary>
		public byte ProjectionMode
		{
			get
			{
				return ReadByte(0x230);
			}
			set
			{
				WriteByte(0x230,value);
			}
		}
		
		/// <summary>
		/// Name: PostProcessBlendWeight
		/// Type: FloatProperty
		/// Offset: 0x234
		/// Size: 0x04
		/// </summary>
		public float PostProcessBlendWeight
		{
			get
			{
				return ReadSingle(0x234);
			}
			set
			{
				WriteSingle(0x234,value);
			}
		}
		
		/// <summary>
		/// Name: PostProcessSettings
		/// Type: StructProperty
		/// Offset: 0x238
		/// Size: 0x3A0
		/// </summary>
		public FPostProcessSettings PostProcessSettings => ReadStruct<FPostProcessSettings>(0x238);
		
		/// <summary>
		/// Name: bUseControllerViewRotation
		/// Type: BoolProperty
		/// Offset: 0x638
		/// Size: 0x01
		/// </summary>
		public bool bUseControllerViewRotation => (ReadByte(0x0638) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UAdjustableCameraComponent:UCameraComponent
	/// Size: 0x650
	/// Properties: 1
	/// </summary>
	public class UAdjustableCameraComponent:UCameraComponent
	{
		public override int ObjectSize => 1616;
		/// <summary>
		/// Name: PerspectiveNearClipPlane
		/// Type: FloatProperty
		/// Offset: 0x640
		/// Size: 0x04
		/// </summary>
		public float PerspectiveNearClipPlane
		{
			get
			{
				return ReadSingle(0x640);
			}
			set
			{
				WriteSingle(0x640,value);
			}
		}
		
	}


	/// <summary>
	/// UPrimitiveComponent:USceneComponent
	/// Size: 0x5A0
	/// Properties: 69
	/// </summary>
	public class UPrimitiveComponent:USceneComponent
	{
		public override int ObjectSize => 1440;
		/// <summary>
		/// Name: MinDrawDistance
		/// Type: FloatProperty
		/// Offset: 0x220
		/// Size: 0x04
		/// </summary>
		public float MinDrawDistance
		{
			get
			{
				return ReadSingle(0x220);
			}
			set
			{
				WriteSingle(0x220,value);
			}
		}
		
		/// <summary>
		/// Name: LDMaxDrawDistance
		/// Type: FloatProperty
		/// Offset: 0x224
		/// Size: 0x04
		/// </summary>
		public float LDMaxDrawDistance
		{
			get
			{
				return ReadSingle(0x224);
			}
			set
			{
				WriteSingle(0x224,value);
			}
		}
		
		/// <summary>
		/// Name: CachedMaxDrawDistance
		/// Type: FloatProperty
		/// Offset: 0x228
		/// Size: 0x04
		/// </summary>
		public float CachedMaxDrawDistance
		{
			get
			{
				return ReadSingle(0x228);
			}
			set
			{
				WriteSingle(0x228,value);
			}
		}
		
		/// <summary>
		/// Name: DepthPriorityGroup
		/// Type: ByteProperty
		/// Offset: 0x22C
		/// Size: 0x01
		/// </summary>
		public byte DepthPriorityGroup
		{
			get
			{
				return ReadByte(0x22C);
			}
			set
			{
				WriteByte(0x22C,value);
			}
		}
		
		/// <summary>
		/// Name: ViewOwnerDepthPriorityGroup
		/// Type: ByteProperty
		/// Offset: 0x22D
		/// Size: 0x01
		/// </summary>
		public byte ViewOwnerDepthPriorityGroup
		{
			get
			{
				return ReadByte(0x22D);
			}
			set
			{
				WriteByte(0x22D,value);
			}
		}
		
		/// <summary>
		/// Name: bAlwaysCreatePhysicsState
		/// Type: BoolProperty
		/// Offset: 0x230
		/// Size: 0x01
		/// </summary>
		public bool bAlwaysCreatePhysicsState => (ReadByte(0x0230) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bGenerateOverlapEvents
		/// Type: BoolProperty
		/// Offset: 0x230
		/// Size: 0x01
		/// </summary>
		public bool bGenerateOverlapEvents => (ReadByte(0x0230) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bForceGenerateOverlapEvents
		/// Type: BoolProperty
		/// Offset: 0x230
		/// Size: 0x01
		/// </summary>
		public bool bForceGenerateOverlapEvents => (ReadByte(0x0230) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bMultiBodyOverlap
		/// Type: BoolProperty
		/// Offset: 0x230
		/// Size: 0x01
		/// </summary>
		public bool bMultiBodyOverlap => (ReadByte(0x0230) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bCheckAsyncSceneOnMove
		/// Type: BoolProperty
		/// Offset: 0x230
		/// Size: 0x01
		/// </summary>
		public bool bCheckAsyncSceneOnMove => (ReadByte(0x0230) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bTraceComplexOnMove
		/// Type: BoolProperty
		/// Offset: 0x230
		/// Size: 0x01
		/// </summary>
		public bool bTraceComplexOnMove => (ReadByte(0x0230) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bReturnMaterialOnMove
		/// Type: BoolProperty
		/// Offset: 0x230
		/// Size: 0x01
		/// </summary>
		public bool bReturnMaterialOnMove => (ReadByte(0x0230) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bUseViewOwnerDepthPriorityGroup
		/// Type: BoolProperty
		/// Offset: 0x230
		/// Size: 0x01
		/// </summary>
		public bool bUseViewOwnerDepthPriorityGroup => (ReadByte(0x0230) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bAllowCullDistanceVolume
		/// Type: BoolProperty
		/// Offset: 0x231
		/// Size: 0x01
		/// </summary>
		public bool bAllowCullDistanceVolume => (ReadByte(0x0231) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bHasMotionBlurVelocityMeshes
		/// Type: BoolProperty
		/// Offset: 0x231
		/// Size: 0x01
		/// </summary>
		public bool bHasMotionBlurVelocityMeshes => (ReadByte(0x0231) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bRenderInMainPass
		/// Type: BoolProperty
		/// Offset: 0x231
		/// Size: 0x01
		/// </summary>
		public bool bRenderInMainPass => (ReadByte(0x0231) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bReceivesDecals
		/// Type: BoolProperty
		/// Offset: 0x231
		/// Size: 0x01
		/// </summary>
		public bool bReceivesDecals => (ReadByte(0x0231) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOwnerNoSee
		/// Type: BoolProperty
		/// Offset: 0x231
		/// Size: 0x01
		/// </summary>
		public bool bOwnerNoSee => (ReadByte(0x0231) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOnlyOwnerSee
		/// Type: BoolProperty
		/// Offset: 0x231
		/// Size: 0x01
		/// </summary>
		public bool bOnlyOwnerSee => (ReadByte(0x0231) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bTreatAsBackgroundForOcclusion
		/// Type: BoolProperty
		/// Offset: 0x231
		/// Size: 0x01
		/// </summary>
		public bool bTreatAsBackgroundForOcclusion => (ReadByte(0x0231) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bHeightOutputReferenceSand
		/// Type: BoolProperty
		/// Offset: 0x231
		/// Size: 0x01
		/// </summary>
		public bool bHeightOutputReferenceSand => (ReadByte(0x0231) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bHeightOutputReferenceWater
		/// Type: BoolProperty
		/// Offset: 0x232
		/// Size: 0x01
		/// </summary>
		public bool bHeightOutputReferenceWater => (ReadByte(0x0232) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bHeightOutputIgnoreSand
		/// Type: BoolProperty
		/// Offset: 0x232
		/// Size: 0x01
		/// </summary>
		public bool bHeightOutputIgnoreSand => (ReadByte(0x0232) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bHeightOutputIgnoreWater
		/// Type: BoolProperty
		/// Offset: 0x232
		/// Size: 0x01
		/// </summary>
		public bool bHeightOutputIgnoreWater => (ReadByte(0x0232) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bCullFromDistantShadowCascades
		/// Type: BoolProperty
		/// Offset: 0x232
		/// Size: 0x01
		/// </summary>
		public bool bCullFromDistantShadowCascades => (ReadByte(0x0232) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bUseAsOccluder
		/// Type: BoolProperty
		/// Offset: 0x232
		/// Size: 0x01
		/// </summary>
		public bool bUseAsOccluder => (ReadByte(0x0232) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bSelectable
		/// Type: BoolProperty
		/// Offset: 0x232
		/// Size: 0x01
		/// </summary>
		public bool bSelectable => (ReadByte(0x0232) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bForceMipStreaming
		/// Type: BoolProperty
		/// Offset: 0x232
		/// Size: 0x01
		/// </summary>
		public bool bForceMipStreaming => (ReadByte(0x0232) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bHasPerInstanceHitProxies
		/// Type: BoolProperty
		/// Offset: 0x232
		/// Size: 0x01
		/// </summary>
		public bool bHasPerInstanceHitProxies => (ReadByte(0x0232) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: CastShadow
		/// Type: BoolProperty
		/// Offset: 0x233
		/// Size: 0x01
		/// </summary>
		public bool CastShadow => (ReadByte(0x0233) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bAffectDynamicIndirectLighting
		/// Type: BoolProperty
		/// Offset: 0x233
		/// Size: 0x01
		/// </summary>
		public bool bAffectDynamicIndirectLighting => (ReadByte(0x0233) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bAffectDistanceFieldLighting
		/// Type: BoolProperty
		/// Offset: 0x233
		/// Size: 0x01
		/// </summary>
		public bool bAffectDistanceFieldLighting => (ReadByte(0x0233) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bCastDynamicShadow
		/// Type: BoolProperty
		/// Offset: 0x233
		/// Size: 0x01
		/// </summary>
		public bool bCastDynamicShadow => (ReadByte(0x0233) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bCastStaticShadow
		/// Type: BoolProperty
		/// Offset: 0x233
		/// Size: 0x01
		/// </summary>
		public bool bCastStaticShadow => (ReadByte(0x0233) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bCastVolumetricTranslucentShadow
		/// Type: BoolProperty
		/// Offset: 0x233
		/// Size: 0x01
		/// </summary>
		public bool bCastVolumetricTranslucentShadow => (ReadByte(0x0233) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bSelfShadowOnly
		/// Type: BoolProperty
		/// Offset: 0x233
		/// Size: 0x01
		/// </summary>
		public bool bSelfShadowOnly => (ReadByte(0x0233) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bCastFarShadow
		/// Type: BoolProperty
		/// Offset: 0x233
		/// Size: 0x01
		/// </summary>
		public bool bCastFarShadow => (ReadByte(0x0233) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bCastInsetShadow
		/// Type: BoolProperty
		/// Offset: 0x234
		/// Size: 0x01
		/// </summary>
		public bool bCastInsetShadow => (ReadByte(0x0234) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bCastCinematicShadow
		/// Type: BoolProperty
		/// Offset: 0x234
		/// Size: 0x01
		/// </summary>
		public bool bCastCinematicShadow => (ReadByte(0x0234) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bCastHiddenShadow
		/// Type: BoolProperty
		/// Offset: 0x234
		/// Size: 0x01
		/// </summary>
		public bool bCastHiddenShadow => (ReadByte(0x0234) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bCastShadowAsTwoSided
		/// Type: BoolProperty
		/// Offset: 0x234
		/// Size: 0x01
		/// </summary>
		public bool bCastShadowAsTwoSided => (ReadByte(0x0234) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bLightAsIfStatic
		/// Type: BoolProperty
		/// Offset: 0x234
		/// Size: 0x01
		/// </summary>
		public bool bLightAsIfStatic => (ReadByte(0x0234) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bLightAttachmentsAsGroup
		/// Type: BoolProperty
		/// Offset: 0x234
		/// Size: 0x01
		/// </summary>
		public bool bLightAttachmentsAsGroup => (ReadByte(0x0234) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: IndirectLightingCacheQuality
		/// Type: ByteProperty
		/// Offset: 0x238
		/// Size: 0x01
		/// </summary>
		public byte IndirectLightingCacheQuality
		{
			get
			{
				return ReadByte(0x238);
			}
			set
			{
				WriteByte(0x238,value);
			}
		}
		
		/// <summary>
		/// Name: bReceiveCombinedCSMAndStaticShadowsFromStationaryLights
		/// Type: BoolProperty
		/// Offset: 0x23C
		/// Size: 0x01
		/// </summary>
		public bool bReceiveCombinedCSMAndStaticShadowsFromStationaryLights => (ReadByte(0x023C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSingleSampleShadowFromStationaryLights
		/// Type: BoolProperty
		/// Offset: 0x23C
		/// Size: 0x01
		/// </summary>
		public bool bSingleSampleShadowFromStationaryLights => (ReadByte(0x023C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: LightingChannels
		/// Type: StructProperty
		/// Offset: 0x240
		/// Size: 0x03
		/// </summary>
		public FLightingChannels LightingChannels => ReadStruct<FLightingChannels>(0x240);
		
		/// <summary>
		/// Name: bHasCachedStaticLighting
		/// Type: BoolProperty
		/// Offset: 0x243
		/// Size: 0x01
		/// </summary>
		public bool bHasCachedStaticLighting
		{
			get
			{
				return ReadBool(0x243);
			}
			set
			{
				WriteBool(0x243,value);
			}
		}
		
		/// <summary>
		/// Name: bStaticLightingBuildEnqueued
		/// Type: BoolProperty
		/// Offset: 0x244
		/// Size: 0x01
		/// </summary>
		public bool bStaticLightingBuildEnqueued
		{
			get
			{
				return ReadBool(0x244);
			}
			set
			{
				WriteBool(0x244,value);
			}
		}
		
		/// <summary>
		/// Name: bIgnoreRadialImpulse
		/// Type: BoolProperty
		/// Offset: 0x248
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreRadialImpulse => (ReadByte(0x0248) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bIgnoreRadialForce
		/// Type: BoolProperty
		/// Offset: 0x248
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreRadialForce => (ReadByte(0x0248) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: AlwaysLoadOnClient
		/// Type: BoolProperty
		/// Offset: 0x248
		/// Size: 0x01
		/// </summary>
		public bool AlwaysLoadOnClient => (ReadByte(0x0248) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: AlwaysLoadOnServer
		/// Type: BoolProperty
		/// Offset: 0x248
		/// Size: 0x01
		/// </summary>
		public bool AlwaysLoadOnServer => (ReadByte(0x0248) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bUseEditorCompositing
		/// Type: BoolProperty
		/// Offset: 0x248
		/// Size: 0x01
		/// </summary>
		public bool bUseEditorCompositing => (ReadByte(0x0248) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bRenderCustomDepth
		/// Type: BoolProperty
		/// Offset: 0x248
		/// Size: 0x01
		/// </summary>
		public bool bRenderCustomDepth => (ReadByte(0x0248) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: CustomDepthStencilValue
		/// Type: IntProperty
		/// Offset: 0x24C
		/// Size: 0x04
		/// </summary>
		public int CustomDepthStencilValue
		{
			get
			{
				return ReadInt32(0x24C);
			}
			set
			{
				WriteInt32(0x24C,value);
			}
		}
		
		/// <summary>
		/// Name: TranslucencySortPriority
		/// Type: IntProperty
		/// Offset: 0x250
		/// Size: 0x04
		/// </summary>
		public int TranslucencySortPriority
		{
			get
			{
				return ReadInt32(0x250);
			}
			set
			{
				WriteInt32(0x250,value);
			}
		}
		
		/// <summary>
		/// Name: VisibilityId
		/// Type: IntProperty
		/// Offset: 0x254
		/// Size: 0x04
		/// </summary>
		public int VisibilityId
		{
			get
			{
				return ReadInt32(0x254);
			}
			set
			{
				WriteInt32(0x254,value);
			}
		}
		
		/// <summary>
		/// Name: LpvBiasMultiplier
		/// Type: FloatProperty
		/// Offset: 0x25C
		/// Size: 0x04
		/// </summary>
		public float LpvBiasMultiplier
		{
			get
			{
				return ReadSingle(0x25C);
			}
			set
			{
				WriteSingle(0x25C,value);
			}
		}
		
		/// <summary>
		/// Name: BodyInstance
		/// Type: StructProperty
		/// Offset: 0x260
		/// Size: 0x1B0
		/// </summary>
		public FBodyInstance BodyInstance => ReadStruct<FBodyInstance>(0x260);
		
		/// <summary>
		/// Name: bHasCustomNavigableGeometry
		/// Type: ByteProperty
		/// Offset: 0x418
		/// Size: 0x01
		/// </summary>
		public byte bHasCustomNavigableGeometry
		{
			get
			{
				return ReadByte(0x418);
			}
			set
			{
				WriteByte(0x418,value);
			}
		}
		
		/// <summary>
		/// Name: BoundsScale
		/// Type: FloatProperty
		/// Offset: 0x41C
		/// Size: 0x04
		/// </summary>
		public float BoundsScale
		{
			get
			{
				return ReadSingle(0x41C);
			}
			set
			{
				WriteSingle(0x41C,value);
			}
		}
		
		/// <summary>
		/// Name: LastSubmitTime
		/// Type: FloatProperty
		/// Offset: 0x420
		/// Size: 0x04
		/// </summary>
		public float LastSubmitTime
		{
			get
			{
				return ReadSingle(0x420);
			}
			set
			{
				WriteSingle(0x420,value);
			}
		}
		
		/// <summary>
		/// Name: LastRenderTime
		/// Type: FloatProperty
		/// Offset: 0x424
		/// Size: 0x04
		/// </summary>
		public float LastRenderTime
		{
			get
			{
				return ReadSingle(0x424);
			}
			set
			{
				WriteSingle(0x424,value);
			}
		}
		
		/// <summary>
		/// Name: CanBeCharacterBase
		/// Type: ByteProperty
		/// Offset: 0x428
		/// Size: 0x01
		/// </summary>
		public byte CanBeCharacterBase
		{
			get
			{
				return ReadByte(0x428);
			}
			set
			{
				WriteByte(0x428,value);
			}
		}
		
		/// <summary>
		/// Name: CanCharacterStepUpOn
		/// Type: ByteProperty
		/// Offset: 0x42A
		/// Size: 0x01
		/// </summary>
		public byte CanCharacterStepUpOn
		{
			get
			{
				return ReadByte(0x42A);
			}
			set
			{
				WriteByte(0x42A,value);
			}
		}
		
		/// <summary>
		/// Name: MoveIgnoreActors
		/// Type: TArray<AActor>
		/// Offset: 0x430
		/// Size: 0x10
		/// SubElement Size: 0x3D0
		/// </summary>
		public TArray<AActor> MoveIgnoreActors => new TArray<AActor>(BaseAddress+0x430);
		
		/// <summary>
		/// Name: LODParentPrimitive
		/// Type: ObjectProperty
		/// Offset: 0x538
		/// Size: 0x08
		/// </summary>
		public UPrimitiveComponent LODParentPrimitive => ReadUObject<UPrimitiveComponent>(0x538);
		
		/// <summary>
		/// Name: PostPhysicsComponentTick
		/// Type: StructProperty
		/// Offset: 0x540
		/// Size: 0x60
		/// </summary>
		public FPrimitiveComponentPostPhysicsTickFunction PostPhysicsComponentTick => ReadStruct<FPrimitiveComponentPostPhysicsTickFunction>(0x540);
		
	}


	/// <summary>
	/// UMeshComponent:UPrimitiveComponent
	/// Size: 0x660
	/// Properties: 1
	/// </summary>
	public class UMeshComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1632;
		/// <summary>
		/// Name: OverrideMaterials
		/// Type: TArray<UMaterialInterface>
		/// Offset: 0x5A0
		/// Size: 0x10
		/// SubElement Size: 0x58
		/// </summary>
		public TArray<UMaterialInterface> OverrideMaterials => new TArray<UMaterialInterface>(BaseAddress+0x5A0);
		
	}


	/// <summary>
	/// UStaticMeshComponent:UMeshComponent
	/// Size: 0x6E0
	/// Properties: 21
	/// </summary>
	public class UStaticMeshComponent:UMeshComponent
	{
		public override int ObjectSize => 1760;
		/// <summary>
		/// Name: ForcedLodModel
		/// Type: IntProperty
		/// Offset: 0x658
		/// Size: 0x04
		/// </summary>
		public int ForcedLodModel
		{
			get
			{
				return ReadInt32(0x658);
			}
			set
			{
				WriteInt32(0x658,value);
			}
		}
		
		/// <summary>
		/// Name: PreviousLODLevel
		/// Type: IntProperty
		/// Offset: 0x65C
		/// Size: 0x04
		/// </summary>
		public int PreviousLODLevel
		{
			get
			{
				return ReadInt32(0x65C);
			}
			set
			{
				WriteInt32(0x65C,value);
			}
		}
		
		/// <summary>
		/// Name: bOverrideMinLOD
		/// Type: BoolProperty
		/// Offset: 0x660
		/// Size: 0x01
		/// </summary>
		public bool bOverrideMinLOD
		{
			get
			{
				return ReadBool(0x660);
			}
			set
			{
				WriteBool(0x660,value);
			}
		}
		
		/// <summary>
		/// Name: MinLOD
		/// Type: IntProperty
		/// Offset: 0x664
		/// Size: 0x04
		/// </summary>
		public int MinLOD
		{
			get
			{
				return ReadInt32(0x664);
			}
			set
			{
				WriteInt32(0x664,value);
			}
		}
		
		/// <summary>
		/// Name: StaticMesh
		/// Type: ObjectProperty
		/// Offset: 0x668
		/// Size: 0x08
		/// </summary>
		public UStaticMesh StaticMesh => ReadUObject<UStaticMesh>(0x668);
		
		/// <summary>
		/// Name: bOverrideWireframeColor
		/// Type: BoolProperty
		/// Offset: 0x670
		/// Size: 0x01
		/// </summary>
		public bool bOverrideWireframeColor
		{
			get
			{
				return ReadBool(0x670);
			}
			set
			{
				WriteBool(0x670,value);
			}
		}
		
		/// <summary>
		/// Name: WireframeColorOverride
		/// Type: StructProperty
		/// Offset: 0x674
		/// Size: 0x04
		/// </summary>
		public FColor WireframeColorOverride => ReadStruct<FColor>(0x674);
		
		/// <summary>
		/// Name: bOverrideNavigationExport
		/// Type: BoolProperty
		/// Offset: 0x678
		/// Size: 0x01
		/// </summary>
		public bool bOverrideNavigationExport => (ReadByte(0x0678) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bForceNavigationObstacle
		/// Type: BoolProperty
		/// Offset: 0x678
		/// Size: 0x01
		/// </summary>
		public bool bForceNavigationObstacle => (ReadByte(0x0678) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bDisallowMeshPaintPerInstance
		/// Type: BoolProperty
		/// Offset: 0x678
		/// Size: 0x01
		/// </summary>
		public bool bDisallowMeshPaintPerInstance => (ReadByte(0x0678) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bIgnoreInstanceForTextureStreaming
		/// Type: BoolProperty
		/// Offset: 0x678
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreInstanceForTextureStreaming => (ReadByte(0x0678) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverrideLightMapRes
		/// Type: BoolProperty
		/// Offset: 0x678
		/// Size: 0x01
		/// </summary>
		public bool bOverrideLightMapRes => (ReadByte(0x0678) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: OverriddenLightMapRes
		/// Type: IntProperty
		/// Offset: 0x67C
		/// Size: 0x04
		/// </summary>
		public int OverriddenLightMapRes
		{
			get
			{
				return ReadInt32(0x67C);
			}
			set
			{
				WriteInt32(0x67C,value);
			}
		}
		
		/// <summary>
		/// Name: StreamingDistanceMultiplier
		/// Type: FloatProperty
		/// Offset: 0x680
		/// Size: 0x04
		/// </summary>
		public float StreamingDistanceMultiplier
		{
			get
			{
				return ReadSingle(0x680);
			}
			set
			{
				WriteSingle(0x680,value);
			}
		}
		
		/// <summary>
		/// Name: SubDivisionStepSize
		/// Type: IntProperty
		/// Offset: 0x684
		/// Size: 0x04
		/// </summary>
		public int SubDivisionStepSize
		{
			get
			{
				return ReadInt32(0x684);
			}
			set
			{
				WriteInt32(0x684,value);
			}
		}
		
		/// <summary>
		/// Name: bUseSubDivisions
		/// Type: BoolProperty
		/// Offset: 0x688
		/// Size: 0x01
		/// </summary>
		public bool bUseSubDivisions => (ReadByte(0x0688) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: IrrelevantLights
		/// Type: TArray<FGuid>
		/// Offset: 0x690
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FGuid> IrrelevantLights => new TArray<FGuid>(BaseAddress+0x690);
		
		/// <summary>
		/// Name: LODData
		/// Type: TArray<FStaticMeshComponentLODInfo>
		/// Offset: 0x6A0
		/// Size: 0x10
		/// SubElement Size: 0x98
		/// </summary>
		public TArray<FStaticMeshComponentLODInfo> LODData => new TArray<FStaticMeshComponentLODInfo>(BaseAddress+0x6A0);
		
		/// <summary>
		/// Name: StreamingTextureData
		/// Type: TArray<FStreamingTextureBuildInfo>
		/// Offset: 0x6B0
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FStreamingTextureBuildInfo> StreamingTextureData => new TArray<FStreamingTextureBuildInfo>(BaseAddress+0x6B0);
		
		/// <summary>
		/// Name: bUseDefaultCollision
		/// Type: BoolProperty
		/// Offset: 0x6C0
		/// Size: 0x01
		/// </summary>
		public bool bUseDefaultCollision
		{
			get
			{
				return ReadBool(0x6C0);
			}
			set
			{
				WriteBool(0x6C0,value);
			}
		}
		
		/// <summary>
		/// Name: LightmassSettings
		/// Type: StructProperty
		/// Offset: 0x6C4
		/// Size: 0x18
		/// </summary>
		public FLightmassPrimitiveSettings LightmassSettings => ReadStruct<FLightmassPrimitiveSettings>(0x6C4);
		
	}


	/// <summary>
	/// UInstancedStaticMeshComponent:UStaticMeshComponent
	/// Size: 0x780
	/// Properties: 9
	/// </summary>
	public class UInstancedStaticMeshComponent:UStaticMeshComponent
	{
		public override int ObjectSize => 1920;
		/// <summary>
		/// Name: PerInstanceSMData
		/// Type: TArray<FInstancedStaticMeshInstanceData>
		/// Offset: 0x6E0
		/// Size: 0x10
		/// SubElement Size: 0x50
		/// </summary>
		public TArray<FInstancedStaticMeshInstanceData> PerInstanceSMData => new TArray<FInstancedStaticMeshInstanceData>(BaseAddress+0x6E0);
		
		/// <summary>
		/// Name: InstancingRandomSeed
		/// Type: IntProperty
		/// Offset: 0x6F0
		/// Size: 0x04
		/// </summary>
		public int InstancingRandomSeed
		{
			get
			{
				return ReadInt32(0x6F0);
			}
			set
			{
				WriteInt32(0x6F0,value);
			}
		}
		
		/// <summary>
		/// Name: InstanceStartCullDistance
		/// Type: IntProperty
		/// Offset: 0x6F4
		/// Size: 0x04
		/// </summary>
		public int InstanceStartCullDistance
		{
			get
			{
				return ReadInt32(0x6F4);
			}
			set
			{
				WriteInt32(0x6F4,value);
			}
		}
		
		/// <summary>
		/// Name: InstanceEndCullDistance
		/// Type: IntProperty
		/// Offset: 0x6F8
		/// Size: 0x04
		/// </summary>
		public int InstanceEndCullDistance
		{
			get
			{
				return ReadInt32(0x6F8);
			}
			set
			{
				WriteInt32(0x6F8,value);
			}
		}
		
		/// <summary>
		/// Name: InstanceReorderTable
		/// Type: TArray<>
		/// Offset: 0x700
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: RemovedInstances
		/// Type: TArray<>
		/// Offset: 0x710
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: PhysicsSerializer
		/// Type: ObjectProperty
		/// Offset: 0x760
		/// Size: 0x08
		/// </summary>
		public UPhysicsSerializer PhysicsSerializer => ReadUObject<UPhysicsSerializer>(0x760);
		
		/// <summary>
		/// Name: NumPendingLightmaps
		/// Type: IntProperty
		/// Offset: 0x768
		/// Size: 0x04
		/// </summary>
		public int NumPendingLightmaps
		{
			get
			{
				return ReadInt32(0x768);
			}
			set
			{
				WriteInt32(0x768,value);
			}
		}
		
		/// <summary>
		/// Name: CachedMappings
		/// Type: TArray<FInstancedStaticMeshMappingInfo>
		/// Offset: 0x770
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FInstancedStaticMeshMappingInfo> CachedMappings => new TArray<FInstancedStaticMeshMappingInfo>(BaseAddress+0x770);
		
	}


	/// <summary>
	/// UBuildingSocketComponent:UInstancedStaticMeshComponent
	/// Size: 0x7D0
	/// Properties: 1
	/// </summary>
	public class UBuildingSocketComponent:UInstancedStaticMeshComponent
	{
		public override int ObjectSize => 2000;
		/// <summary>
		/// Name: PerInstanceStaticSocketData
		/// Type: TArray<FSocketStaticData>
		/// Offset: 0x780
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FSocketStaticData> PerInstanceStaticSocketData => new TArray<FSocketStaticData>(BaseAddress+0x780);
		
	}


	/// <summary>
	/// UInterface:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UInterface:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// USuspendableInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class USuspendableInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// AActor:UObject
	/// Size: 0x3D0
	/// Properties: 57
	/// </summary>
	public class AActor:UObject
	{
		public override int ObjectSize => 976;
		/// <summary>
		/// Name: PrimaryActorTick
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x60
		/// </summary>
		public FActorTickFunction PrimaryActorTick => ReadStruct<FActorTickFunction>(0x28);
		
		/// <summary>
		/// Name: CustomTimeDilation
		/// Type: FloatProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public float CustomTimeDilation
		{
			get
			{
				return ReadSingle(0x88);
			}
			set
			{
				WriteSingle(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: bHidden
		/// Type: BoolProperty
		/// Offset: 0x8C
		/// Size: 0x01
		/// </summary>
		public bool bHidden => (ReadByte(0x008C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bNetTemporary
		/// Type: BoolProperty
		/// Offset: 0x8C
		/// Size: 0x01
		/// </summary>
		public bool bNetTemporary => (ReadByte(0x008C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bNetStartup
		/// Type: BoolProperty
		/// Offset: 0x8C
		/// Size: 0x01
		/// </summary>
		public bool bNetStartup => (ReadByte(0x008C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOnlyRelevantToOwner
		/// Type: BoolProperty
		/// Offset: 0x8C
		/// Size: 0x01
		/// </summary>
		public bool bOnlyRelevantToOwner => (ReadByte(0x008C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bAlwaysRelevant
		/// Type: BoolProperty
		/// Offset: 0x8C
		/// Size: 0x01
		/// </summary>
		public bool bAlwaysRelevant => (ReadByte(0x008C) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bReplicateMovement
		/// Type: BoolProperty
		/// Offset: 0x8C
		/// Size: 0x01
		/// </summary>
		public bool bReplicateMovement => (ReadByte(0x008C) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bTearOff
		/// Type: BoolProperty
		/// Offset: 0x8C
		/// Size: 0x01
		/// </summary>
		public bool bTearOff => (ReadByte(0x008C) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bExchangedRoles
		/// Type: BoolProperty
		/// Offset: 0x8C
		/// Size: 0x01
		/// </summary>
		public bool bExchangedRoles => (ReadByte(0x008C) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bPendingNetUpdate
		/// Type: BoolProperty
		/// Offset: 0x8D
		/// Size: 0x01
		/// </summary>
		public bool bPendingNetUpdate => (ReadByte(0x008D) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bNetLoadOnClient
		/// Type: BoolProperty
		/// Offset: 0x8D
		/// Size: 0x01
		/// </summary>
		public bool bNetLoadOnClient => (ReadByte(0x008D) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bNetUseOwnerRelevancy
		/// Type: BoolProperty
		/// Offset: 0x8D
		/// Size: 0x01
		/// </summary>
		public bool bNetUseOwnerRelevancy => (ReadByte(0x008D) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bBlockInput
		/// Type: BoolProperty
		/// Offset: 0x8D
		/// Size: 0x01
		/// </summary>
		public bool bBlockInput => (ReadByte(0x008D) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bAllowTickBeforeBeginPlay
		/// Type: BoolProperty
		/// Offset: 0x8D
		/// Size: 0x01
		/// </summary>
		public bool bAllowTickBeforeBeginPlay => (ReadByte(0x008D) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bActorEnableCollision
		/// Type: BoolProperty
		/// Offset: 0x8E
		/// Size: 0x01
		/// </summary>
		public bool bActorEnableCollision => (ReadByte(0x008E) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bReplicates
		/// Type: BoolProperty
		/// Offset: 0x8E
		/// Size: 0x01
		/// </summary>
		public bool bReplicates => (ReadByte(0x008E) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bLostRelevancy
		/// Type: BoolProperty
		/// Offset: 0x8E
		/// Size: 0x01
		/// </summary>
		public bool bLostRelevancy => (ReadByte(0x008E) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: NetDriverName
		/// Type: NameProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: RemoteRole
		/// Type: ByteProperty
		/// Offset: 0x98
		/// Size: 0x01
		/// </summary>
		public byte RemoteRole
		{
			get
			{
				return ReadByte(0x98);
			}
			set
			{
				WriteByte(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: Owner
		/// Type: ObjectProperty
		/// Offset: 0xA0
		/// Size: 0x08
		/// </summary>
		public AActor Owner => ReadUObject<AActor>(0xA0);
		
		/// <summary>
		/// Name: ReplicatedMovement
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x34
		/// </summary>
		public FRepMovement ReplicatedMovement => ReadStruct<FRepMovement>(0xA8);
		
		/// <summary>
		/// Name: AttachmentReplication
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x40
		/// </summary>
		public FRepAttachment AttachmentReplication => ReadStruct<FRepAttachment>(0xE0);
		
		/// <summary>
		/// Name: Role
		/// Type: ByteProperty
		/// Offset: 0x120
		/// Size: 0x01
		/// </summary>
		public byte Role
		{
			get
			{
				return ReadByte(0x120);
			}
			set
			{
				WriteByte(0x120,value);
			}
		}
		
		/// <summary>
		/// Name: AutoReceiveInput
		/// Type: ByteProperty
		/// Offset: 0x122
		/// Size: 0x01
		/// </summary>
		public byte AutoReceiveInput
		{
			get
			{
				return ReadByte(0x122);
			}
			set
			{
				WriteByte(0x122,value);
			}
		}
		
		/// <summary>
		/// Name: InputPriority
		/// Type: IntProperty
		/// Offset: 0x124
		/// Size: 0x04
		/// </summary>
		public int InputPriority
		{
			get
			{
				return ReadInt32(0x124);
			}
			set
			{
				WriteInt32(0x124,value);
			}
		}
		
		/// <summary>
		/// Name: InputComponent
		/// Type: ObjectProperty
		/// Offset: 0x128
		/// Size: 0x08
		/// </summary>
		public UInputComponent InputComponent => ReadUObject<UInputComponent>(0x128);
		
		/// <summary>
		/// Name: InputConsumeOption
		/// Type: ByteProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public byte InputConsumeOption
		{
			get
			{
				return ReadByte(0x130);
			}
			set
			{
				WriteByte(0x130,value);
			}
		}
		
		/// <summary>
		/// Name: NetCullDistanceSquared
		/// Type: FloatProperty
		/// Offset: 0x134
		/// Size: 0x04
		/// </summary>
		public float NetCullDistanceSquared
		{
			get
			{
				return ReadSingle(0x134);
			}
			set
			{
				WriteSingle(0x134,value);
			}
		}
		
		/// <summary>
		/// Name: NetTag
		/// Type: IntProperty
		/// Offset: 0x138
		/// Size: 0x04
		/// </summary>
		public int NetTag
		{
			get
			{
				return ReadInt32(0x138);
			}
			set
			{
				WriteInt32(0x138,value);
			}
		}
		
		/// <summary>
		/// Name: NetUpdateTime
		/// Type: FloatProperty
		/// Offset: 0x13C
		/// Size: 0x04
		/// </summary>
		public float NetUpdateTime
		{
			get
			{
				return ReadSingle(0x13C);
			}
			set
			{
				WriteSingle(0x13C,value);
			}
		}
		
		/// <summary>
		/// Name: NetUpdateFrequency
		/// Type: FloatProperty
		/// Offset: 0x140
		/// Size: 0x04
		/// </summary>
		public float NetUpdateFrequency
		{
			get
			{
				return ReadSingle(0x140);
			}
			set
			{
				WriteSingle(0x140,value);
			}
		}
		
		/// <summary>
		/// Name: MinNetUpdateFrequency
		/// Type: FloatProperty
		/// Offset: 0x144
		/// Size: 0x04
		/// </summary>
		public float MinNetUpdateFrequency
		{
			get
			{
				return ReadSingle(0x144);
			}
			set
			{
				WriteSingle(0x144,value);
			}
		}
		
		/// <summary>
		/// Name: NetPriority
		/// Type: FloatProperty
		/// Offset: 0x148
		/// Size: 0x04
		/// </summary>
		public float NetPriority
		{
			get
			{
				return ReadSingle(0x148);
			}
			set
			{
				WriteSingle(0x148,value);
			}
		}
		
		/// <summary>
		/// Name: LastNetUpdateTime
		/// Type: FloatProperty
		/// Offset: 0x14C
		/// Size: 0x04
		/// </summary>
		public float LastNetUpdateTime
		{
			get
			{
				return ReadSingle(0x14C);
			}
			set
			{
				WriteSingle(0x14C,value);
			}
		}
		
		/// <summary>
		/// Name: bAutoDestroyWhenFinished
		/// Type: BoolProperty
		/// Offset: 0x150
		/// Size: 0x01
		/// </summary>
		public bool bAutoDestroyWhenFinished => (ReadByte(0x0150) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bCanBeDamaged
		/// Type: BoolProperty
		/// Offset: 0x150
		/// Size: 0x01
		/// </summary>
		public bool bCanBeDamaged => (ReadByte(0x0150) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bActorIsBeingDestroyed
		/// Type: BoolProperty
		/// Offset: 0x150
		/// Size: 0x01
		/// </summary>
		public bool bActorIsBeingDestroyed => (ReadByte(0x0150) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bCollideWhenPlacing
		/// Type: BoolProperty
		/// Offset: 0x150
		/// Size: 0x01
		/// </summary>
		public bool bCollideWhenPlacing => (ReadByte(0x0150) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bFindCameraComponentWhenViewTarget
		/// Type: BoolProperty
		/// Offset: 0x150
		/// Size: 0x01
		/// </summary>
		public bool bFindCameraComponentWhenViewTarget => (ReadByte(0x0150) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bRelevantForNetworkReplays
		/// Type: BoolProperty
		/// Offset: 0x150
		/// Size: 0x01
		/// </summary>
		public bool bRelevantForNetworkReplays => (ReadByte(0x0150) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: SpawnCollisionHandlingMethod
		/// Type: ByteProperty
		/// Offset: 0x151
		/// Size: 0x01
		/// </summary>
		public byte SpawnCollisionHandlingMethod
		{
			get
			{
				return ReadByte(0x151);
			}
			set
			{
				WriteByte(0x151,value);
			}
		}
		
		/// <summary>
		/// Name: Instigator
		/// Type: ObjectProperty
		/// Offset: 0x158
		/// Size: 0x08
		/// </summary>
		public APawn Instigator => ReadUObject<APawn>(0x158);
		
		/// <summary>
		/// Name: Children
		/// Type: TArray<AActor>
		/// Offset: 0x160
		/// Size: 0x10
		/// SubElement Size: 0x3D0
		/// </summary>
		public TArray<AActor> Children => new TArray<AActor>(BaseAddress+0x160);
		
		/// <summary>
		/// Name: RootComponent
		/// Type: ObjectProperty
		/// Offset: 0x170
		/// Size: 0x08
		/// </summary>
		public USceneComponent RootComponent => ReadUObject<USceneComponent>(0x170);
		
		/// <summary>
		/// Name: ControllingMatineeActors
		/// Type: TArray<AMatineeActor>
		/// Offset: 0x178
		/// Size: 0x10
		/// SubElement Size: 0x478
		/// </summary>
		public TArray<AMatineeActor> ControllingMatineeActors => new TArray<AMatineeActor>(BaseAddress+0x178);
		
		/// <summary>
		/// Name: InitialLifeSpan
		/// Type: FloatProperty
		/// Offset: 0x188
		/// Size: 0x04
		/// </summary>
		public float InitialLifeSpan
		{
			get
			{
				return ReadSingle(0x188);
			}
			set
			{
				WriteSingle(0x188,value);
			}
		}
		
		/// <summary>
		/// Name: Layers
		/// Type: TArray<FName>
		/// Offset: 0x198
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> Layers => new TArray<FName>(BaseAddress+0x198);
		
		/// <summary>
		/// Name: bAllowReceiveTickEventOnDedicatedServer
		/// Type: BoolProperty
		/// Offset: 0x1B8
		/// Size: 0x01
		/// </summary>
		public bool bAllowReceiveTickEventOnDedicatedServer => (ReadByte(0x01B8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUseExtendedRelevancyTimeout
		/// Type: BoolProperty
		/// Offset: 0x1B8
		/// Size: 0x01
		/// </summary>
		public bool bUseExtendedRelevancyTimeout => (ReadByte(0x01B8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bActorSeamlessTraveled
		/// Type: BoolProperty
		/// Offset: 0x1B8
		/// Size: 0x01
		/// </summary>
		public bool bActorSeamlessTraveled => (ReadByte(0x01B8) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bIgnoresOriginShifting
		/// Type: BoolProperty
		/// Offset: 0x1B8
		/// Size: 0x01
		/// </summary>
		public bool bIgnoresOriginShifting => (ReadByte(0x01B8) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bEnableAutoLODGeneration
		/// Type: BoolProperty
		/// Offset: 0x1B8
		/// Size: 0x01
		/// </summary>
		public bool bEnableAutoLODGeneration => (ReadByte(0x01B8) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: Tags
		/// Type: TArray<FName>
		/// Offset: 0x1C0
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> Tags => new TArray<FName>(BaseAddress+0x1C0);
		
		/// <summary>
		/// Name: HiddenEditorViews
		/// Type: UInt64Property
		/// Offset: 0x1D0
		/// Size: 0x08
		/// </summary>
		public ulong HiddenEditorViews
		{
			get
			{
				return ReadUInt64(0x1D0);
			}
			set
			{
				WriteUInt64(0x1D0,value);
			}
		}
		
		/// <summary>
		/// Name: BlueprintCreatedComponents
		/// Type: TArray<UActorComponent>
		/// Offset: 0x3A8
		/// Size: 0x10
		/// SubElement Size: 0xD8
		/// </summary>
		public TArray<UActorComponent> BlueprintCreatedComponents => new TArray<UActorComponent>(BaseAddress+0x3A8);
		
		/// <summary>
		/// Name: InstanceComponents
		/// Type: TArray<UActorComponent>
		/// Offset: 0x3B8
		/// Size: 0x10
		/// SubElement Size: 0xD8
		/// </summary>
		public TArray<UActorComponent> InstanceComponents => new TArray<UActorComponent>(BaseAddress+0x3B8);
		
	}


	/// <summary>
	/// ABuildableBase:AActor
	/// Size: 0x490
	/// Properties: 21
	/// </summary>
	public class ABuildableBase:AActor
	{
		public override int ObjectSize => 1168;
		/// <summary>
		/// Name: SourceItemTemplateID
		/// Type: IntProperty
		/// Offset: 0x3D8
		/// Size: 0x04
		/// </summary>
		public int SourceItemTemplateID
		{
			get
			{
				return ReadInt32(0x3D8);
			}
			set
			{
				WriteInt32(0x3D8,value);
			}
		}
		
		/// <summary>
		/// Name: IsABrush
		/// Type: BoolProperty
		/// Offset: 0x3DC
		/// Size: 0x01
		/// </summary>
		public bool IsABrush
		{
			get
			{
				return ReadBool(0x3DC);
			}
			set
			{
				WriteBool(0x3DC,value);
			}
		}
		
		/// <summary>
		/// Name: BuildSockets
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public UBuildingSocketComponent BuildSockets => ReadUObject<UBuildingSocketComponent>(0x3E0);
		
		/// <summary>
		/// Name: IsSnappedToSocket
		/// Type: BoolProperty
		/// Offset: 0x3E8
		/// Size: 0x01
		/// </summary>
		public bool IsSnappedToSocket
		{
			get
			{
				return ReadBool(0x3E8);
			}
			set
			{
				WriteBool(0x3E8,value);
			}
		}
		
		/// <summary>
		/// Name: TargetSocketTypes
		/// Type: TArray<>
		/// Offset: 0x3F0
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: MaxHealth
		/// Type: IntProperty
		/// Offset: 0x400
		/// Size: 0x04
		/// </summary>
		public int MaxHealth
		{
			get
			{
				return ReadInt32(0x400);
			}
			set
			{
				WriteInt32(0x400,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentHealth
		/// Type: IntProperty
		/// Offset: 0x404
		/// Size: 0x04
		/// </summary>
		public int CurrentHealth
		{
			get
			{
				return ReadInt32(0x404);
			}
			set
			{
				WriteInt32(0x404,value);
			}
		}
		
		/// <summary>
		/// Name: AffectedByDamageTiers
		/// Type: IntProperty
		/// Offset: 0x408
		/// Size: 0x04
		/// </summary>
		public int AffectedByDamageTiers
		{
			get
			{
				return ReadInt32(0x408);
			}
			set
			{
				WriteInt32(0x408,value);
			}
		}
		
		/// <summary>
		/// Name: ClaimRadiusBuilding
		/// Type: FloatProperty
		/// Offset: 0x40C
		/// Size: 0x04
		/// </summary>
		public float ClaimRadiusBuilding
		{
			get
			{
				return ReadSingle(0x40C);
			}
			set
			{
				WriteSingle(0x40C,value);
			}
		}
		
		/// <summary>
		/// Name: ClaimRadiusFoliage
		/// Type: FloatProperty
		/// Offset: 0x410
		/// Size: 0x04
		/// </summary>
		public float ClaimRadiusFoliage
		{
			get
			{
				return ReadSingle(0x410);
			}
			set
			{
				WriteSingle(0x410,value);
			}
		}
		
		/// <summary>
		/// Name: EnforceLandclaim
		/// Type: BoolProperty
		/// Offset: 0x414
		/// Size: 0x01
		/// </summary>
		public bool EnforceLandclaim
		{
			get
			{
				return ReadBool(0x414);
			}
			set
			{
				WriteBool(0x414,value);
			}
		}
		
		/// <summary>
		/// Name: ClaimLocation
		/// Type: StructProperty
		/// Offset: 0x418
		/// Size: 0x0C
		/// </summary>
		public FVector ClaimLocation => ReadStruct<FVector>(0x418);
		
		/// <summary>
		/// Name: TemplateId
		/// Type: IntProperty
		/// Offset: 0x424
		/// Size: 0x04
		/// </summary>
		public int TemplateId
		{
			get
			{
				return ReadInt32(0x424);
			}
			set
			{
				WriteInt32(0x424,value);
			}
		}
		
		/// <summary>
		/// Name: BuildingPieceScore
		/// Type: IntProperty
		/// Offset: 0x428
		/// Size: 0x04
		/// </summary>
		public int BuildingPieceScore
		{
			get
			{
				return ReadInt32(0x428);
			}
			set
			{
				WriteInt32(0x428,value);
			}
		}
		
		/// <summary>
		/// Name: BuildingScore
		/// Type: IntProperty
		/// Offset: 0x42C
		/// Size: 0x04
		/// </summary>
		public int BuildingScore
		{
			get
			{
				return ReadInt32(0x42C);
			}
			set
			{
				WriteInt32(0x42C,value);
			}
		}
		
		/// <summary>
		/// Name: DecayTimestamp
		/// Type: FloatProperty
		/// Offset: 0x430
		/// Size: 0x04
		/// </summary>
		public float DecayTimestamp
		{
			get
			{
				return ReadSingle(0x430);
			}
			set
			{
				WriteSingle(0x430,value);
			}
		}
		
		/// <summary>
		/// Name: DecayState
		/// Type: IntProperty
		/// Offset: 0x434
		/// Size: 0x04
		/// </summary>
		public int DecayState
		{
			get
			{
				return ReadInt32(0x434);
			}
			set
			{
				WriteInt32(0x434,value);
			}
		}
		
		/// <summary>
		/// Name: OwnerUniqueID
		/// Type: ObjectProperty
		/// Offset: 0x438
		/// Size: 0x08
		/// </summary>
		public UUniqueID OwnerUniqueID => ReadUObject<UUniqueID>(0x438);
		
		/// <summary>
		/// Name: m_HealthPool
		/// Type: TArray<FBuildableHealthEntry>
		/// Offset: 0x450
		/// Size: 0x10
		/// SubElement Size: 0x14
		/// </summary>
		public TArray<FBuildableHealthEntry> m_HealthPool => new TArray<FBuildableHealthEntry>(BaseAddress+0x450);
		
		/// <summary>
		/// Name: ValidSocketRotations
		/// Type: TArray<>
		/// Offset: 0x460
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: OwnerName
		/// Type: TextProperty
		/// Offset: 0x470
		/// Size: 0x18
		/// </summary>
		
	}


	/// <summary>
	/// UBuildingModuleData:UObject
	/// Size: 0xF0
	/// Properties: 13
	/// </summary>
	public class UBuildingModuleData:UObject
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: CurrentHealth
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int CurrentHealth
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: Stability
		/// Type: Int8Property
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		
		/// <summary>
		/// Name: IsFoundation
		/// Type: BoolProperty
		/// Offset: 0x39
		/// Size: 0x01
		/// </summary>
		public bool IsFoundation
		{
			get
			{
				return ReadBool(0x39);
			}
			set
			{
				WriteBool(0x39,value);
			}
		}
		
		/// <summary>
		/// Name: IsPillar
		/// Type: BoolProperty
		/// Offset: 0x3A
		/// Size: 0x01
		/// </summary>
		public bool IsPillar
		{
			get
			{
				return ReadBool(0x3A);
			}
			set
			{
				WriteBool(0x3A,value);
			}
		}
		
		/// <summary>
		/// Name: OwnerComponent
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UInstancedBuildingComponent OwnerComponent => ReadUObject<UInstancedBuildingComponent>(0x40);
		
		/// <summary>
		/// Name: WorldLocation
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x0C
		/// </summary>
		public FVector WorldLocation => ReadStruct<FVector>(0x50);
		
		/// <summary>
		/// Name: WorldRotation
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x10
		/// </summary>
		public FQuat WorldRotation => ReadStruct<FQuat>(0x60);
		
		/// <summary>
		/// Name: m_BestPath
		/// Type: TArray<UBuildingModuleData>
		/// Offset: 0x80
		/// Size: 0x10
		/// SubElement Size: 0xF0
		/// </summary>
		public TArray<UBuildingModuleData> m_BestPath => new TArray<UBuildingModuleData>(BaseAddress+0x80);
		
		/// <summary>
		/// Name: m_SocketBestStabilities
		/// Type: TArray<>
		/// Offset: 0x90
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: m_SocketlessConnections
		/// Type: TArray<FSocketlessConnection>
		/// Offset: 0xA8
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FSocketlessConnection> m_SocketlessConnections => new TArray<FSocketlessConnection>(BaseAddress+0xA8);
		
		/// <summary>
		/// Name: m_ConnectedTo
		/// Type: StructProperty
		/// Offset: 0xB8
		/// Size: 0x10
		/// </summary>
		public FSocketlessConnection m_ConnectedTo => ReadStruct<FSocketlessConnection>(0xB8);
		
		/// <summary>
		/// Name: m_HealthPool
		/// Type: TArray<FBuildableHealthEntry>
		/// Offset: 0xC8
		/// Size: 0x10
		/// SubElement Size: 0x14
		/// </summary>
		public TArray<FBuildableHealthEntry> m_HealthPool => new TArray<FBuildableHealthEntry>(BaseAddress+0xC8);
		
		/// <summary>
		/// Name: m_HealthPoolPercentages
		/// Type: TArray<>
		/// Offset: 0xD8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// UInteractableInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UInteractableInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UVisual:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UVisual:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UWidget:UVisual
	/// Size: 0x118
	/// Properties: 19
	/// </summary>
	public class UWidget:UVisual
	{
		public override int ObjectSize => 280;
		/// <summary>
		/// Name: bIsVariable
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bIsVariable
		{
			get
			{
				return ReadBool(0x28);
			}
			set
			{
				WriteBool(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: bCreatedByConstructionScript
		/// Type: BoolProperty
		/// Offset: 0x29
		/// Size: 0x01
		/// </summary>
		public bool bCreatedByConstructionScript
		{
			get
			{
				return ReadBool(0x29);
			}
			set
			{
				WriteBool(0x29,value);
			}
		}
		
		/// <summary>
		/// Name: Slot
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UPanelSlot Slot => ReadUObject<UPanelSlot>(0x30);
		
		/// <summary>
		/// Name: bIsEnabled
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bIsEnabled
		{
			get
			{
				return ReadBool(0x38);
			}
			set
			{
				WriteBool(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: bIsEnabledDelegate
		/// Type: DelegateProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: ToolTipText
		/// Type: TextProperty
		/// Offset: 0x50
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: ToolTipTextDelegate
		/// Type: DelegateProperty
		/// Offset: 0x68
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: TooltipWidget
		/// Type: ObjectProperty
		/// Offset: 0x78
		/// Size: 0x08
		/// </summary>
		public UWidget TooltipWidget => ReadUObject<UWidget>(0x78);
		
		/// <summary>
		/// Name: ToolTipWidgetDelegate
		/// Type: DelegateProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: Visiblity
		/// Type: ByteProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public byte Visiblity
		{
			get
			{
				return ReadByte(0x90);
			}
			set
			{
				WriteByte(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: Visibility
		/// Type: ByteProperty
		/// Offset: 0x91
		/// Size: 0x01
		/// </summary>
		public byte Visibility
		{
			get
			{
				return ReadByte(0x91);
			}
			set
			{
				WriteByte(0x91,value);
			}
		}
		
		/// <summary>
		/// Name: VisibilityDelegate
		/// Type: DelegateProperty
		/// Offset: 0x98
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: bOverride_Cursor
		/// Type: BoolProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public bool bOverride_Cursor => (ReadByte(0x00A8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Cursor
		/// Type: ByteProperty
		/// Offset: 0xAC
		/// Size: 0x01
		/// </summary>
		public byte Cursor
		{
			get
			{
				return ReadByte(0xAC);
			}
			set
			{
				WriteByte(0xAC,value);
			}
		}
		
		/// <summary>
		/// Name: bIsVolatile
		/// Type: BoolProperty
		/// Offset: 0xAD
		/// Size: 0x01
		/// </summary>
		public bool bIsVolatile
		{
			get
			{
				return ReadBool(0xAD);
			}
			set
			{
				WriteBool(0xAD,value);
			}
		}
		
		/// <summary>
		/// Name: RenderTransform
		/// Type: StructProperty
		/// Offset: 0xB0
		/// Size: 0x1C
		/// </summary>
		public FWidgetTransform RenderTransform => ReadStruct<FWidgetTransform>(0xB0);
		
		/// <summary>
		/// Name: RenderTransformPivot
		/// Type: StructProperty
		/// Offset: 0xCC
		/// Size: 0x08
		/// </summary>
		public FVector2D RenderTransformPivot => ReadStruct<FVector2D>(0xCC);
		
		/// <summary>
		/// Name: Navigation
		/// Type: ObjectProperty
		/// Offset: 0xD8
		/// Size: 0x08
		/// </summary>
		public UWidgetNavigation Navigation => ReadUObject<UWidgetNavigation>(0xD8);
		
		/// <summary>
		/// Name: NativeBindings
		/// Type: TArray<UPropertyBinding>
		/// Offset: 0x108
		/// Size: 0x10
		/// SubElement Size: 0x48
		/// </summary>
		public TArray<UPropertyBinding> NativeBindings => new TArray<UPropertyBinding>(BaseAddress+0x108);
		
	}


	/// <summary>
	/// UUserWidget:UWidget
	/// Size: 0x238
	/// Properties: 14
	/// </summary>
	public class UUserWidget:UWidget
	{
		public override int ObjectSize => 568;
		/// <summary>
		/// Name: ColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x120
		/// Size: 0x10
		/// </summary>
		public FLinearColor ColorAndOpacity => ReadStruct<FLinearColor>(0x120);
		
		/// <summary>
		/// Name: ColorAndOpacityDelegate
		/// Type: DelegateProperty
		/// Offset: 0x130
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: ForegroundColor
		/// Type: StructProperty
		/// Offset: 0x140
		/// Size: 0x28
		/// </summary>
		public FSlateColor ForegroundColor => ReadStruct<FSlateColor>(0x140);
		
		/// <summary>
		/// Name: ForegroundColorDelegate
		/// Type: DelegateProperty
		/// Offset: 0x168
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x178
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x178);
		
		/// <summary>
		/// Name: bSupportsKeyboardFocus
		/// Type: BoolProperty
		/// Offset: 0x188
		/// Size: 0x01
		/// </summary>
		public bool bSupportsKeyboardFocus
		{
			get
			{
				return ReadBool(0x188);
			}
			set
			{
				WriteBool(0x188,value);
			}
		}
		
		/// <summary>
		/// Name: bIsFocusable
		/// Type: BoolProperty
		/// Offset: 0x189
		/// Size: 0x01
		/// </summary>
		public bool bIsFocusable
		{
			get
			{
				return ReadBool(0x189);
			}
			set
			{
				WriteBool(0x189,value);
			}
		}
		
		/// <summary>
		/// Name: WidgetTree
		/// Type: ObjectProperty
		/// Offset: 0x190
		/// Size: 0x08
		/// </summary>
		public UWidgetTree WidgetTree => ReadUObject<UWidgetTree>(0x190);
		
		/// <summary>
		/// Name: ActiveSequencePlayers
		/// Type: TArray<UUMGSequencePlayer>
		/// Offset: 0x198
		/// Size: 0x10
		/// SubElement Size: 0x190
		/// </summary>
		public TArray<UUMGSequencePlayer> ActiveSequencePlayers => new TArray<UUMGSequencePlayer>(BaseAddress+0x198);
		
		/// <summary>
		/// Name: StoppedSequencePlayers
		/// Type: TArray<UUMGSequencePlayer>
		/// Offset: 0x1A8
		/// Size: 0x10
		/// SubElement Size: 0x190
		/// </summary>
		public TArray<UUMGSequencePlayer> StoppedSequencePlayers => new TArray<UUMGSequencePlayer>(BaseAddress+0x1A8);
		
		/// <summary>
		/// Name: NamedSlotBindings
		/// Type: TArray<FNamedSlotBinding>
		/// Offset: 0x1B8
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FNamedSlotBinding> NamedSlotBindings => new TArray<FNamedSlotBinding>(BaseAddress+0x1B8);
		
		/// <summary>
		/// Name: bStopAction
		/// Type: BoolProperty
		/// Offset: 0x1C8
		/// Size: 0x01
		/// </summary>
		public bool bStopAction
		{
			get
			{
				return ReadBool(0x1C8);
			}
			set
			{
				WriteBool(0x1C8,value);
			}
		}
		
		/// <summary>
		/// Name: Priority
		/// Type: IntProperty
		/// Offset: 0x1CC
		/// Size: 0x04
		/// </summary>
		public int Priority
		{
			get
			{
				return ReadInt32(0x1CC);
			}
			set
			{
				WriteInt32(0x1CC,value);
			}
		}
		
		/// <summary>
		/// Name: InputComponent
		/// Type: ObjectProperty
		/// Offset: 0x1D8
		/// Size: 0x08
		/// </summary>
		public UInputComponent InputComponent => ReadUObject<UInputComponent>(0x1D8);
		
	}


	/// <summary>
	/// UTooltipWidget:UUserWidget
	/// Size: 0x240
	/// Properties: 0
	/// </summary>
	public class UTooltipWidget:UUserWidget
	{
		public override int ObjectSize => 576;
	}


	/// <summary>
	/// URootWidget:UUserWidget
	/// Size: 0x308
	/// Properties: 8
	/// </summary>
	public class URootWidget:UUserWidget
	{
		public override int ObjectSize => 776;
		/// <summary>
		/// Name: KeyNavAutoSetBack
		/// Type: BoolProperty
		/// Offset: 0x2A0
		/// Size: 0x01
		/// </summary>
		public bool KeyNavAutoSetBack
		{
			get
			{
				return ReadBool(0x2A0);
			}
			set
			{
				WriteBool(0x2A0,value);
			}
		}
		
		/// <summary>
		/// Name: TooltipWidgetClass
		/// Type: ClassProperty
		/// Offset: 0x2A8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: KeyNavIndicatorClass
		/// Type: ClassProperty
		/// Offset: 0x2B0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PositiveFeedbackColor
		/// Type: StructProperty
		/// Offset: 0x2B8
		/// Size: 0x10
		/// </summary>
		public FLinearColor PositiveFeedbackColor => ReadStruct<FLinearColor>(0x2B8);
		
		/// <summary>
		/// Name: NegativeFeedbackColor
		/// Type: StructProperty
		/// Offset: 0x2C8
		/// Size: 0x10
		/// </summary>
		public FLinearColor NegativeFeedbackColor => ReadStruct<FLinearColor>(0x2C8);
		
		/// <summary>
		/// Name: NeutralFeedbackColor
		/// Type: StructProperty
		/// Offset: 0x2D8
		/// Size: 0x10
		/// </summary>
		public FLinearColor NeutralFeedbackColor => ReadStruct<FLinearColor>(0x2D8);
		
		/// <summary>
		/// Name: m_Window
		/// Type: ObjectProperty
		/// Offset: 0x2E8
		/// Size: 0x08
		/// </summary>
		public UWindowRoot m_Window => ReadUObject<UWindowRoot>(0x2E8);
		
		/// <summary>
		/// Name: m_KeyNavIndicator
		/// Type: ObjectProperty
		/// Offset: 0x2F8
		/// Size: 0x08
		/// </summary>
		public UKeyNavIndicator m_KeyNavIndicator => ReadUObject<UKeyNavIndicator>(0x2F8);
		
	}


	/// <summary>
	/// UIntStatChangeSignalNode:UObject
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class UIntStatChangeSignalNode:UObject
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UFloatStatChangeSignalNode:UObject
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class UFloatStatChangeSignalNode:UObject
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UPersistenceComponent:UActorComponent
	/// Size: 0x130
	/// Properties: 4
	/// </summary>
	public class UPersistenceComponent:UActorComponent
	{
		public override int ObjectSize => 304;
		/// <summary>
		/// Name: SaveOnSpawn
		/// Type: BoolProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public bool SaveOnSpawn
		{
			get
			{
				return ReadBool(0xD8);
			}
			set
			{
				WriteBool(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: SaveFrequency
		/// Type: FloatProperty
		/// Offset: 0xDC
		/// Size: 0x04
		/// </summary>
		public float SaveFrequency
		{
			get
			{
				return ReadSingle(0xDC);
			}
			set
			{
				WriteSingle(0xDC,value);
			}
		}
		
		/// <summary>
		/// Name: SkipSaving
		/// Type: BoolProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public bool SkipSaving
		{
			get
			{
				return ReadBool(0xE0);
			}
			set
			{
				WriteBool(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: UID
		/// Type: ObjectProperty
		/// Offset: 0xE8
		/// Size: 0x08
		/// </summary>
		public UUniqueID UID => ReadUObject<UUniqueID>(0xE8);
		
	}


	/// <summary>
	/// UStatHolder:UPersistenceComponent
	/// Size: 0x310
	/// Properties: 4
	/// </summary>
	public class UStatHolder:UPersistenceComponent
	{
		public override int ObjectSize => 784;
		/// <summary>
		/// Name: m_IntStatArray
		/// Type: StructProperty
		/// Offset: 0x160
		/// Size: 0x10
		/// </summary>
		public FStatArrayInt32 m_IntStatArray => ReadStruct<FStatArrayInt32>(0x160);
		
		/// <summary>
		/// Name: m_FloatStatArray
		/// Type: StructProperty
		/// Offset: 0x180
		/// Size: 0x10
		/// </summary>
		public FStatArrayFloat m_FloatStatArray => ReadStruct<FStatArrayFloat>(0x180);
		
		/// <summary>
		/// Name: m_IntStatChangeNodeList
		/// Type: TArray<UIntStatChangeSignalNode>
		/// Offset: 0x230
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<UIntStatChangeSignalNode> m_IntStatChangeNodeList => new TArray<UIntStatChangeSignalNode>(BaseAddress+0x230);
		
		/// <summary>
		/// Name: m_FloatStatChangeNodeList
		/// Type: TArray<UFloatStatChangeSignalNode>
		/// Offset: 0x240
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<UFloatStatChangeSignalNode> m_FloatStatChangeNodeList => new TArray<UFloatStatChangeSignalNode>(BaseAddress+0x240);
		
	}


	/// <summary>
	/// UGUIModule:UObject
	/// Size: 0xA0
	/// Properties: 12
	/// </summary>
	public class UGUIModule:UObject
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: ModuleName
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ToggleActionName
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CloseOnShortcutRelease
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool CloseOnShortcutRelease
		{
			get
			{
				return ReadBool(0x38);
			}
			set
			{
				WriteBool(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: CloseOnESC
		/// Type: BoolProperty
		/// Offset: 0x39
		/// Size: 0x01
		/// </summary>
		public bool CloseOnESC
		{
			get
			{
				return ReadBool(0x39);
			}
			set
			{
				WriteBool(0x39,value);
			}
		}
		
		/// <summary>
		/// Name: CloseOnEndPlay
		/// Type: BoolProperty
		/// Offset: 0x3A
		/// Size: 0x01
		/// </summary>
		public bool CloseOnEndPlay
		{
			get
			{
				return ReadBool(0x3A);
			}
			set
			{
				WriteBool(0x3A,value);
			}
		}
		
		/// <summary>
		/// Name: PreloadOnStartup
		/// Type: BoolProperty
		/// Offset: 0x3B
		/// Size: 0x01
		/// </summary>
		public bool PreloadOnStartup
		{
			get
			{
				return ReadBool(0x3B);
			}
			set
			{
				WriteBool(0x3B,value);
			}
		}
		
		/// <summary>
		/// Name: IsPersistent
		/// Type: BoolProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public bool IsPersistent
		{
			get
			{
				return ReadBool(0x3C);
			}
			set
			{
				WriteBool(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: Category
		/// Type: ByteProperty
		/// Offset: 0x3D
		/// Size: 0x01
		/// </summary>
		public byte Category
		{
			get
			{
				return ReadByte(0x3D);
			}
			set
			{
				WriteByte(0x3D,value);
			}
		}
		
		/// <summary>
		/// Name: WidgetClass
		/// Type: AssetClassProperty
		/// Offset: 0x40
		/// Size: 0x20
		/// </summary>
		
		/// <summary>
		/// Name: RootWidget
		/// Type: ObjectProperty
		/// Offset: 0x60
		/// Size: 0x08
		/// </summary>
		public UWindowRoot RootWidget => ReadUObject<UWindowRoot>(0x60);
		
		/// <summary>
		/// Name: IsFullscreen
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool IsFullscreen
		{
			get
			{
				return ReadBool(0x68);
			}
			set
			{
				WriteBool(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: m_ModuleController
		/// Type: ObjectProperty
		/// Offset: 0x80
		/// Size: 0x08
		/// </summary>
		public UGUIModuleController m_ModuleController => ReadUObject<UGUIModuleController>(0x80);
		
	}


	/// <summary>
	/// UGameInstance:UObject
	/// Size: 0xF0
	/// Properties: 2
	/// </summary>
	public class UGameInstance:UObject
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: LocalPlayers
		/// Type: TArray<ULocalPlayer>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x190
		/// </summary>
		public TArray<ULocalPlayer> LocalPlayers => new TArray<ULocalPlayer>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: OnlineSession
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UOnlineSession OnlineSession => ReadUObject<UOnlineSession>(0x58);
		
	}


	/// <summary>
	/// UConanGameInstance:UGameInstance
	/// Size: 0x2C0
	/// Properties: 4
	/// </summary>
	public class UConanGameInstance:UGameInstance
	{
		public override int ObjectSize => 704;
		/// <summary>
		/// Name: m_ShowLoadingScreens
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool m_ShowLoadingScreens
		{
			get
			{
				return ReadBool(0xF0);
			}
			set
			{
				WriteBool(0xF0,value);
			}
		}
		
		/// <summary>
		/// Name: ServerSettings
		/// Type: ObjectProperty
		/// Offset: 0x220
		/// Size: 0x08
		/// </summary>
		public AServerSettings ServerSettings => ReadUObject<AServerSettings>(0x220);
		
		/// <summary>
		/// Name: m_GUIModuleController
		/// Type: ObjectProperty
		/// Offset: 0x258
		/// Size: 0x08
		/// </summary>
		public UGUIModuleController m_GUIModuleController => ReadUObject<UGUIModuleController>(0x258);
		
		/// <summary>
		/// Name: m_LoadingScreenWidget
		/// Type: ObjectProperty
		/// Offset: 0x260
		/// Size: 0x08
		/// </summary>
		public UWidget m_LoadingScreenWidget => ReadUObject<UWidget>(0x260);
		
	}


	/// <summary>
	/// UEscapeStackNode:UObject
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UEscapeStackNode:UObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: SignalActivated
		/// Type: DelegateProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		
	}


	/// <summary>
	/// UGUIModuleController:UObject
	/// Size: 0x140
	/// Properties: 8
	/// </summary>
	public class UGUIModuleController:UObject
	{
		public override int ObjectSize => 320;
		/// <summary>
		/// Name: m_WindowList
		/// Type: TArray<UWindowRoot>
		/// Offset: 0x60
		/// Size: 0x10
		/// SubElement Size: 0x378
		/// </summary>
		public TArray<UWindowRoot> m_WindowList => new TArray<UWindowRoot>(BaseAddress+0x60);
		
		/// <summary>
		/// Name: m_MouseBlockWindow
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public UWindowRoot m_MouseBlockWindow => ReadUObject<UWindowRoot>(0x70);
		
		/// <summary>
		/// Name: m_Modules
		/// Type: TArray<UGUIModule>
		/// Offset: 0x78
		/// Size: 0x10
		/// SubElement Size: 0xA0
		/// </summary>
		public TArray<UGUIModule> m_Modules => new TArray<UGUIModule>(BaseAddress+0x78);
		
		/// <summary>
		/// Name: m_EscapeStack
		/// Type: TArray<UEscapeStackNode>
		/// Offset: 0x88
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<UEscapeStackNode> m_EscapeStack => new TArray<UEscapeStackNode>(BaseAddress+0x88);
		
		/// <summary>
		/// Name: m_GUIModuleTable
		/// Type: ObjectProperty
		/// Offset: 0x98
		/// Size: 0x08
		/// </summary>
		public UDataTable m_GUIModuleTable => ReadUObject<UDataTable>(0x98);
		
		/// <summary>
		/// Name: m_KeyNavSelectedWidget
		/// Type: ObjectProperty
		/// Offset: 0xA8
		/// Size: 0x08
		/// </summary>
		public URootWidget m_KeyNavSelectedWidget => ReadUObject<URootWidget>(0xA8);
		
		/// <summary>
		/// Name: m_PlayerController
		/// Type: ObjectProperty
		/// Offset: 0xD8
		/// Size: 0x08
		/// </summary>
		public APlayerController m_PlayerController => ReadUObject<APlayerController>(0xD8);
		
		/// <summary>
		/// Name: m_InputComponent
		/// Type: ObjectProperty
		/// Offset: 0xE0
		/// Size: 0x08
		/// </summary>
		public UInputComponent m_InputComponent => ReadUObject<UInputComponent>(0xE0);
		
	}


	/// <summary>
	/// UWindowRoot:URootWidget
	/// Size: 0x378
	/// Properties: 5
	/// </summary>
	public class UWindowRoot:URootWidget
	{
		public override int ObjectSize => 888;
		/// <summary>
		/// Name: CloseOnClick
		/// Type: BoolProperty
		/// Offset: 0x308
		/// Size: 0x01
		/// </summary>
		public bool CloseOnClick
		{
			get
			{
				return ReadBool(0x308);
			}
			set
			{
				WriteBool(0x308,value);
			}
		}
		
		/// <summary>
		/// Name: OpeningSlateSound
		/// Type: StructProperty
		/// Offset: 0x310
		/// Size: 0x18
		/// </summary>
		public FSlateSound OpeningSlateSound => ReadStruct<FSlateSound>(0x310);
		
		/// <summary>
		/// Name: ClosingSlateSound
		/// Type: StructProperty
		/// Offset: 0x328
		/// Size: 0x18
		/// </summary>
		public FSlateSound ClosingSlateSound => ReadStruct<FSlateSound>(0x328);
		
		/// <summary>
		/// Name: m_InputComponent
		/// Type: ObjectProperty
		/// Offset: 0x360
		/// Size: 0x08
		/// </summary>
		public UInputComponent m_InputComponent => ReadUObject<UInputComponent>(0x360);
		
		/// <summary>
		/// Name: m_GUIModule
		/// Type: ObjectProperty
		/// Offset: 0x368
		/// Size: 0x08
		/// </summary>
		public UGUIModule m_GUIModule => ReadUObject<UGUIModule>(0x368);
		
	}


	/// <summary>
	/// UMessageBoxWidget:UWindowRoot
	/// Size: 0x3D8
	/// Properties: 0
	/// </summary>
	public class UMessageBoxWidget:UWindowRoot
	{
		public override int ObjectSize => 984;
	}


	/// <summary>
	/// UInstancedBuildingComponent:UInstancedStaticMeshComponent
	/// Size: 0x800
	/// Properties: 7
	/// </summary>
	public class UInstancedBuildingComponent:UInstancedStaticMeshComponent
	{
		public override int ObjectSize => 2048;
		/// <summary>
		/// Name: DestructibleMesh
		/// Type: ObjectProperty
		/// Offset: 0x788
		/// Size: 0x08
		/// </summary>
		public UDestructibleMesh DestructibleMesh => ReadUObject<UDestructibleMesh>(0x788);
		
		/// <summary>
		/// Name: MaxHealth
		/// Type: IntProperty
		/// Offset: 0x790
		/// Size: 0x04
		/// </summary>
		public int MaxHealth
		{
			get
			{
				return ReadInt32(0x790);
			}
			set
			{
				WriteInt32(0x790,value);
			}
		}
		
		/// <summary>
		/// Name: m_SourceClass
		/// Type: ClassProperty
		/// Offset: 0x798
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: m_BuildingModules
		/// Type: TArray<UBuildingModuleData>
		/// Offset: 0x7A8
		/// Size: 0x10
		/// SubElement Size: 0xF0
		/// </summary>
		public TArray<UBuildingModuleData> m_BuildingModules => new TArray<UBuildingModuleData>(BaseAddress+0x7A8);
		
		/// <summary>
		/// Name: m_PendingDestructionModules
		/// Type: TArray<UBuildingModuleData>
		/// Offset: 0x7C8
		/// Size: 0x10
		/// SubElement Size: 0xF0
		/// </summary>
		public TArray<UBuildingModuleData> m_PendingDestructionModules => new TArray<UBuildingModuleData>(BaseAddress+0x7C8);
		
		/// <summary>
		/// Name: m_SpawnedDestructibles
		/// Type: TArray<ADestructibleActor>
		/// Offset: 0x7D8
		/// Size: 0x10
		/// SubElement Size: 0x3F0
		/// </summary>
		public TArray<ADestructibleActor> m_SpawnedDestructibles => new TArray<ADestructibleActor>(BaseAddress+0x7D8);
		
		/// <summary>
		/// Name: m_RadialDamageDestroyedModules
		/// Type: TArray<UBuildingModuleData>
		/// Offset: 0x7E8
		/// Size: 0x10
		/// SubElement Size: 0xF0
		/// </summary>
		public TArray<UBuildingModuleData> m_RadialDamageDestroyedModules => new TArray<UBuildingModuleData>(BaseAddress+0x7E8);
		
	}


	/// <summary>
	/// ABuildingBase:ABuildableBase
	/// Size: 0x608
	/// Properties: 18
	/// </summary>
	public class ABuildingBase:ABuildableBase
	{
		public override int ObjectSize => 1544;
		/// <summary>
		/// Name: InstancedBuildingMesh
		/// Type: ObjectProperty
		/// Offset: 0x4C0
		/// Size: 0x08
		/// </summary>
		public UInstancedBuildingComponent InstancedBuildingMesh => ReadUObject<UInstancedBuildingComponent>(0x4C0);
		
		/// <summary>
		/// Name: IsFoundation
		/// Type: BoolProperty
		/// Offset: 0x4C8
		/// Size: 0x01
		/// </summary>
		public bool IsFoundation
		{
			get
			{
				return ReadBool(0x4C8);
			}
			set
			{
				WriteBool(0x4C8,value);
			}
		}
		
		/// <summary>
		/// Name: IsPillar
		/// Type: BoolProperty
		/// Offset: 0x4C9
		/// Size: 0x01
		/// </summary>
		public bool IsPillar
		{
			get
			{
				return ReadBool(0x4C9);
			}
			set
			{
				WriteBool(0x4C9,value);
			}
		}
		
		/// <summary>
		/// Name: CanUpgradeFrom
		/// Type: TArray<UStaticMesh>
		/// Offset: 0x4D0
		/// Size: 0x10
		/// SubElement Size: 0x118
		/// </summary>
		public TArray<UStaticMesh> CanUpgradeFrom => new TArray<UStaticMesh>(BaseAddress+0x4D0);
		
		/// <summary>
		/// Name: m_PlacementHelper
		/// Type: ObjectProperty
		/// Offset: 0x4E0
		/// Size: 0x08
		/// </summary>
		public ABuildingBase m_PlacementHelper => ReadUObject<ABuildingBase>(0x4E0);
		
		/// <summary>
		/// Name: m_InstancedBuildingMeshes
		/// Type: TArray<UInstancedBuildingComponent>
		/// Offset: 0x4E8
		/// Size: 0x10
		/// SubElement Size: 0x800
		/// </summary>
		public TArray<UInstancedBuildingComponent> m_InstancedBuildingMeshes => new TArray<UInstancedBuildingComponent>(BaseAddress+0x4E8);
		
		/// <summary>
		/// Name: m_IsLoading
		/// Type: BoolProperty
		/// Offset: 0x4F8
		/// Size: 0x01
		/// </summary>
		public bool m_IsLoading
		{
			get
			{
				return ReadBool(0x4F8);
			}
			set
			{
				WriteBool(0x4F8,value);
			}
		}
		
		/// <summary>
		/// Name: m_MasterBuilding
		/// Type: ObjectProperty
		/// Offset: 0x500
		/// Size: 0x08
		/// </summary>
		public ABuildingBase m_MasterBuilding => ReadUObject<ABuildingBase>(0x500);
		
		/// <summary>
		/// Name: m_Buildings
		/// Type: MapProperty
		/// Offset: 0x508
		/// Size: 0x50
		/// </summary>
		
		/// <summary>
		/// Name: m_NextBuilding
		/// Type: ObjectProperty
		/// Offset: 0x568
		/// Size: 0x08
		/// </summary>
		public ABuildingBase m_NextBuilding => ReadUObject<ABuildingBase>(0x568);
		
		/// <summary>
		/// Name: m_PrevBuilding
		/// Type: ObjectProperty
		/// Offset: 0x570
		/// Size: 0x08
		/// </summary>
		public ABuildingBase m_PrevBuilding => ReadUObject<ABuildingBase>(0x570);
		
		/// <summary>
		/// Name: m_BuildingKey
		/// Type: UInt32Property
		/// Offset: 0x578
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: m_BuildingClasses
		/// Type: TArray<>
		/// Offset: 0x5D0
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: m_RandomizingBuildSystem
		/// Type: ObjectProperty
		/// Offset: 0x5E0
		/// Size: 0x08
		/// </summary>
		public UBuildSystemComponent m_RandomizingBuildSystem => ReadUObject<UBuildSystemComponent>(0x5E0);
		
		/// <summary>
		/// Name: m_NumStartingPiecesForRandomization
		/// Type: IntProperty
		/// Offset: 0x5E8
		/// Size: 0x04
		/// </summary>
		public int m_NumStartingPiecesForRandomization
		{
			get
			{
				return ReadInt32(0x5E8);
			}
			set
			{
				WriteInt32(0x5E8,value);
			}
		}
		
		/// <summary>
		/// Name: m_NumPiecesForRandomization
		/// Type: IntProperty
		/// Offset: 0x5EC
		/// Size: 0x04
		/// </summary>
		public int m_NumPiecesForRandomization
		{
			get
			{
				return ReadInt32(0x5EC);
			}
			set
			{
				WriteInt32(0x5EC,value);
			}
		}
		
		/// <summary>
		/// Name: m_NumFoundationPiecesForRandomization
		/// Type: IntProperty
		/// Offset: 0x5F0
		/// Size: 0x04
		/// </summary>
		public int m_NumFoundationPiecesForRandomization
		{
			get
			{
				return ReadInt32(0x5F0);
			}
			set
			{
				WriteInt32(0x5F0,value);
			}
		}
		
		/// <summary>
		/// Name: m_RandomizationModulesList
		/// Type: TArray<UBuildingModuleData>
		/// Offset: 0x5F8
		/// Size: 0x10
		/// SubElement Size: 0xF0
		/// </summary>
		public TArray<UBuildingModuleData> m_RandomizationModulesList => new TArray<UBuildingModuleData>(BaseAddress+0x5F8);
		
	}


	/// <summary>
	/// UBlueprintFunctionLibrary:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UBlueprintFunctionLibrary:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UTargetAreaHelpers:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UTargetAreaHelpers:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAIFunctionLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UAIFunctionLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAILODComponent:UActorComponent
	/// Size: 0x190
	/// Properties: 7
	/// </summary>
	public class UAILODComponent:UActorComponent
	{
		public override int ObjectSize => 400;
		/// <summary>
		/// Name: AILOD2DistanceOverride
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float AILOD2DistanceOverride
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: AILOD1Distance
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float AILOD1Distance
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
		/// <summary>
		/// Name: AILOD2Distance
		/// Type: FloatProperty
		/// Offset: 0xE8
		/// Size: 0x04
		/// </summary>
		public float AILOD2Distance
		{
			get
			{
				return ReadSingle(0xE8);
			}
			set
			{
				WriteSingle(0xE8,value);
			}
		}
		
		/// <summary>
		/// Name: AILOD3Distance
		/// Type: FloatProperty
		/// Offset: 0xEC
		/// Size: 0x04
		/// </summary>
		public float AILOD3Distance
		{
			get
			{
				return ReadSingle(0xEC);
			}
			set
			{
				WriteSingle(0xEC,value);
			}
		}
		
		/// <summary>
		/// Name: SuspendAtMaxAILOD
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool SuspendAtMaxAILOD
		{
			get
			{
				return ReadBool(0xF0);
			}
			set
			{
				WriteBool(0xF0,value);
			}
		}
		
		/// <summary>
		/// Name: AILOD
		/// Type: ByteProperty
		/// Offset: 0xF1
		/// Size: 0x01
		/// </summary>
		public byte AILOD
		{
			get
			{
				return ReadByte(0xF1);
			}
			set
			{
				WriteByte(0xF1,value);
			}
		}
		
		/// <summary>
		/// Name: pausedComponents
		/// Type: TArray<UActorComponent>
		/// Offset: 0x168
		/// Size: 0x10
		/// SubElement Size: 0xD8
		/// </summary>
		public TArray<UActorComponent> pausedComponents => new TArray<UActorComponent>(BaseAddress+0x168);
		
	}


	/// <summary>
	/// ALandClaim:AActor
	/// Size: 0x448
	/// Properties: 7
	/// </summary>
	public class ALandClaim:AActor
	{
		public override int ObjectSize => 1096;
		/// <summary>
		/// Name: CellSize
		/// Type: IntProperty
		/// Offset: 0x3D0
		/// Size: 0x04
		/// </summary>
		public int CellSize
		{
			get
			{
				return ReadInt32(0x3D0);
			}
			set
			{
				WriteInt32(0x3D0,value);
			}
		}
		
		/// <summary>
		/// Name: CellData
		/// Type: TArray<FLandClaimCellData>
		/// Offset: 0x3D8
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FLandClaimCellData> CellData => new TArray<FLandClaimCellData>(BaseAddress+0x3D8);
		
		/// <summary>
		/// Name: Cells
		/// Type: MapProperty
		/// Offset: 0x3E8
		/// Size: 0x50
		/// </summary>
		
		/// <summary>
		/// Name: Channel
		/// Type: ByteProperty
		/// Offset: 0x438
		/// Size: 0x01
		/// </summary>
		public byte Channel
		{
			get
			{
				return ReadByte(0x438);
			}
			set
			{
				WriteByte(0x438,value);
			}
		}
		
		/// <summary>
		/// Name: RadiusCoefficient
		/// Type: FloatProperty
		/// Offset: 0x43C
		/// Size: 0x04
		/// </summary>
		public float RadiusCoefficient
		{
			get
			{
				return ReadSingle(0x43C);
			}
			set
			{
				WriteSingle(0x43C,value);
			}
		}
		
		/// <summary>
		/// Name: ScaledCellSize
		/// Type: IntProperty
		/// Offset: 0x440
		/// Size: 0x04
		/// </summary>
		public int ScaledCellSize
		{
			get
			{
				return ReadInt32(0x440);
			}
			set
			{
				WriteInt32(0x440,value);
			}
		}
		
		/// <summary>
		/// Name: NoOwnership
		/// Type: BoolProperty
		/// Offset: 0x444
		/// Size: 0x01
		/// </summary>
		public bool NoOwnership
		{
			get
			{
				return ReadBool(0x444);
			}
			set
			{
				WriteBool(0x444,value);
			}
		}
		
	}


	/// <summary>
	/// UEnergyReceiverComponent:UActorComponent
	/// Size: 0x190
	/// Properties: 4
	/// </summary>
	public class UEnergyReceiverComponent:UActorComponent
	{
		public override int ObjectSize => 400;
		/// <summary>
		/// Name: ListeningToTypes
		/// Type: IntProperty
		/// Offset: 0x160
		/// Size: 0x04
		/// </summary>
		public int ListeningToTypes
		{
			get
			{
				return ReadInt32(0x160);
			}
			set
			{
				WriteInt32(0x160,value);
			}
		}
		
		/// <summary>
		/// Name: Energies
		/// Type: TArray<>
		/// Offset: 0x168
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: EnergyDataTable
		/// Type: ObjectProperty
		/// Offset: 0x178
		/// Size: 0x08
		/// </summary>
		public UDataTable EnergyDataTable => ReadUObject<UDataTable>(0x178);
		
		/// <summary>
		/// Name: EnergyEventTable
		/// Type: ObjectProperty
		/// Offset: 0x180
		/// Size: 0x08
		/// </summary>
		public UDataTable EnergyEventTable => ReadUObject<UDataTable>(0x180);
		
	}


	/// <summary>
	/// AEnergyReceiverRegistry:AActor
	/// Size: 0x3E0
	/// Properties: 1
	/// </summary>
	public class AEnergyReceiverRegistry:AActor
	{
		public override int ObjectSize => 992;
		/// <summary>
		/// Name: EnergyListeners
		/// Type: TArray<UEnergyReceiverComponent>
		/// Offset: 0x3D0
		/// Size: 0x10
		/// SubElement Size: 0x190
		/// </summary>
		public TArray<UEnergyReceiverComponent> EnergyListeners => new TArray<UEnergyReceiverComponent>(BaseAddress+0x3D0);
		
	}


	/// <summary>
	/// UStaticNavigation:UObject
	/// Size: 0xA8
	/// Properties: 3
	/// </summary>
	public class UStaticNavigation:UObject
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: m_SpawnerIndices
		/// Type: TArray<FSpawnerIndex>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FSpawnerIndex> m_SpawnerIndices => new TArray<FSpawnerIndex>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: m_SampledSpawnPoints
		/// Type: TArray<FVector>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> m_SampledSpawnPoints => new TArray<FVector>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: m_SampledRoamingPaths
		/// Type: TArray<FRoamingPath>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FRoamingPath> m_SampledRoamingPaths => new TArray<FRoamingPath>(BaseAddress+0x48);
		
	}


	/// <summary>
	/// UNPCTerritorySpawnerInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNPCTerritorySpawnerInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// ANPCRegistry:AActor
	/// Size: 0x470
	/// Properties: 1
	/// </summary>
	public class ANPCRegistry:AActor
	{
		public override int ObjectSize => 1136;
		/// <summary>
		/// Name: m_ActiveSpawners
		/// Type: TArray<>
		/// Offset: 0x3D0
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// AInfo:AActor
	/// Size: 0x3D0
	/// Properties: 0
	/// </summary>
	public class AInfo:AActor
	{
		public override int ObjectSize => 976;
	}


	/// <summary>
	/// AWorldSettings:AInfo
	/// Size: 0x590
	/// Properties: 45
	/// </summary>
	public class AWorldSettings:AInfo
	{
		public override int ObjectSize => 1424;
		/// <summary>
		/// Name: bEnableWorldBoundsChecks
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bEnableWorldBoundsChecks => (ReadByte(0x03D8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bEnableNavigationSystem
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bEnableNavigationSystem => (ReadByte(0x03D8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bEnableWorldComposition
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bEnableWorldComposition => (ReadByte(0x03D8) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bEnableWorldOriginRebasing
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bEnableWorldOriginRebasing => (ReadByte(0x03D8) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bWorldGravitySet
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bWorldGravitySet => (ReadByte(0x03D8) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bGlobalGravitySet
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bGlobalGravitySet => (ReadByte(0x03D8) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: KillZ
		/// Type: FloatProperty
		/// Offset: 0x3DC
		/// Size: 0x04
		/// </summary>
		public float KillZ
		{
			get
			{
				return ReadSingle(0x3DC);
			}
			set
			{
				WriteSingle(0x3DC,value);
			}
		}
		
		/// <summary>
		/// Name: KillZDamageType
		/// Type: ClassProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: WorldGravityZ
		/// Type: FloatProperty
		/// Offset: 0x3E8
		/// Size: 0x04
		/// </summary>
		public float WorldGravityZ
		{
			get
			{
				return ReadSingle(0x3E8);
			}
			set
			{
				WriteSingle(0x3E8,value);
			}
		}
		
		/// <summary>
		/// Name: GlobalGravityZ
		/// Type: FloatProperty
		/// Offset: 0x3EC
		/// Size: 0x04
		/// </summary>
		public float GlobalGravityZ
		{
			get
			{
				return ReadSingle(0x3EC);
			}
			set
			{
				WriteSingle(0x3EC,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultPhysicsVolumeClass
		/// Type: ClassProperty
		/// Offset: 0x3F0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PhysicsCollisionHandlerClass
		/// Type: ClassProperty
		/// Offset: 0x3F8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: DefaultGameMode
		/// Type: ClassProperty
		/// Offset: 0x400
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: DefaultMapPrefixes
		/// Type: TArray<FGameModePrefix>
		/// Offset: 0x408
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FGameModePrefix> DefaultMapPrefixes => new TArray<FGameModePrefix>(BaseAddress+0x408);
		
		/// <summary>
		/// Name: GameNetworkManagerClass
		/// Type: ClassProperty
		/// Offset: 0x418
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: WorldCompositionClass
		/// Type: ClassProperty
		/// Offset: 0x420
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PackedLightAndShadowMapTextureSize
		/// Type: IntProperty
		/// Offset: 0x428
		/// Size: 0x04
		/// </summary>
		public int PackedLightAndShadowMapTextureSize
		{
			get
			{
				return ReadInt32(0x428);
			}
			set
			{
				WriteInt32(0x428,value);
			}
		}
		
		/// <summary>
		/// Name: bMinimizeBSPSections
		/// Type: BoolProperty
		/// Offset: 0x42C
		/// Size: 0x01
		/// </summary>
		public bool bMinimizeBSPSections => (ReadByte(0x042C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: DefaultColorScale
		/// Type: StructProperty
		/// Offset: 0x430
		/// Size: 0x0C
		/// </summary>
		public FVector DefaultColorScale => ReadStruct<FVector>(0x430);
		
		/// <summary>
		/// Name: DefaultMaxDistanceFieldOcclusionDistance
		/// Type: FloatProperty
		/// Offset: 0x43C
		/// Size: 0x04
		/// </summary>
		public float DefaultMaxDistanceFieldOcclusionDistance
		{
			get
			{
				return ReadSingle(0x43C);
			}
			set
			{
				WriteSingle(0x43C,value);
			}
		}
		
		/// <summary>
		/// Name: GlobalDistanceFieldViewDistance
		/// Type: FloatProperty
		/// Offset: 0x440
		/// Size: 0x04
		/// </summary>
		public float GlobalDistanceFieldViewDistance
		{
			get
			{
				return ReadSingle(0x440);
			}
			set
			{
				WriteSingle(0x440,value);
			}
		}
		
		/// <summary>
		/// Name: bPrecomputeVisibility
		/// Type: BoolProperty
		/// Offset: 0x444
		/// Size: 0x01
		/// </summary>
		public bool bPrecomputeVisibility => (ReadByte(0x0444) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bPlaceCellsOnlyAlongCameraTracks
		/// Type: BoolProperty
		/// Offset: 0x444
		/// Size: 0x01
		/// </summary>
		public bool bPlaceCellsOnlyAlongCameraTracks => (ReadByte(0x0444) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: VisibilityCellSize
		/// Type: IntProperty
		/// Offset: 0x448
		/// Size: 0x04
		/// </summary>
		public int VisibilityCellSize
		{
			get
			{
				return ReadInt32(0x448);
			}
			set
			{
				WriteInt32(0x448,value);
			}
		}
		
		/// <summary>
		/// Name: VisibilityAggressiveness
		/// Type: ByteProperty
		/// Offset: 0x44C
		/// Size: 0x01
		/// </summary>
		public byte VisibilityAggressiveness
		{
			get
			{
				return ReadByte(0x44C);
			}
			set
			{
				WriteByte(0x44C,value);
			}
		}
		
		/// <summary>
		/// Name: bForceNoPrecomputedLighting
		/// Type: BoolProperty
		/// Offset: 0x450
		/// Size: 0x01
		/// </summary>
		public bool bForceNoPrecomputedLighting => (ReadByte(0x0450) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LightmassSettings
		/// Type: StructProperty
		/// Offset: 0x454
		/// Size: 0x48
		/// </summary>
		public FLightmassWorldInfoSettings LightmassSettings => ReadStruct<FLightmassWorldInfoSettings>(0x454);
		
		/// <summary>
		/// Name: LevelLightingQuality
		/// Type: ByteProperty
		/// Offset: 0x49C
		/// Size: 0x01
		/// </summary>
		public byte LevelLightingQuality
		{
			get
			{
				return ReadByte(0x49C);
			}
			set
			{
				WriteByte(0x49C,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultReverbSettings
		/// Type: StructProperty
		/// Offset: 0x4A0
		/// Size: 0x18
		/// </summary>
		public FReverbSettings DefaultReverbSettings => ReadStruct<FReverbSettings>(0x4A0);
		
		/// <summary>
		/// Name: DefaultAmbientZoneSettings
		/// Type: StructProperty
		/// Offset: 0x4B8
		/// Size: 0x24
		/// </summary>
		public FInteriorSettings DefaultAmbientZoneSettings => ReadStruct<FInteriorSettings>(0x4B8);
		
		/// <summary>
		/// Name: DefaultBaseSoundMix
		/// Type: ObjectProperty
		/// Offset: 0x4E0
		/// Size: 0x08
		/// </summary>
		public USoundMix DefaultBaseSoundMix => ReadUObject<USoundMix>(0x4E0);
		
		/// <summary>
		/// Name: WorldToMeters
		/// Type: FloatProperty
		/// Offset: 0x4E8
		/// Size: 0x04
		/// </summary>
		public float WorldToMeters
		{
			get
			{
				return ReadSingle(0x4E8);
			}
			set
			{
				WriteSingle(0x4E8,value);
			}
		}
		
		/// <summary>
		/// Name: BookMarks
		/// Type: ObjectProperty
		/// Offset: 0x4F0
		/// Size: 0x08
		/// </summary>
		public UBookMark BookMarks => ReadUObject<UBookMark>(0x4F0);
		
		/// <summary>
		/// Name: TimeDilation
		/// Type: FloatProperty
		/// Offset: 0x540
		/// Size: 0x04
		/// </summary>
		public float TimeDilation
		{
			get
			{
				return ReadSingle(0x540);
			}
			set
			{
				WriteSingle(0x540,value);
			}
		}
		
		/// <summary>
		/// Name: MatineeTimeDilation
		/// Type: FloatProperty
		/// Offset: 0x544
		/// Size: 0x04
		/// </summary>
		public float MatineeTimeDilation
		{
			get
			{
				return ReadSingle(0x544);
			}
			set
			{
				WriteSingle(0x544,value);
			}
		}
		
		/// <summary>
		/// Name: DemoPlayTimeDilation
		/// Type: FloatProperty
		/// Offset: 0x548
		/// Size: 0x04
		/// </summary>
		public float DemoPlayTimeDilation
		{
			get
			{
				return ReadSingle(0x548);
			}
			set
			{
				WriteSingle(0x548,value);
			}
		}
		
		/// <summary>
		/// Name: MinGlobalTimeDilation
		/// Type: FloatProperty
		/// Offset: 0x54C
		/// Size: 0x04
		/// </summary>
		public float MinGlobalTimeDilation
		{
			get
			{
				return ReadSingle(0x54C);
			}
			set
			{
				WriteSingle(0x54C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxGlobalTimeDilation
		/// Type: FloatProperty
		/// Offset: 0x550
		/// Size: 0x04
		/// </summary>
		public float MaxGlobalTimeDilation
		{
			get
			{
				return ReadSingle(0x550);
			}
			set
			{
				WriteSingle(0x550,value);
			}
		}
		
		/// <summary>
		/// Name: MinUndilatedFrameTime
		/// Type: FloatProperty
		/// Offset: 0x554
		/// Size: 0x04
		/// </summary>
		public float MinUndilatedFrameTime
		{
			get
			{
				return ReadSingle(0x554);
			}
			set
			{
				WriteSingle(0x554,value);
			}
		}
		
		/// <summary>
		/// Name: MaxUndilatedFrameTime
		/// Type: FloatProperty
		/// Offset: 0x558
		/// Size: 0x04
		/// </summary>
		public float MaxUndilatedFrameTime
		{
			get
			{
				return ReadSingle(0x558);
			}
			set
			{
				WriteSingle(0x558,value);
			}
		}
		
		/// <summary>
		/// Name: Pauser
		/// Type: ObjectProperty
		/// Offset: 0x560
		/// Size: 0x08
		/// </summary>
		public APlayerState Pauser => ReadUObject<APlayerState>(0x560);
		
		/// <summary>
		/// Name: bHighPriorityLoading
		/// Type: BoolProperty
		/// Offset: 0x568
		/// Size: 0x01
		/// </summary>
		public bool bHighPriorityLoading => (ReadByte(0x0568) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bHighPriorityLoadingLocal
		/// Type: BoolProperty
		/// Offset: 0x568
		/// Size: 0x01
		/// </summary>
		public bool bHighPriorityLoadingLocal => (ReadByte(0x0568) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: ReplicationViewers
		/// Type: TArray<FNetViewer>
		/// Offset: 0x570
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FNetViewer> ReplicationViewers => new TArray<FNetViewer>(BaseAddress+0x570);
		
		/// <summary>
		/// Name: AssetUserData
		/// Type: TArray<UAssetUserData>
		/// Offset: 0x580
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UAssetUserData> AssetUserData => new TArray<UAssetUserData>(BaseAddress+0x580);
		
	}


	/// <summary>
	/// AConanWorldSettings:AWorldSettings
	/// Size: 0x608
	/// Properties: 17
	/// </summary>
	public class AConanWorldSettings:AWorldSettings
	{
		public override int ObjectSize => 1544;
		/// <summary>
		/// Name: BuildingGridSize
		/// Type: IntProperty
		/// Offset: 0x590
		/// Size: 0x04
		/// </summary>
		public int BuildingGridSize
		{
			get
			{
				return ReadInt32(0x590);
			}
			set
			{
				WriteInt32(0x590,value);
			}
		}
		
		/// <summary>
		/// Name: FoliageGridSize
		/// Type: IntProperty
		/// Offset: 0x594
		/// Size: 0x04
		/// </summary>
		public int FoliageGridSize
		{
			get
			{
				return ReadInt32(0x594);
			}
			set
			{
				WriteInt32(0x594,value);
			}
		}
		
		/// <summary>
		/// Name: FoliagePhysicsRangeClient
		/// Type: FloatProperty
		/// Offset: 0x598
		/// Size: 0x04
		/// </summary>
		public float FoliagePhysicsRangeClient
		{
			get
			{
				return ReadSingle(0x598);
			}
			set
			{
				WriteSingle(0x598,value);
			}
		}
		
		/// <summary>
		/// Name: FoliagePhysicsRangeServer
		/// Type: FloatProperty
		/// Offset: 0x59C
		/// Size: 0x04
		/// </summary>
		public float FoliagePhysicsRangeServer
		{
			get
			{
				return ReadSingle(0x59C);
			}
			set
			{
				WriteSingle(0x59C,value);
			}
		}
		
		/// <summary>
		/// Name: TetheringRangeStart
		/// Type: FloatProperty
		/// Offset: 0x5A0
		/// Size: 0x04
		/// </summary>
		public float TetheringRangeStart
		{
			get
			{
				return ReadSingle(0x5A0);
			}
			set
			{
				WriteSingle(0x5A0,value);
			}
		}
		
		/// <summary>
		/// Name: TetheringRangeEnd
		/// Type: FloatProperty
		/// Offset: 0x5A4
		/// Size: 0x04
		/// </summary>
		public float TetheringRangeEnd
		{
			get
			{
				return ReadSingle(0x5A4);
			}
			set
			{
				WriteSingle(0x5A4,value);
			}
		}
		
		/// <summary>
		/// Name: AILODBoundary
		/// Type: FloatProperty
		/// Offset: 0x5A8
		/// Size: 0x04
		/// </summary>
		public float AILODBoundary
		{
			get
			{
				return ReadSingle(0x5A8);
			}
			set
			{
				WriteSingle(0x5A8,value);
			}
		}
		
		/// <summary>
		/// Name: AILODMaxRaycastDistance
		/// Type: FloatProperty
		/// Offset: 0x5AC
		/// Size: 0x04
		/// </summary>
		public float AILODMaxRaycastDistance
		{
			get
			{
				return ReadSingle(0x5AC);
			}
			set
			{
				WriteSingle(0x5AC,value);
			}
		}
		
		/// <summary>
		/// Name: BuildingStabilityDecrease
		/// Type: IntProperty
		/// Offset: 0x5B0
		/// Size: 0x04
		/// </summary>
		public int BuildingStabilityDecrease
		{
			get
			{
				return ReadInt32(0x5B0);
			}
			set
			{
				WriteInt32(0x5B0,value);
			}
		}
		
		/// <summary>
		/// Name: NetCullDistanceScaling
		/// Type: FloatProperty
		/// Offset: 0x5B4
		/// Size: 0x04
		/// </summary>
		public float NetCullDistanceScaling
		{
			get
			{
				return ReadSingle(0x5B4);
			}
			set
			{
				WriteSingle(0x5B4,value);
			}
		}
		
		/// <summary>
		/// Name: StaticNavigation
		/// Type: ObjectProperty
		/// Offset: 0x5B8
		/// Size: 0x08
		/// </summary>
		public UStaticNavigation StaticNavigation => ReadUObject<UStaticNavigation>(0x5B8);
		
		/// <summary>
		/// Name: SpawnProbabilityBands
		/// Type: TArray<FSpawnProbabilityBand>
		/// Offset: 0x5C0
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FSpawnProbabilityBand> SpawnProbabilityBands => new TArray<FSpawnProbabilityBand>(BaseAddress+0x5C0);
		
		/// <summary>
		/// Name: SpawnProbabilityBandsListenServer
		/// Type: TArray<FSpawnProbabilityBand>
		/// Offset: 0x5D0
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FSpawnProbabilityBand> SpawnProbabilityBandsListenServer => new TArray<FSpawnProbabilityBand>(BaseAddress+0x5D0);
		
		/// <summary>
		/// Name: m_NPCRegistry
		/// Type: ObjectProperty
		/// Offset: 0x5E0
		/// Size: 0x08
		/// </summary>
		public ANPCRegistry m_NPCRegistry => ReadUObject<ANPCRegistry>(0x5E0);
		
		/// <summary>
		/// Name: m_PlayerPawnRegistry
		/// Type: ObjectProperty
		/// Offset: 0x5E8
		/// Size: 0x08
		/// </summary>
		public APlayerPawnRegistry m_PlayerPawnRegistry => ReadUObject<APlayerPawnRegistry>(0x5E8);
		
		/// <summary>
		/// Name: LandClaim
		/// Type: TArray<ALandClaim>
		/// Offset: 0x5F0
		/// Size: 0x10
		/// SubElement Size: 0x448
		/// </summary>
		public TArray<ALandClaim> LandClaim => new TArray<ALandClaim>(BaseAddress+0x5F0);
		
		/// <summary>
		/// Name: m_EnergyReceiverRegistry
		/// Type: ObjectProperty
		/// Offset: 0x600
		/// Size: 0x08
		/// </summary>
		public AEnergyReceiverRegistry m_EnergyReceiverRegistry => ReadUObject<AEnergyReceiverRegistry>(0x600);
		
	}


	/// <summary>
	/// AAILODSystem:AActor
	/// Size: 0x4E8
	/// Properties: 6
	/// </summary>
	public class AAILODSystem:AActor
	{
		public override int ObjectSize => 1256;
		/// <summary>
		/// Name: ActiveLODComponents
		/// Type: TArray<UAILODComponent>
		/// Offset: 0x3D0
		/// Size: 0x10
		/// SubElement Size: 0x190
		/// </summary>
		public TArray<UAILODComponent> ActiveLODComponents => new TArray<UAILODComponent>(BaseAddress+0x3D0);
		
		/// <summary>
		/// Name: m_AILODComponents
		/// Type: TArray<UAILODComponent>
		/// Offset: 0x3E0
		/// Size: 0x10
		/// SubElement Size: 0x190
		/// </summary>
		public TArray<UAILODComponent> m_AILODComponents => new TArray<UAILODComponent>(BaseAddress+0x3E0);
		
		/// <summary>
		/// Name: m_SuspendCallbacks
		/// Type: MapProperty
		/// Offset: 0x3F0
		/// Size: 0x50
		/// </summary>
		
		/// <summary>
		/// Name: m_LODCounter
		/// Type: IntProperty
		/// Offset: 0x444
		/// Size: 0x04
		/// </summary>
		public int m_LODCounter
		{
			get
			{
				return ReadInt32(0x444);
			}
			set
			{
				WriteInt32(0x444,value);
			}
		}
		
		/// <summary>
		/// Name: m_DebugAILODs
		/// Type: TArray<FAILODInfo>
		/// Offset: 0x458
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FAILODInfo> m_DebugAILODs => new TArray<FAILODInfo>(BaseAddress+0x458);
		
		/// <summary>
		/// Name: m_ShowAILOD
		/// Type: BoolProperty
		/// Offset: 0x468
		/// Size: 0x01
		/// </summary>
		public bool m_ShowAILOD => (ReadByte(0x0468) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UAISense:UObject
	/// Size: 0x120
	/// Properties: 5
	/// </summary>
	public class UAISense:UObject
	{
		public override int ObjectSize => 288;
		/// <summary>
		/// Name: DefaultExpirationAge
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float DefaultExpirationAge
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: NotifyType
		/// Type: ByteProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public byte NotifyType
		{
			get
			{
				return ReadByte(0x2C);
			}
			set
			{
				WriteByte(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: bWantsNewPawnNotification
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bWantsNewPawnNotification => (ReadByte(0x0030) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bAutoRegisterAllPawnsAsSources
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bAutoRegisterAllPawnsAsSources => (ReadByte(0x0030) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: PerceptionSystemInstance
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UAIPerceptionSystem PerceptionSystemInstance => ReadUObject<UAIPerceptionSystem>(0x38);
		
	}


	/// <summary>
	/// UAISense_NewSight:UAISense
	/// Size: 0x260
	/// Properties: 4
	/// </summary>
	public class UAISense_NewSight:UAISense
	{
		public override int ObjectSize => 608;
		/// <summary>
		/// Name: MaxTracesPerTick
		/// Type: IntProperty
		/// Offset: 0x248
		/// Size: 0x04
		/// </summary>
		public int MaxTracesPerTick
		{
			get
			{
				return ReadInt32(0x248);
			}
			set
			{
				WriteInt32(0x248,value);
			}
		}
		
		/// <summary>
		/// Name: HighImportanceQueryDistanceThreshold
		/// Type: FloatProperty
		/// Offset: 0x24C
		/// Size: 0x04
		/// </summary>
		public float HighImportanceQueryDistanceThreshold
		{
			get
			{
				return ReadSingle(0x24C);
			}
			set
			{
				WriteSingle(0x24C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxQueryImportance
		/// Type: FloatProperty
		/// Offset: 0x254
		/// Size: 0x04
		/// </summary>
		public float MaxQueryImportance
		{
			get
			{
				return ReadSingle(0x254);
			}
			set
			{
				WriteSingle(0x254,value);
			}
		}
		
		/// <summary>
		/// Name: SightLimitQueryImportance
		/// Type: FloatProperty
		/// Offset: 0x258
		/// Size: 0x04
		/// </summary>
		public float SightLimitQueryImportance
		{
			get
			{
				return ReadSingle(0x258);
			}
			set
			{
				WriteSingle(0x258,value);
			}
		}
		
	}


	/// <summary>
	/// UAISenseConfig:UObject
	/// Size: 0x48
	/// Properties: 3
	/// </summary>
	public class UAISenseConfig:UObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: DebugColor
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public FColor DebugColor => ReadStruct<FColor>(0x28);
		
		/// <summary>
		/// Name: MaxAge
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float MaxAge
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: bStartsEnabled
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bStartsEnabled => (ReadByte(0x0030) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UAISenseConfig_NewSight:UAISenseConfig
	/// Size: 0x68
	/// Properties: 6
	/// </summary>
	public class UAISenseConfig_NewSight:UAISenseConfig
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: Implementation
		/// Type: ClassProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SightRadius
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float SightRadius
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: LoseSightRadius
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float LoseSightRadius
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: PeripheralVisionAngleDegrees
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float PeripheralVisionAngleDegrees
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: DetectionByAffiliation
		/// Type: StructProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public FAISenseAffiliationFilter DetectionByAffiliation => ReadStruct<FAISenseAffiliationFilter>(0x5C);
		
		/// <summary>
		/// Name: AutoSuccessRangeFromLastSeenLocation
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float AutoSuccessRangeFromLastSeenLocation
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
	}


	/// <summary>
	/// UAnimationFunctionLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UAnimationFunctionLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAvatarSpawnerInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UAvatarSpawnerInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// APlaceableBase:ABuildableBase
	/// Size: 0x4D8
	/// Properties: 10
	/// </summary>
	public class APlaceableBase:ABuildableBase
	{
		public override int ObjectSize => 1240;
		/// <summary>
		/// Name: CraftingGroups
		/// Type: TArray<>
		/// Offset: 0x490
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: DestroyActorOnZeroHealth
		/// Type: BoolProperty
		/// Offset: 0x4A0
		/// Size: 0x01
		/// </summary>
		public bool DestroyActorOnZeroHealth
		{
			get
			{
				return ReadBool(0x4A0);
			}
			set
			{
				WriteBool(0x4A0,value);
			}
		}
		
		/// <summary>
		/// Name: DropInventoryContentOnDestroyed
		/// Type: BoolProperty
		/// Offset: 0x4A1
		/// Size: 0x01
		/// </summary>
		public bool DropInventoryContentOnDestroyed
		{
			get
			{
				return ReadBool(0x4A1);
			}
			set
			{
				WriteBool(0x4A1,value);
			}
		}
		
		/// <summary>
		/// Name: LootContainerClass
		/// Type: ClassProperty
		/// Offset: 0x4A8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: DoNotRespectOwnership
		/// Type: BoolProperty
		/// Offset: 0x4B0
		/// Size: 0x01
		/// </summary>
		public bool DoNotRespectOwnership
		{
			get
			{
				return ReadBool(0x4B0);
			}
			set
			{
				WriteBool(0x4B0,value);
			}
		}
		
		/// <summary>
		/// Name: CanTakeDamage
		/// Type: BoolProperty
		/// Offset: 0x4B1
		/// Size: 0x01
		/// </summary>
		public bool CanTakeDamage
		{
			get
			{
				return ReadBool(0x4B1);
			}
			set
			{
				WriteBool(0x4B1,value);
			}
		}
		
		/// <summary>
		/// Name: IgnoreCanDamagePlayerOwnedStucture
		/// Type: BoolProperty
		/// Offset: 0x4B2
		/// Size: 0x01
		/// </summary>
		public bool IgnoreCanDamagePlayerOwnedStucture
		{
			get
			{
				return ReadBool(0x4B2);
			}
			set
			{
				WriteBool(0x4B2,value);
			}
		}
		
		/// <summary>
		/// Name: UpgradeTargets
		/// Type: TArray<>
		/// Offset: 0x4B8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: HasHitGround
		/// Type: BoolProperty
		/// Offset: 0x4C8
		/// Size: 0x01
		/// </summary>
		public bool HasHitGround
		{
			get
			{
				return ReadBool(0x4C8);
			}
			set
			{
				WriteBool(0x4C8,value);
			}
		}
		
		/// <summary>
		/// Name: AttachedToModule
		/// Type: ObjectProperty
		/// Offset: 0x4D0
		/// Size: 0x08
		/// </summary>
		public UBuildingModuleData AttachedToModule => ReadUObject<UBuildingModuleData>(0x4D0);
		
	}


	/// <summary>
	/// UBuildSystemComponent:UActorComponent
	/// Size: 0x1A0
	/// Properties: 23
	/// </summary>
	public class UBuildSystemComponent:UActorComponent
	{
		public override int ObjectSize => 416;
		/// <summary>
		/// Name: IsBuilding
		/// Type: BoolProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public bool IsBuilding
		{
			get
			{
				return ReadBool(0xD8);
			}
			set
			{
				WriteBool(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: developerMode
		/// Type: BoolProperty
		/// Offset: 0xD9
		/// Size: 0x01
		/// </summary>
		public bool developerMode
		{
			get
			{
				return ReadBool(0xD9);
			}
			set
			{
				WriteBool(0xD9,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentBuildBrushClass
		/// Type: ClassProperty
		/// Offset: 0xE0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SourceBuildItem
		/// Type: ObjectProperty
		/// Offset: 0xE8
		/// Size: 0x08
		/// </summary>
		public UBuildingItem SourceBuildItem => ReadUObject<UBuildingItem>(0xE8);
		
		/// <summary>
		/// Name: buildingMode
		/// Type: ByteProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public byte buildingMode
		{
			get
			{
				return ReadByte(0xF0);
			}
			set
			{
				WriteByte(0xF0,value);
			}
		}
		
		/// <summary>
		/// Name: ValidSocketResults
		/// Type: TArray<FValidSocketResult>
		/// Offset: 0xF8
		/// Size: 0x10
		/// SubElement Size: 0x80
		/// </summary>
		public TArray<FValidSocketResult> ValidSocketResults => new TArray<FValidSocketResult>(BaseAddress+0xF8);
		
		/// <summary>
		/// Name: CurrentSocketResultIndex
		/// Type: IntProperty
		/// Offset: 0x108
		/// Size: 0x04
		/// </summary>
		public int CurrentSocketResultIndex
		{
			get
			{
				return ReadInt32(0x108);
			}
			set
			{
				WriteInt32(0x108,value);
			}
		}
		
		/// <summary>
		/// Name: BuildingBrushBase
		/// Type: ObjectProperty
		/// Offset: 0x110
		/// Size: 0x08
		/// </summary>
		public ABuildableBase BuildingBrushBase => ReadUObject<ABuildableBase>(0x110);
		
		/// <summary>
		/// Name: PlacementGhostRadius
		/// Type: FloatProperty
		/// Offset: 0x118
		/// Size: 0x04
		/// </summary>
		public float PlacementGhostRadius
		{
			get
			{
				return ReadSingle(0x118);
			}
			set
			{
				WriteSingle(0x118,value);
			}
		}
		
		/// <summary>
		/// Name: PlacementGhostObjectType
		/// Type: ByteProperty
		/// Offset: 0x11C
		/// Size: 0x01
		/// </summary>
		public byte PlacementGhostObjectType
		{
			get
			{
				return ReadByte(0x11C);
			}
			set
			{
				WriteByte(0x11C,value);
			}
		}
		
		/// <summary>
		/// Name: PlacementGhostLineTraceChannel
		/// Type: ByteProperty
		/// Offset: 0x11D
		/// Size: 0x01
		/// </summary>
		public byte PlacementGhostLineTraceChannel
		{
			get
			{
				return ReadByte(0x11D);
			}
			set
			{
				WriteByte(0x11D,value);
			}
		}
		
		/// <summary>
		/// Name: PlacementGhostMaterial
		/// Type: ObjectProperty
		/// Offset: 0x120
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface PlacementGhostMaterial => ReadUObject<UMaterialInterface>(0x120);
		
		/// <summary>
		/// Name: PlacementUpgradeGhostMaterial
		/// Type: ObjectProperty
		/// Offset: 0x128
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface PlacementUpgradeGhostMaterial => ReadUObject<UMaterialInterface>(0x128);
		
		/// <summary>
		/// Name: ShowBuildingSockets
		/// Type: BoolProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public bool ShowBuildingSockets
		{
			get
			{
				return ReadBool(0x130);
			}
			set
			{
				WriteBool(0x130,value);
			}
		}
		
		/// <summary>
		/// Name: IconDismantle
		/// Type: ObjectProperty
		/// Offset: 0x138
		/// Size: 0x08
		/// </summary>
		public UTexture2D IconDismantle => ReadUObject<UTexture2D>(0x138);
		
		/// <summary>
		/// Name: ghostBuildingComponent
		/// Type: ObjectProperty
		/// Offset: 0x140
		/// Size: 0x08
		/// </summary>
		public UInstancedStaticMeshComponent ghostBuildingComponent => ReadUObject<UInstancedStaticMeshComponent>(0x140);
		
		/// <summary>
		/// Name: ghostBuildingUpgradeablesComponent
		/// Type: ObjectProperty
		/// Offset: 0x148
		/// Size: 0x08
		/// </summary>
		public UInstancedStaticMeshComponent ghostBuildingUpgradeablesComponent => ReadUObject<UInstancedStaticMeshComponent>(0x148);
		
		/// <summary>
		/// Name: ghostSocketResults
		/// Type: TArray<FValidSocketResult>
		/// Offset: 0x150
		/// Size: 0x10
		/// SubElement Size: 0x80
		/// </summary>
		public TArray<FValidSocketResult> ghostSocketResults => new TArray<FValidSocketResult>(BaseAddress+0x150);
		
		/// <summary>
		/// Name: invalidGhostSocketResults
		/// Type: TArray<FValidSocketResult>
		/// Offset: 0x160
		/// Size: 0x10
		/// SubElement Size: 0x80
		/// </summary>
		public TArray<FValidSocketResult> invalidGhostSocketResults => new TArray<FValidSocketResult>(BaseAddress+0x160);
		
		/// <summary>
		/// Name: ghostSocketIndexedResults
		/// Type: TArray<FValidSocketResult>
		/// Offset: 0x170
		/// Size: 0x10
		/// SubElement Size: 0x80
		/// </summary>
		public TArray<FValidSocketResult> ghostSocketIndexedResults => new TArray<FValidSocketResult>(BaseAddress+0x170);
		
		/// <summary>
		/// Name: ghostUpgradeSocketIndexedResults
		/// Type: TArray<FValidSocketResult>
		/// Offset: 0x180
		/// Size: 0x10
		/// SubElement Size: 0x80
		/// </summary>
		public TArray<FValidSocketResult> ghostUpgradeSocketIndexedResults => new TArray<FValidSocketResult>(BaseAddress+0x180);
		
		/// <summary>
		/// Name: lastGhostOrigin
		/// Type: StructProperty
		/// Offset: 0x190
		/// Size: 0x0C
		/// </summary>
		public FVector lastGhostOrigin => ReadStruct<FVector>(0x190);
		
		/// <summary>
		/// Name: m_bDirtyGhosts
		/// Type: BoolProperty
		/// Offset: 0x19C
		/// Size: 0x01
		/// </summary>
		public bool m_bDirtyGhosts
		{
			get
			{
				return ReadBool(0x19C);
			}
			set
			{
				WriteBool(0x19C,value);
			}
		}
		
	}


	/// <summary>
	/// UCharacterCustomizationComponent:UActorComponent
	/// Size: 0x430
	/// Properties: 7
	/// </summary>
	public class UCharacterCustomizationComponent:UActorComponent
	{
		public override int ObjectSize => 1072;
		/// <summary>
		/// Name: Layout
		/// Type: StructProperty
		/// Offset: 0xD8
		/// Size: 0x124
		/// </summary>
		public FCharacterLayout Layout => ReadStruct<FCharacterLayout>(0xD8);
		
		/// <summary>
		/// Name: LayoutHash
		/// Type: IntProperty
		/// Offset: 0x1FC
		/// Size: 0x04
		/// </summary>
		public int LayoutHash
		{
			get
			{
				return ReadInt32(0x1FC);
			}
			set
			{
				WriteInt32(0x1FC,value);
			}
		}
		
		/// <summary>
		/// Name: Meshes
		/// Type: StructProperty
		/// Offset: 0x200
		/// Size: 0x50
		/// </summary>
		public FCharacterResolvedMeshes Meshes => ReadStruct<FCharacterResolvedMeshes>(0x200);
		
		/// <summary>
		/// Name: MaterialParams
		/// Type: StructProperty
		/// Offset: 0x250
		/// Size: 0xF8
		/// </summary>
		public FCharacterMaterialParams MaterialParams => ReadStruct<FCharacterMaterialParams>(0x250);
		
		/// <summary>
		/// Name: Master
		/// Type: ObjectProperty
		/// Offset: 0x348
		/// Size: 0x08
		/// </summary>
		public USkeletalMeshComponent Master => ReadUObject<USkeletalMeshComponent>(0x348);
		
		/// <summary>
		/// Name: SkeletalMeshes
		/// Type: TArray<USkeletalMeshComponent>
		/// Offset: 0x350
		/// Size: 0x10
		/// SubElement Size: 0xD20
		/// </summary>
		public TArray<USkeletalMeshComponent> SkeletalMeshes => new TArray<USkeletalMeshComponent>(BaseAddress+0x350);
		
		/// <summary>
		/// Name: SpawnInitialHidden
		/// Type: BoolProperty
		/// Offset: 0x360
		/// Size: 0x01
		/// </summary>
		public bool SpawnInitialHidden
		{
			get
			{
				return ReadBool(0x360);
			}
			set
			{
				WriteBool(0x360,value);
			}
		}
		
	}


	/// <summary>
	/// UCharacterFunctionLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UCharacterFunctionLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// ACharacterCreationActorBase:AActor
	/// Size: 0x4B0
	/// Properties: 6
	/// </summary>
	public class ACharacterCreationActorBase:AActor
	{
		public override int ObjectSize => 1200;
		/// <summary>
		/// Name: m_Spotlight
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public USpotLightComponent m_Spotlight => ReadUObject<USpotLightComponent>(0x3E0);
		
		/// <summary>
		/// Name: m_Voice
		/// Type: ObjectProperty
		/// Offset: 0x3E8
		/// Size: 0x08
		/// </summary>
		public UAudioComponent m_Voice => ReadUObject<UAudioComponent>(0x3E8);
		
		/// <summary>
		/// Name: MaxIntensity
		/// Type: FloatProperty
		/// Offset: 0x3F0
		/// Size: 0x04
		/// </summary>
		public float MaxIntensity
		{
			get
			{
				return ReadSingle(0x3F0);
			}
			set
			{
				WriteSingle(0x3F0,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultIntensity
		/// Type: FloatProperty
		/// Offset: 0x3F4
		/// Size: 0x04
		/// </summary>
		public float DefaultIntensity
		{
			get
			{
				return ReadSingle(0x3F4);
			}
			set
			{
				WriteSingle(0x3F4,value);
			}
		}
		
		/// <summary>
		/// Name: m_MeshComponents
		/// Type: ObjectProperty
		/// Offset: 0x460
		/// Size: 0x08
		/// </summary>
		public USkeletalMeshComponent m_MeshComponents => ReadUObject<USkeletalMeshComponent>(0x460);
		
		/// <summary>
		/// Name: m_CharacterBase
		/// Type: ObjectProperty
		/// Offset: 0x4A8
		/// Size: 0x08
		/// </summary>
		public USkeletalMeshComponent m_CharacterBase => ReadUObject<USkeletalMeshComponent>(0x4A8);
		
	}


	/// <summary>
	/// UCharacterCreationBase:UWindowRoot
	/// Size: 0x378
	/// Properties: 0
	/// </summary>
	public class UCharacterCreationBase:UWindowRoot
	{
		public override int ObjectSize => 888;
	}


	/// <summary>
	/// ACharacterLodSystem:AInfo
	/// Size: 0x4D0
	/// Properties: 9
	/// </summary>
	public class ACharacterLodSystem:AInfo
	{
		public override int ObjectSize => 1232;
		/// <summary>
		/// Name: SimultaneousIK
		/// Type: IntProperty
		/// Offset: 0x3D0
		/// Size: 0x04
		/// </summary>
		public int SimultaneousIK
		{
			get
			{
				return ReadInt32(0x3D0);
			}
			set
			{
				WriteInt32(0x3D0,value);
			}
		}
		
		/// <summary>
		/// Name: IKLodUpdateInterval
		/// Type: FloatProperty
		/// Offset: 0x3D4
		/// Size: 0x04
		/// </summary>
		public float IKLodUpdateInterval
		{
			get
			{
				return ReadSingle(0x3D4);
			}
			set
			{
				WriteSingle(0x3D4,value);
			}
		}
		
		/// <summary>
		/// Name: IKRange
		/// Type: FloatProperty
		/// Offset: 0x3D8
		/// Size: 0x04
		/// </summary>
		public float IKRange
		{
			get
			{
				return ReadSingle(0x3D8);
			}
			set
			{
				WriteSingle(0x3D8,value);
			}
		}
		
		/// <summary>
		/// Name: SimultaneousHighQualityHair
		/// Type: IntProperty
		/// Offset: 0x3DC
		/// Size: 0x04
		/// </summary>
		public int SimultaneousHighQualityHair
		{
			get
			{
				return ReadInt32(0x3DC);
			}
			set
			{
				WriteInt32(0x3DC,value);
			}
		}
		
		/// <summary>
		/// Name: HairLodUpdateInterval
		/// Type: FloatProperty
		/// Offset: 0x3E0
		/// Size: 0x04
		/// </summary>
		public float HairLodUpdateInterval
		{
			get
			{
				return ReadSingle(0x3E0);
			}
			set
			{
				WriteSingle(0x3E0,value);
			}
		}
		
		/// <summary>
		/// Name: IKActors
		/// Type: TArray<AActor>
		/// Offset: 0x3F0
		/// Size: 0x10
		/// SubElement Size: 0x3D0
		/// </summary>
		public TArray<AActor> IKActors => new TArray<AActor>(BaseAddress+0x3F0);
		
		/// <summary>
		/// Name: HighQualityHairComponents
		/// Type: TArray<UCharacterCustomizationComponent>
		/// Offset: 0x408
		/// Size: 0x10
		/// SubElement Size: 0x430
		/// </summary>
		public TArray<UCharacterCustomizationComponent> HighQualityHairComponents => new TArray<UCharacterCustomizationComponent>(BaseAddress+0x408);
		
		/// <summary>
		/// Name: m_EnabledClothSimActors
		/// Type: MapProperty
		/// Offset: 0x430
		/// Size: 0x50
		/// </summary>
		
		/// <summary>
		/// Name: m_AllClothSimActors
		/// Type: MapProperty
		/// Offset: 0x480
		/// Size: 0x50
		/// </summary>
		
	}


	/// <summary>
	/// UChatCommandHelper:UObject
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class UChatCommandHelper:UObject
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UCollisionStaticMeshComponent:UStaticMeshComponent
	/// Size: 0x6E0
	/// Properties: 0
	/// </summary>
	public class UCollisionStaticMeshComponent:UStaticMeshComponent
	{
		public override int ObjectSize => 1760;
	}


	/// <summary>
	/// UCollisionSystemComponent:UActorComponent
	/// Size: 0x1A0
	/// Properties: 7
	/// </summary>
	public class UCollisionSystemComponent:UActorComponent
	{
		public override int ObjectSize => 416;
		/// <summary>
		/// Name: DefendingActors
		/// Type: TArray<AActor>
		/// Offset: 0xD8
		/// Size: 0x10
		/// SubElement Size: 0x3D0
		/// </summary>
		public TArray<AActor> DefendingActors => new TArray<AActor>(BaseAddress+0xD8);
		
		/// <summary>
		/// Name: HasDoneLineTrace
		/// Type: BoolProperty
		/// Offset: 0xE8
		/// Size: 0x01
		/// </summary>
		public bool HasDoneLineTrace
		{
			get
			{
				return ReadBool(0xE8);
			}
			set
			{
				WriteBool(0xE8,value);
			}
		}
		
		/// <summary>
		/// Name: LineTraceHitResult
		/// Type: StructProperty
		/// Offset: 0xF0
		/// Size: 0x88
		/// </summary>
		public FHitResult LineTraceHitResult => ReadStruct<FHitResult>(0xF0);
		
		/// <summary>
		/// Name: SweepHitResults
		/// Type: TArray<FHitResult>
		/// Offset: 0x178
		/// Size: 0x10
		/// SubElement Size: 0x88
		/// </summary>
		public TArray<FHitResult> SweepHitResults => new TArray<FHitResult>(BaseAddress+0x178);
		
		/// <summary>
		/// Name: FinishedFeedbackResults
		/// Type: TArray<FHitResult>
		/// Offset: 0x188
		/// Size: 0x10
		/// SubElement Size: 0x88
		/// </summary>
		public TArray<FHitResult> FinishedFeedbackResults => new TArray<FHitResult>(BaseAddress+0x188);
		
		/// <summary>
		/// Name: HasSweepHitAnything
		/// Type: BoolProperty
		/// Offset: 0x198
		/// Size: 0x01
		/// </summary>
		public bool HasSweepHitAnything
		{
			get
			{
				return ReadBool(0x198);
			}
			set
			{
				WriteBool(0x198,value);
			}
		}
		
		/// <summary>
		/// Name: LineTraceWasAHit
		/// Type: BoolProperty
		/// Offset: 0x199
		/// Size: 0x01
		/// </summary>
		public bool LineTraceWasAHit
		{
			get
			{
				return ReadBool(0x199);
			}
			set
			{
				WriteBool(0x199,value);
			}
		}
		
	}


	/// <summary>
	/// UPointOfInterestCollectionHelper:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UPointOfInterestCollectionHelper:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// AController:AActor
	/// Size: 0x438
	/// Properties: 8
	/// </summary>
	public class AController:AActor
	{
		public override int ObjectSize => 1080;
		/// <summary>
		/// Name: Pawn
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public APawn Pawn => ReadUObject<APawn>(0x3D8);
		
		/// <summary>
		/// Name: Character
		/// Type: ObjectProperty
		/// Offset: 0x3E8
		/// Size: 0x08
		/// </summary>
		public ACharacter Character => ReadUObject<ACharacter>(0x3E8);
		
		/// <summary>
		/// Name: PlayerState
		/// Type: ObjectProperty
		/// Offset: 0x3F0
		/// Size: 0x08
		/// </summary>
		public APlayerState PlayerState => ReadUObject<APlayerState>(0x3F0);
		
		/// <summary>
		/// Name: TransformComponent
		/// Type: ObjectProperty
		/// Offset: 0x3F8
		/// Size: 0x08
		/// </summary>
		public USceneComponent TransformComponent => ReadUObject<USceneComponent>(0x3F8);
		
		/// <summary>
		/// Name: ControlRotation
		/// Type: StructProperty
		/// Offset: 0x400
		/// Size: 0x0C
		/// </summary>
		public FRotator ControlRotation => ReadStruct<FRotator>(0x400);
		
		/// <summary>
		/// Name: bAttachToPawn
		/// Type: BoolProperty
		/// Offset: 0x40C
		/// Size: 0x01
		/// </summary>
		public bool bAttachToPawn => (ReadByte(0x040C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bIsPlayerController
		/// Type: BoolProperty
		/// Offset: 0x40C
		/// Size: 0x01
		/// </summary>
		public bool bIsPlayerController => (ReadByte(0x040C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: StateName
		/// Type: NameProperty
		/// Offset: 0x420
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// AAIController:AController
	/// Size: 0x4B8
	/// Properties: 12
	/// </summary>
	public class AAIController:AController
	{
		public override int ObjectSize => 1208;
		/// <summary>
		/// Name: bStopAILogicOnUnposses
		/// Type: BoolProperty
		/// Offset: 0x468
		/// Size: 0x01
		/// </summary>
		public bool bStopAILogicOnUnposses => (ReadByte(0x0468) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bLOSflag
		/// Type: BoolProperty
		/// Offset: 0x468
		/// Size: 0x01
		/// </summary>
		public bool bLOSflag => (ReadByte(0x0468) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bSkipExtraLOSChecks
		/// Type: BoolProperty
		/// Offset: 0x468
		/// Size: 0x01
		/// </summary>
		public bool bSkipExtraLOSChecks => (ReadByte(0x0468) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bAllowStrafe
		/// Type: BoolProperty
		/// Offset: 0x468
		/// Size: 0x01
		/// </summary>
		public bool bAllowStrafe => (ReadByte(0x0468) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bWantsPlayerState
		/// Type: BoolProperty
		/// Offset: 0x468
		/// Size: 0x01
		/// </summary>
		public bool bWantsPlayerState => (ReadByte(0x0468) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bSetControlRotationFromPawnOrientation
		/// Type: BoolProperty
		/// Offset: 0x468
		/// Size: 0x01
		/// </summary>
		public bool bSetControlRotationFromPawnOrientation => (ReadByte(0x0468) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: PathFollowingComponent
		/// Type: ObjectProperty
		/// Offset: 0x470
		/// Size: 0x08
		/// </summary>
		public UPathFollowingComponent PathFollowingComponent => ReadUObject<UPathFollowingComponent>(0x470);
		
		/// <summary>
		/// Name: BrainComponent
		/// Type: ObjectProperty
		/// Offset: 0x478
		/// Size: 0x08
		/// </summary>
		public UBrainComponent BrainComponent => ReadUObject<UBrainComponent>(0x478);
		
		/// <summary>
		/// Name: PerceptionComponent
		/// Type: ObjectProperty
		/// Offset: 0x480
		/// Size: 0x08
		/// </summary>
		public UAIPerceptionComponent PerceptionComponent => ReadUObject<UAIPerceptionComponent>(0x480);
		
		/// <summary>
		/// Name: ActionsComp
		/// Type: ObjectProperty
		/// Offset: 0x488
		/// Size: 0x08
		/// </summary>
		public UPawnActionsComponent ActionsComp => ReadUObject<UPawnActionsComponent>(0x488);
		
		/// <summary>
		/// Name: Blackboard
		/// Type: ObjectProperty
		/// Offset: 0x490
		/// Size: 0x08
		/// </summary>
		public UBlackboardComponent Blackboard => ReadUObject<UBlackboardComponent>(0x490);
		
		/// <summary>
		/// Name: CachedGameplayTasksComponent
		/// Type: ObjectProperty
		/// Offset: 0x498
		/// Size: 0x08
		/// </summary>
		public UGameplayTasksComponent CachedGameplayTasksComponent => ReadUObject<UGameplayTasksComponent>(0x498);
		
	}


	/// <summary>
	/// AConanAIController:AAIController
	/// Size: 0x5A0
	/// Properties: 2
	/// </summary>
	public class AConanAIController:AAIController
	{
		public override int ObjectSize => 1440;
		/// <summary>
		/// Name: PointOfInterestCollection
		/// Type: StructProperty
		/// Offset: 0x4C0
		/// Size: 0xC0
		/// </summary>
		public FPointOfInterestCollection PointOfInterestCollection => ReadStruct<FPointOfInterestCollection>(0x4C0);
		
		/// <summary>
		/// Name: DeferredBTAsset
		/// Type: ObjectProperty
		/// Offset: 0x580
		/// Size: 0x08
		/// </summary>
		public UBehaviorTree DeferredBTAsset => ReadUObject<UBehaviorTree>(0x580);
		
	}


	/// <summary>
	/// AConanAmbientSound:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class AConanAmbientSound:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: AudioComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UConanAudioComponent AudioComponent => ReadUObject<UConanAudioComponent>(0x3D0);
		
	}


	/// <summary>
	/// UAudioComponent:USceneComponent
	/// Size: 0x420
	/// Properties: 25
	/// </summary>
	public class UAudioComponent:USceneComponent
	{
		public override int ObjectSize => 1056;
		/// <summary>
		/// Name: Sound
		/// Type: ObjectProperty
		/// Offset: 0x218
		/// Size: 0x08
		/// </summary>
		public USoundBase Sound => ReadUObject<USoundBase>(0x218);
		
		/// <summary>
		/// Name: InstanceParameters
		/// Type: TArray<FAudioComponentParam>
		/// Offset: 0x220
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FAudioComponentParam> InstanceParameters => new TArray<FAudioComponentParam>(BaseAddress+0x220);
		
		/// <summary>
		/// Name: SoundClassOverride
		/// Type: ObjectProperty
		/// Offset: 0x230
		/// Size: 0x08
		/// </summary>
		public USoundClass SoundClassOverride => ReadUObject<USoundClass>(0x230);
		
		/// <summary>
		/// Name: bAutoDestroy
		/// Type: BoolProperty
		/// Offset: 0x238
		/// Size: 0x01
		/// </summary>
		public bool bAutoDestroy => (ReadByte(0x0238) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bStopWhenOwnerDestroyed
		/// Type: BoolProperty
		/// Offset: 0x238
		/// Size: 0x01
		/// </summary>
		public bool bStopWhenOwnerDestroyed => (ReadByte(0x0238) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bShouldRemainActiveIfDropped
		/// Type: BoolProperty
		/// Offset: 0x238
		/// Size: 0x01
		/// </summary>
		public bool bShouldRemainActiveIfDropped => (ReadByte(0x0238) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bAllowSpatialization
		/// Type: BoolProperty
		/// Offset: 0x238
		/// Size: 0x01
		/// </summary>
		public bool bAllowSpatialization => (ReadByte(0x0238) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverrideAttenuation
		/// Type: BoolProperty
		/// Offset: 0x238
		/// Size: 0x01
		/// </summary>
		public bool bOverrideAttenuation => (ReadByte(0x0238) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bIsUISound
		/// Type: BoolProperty
		/// Offset: 0x238
		/// Size: 0x01
		/// </summary>
		public bool bIsUISound => (ReadByte(0x0238) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bEnableLowPassFilter
		/// Type: BoolProperty
		/// Offset: 0x238
		/// Size: 0x01
		/// </summary>
		public bool bEnableLowPassFilter => (ReadByte(0x0238) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverridePriority
		/// Type: BoolProperty
		/// Offset: 0x238
		/// Size: 0x01
		/// </summary>
		public bool bOverridePriority => (ReadByte(0x0238) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: PitchModulationMin
		/// Type: FloatProperty
		/// Offset: 0x23C
		/// Size: 0x04
		/// </summary>
		public float PitchModulationMin
		{
			get
			{
				return ReadSingle(0x23C);
			}
			set
			{
				WriteSingle(0x23C,value);
			}
		}
		
		/// <summary>
		/// Name: PitchModulationMax
		/// Type: FloatProperty
		/// Offset: 0x240
		/// Size: 0x04
		/// </summary>
		public float PitchModulationMax
		{
			get
			{
				return ReadSingle(0x240);
			}
			set
			{
				WriteSingle(0x240,value);
			}
		}
		
		/// <summary>
		/// Name: VolumeModulationMin
		/// Type: FloatProperty
		/// Offset: 0x244
		/// Size: 0x04
		/// </summary>
		public float VolumeModulationMin
		{
			get
			{
				return ReadSingle(0x244);
			}
			set
			{
				WriteSingle(0x244,value);
			}
		}
		
		/// <summary>
		/// Name: VolumeModulationMax
		/// Type: FloatProperty
		/// Offset: 0x248
		/// Size: 0x04
		/// </summary>
		public float VolumeModulationMax
		{
			get
			{
				return ReadSingle(0x248);
			}
			set
			{
				WriteSingle(0x248,value);
			}
		}
		
		/// <summary>
		/// Name: VolumeMultiplier
		/// Type: FloatProperty
		/// Offset: 0x24C
		/// Size: 0x04
		/// </summary>
		public float VolumeMultiplier
		{
			get
			{
				return ReadSingle(0x24C);
			}
			set
			{
				WriteSingle(0x24C,value);
			}
		}
		
		/// <summary>
		/// Name: Priority
		/// Type: FloatProperty
		/// Offset: 0x250
		/// Size: 0x04
		/// </summary>
		public float Priority
		{
			get
			{
				return ReadSingle(0x250);
			}
			set
			{
				WriteSingle(0x250,value);
			}
		}
		
		/// <summary>
		/// Name: VolumeWeightedPriorityScale
		/// Type: FloatProperty
		/// Offset: 0x254
		/// Size: 0x04
		/// </summary>
		public float VolumeWeightedPriorityScale
		{
			get
			{
				return ReadSingle(0x254);
			}
			set
			{
				WriteSingle(0x254,value);
			}
		}
		
		/// <summary>
		/// Name: PitchMultiplier
		/// Type: FloatProperty
		/// Offset: 0x258
		/// Size: 0x04
		/// </summary>
		public float PitchMultiplier
		{
			get
			{
				return ReadSingle(0x258);
			}
			set
			{
				WriteSingle(0x258,value);
			}
		}
		
		/// <summary>
		/// Name: HighFrequencyGainMultiplier
		/// Type: FloatProperty
		/// Offset: 0x25C
		/// Size: 0x04
		/// </summary>
		public float HighFrequencyGainMultiplier
		{
			get
			{
				return ReadSingle(0x25C);
			}
			set
			{
				WriteSingle(0x25C,value);
			}
		}
		
		/// <summary>
		/// Name: LowPassFilterFrequency
		/// Type: FloatProperty
		/// Offset: 0x260
		/// Size: 0x04
		/// </summary>
		public float LowPassFilterFrequency
		{
			get
			{
				return ReadSingle(0x260);
			}
			set
			{
				WriteSingle(0x260,value);
			}
		}
		
		/// <summary>
		/// Name: AttenuationSettings
		/// Type: ObjectProperty
		/// Offset: 0x268
		/// Size: 0x08
		/// </summary>
		public USoundAttenuation AttenuationSettings => ReadUObject<USoundAttenuation>(0x268);
		
		/// <summary>
		/// Name: AttenuationOverrides
		/// Type: StructProperty
		/// Offset: 0x270
		/// Size: 0xF8
		/// </summary>
		public FAttenuationSettings AttenuationOverrides => ReadStruct<FAttenuationSettings>(0x270);
		
		/// <summary>
		/// Name: ConcurrencySettings
		/// Type: ObjectProperty
		/// Offset: 0x368
		/// Size: 0x08
		/// </summary>
		public USoundConcurrency ConcurrencySettings => ReadUObject<USoundConcurrency>(0x368);
		
		/// <summary>
		/// Name: OnQueueSubtitles
		/// Type: DelegateProperty
		/// Offset: 0x400
		/// Size: 0x10
		/// </summary>
		
	}


	/// <summary>
	/// UConanAudioComponent:UAudioComponent
	/// Size: 0x4E0
	/// Properties: 0
	/// </summary>
	public class UConanAudioComponent:UAudioComponent
	{
		public override int ObjectSize => 1248;
	}


	/// <summary>
	/// UBrainComponent:UActorComponent
	/// Size: 0x138
	/// Properties: 2
	/// </summary>
	public class UBrainComponent:UActorComponent
	{
		public override int ObjectSize => 312;
		/// <summary>
		/// Name: BlackboardComp
		/// Type: ObjectProperty
		/// Offset: 0xE0
		/// Size: 0x08
		/// </summary>
		public UBlackboardComponent BlackboardComp => ReadUObject<UBlackboardComponent>(0xE0);
		
		/// <summary>
		/// Name: AIOwner
		/// Type: ObjectProperty
		/// Offset: 0xE8
		/// Size: 0x08
		/// </summary>
		public AAIController AIOwner => ReadUObject<AAIController>(0xE8);
		
	}


	/// <summary>
	/// UBehaviorTreeComponent:UBrainComponent
	/// Size: 0x270
	/// Properties: 1
	/// </summary>
	public class UBehaviorTreeComponent:UBrainComponent
	{
		public override int ObjectSize => 624;
		/// <summary>
		/// Name: NodeInstances
		/// Type: TArray<UBTNode>
		/// Offset: 0x158
		/// Size: 0x10
		/// SubElement Size: 0x58
		/// </summary>
		public TArray<UBTNode> NodeInstances => new TArray<UBTNode>(BaseAddress+0x158);
		
	}


	/// <summary>
	/// UConanBehaviorTreeComponent:UBehaviorTreeComponent
	/// Size: 0x278
	/// Properties: 0
	/// </summary>
	public class UConanBehaviorTreeComponent:UBehaviorTreeComponent
	{
		public override int ObjectSize => 632;
	}


	/// <summary>
	/// UActorPersistenceComponent:UPersistenceComponent
	/// Size: 0x138
	/// Properties: 1
	/// </summary>
	public class UActorPersistenceComponent:UPersistenceComponent
	{
		public override int ObjectSize => 312;
		/// <summary>
		/// Name: m_bWasLoadedFromDB
		/// Type: BoolProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public bool m_bWasLoadedFromDB
		{
			get
			{
				return ReadBool(0x130);
			}
			set
			{
				WriteBool(0x130,value);
			}
		}
		
	}


	/// <summary>
	/// UConanBuildingPersistenceComponent:UActorPersistenceComponent
	/// Size: 0x148
	/// Properties: 0
	/// </summary>
	public class UConanBuildingPersistenceComponent:UActorPersistenceComponent
	{
		public override int ObjectSize => 328;
	}


	/// <summary>
	/// USettingsEventDispatchers:UObject
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class USettingsEventDispatchers:UObject
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UUserSettingsLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UUserSettingsLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UPlayerControllerInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UPlayerControllerInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UGameItemInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UGameItemInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UGameItem:UObject
	/// Size: 0x360
	/// Properties: 24
	/// </summary>
	public class UGameItem:UObject
	{
		public override int ObjectSize => 864;
		/// <summary>
		/// Name: TypeID
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte TypeID
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: GUICategory
		/// Type: ByteProperty
		/// Offset: 0x31
		/// Size: 0x01
		/// </summary>
		public byte GUICategory
		{
			get
			{
				return ReadByte(0x31);
			}
			set
			{
				WriteByte(0x31,value);
			}
		}
		
		/// <summary>
		/// Name: TemplateId
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int TemplateId
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: Name
		/// Type: TextProperty
		/// Offset: 0x38
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: ShortDesc
		/// Type: TextProperty
		/// Offset: 0x50
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: LongDesc
		/// Type: TextProperty
		/// Offset: 0x68
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: VisualObject
		/// Type: AssetClassProperty
		/// Offset: 0xA0
		/// Size: 0x20
		/// </summary>
		
		/// <summary>
		/// Name: ActionBlueprint_Use
		/// Type: AssetClassProperty
		/// Offset: 0xC0
		/// Size: 0x20
		/// </summary>
		
		/// <summary>
		/// Name: SoundPhysicalSurface
		/// Type: ByteProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public byte SoundPhysicalSurface
		{
			get
			{
				return ReadByte(0xE0);
			}
			set
			{
				WriteByte(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: WeaponArcheType
		/// Type: ByteProperty
		/// Offset: 0xE1
		/// Size: 0x01
		/// </summary>
		public byte WeaponArcheType
		{
			get
			{
				return ReadByte(0xE1);
			}
			set
			{
				WriteByte(0xE1,value);
			}
		}
		
		/// <summary>
		/// Name: FirstModifier
		/// Type: TextProperty
		/// Offset: 0xE8
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: SecondModifier
		/// Type: TextProperty
		/// Offset: 0x100
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: ThirdModifier
		/// Type: TextProperty
		/// Offset: 0x118
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: FourthModifier
		/// Type: TextProperty
		/// Offset: 0x130
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: ActualDestructibleMesh
		/// Type: ObjectProperty
		/// Offset: 0x148
		/// Size: 0x08
		/// </summary>
		public UDestructibleMesh ActualDestructibleMesh => ReadUObject<UDestructibleMesh>(0x148);
		
		/// <summary>
		/// Name: VisualActor
		/// Type: ObjectProperty
		/// Offset: 0x150
		/// Size: 0x08
		/// </summary>
		public AInventoryItemBase VisualActor => ReadUObject<AInventoryItemBase>(0x150);
		
		/// <summary>
		/// Name: OwnerActor
		/// Type: ObjectProperty
		/// Offset: 0x158
		/// Size: 0x08
		/// </summary>
		public AActor OwnerActor => ReadUObject<AActor>(0x158);
		
		/// <summary>
		/// Name: ItemFlags
		/// Type: IntProperty
		/// Offset: 0x240
		/// Size: 0x04
		/// </summary>
		public int ItemFlags
		{
			get
			{
				return ReadInt32(0x240);
			}
			set
			{
				WriteInt32(0x240,value);
			}
		}
		
		/// <summary>
		/// Name: CompatableAmmunitions
		/// Type: TArray<>
		/// Offset: 0x248
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: m_ActualIcon
		/// Type: ObjectProperty
		/// Offset: 0x268
		/// Size: 0x08
		/// </summary>
		public UTexture2D m_ActualIcon => ReadUObject<UTexture2D>(0x268);
		
		/// <summary>
		/// Name: m_BorderIcon
		/// Type: ObjectProperty
		/// Offset: 0x270
		/// Size: 0x08
		/// </summary>
		public UTexture2D m_BorderIcon => ReadUObject<UTexture2D>(0x270);
		
		/// <summary>
		/// Name: VisualObjectClass
		/// Type: ClassProperty
		/// Offset: 0x328
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: m_OwnerInventory
		/// Type: ObjectProperty
		/// Offset: 0x338
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_OwnerInventory => ReadUObject<UItemInventory>(0x338);
		
		/// <summary>
		/// Name: m_IsEnabled
		/// Type: BoolProperty
		/// Offset: 0x340
		/// Size: 0x01
		/// </summary>
		public bool m_IsEnabled
		{
			get
			{
				return ReadBool(0x340);
			}
			set
			{
				WriteBool(0x340,value);
			}
		}
		
	}


	/// <summary>
	/// APlayerController:AController
	/// Size: 0x6C8
	/// Properties: 45
	/// </summary>
	public class APlayerController:AController
	{
		public override int ObjectSize => 1736;
		/// <summary>
		/// Name: Player
		/// Type: ObjectProperty
		/// Offset: 0x438
		/// Size: 0x08
		/// </summary>
		public UPlayer Player => ReadUObject<UPlayer>(0x438);
		
		/// <summary>
		/// Name: AcknowledgedPawn
		/// Type: ObjectProperty
		/// Offset: 0x448
		/// Size: 0x08
		/// </summary>
		public APawn AcknowledgedPawn => ReadUObject<APawn>(0x448);
		
		/// <summary>
		/// Name: ControllingDirTrackInst
		/// Type: ObjectProperty
		/// Offset: 0x450
		/// Size: 0x08
		/// </summary>
		public UInterpTrackInstDirector ControllingDirTrackInst => ReadUObject<UInterpTrackInstDirector>(0x450);
		
		/// <summary>
		/// Name: MyHUD
		/// Type: ObjectProperty
		/// Offset: 0x460
		/// Size: 0x08
		/// </summary>
		public AHUD MyHUD => ReadUObject<AHUD>(0x460);
		
		/// <summary>
		/// Name: PlayerCameraManager
		/// Type: ObjectProperty
		/// Offset: 0x468
		/// Size: 0x08
		/// </summary>
		public APlayerCameraManager PlayerCameraManager => ReadUObject<APlayerCameraManager>(0x468);
		
		/// <summary>
		/// Name: PlayerCameraManagerClass
		/// Type: ClassProperty
		/// Offset: 0x470
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bAutoManageActiveCameraTarget
		/// Type: BoolProperty
		/// Offset: 0x478
		/// Size: 0x01
		/// </summary>
		public bool bAutoManageActiveCameraTarget
		{
			get
			{
				return ReadBool(0x478);
			}
			set
			{
				WriteBool(0x478,value);
			}
		}
		
		/// <summary>
		/// Name: TargetViewRotation
		/// Type: StructProperty
		/// Offset: 0x47C
		/// Size: 0x0C
		/// </summary>
		public FRotator TargetViewRotation => ReadStruct<FRotator>(0x47C);
		
		/// <summary>
		/// Name: SmoothTargetViewRotationSpeed
		/// Type: FloatProperty
		/// Offset: 0x494
		/// Size: 0x04
		/// </summary>
		public float SmoothTargetViewRotationSpeed
		{
			get
			{
				return ReadSingle(0x494);
			}
			set
			{
				WriteSingle(0x494,value);
			}
		}
		
		/// <summary>
		/// Name: HiddenActors
		/// Type: TArray<AActor>
		/// Offset: 0x498
		/// Size: 0x10
		/// SubElement Size: 0x3D0
		/// </summary>
		public TArray<AActor> HiddenActors => new TArray<AActor>(BaseAddress+0x498);
		
		/// <summary>
		/// Name: LastSpectatorStateSynchTime
		/// Type: FloatProperty
		/// Offset: 0x4A8
		/// Size: 0x04
		/// </summary>
		public float LastSpectatorStateSynchTime
		{
			get
			{
				return ReadSingle(0x4A8);
			}
			set
			{
				WriteSingle(0x4A8,value);
			}
		}
		
		/// <summary>
		/// Name: LastSpectatorSyncLocation
		/// Type: StructProperty
		/// Offset: 0x4AC
		/// Size: 0x0C
		/// </summary>
		public FVector LastSpectatorSyncLocation => ReadStruct<FVector>(0x4AC);
		
		/// <summary>
		/// Name: LastSpectatorSyncRotation
		/// Type: StructProperty
		/// Offset: 0x4B8
		/// Size: 0x0C
		/// </summary>
		public FRotator LastSpectatorSyncRotation => ReadStruct<FRotator>(0x4B8);
		
		/// <summary>
		/// Name: ClientCap
		/// Type: IntProperty
		/// Offset: 0x4C4
		/// Size: 0x04
		/// </summary>
		public int ClientCap
		{
			get
			{
				return ReadInt32(0x4C4);
			}
			set
			{
				WriteInt32(0x4C4,value);
			}
		}
		
		/// <summary>
		/// Name: CheatManager
		/// Type: ObjectProperty
		/// Offset: 0x4C8
		/// Size: 0x08
		/// </summary>
		public UCheatManager CheatManager => ReadUObject<UCheatManager>(0x4C8);
		
		/// <summary>
		/// Name: CheatClass
		/// Type: ClassProperty
		/// Offset: 0x4D0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PlayerInput
		/// Type: ObjectProperty
		/// Offset: 0x4D8
		/// Size: 0x08
		/// </summary>
		public UPlayerInput PlayerInput => ReadUObject<UPlayerInput>(0x4D8);
		
		/// <summary>
		/// Name: ActiveForceFeedbackEffects
		/// Type: TArray<FActiveForceFeedbackEffect>
		/// Offset: 0x4E0
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FActiveForceFeedbackEffect> ActiveForceFeedbackEffects => new TArray<FActiveForceFeedbackEffect>(BaseAddress+0x4E0);
		
		/// <summary>
		/// Name: bPlayerIsWaiting
		/// Type: BoolProperty
		/// Offset: 0x570
		/// Size: 0x01
		/// </summary>
		public bool bPlayerIsWaiting => (ReadByte(0x0570) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: NetPlayerIndex
		/// Type: ByteProperty
		/// Offset: 0x574
		/// Size: 0x01
		/// </summary>
		public byte NetPlayerIndex
		{
			get
			{
				return ReadByte(0x574);
			}
			set
			{
				WriteByte(0x574,value);
			}
		}
		
		/// <summary>
		/// Name: PendingSwapConnection
		/// Type: ObjectProperty
		/// Offset: 0x578
		/// Size: 0x08
		/// </summary>
		public UNetConnection PendingSwapConnection => ReadUObject<UNetConnection>(0x578);
		
		/// <summary>
		/// Name: NetConnection
		/// Type: ObjectProperty
		/// Offset: 0x580
		/// Size: 0x08
		/// </summary>
		public UNetConnection NetConnection => ReadUObject<UNetConnection>(0x580);
		
		/// <summary>
		/// Name: InputYawScale
		/// Type: FloatProperty
		/// Offset: 0x594
		/// Size: 0x04
		/// </summary>
		public float InputYawScale
		{
			get
			{
				return ReadSingle(0x594);
			}
			set
			{
				WriteSingle(0x594,value);
			}
		}
		
		/// <summary>
		/// Name: InputPitchScale
		/// Type: FloatProperty
		/// Offset: 0x598
		/// Size: 0x04
		/// </summary>
		public float InputPitchScale
		{
			get
			{
				return ReadSingle(0x598);
			}
			set
			{
				WriteSingle(0x598,value);
			}
		}
		
		/// <summary>
		/// Name: InputRollScale
		/// Type: FloatProperty
		/// Offset: 0x59C
		/// Size: 0x04
		/// </summary>
		public float InputRollScale
		{
			get
			{
				return ReadSingle(0x59C);
			}
			set
			{
				WriteSingle(0x59C,value);
			}
		}
		
		/// <summary>
		/// Name: bShowMouseCursor
		/// Type: BoolProperty
		/// Offset: 0x5A0
		/// Size: 0x01
		/// </summary>
		public bool bShowMouseCursor => (ReadByte(0x05A0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bEnableClickEvents
		/// Type: BoolProperty
		/// Offset: 0x5A0
		/// Size: 0x01
		/// </summary>
		public bool bEnableClickEvents => (ReadByte(0x05A0) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bEnableTouchEvents
		/// Type: BoolProperty
		/// Offset: 0x5A0
		/// Size: 0x01
		/// </summary>
		public bool bEnableTouchEvents => (ReadByte(0x05A0) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bEnableMouseOverEvents
		/// Type: BoolProperty
		/// Offset: 0x5A0
		/// Size: 0x01
		/// </summary>
		public bool bEnableMouseOverEvents => (ReadByte(0x05A0) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bEnableTouchOverEvents
		/// Type: BoolProperty
		/// Offset: 0x5A0
		/// Size: 0x01
		/// </summary>
		public bool bEnableTouchOverEvents => (ReadByte(0x05A0) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bForceFeedbackEnabled
		/// Type: BoolProperty
		/// Offset: 0x5A0
		/// Size: 0x01
		/// </summary>
		public bool bForceFeedbackEnabled => (ReadByte(0x05A0) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bKeepPawnAliveOnControllerDeath
		/// Type: BoolProperty
		/// Offset: 0x5A0
		/// Size: 0x01
		/// </summary>
		public bool bKeepPawnAliveOnControllerDeath => (ReadByte(0x05A0) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: ClickEventKeys
		/// Type: TArray<FKey>
		/// Offset: 0x5A8
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FKey> ClickEventKeys => new TArray<FKey>(BaseAddress+0x5A8);
		
		/// <summary>
		/// Name: DefaultMouseCursor
		/// Type: ByteProperty
		/// Offset: 0x5B8
		/// Size: 0x01
		/// </summary>
		public byte DefaultMouseCursor
		{
			get
			{
				return ReadByte(0x5B8);
			}
			set
			{
				WriteByte(0x5B8,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentMouseCursor
		/// Type: ByteProperty
		/// Offset: 0x5B9
		/// Size: 0x01
		/// </summary>
		public byte CurrentMouseCursor
		{
			get
			{
				return ReadByte(0x5B9);
			}
			set
			{
				WriteByte(0x5B9,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultClickTraceChannel
		/// Type: ByteProperty
		/// Offset: 0x5BA
		/// Size: 0x01
		/// </summary>
		public byte DefaultClickTraceChannel
		{
			get
			{
				return ReadByte(0x5BA);
			}
			set
			{
				WriteByte(0x5BA,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentClickTraceChannel
		/// Type: ByteProperty
		/// Offset: 0x5BB
		/// Size: 0x01
		/// </summary>
		public byte CurrentClickTraceChannel
		{
			get
			{
				return ReadByte(0x5BB);
			}
			set
			{
				WriteByte(0x5BB,value);
			}
		}
		
		/// <summary>
		/// Name: HitResultTraceDistance
		/// Type: FloatProperty
		/// Offset: 0x5BC
		/// Size: 0x04
		/// </summary>
		public float HitResultTraceDistance
		{
			get
			{
				return ReadSingle(0x5BC);
			}
			set
			{
				WriteSingle(0x5BC,value);
			}
		}
		
		/// <summary>
		/// Name: InactiveStateInputComponent
		/// Type: ObjectProperty
		/// Offset: 0x640
		/// Size: 0x08
		/// </summary>
		public UInputComponent InactiveStateInputComponent => ReadUObject<UInputComponent>(0x640);
		
		/// <summary>
		/// Name: CurrentTouchInterface
		/// Type: ObjectProperty
		/// Offset: 0x660
		/// Size: 0x08
		/// </summary>
		public UTouchInterface CurrentTouchInterface => ReadUObject<UTouchInterface>(0x660);
		
		/// <summary>
		/// Name: SpectatorPawn
		/// Type: ObjectProperty
		/// Offset: 0x6A8
		/// Size: 0x08
		/// </summary>
		public ASpectatorPawn SpectatorPawn => ReadUObject<ASpectatorPawn>(0x6A8);
		
		/// <summary>
		/// Name: SpawnLocation
		/// Type: StructProperty
		/// Offset: 0x6B0
		/// Size: 0x0C
		/// </summary>
		public FVector SpawnLocation => ReadStruct<FVector>(0x6B0);
		
		/// <summary>
		/// Name: bIsLocalPlayerController
		/// Type: BoolProperty
		/// Offset: 0x6C0
		/// Size: 0x01
		/// </summary>
		public bool bIsLocalPlayerController
		{
			get
			{
				return ReadBool(0x6C0);
			}
			set
			{
				WriteBool(0x6C0,value);
			}
		}
		
		/// <summary>
		/// Name: SeamlessTravelCount
		/// Type: UInt16Property
		/// Offset: 0x6C2
		/// Size: 0x02
		/// </summary>
		public ushort SeamlessTravelCount
		{
			get
			{
				return ReadUInt16(0x6C2);
			}
			set
			{
				WriteUInt16(0x6C2,value);
			}
		}
		
		/// <summary>
		/// Name: LastCompletedSeamlessTravelCount
		/// Type: UInt16Property
		/// Offset: 0x6C4
		/// Size: 0x02
		/// </summary>
		public ushort LastCompletedSeamlessTravelCount
		{
			get
			{
				return ReadUInt16(0x6C4);
			}
			set
			{
				WriteUInt16(0x6C4,value);
			}
		}
		
	}


	/// <summary>
	/// AConanPlayerController:APlayerController
	/// Size: 0x870
	/// Properties: 9
	/// </summary>
	public class AConanPlayerController:APlayerController
	{
		public override int ObjectSize => 2160;
		/// <summary>
		/// Name: OverridenStreamingLocations
		/// Type: TArray<FVector>
		/// Offset: 0x6E0
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> OverridenStreamingLocations => new TArray<FVector>(BaseAddress+0x6E0);
		
		/// <summary>
		/// Name: m_OwnedCameraComponents
		/// Type: TArray<UCameraComponent>
		/// Offset: 0x770
		/// Size: 0x10
		/// SubElement Size: 0x640
		/// </summary>
		public TArray<UCameraComponent> m_OwnedCameraComponents => new TArray<UCameraComponent>(BaseAddress+0x770);
		
		/// <summary>
		/// Name: InitialPlayerStart
		/// Type: ObjectProperty
		/// Offset: 0x780
		/// Size: 0x08
		/// </summary>
		public APlayerStart InitialPlayerStart => ReadUObject<APlayerStart>(0x780);
		
		/// <summary>
		/// Name: UserIDFromURLOptions
		/// Type: StrProperty
		/// Offset: 0x788
		/// Size: 0x10
		/// </summary>
		public FString UserIDFromURLOptions => new FString(BaseAddress+0x788);
		
		/// <summary>
		/// Name: NetConnectionLostTimeout
		/// Type: FloatProperty
		/// Offset: 0x7A8
		/// Size: 0x04
		/// </summary>
		public float NetConnectionLostTimeout
		{
			get
			{
				return ReadSingle(0x7A8);
			}
			set
			{
				WriteSingle(0x7A8,value);
			}
		}
		
		/// <summary>
		/// Name: ConanCheatManager
		/// Type: ObjectProperty
		/// Offset: 0x7C0
		/// Size: 0x08
		/// </summary>
		public UConanCheatManager ConanCheatManager => ReadUObject<UConanCheatManager>(0x7C0);
		
		/// <summary>
		/// Name: m_PendingInventoryRequests
		/// Type: TArray<FPendingInventoryUpdate>
		/// Offset: 0x7C8
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FPendingInventoryUpdate> m_PendingInventoryRequests => new TArray<FPendingInventoryUpdate>(BaseAddress+0x7C8);
		
		/// <summary>
		/// Name: m_bShowDebugText
		/// Type: BoolProperty
		/// Offset: 0x7D8
		/// Size: 0x01
		/// </summary>
		public bool m_bShowDebugText
		{
			get
			{
				return ReadBool(0x7D8);
			}
			set
			{
				WriteBool(0x7D8,value);
			}
		}
		
		/// <summary>
		/// Name: m_IsAdmin
		/// Type: BoolProperty
		/// Offset: 0x7D9
		/// Size: 0x01
		/// </summary>
		public bool m_IsAdmin
		{
			get
			{
				return ReadBool(0x7D9);
			}
			set
			{
				WriteBool(0x7D9,value);
			}
		}
		
	}


	/// <summary>
	/// AGameSession:AInfo
	/// Size: 0x400
	/// Properties: 6
	/// </summary>
	public class AGameSession:AInfo
	{
		public override int ObjectSize => 1024;
		/// <summary>
		/// Name: MaxSpectators
		/// Type: IntProperty
		/// Offset: 0x3D0
		/// Size: 0x04
		/// </summary>
		public int MaxSpectators
		{
			get
			{
				return ReadInt32(0x3D0);
			}
			set
			{
				WriteInt32(0x3D0,value);
			}
		}
		
		/// <summary>
		/// Name: MaxPlayers
		/// Type: IntProperty
		/// Offset: 0x3D4
		/// Size: 0x04
		/// </summary>
		public int MaxPlayers
		{
			get
			{
				return ReadInt32(0x3D4);
			}
			set
			{
				WriteInt32(0x3D4,value);
			}
		}
		
		/// <summary>
		/// Name: MaxPartySize
		/// Type: IntProperty
		/// Offset: 0x3D8
		/// Size: 0x04
		/// </summary>
		public int MaxPartySize
		{
			get
			{
				return ReadInt32(0x3D8);
			}
			set
			{
				WriteInt32(0x3D8,value);
			}
		}
		
		/// <summary>
		/// Name: MaxSplitscreensPerConnection
		/// Type: ByteProperty
		/// Offset: 0x3DC
		/// Size: 0x01
		/// </summary>
		public byte MaxSplitscreensPerConnection
		{
			get
			{
				return ReadByte(0x3DC);
			}
			set
			{
				WriteByte(0x3DC,value);
			}
		}
		
		/// <summary>
		/// Name: bRequiresPushToTalk
		/// Type: BoolProperty
		/// Offset: 0x3DD
		/// Size: 0x01
		/// </summary>
		public bool bRequiresPushToTalk
		{
			get
			{
				return ReadBool(0x3DD);
			}
			set
			{
				WriteBool(0x3DD,value);
			}
		}
		
		/// <summary>
		/// Name: SessionName
		/// Type: NameProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// AConanGameSession:AGameSession
	/// Size: 0x400
	/// Properties: 0
	/// </summary>
	public class AConanGameSession:AGameSession
	{
		public override int ObjectSize => 1024;
	}


	/// <summary>
	/// AServerSettings:AInfo
	/// Size: 0x568
	/// Properties: 83
	/// </summary>
	public class AServerSettings:AInfo
	{
		public override int ObjectSize => 1384;
		/// <summary>
		/// Name: BlueprintConfigVersion
		/// Type: IntProperty
		/// Offset: 0x3D0
		/// Size: 0x04
		/// </summary>
		public int BlueprintConfigVersion
		{
			get
			{
				return ReadInt32(0x3D0);
			}
			set
			{
				WriteInt32(0x3D0,value);
			}
		}
		
		/// <summary>
		/// Name: ConfigVersion
		/// Type: IntProperty
		/// Offset: 0x3D4
		/// Size: 0x04
		/// </summary>
		public int ConfigVersion
		{
			get
			{
				return ReadInt32(0x3D4);
			}
			set
			{
				WriteInt32(0x3D4,value);
			}
		}
		
		/// <summary>
		/// Name: serverRegion
		/// Type: ByteProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public byte serverRegion
		{
			get
			{
				return ReadByte(0x3D8);
			}
			set
			{
				WriteByte(0x3D8,value);
			}
		}
		
		/// <summary>
		/// Name: PVPEnabled
		/// Type: BoolProperty
		/// Offset: 0x3D9
		/// Size: 0x01
		/// </summary>
		public bool PVPEnabled
		{
			get
			{
				return ReadBool(0x3D9);
			}
			set
			{
				WriteBool(0x3D9,value);
			}
		}
		
		/// <summary>
		/// Name: RestrictPVPTime
		/// Type: BoolProperty
		/// Offset: 0x3DA
		/// Size: 0x01
		/// </summary>
		public bool RestrictPVPTime
		{
			get
			{
				return ReadBool(0x3DA);
			}
			set
			{
				WriteBool(0x3DA,value);
			}
		}
		
		/// <summary>
		/// Name: PVPTimeWeekdayStart
		/// Type: IntProperty
		/// Offset: 0x3DC
		/// Size: 0x04
		/// </summary>
		public int PVPTimeWeekdayStart
		{
			get
			{
				return ReadInt32(0x3DC);
			}
			set
			{
				WriteInt32(0x3DC,value);
			}
		}
		
		/// <summary>
		/// Name: PVPTimeWeekdayEnd
		/// Type: IntProperty
		/// Offset: 0x3E0
		/// Size: 0x04
		/// </summary>
		public int PVPTimeWeekdayEnd
		{
			get
			{
				return ReadInt32(0x3E0);
			}
			set
			{
				WriteInt32(0x3E0,value);
			}
		}
		
		/// <summary>
		/// Name: PVPTimeWeekendStart
		/// Type: IntProperty
		/// Offset: 0x3E4
		/// Size: 0x04
		/// </summary>
		public int PVPTimeWeekendStart
		{
			get
			{
				return ReadInt32(0x3E4);
			}
			set
			{
				WriteInt32(0x3E4,value);
			}
		}
		
		/// <summary>
		/// Name: PVPTimeWeekendEnd
		/// Type: IntProperty
		/// Offset: 0x3E8
		/// Size: 0x04
		/// </summary>
		public int PVPTimeWeekendEnd
		{
			get
			{
				return ReadInt32(0x3E8);
			}
			set
			{
				WriteInt32(0x3E8,value);
			}
		}
		
		/// <summary>
		/// Name: RestrictPVPBuildingDamageTime
		/// Type: BoolProperty
		/// Offset: 0x3EC
		/// Size: 0x01
		/// </summary>
		public bool RestrictPVPBuildingDamageTime
		{
			get
			{
				return ReadBool(0x3EC);
			}
			set
			{
				WriteBool(0x3EC,value);
			}
		}
		
		/// <summary>
		/// Name: PVPBuildingDamageTimeWeekdayStart
		/// Type: IntProperty
		/// Offset: 0x3F0
		/// Size: 0x04
		/// </summary>
		public int PVPBuildingDamageTimeWeekdayStart
		{
			get
			{
				return ReadInt32(0x3F0);
			}
			set
			{
				WriteInt32(0x3F0,value);
			}
		}
		
		/// <summary>
		/// Name: PVPBuildingDamageTimeWeekdayEnd
		/// Type: IntProperty
		/// Offset: 0x3F4
		/// Size: 0x04
		/// </summary>
		public int PVPBuildingDamageTimeWeekdayEnd
		{
			get
			{
				return ReadInt32(0x3F4);
			}
			set
			{
				WriteInt32(0x3F4,value);
			}
		}
		
		/// <summary>
		/// Name: PVPBuildingDamageTimeWeekendStart
		/// Type: IntProperty
		/// Offset: 0x3F8
		/// Size: 0x04
		/// </summary>
		public int PVPBuildingDamageTimeWeekendStart
		{
			get
			{
				return ReadInt32(0x3F8);
			}
			set
			{
				WriteInt32(0x3F8,value);
			}
		}
		
		/// <summary>
		/// Name: PVPBuildingDamageTimeWeekendEnd
		/// Type: IntProperty
		/// Offset: 0x3FC
		/// Size: 0x04
		/// </summary>
		public int PVPBuildingDamageTimeWeekendEnd
		{
			get
			{
				return ReadInt32(0x3FC);
			}
			set
			{
				WriteInt32(0x3FC,value);
			}
		}
		
		/// <summary>
		/// Name: PVPBlitzServer
		/// Type: BoolProperty
		/// Offset: 0x400
		/// Size: 0x01
		/// </summary>
		public bool PVPBlitzServer
		{
			get
			{
				return ReadBool(0x400);
			}
			set
			{
				WriteBool(0x400,value);
			}
		}
		
		/// <summary>
		/// Name: NoOwnership
		/// Type: BoolProperty
		/// Offset: 0x401
		/// Size: 0x01
		/// </summary>
		public bool NoOwnership
		{
			get
			{
				return ReadBool(0x401);
			}
			set
			{
				WriteBool(0x401,value);
			}
		}
		
		/// <summary>
		/// Name: LandClaimRadiusMultiplier
		/// Type: FloatProperty
		/// Offset: 0x404
		/// Size: 0x04
		/// </summary>
		public float LandClaimRadiusMultiplier
		{
			get
			{
				return ReadSingle(0x404);
			}
			set
			{
				WriteSingle(0x404,value);
			}
		}
		
		/// <summary>
		/// Name: CanDamagePlayerOwnedStructures
		/// Type: BoolProperty
		/// Offset: 0x408
		/// Size: 0x01
		/// </summary>
		public bool CanDamagePlayerOwnedStructures
		{
			get
			{
				return ReadBool(0x408);
			}
			set
			{
				WriteBool(0x408,value);
			}
		}
		
		/// <summary>
		/// Name: AdminPassword
		/// Type: StrProperty
		/// Offset: 0x410
		/// Size: 0x10
		/// </summary>
		public FString AdminPassword => new FString(BaseAddress+0x410);
		
		/// <summary>
		/// Name: BuildingRadialDestructionForceMultiplier
		/// Type: FloatProperty
		/// Offset: 0x420
		/// Size: 0x04
		/// </summary>
		public float BuildingRadialDestructionForceMultiplier
		{
			get
			{
				return ReadSingle(0x420);
			}
			set
			{
				WriteSingle(0x420,value);
			}
		}
		
		/// <summary>
		/// Name: LogoutCharactersRemainInTheWorld
		/// Type: BoolProperty
		/// Offset: 0x424
		/// Size: 0x01
		/// </summary>
		public bool LogoutCharactersRemainInTheWorld
		{
			get
			{
				return ReadBool(0x424);
			}
			set
			{
				WriteBool(0x424,value);
			}
		}
		
		/// <summary>
		/// Name: DurabilityMultiplier
		/// Type: FloatProperty
		/// Offset: 0x428
		/// Size: 0x04
		/// </summary>
		public float DurabilityMultiplier
		{
			get
			{
				return ReadSingle(0x428);
			}
			set
			{
				WriteSingle(0x428,value);
			}
		}
		
		/// <summary>
		/// Name: DropEquipmentOnDeath
		/// Type: BoolProperty
		/// Offset: 0x42C
		/// Size: 0x01
		/// </summary>
		public bool DropEquipmentOnDeath
		{
			get
			{
				return ReadBool(0x42C);
			}
			set
			{
				WriteBool(0x42C,value);
			}
		}
		
		/// <summary>
		/// Name: EverybodyCanLootCorpse
		/// Type: BoolProperty
		/// Offset: 0x42D
		/// Size: 0x01
		/// </summary>
		public bool EverybodyCanLootCorpse
		{
			get
			{
				return ReadBool(0x42D);
			}
			set
			{
				WriteBool(0x42D,value);
			}
		}
		
		/// <summary>
		/// Name: ItemConvertionMultiplier
		/// Type: FloatProperty
		/// Offset: 0x430
		/// Size: 0x04
		/// </summary>
		public float ItemConvertionMultiplier
		{
			get
			{
				return ReadSingle(0x430);
			}
			set
			{
				WriteSingle(0x430,value);
			}
		}
		
		/// <summary>
		/// Name: DayCycleSpeedScale
		/// Type: FloatProperty
		/// Offset: 0x434
		/// Size: 0x04
		/// </summary>
		public float DayCycleSpeedScale
		{
			get
			{
				return ReadSingle(0x434);
			}
			set
			{
				WriteSingle(0x434,value);
			}
		}
		
		/// <summary>
		/// Name: DayTimeSpeedScale
		/// Type: FloatProperty
		/// Offset: 0x438
		/// Size: 0x04
		/// </summary>
		public float DayTimeSpeedScale
		{
			get
			{
				return ReadSingle(0x438);
			}
			set
			{
				WriteSingle(0x438,value);
			}
		}
		
		/// <summary>
		/// Name: NightTimeSpeedScale
		/// Type: FloatProperty
		/// Offset: 0x43C
		/// Size: 0x04
		/// </summary>
		public float NightTimeSpeedScale
		{
			get
			{
				return ReadSingle(0x43C);
			}
			set
			{
				WriteSingle(0x43C,value);
			}
		}
		
		/// <summary>
		/// Name: DawnDuskSpeedScale
		/// Type: FloatProperty
		/// Offset: 0x440
		/// Size: 0x04
		/// </summary>
		public float DawnDuskSpeedScale
		{
			get
			{
				return ReadSingle(0x440);
			}
			set
			{
				WriteSingle(0x440,value);
			}
		}
		
		/// <summary>
		/// Name: ClientCatchUpTime
		/// Type: FloatProperty
		/// Offset: 0x444
		/// Size: 0x04
		/// </summary>
		public float ClientCatchUpTime
		{
			get
			{
				return ReadSingle(0x444);
			}
			set
			{
				WriteSingle(0x444,value);
			}
		}
		
		/// <summary>
		/// Name: UseClientCatchUpTime
		/// Type: BoolProperty
		/// Offset: 0x448
		/// Size: 0x01
		/// </summary>
		public bool UseClientCatchUpTime
		{
			get
			{
				return ReadBool(0x448);
			}
			set
			{
				WriteBool(0x448,value);
			}
		}
		
		/// <summary>
		/// Name: PlayerHealthMultiplier
		/// Type: FloatProperty
		/// Offset: 0x44C
		/// Size: 0x04
		/// </summary>
		public float PlayerHealthMultiplier
		{
			get
			{
				return ReadSingle(0x44C);
			}
			set
			{
				WriteSingle(0x44C,value);
			}
		}
		
		/// <summary>
		/// Name: PlayerStaminaMultiplier
		/// Type: FloatProperty
		/// Offset: 0x450
		/// Size: 0x04
		/// </summary>
		public float PlayerStaminaMultiplier
		{
			get
			{
				return ReadSingle(0x450);
			}
			set
			{
				WriteSingle(0x450,value);
			}
		}
		
		/// <summary>
		/// Name: StaminaCostMultiplier
		/// Type: FloatProperty
		/// Offset: 0x454
		/// Size: 0x04
		/// </summary>
		public float StaminaCostMultiplier
		{
			get
			{
				return ReadSingle(0x454);
			}
			set
			{
				WriteSingle(0x454,value);
			}
		}
		
		/// <summary>
		/// Name: ItemSpoilRateScale
		/// Type: FloatProperty
		/// Offset: 0x458
		/// Size: 0x04
		/// </summary>
		public float ItemSpoilRateScale
		{
			get
			{
				return ReadSingle(0x458);
			}
			set
			{
				WriteSingle(0x458,value);
			}
		}
		
		/// <summary>
		/// Name: HarvestAmountMultiplier
		/// Type: FloatProperty
		/// Offset: 0x45C
		/// Size: 0x04
		/// </summary>
		public float HarvestAmountMultiplier
		{
			get
			{
				return ReadSingle(0x45C);
			}
			set
			{
				WriteSingle(0x45C,value);
			}
		}
		
		/// <summary>
		/// Name: ResourceRespawnSpeedMultiplier
		/// Type: FloatProperty
		/// Offset: 0x460
		/// Size: 0x04
		/// </summary>
		public float ResourceRespawnSpeedMultiplier
		{
			get
			{
				return ReadSingle(0x460);
			}
			set
			{
				WriteSingle(0x460,value);
			}
		}
		
		/// <summary>
		/// Name: NPCMindReadingMode
		/// Type: ByteProperty
		/// Offset: 0x464
		/// Size: 0x01
		/// </summary>
		public byte NPCMindReadingMode
		{
			get
			{
				return ReadByte(0x464);
			}
			set
			{
				WriteByte(0x464,value);
			}
		}
		
		/// <summary>
		/// Name: PathFollowingSendsAngularVelocity
		/// Type: BoolProperty
		/// Offset: 0x465
		/// Size: 0x01
		/// </summary>
		public bool PathFollowingSendsAngularVelocity
		{
			get
			{
				return ReadBool(0x465);
			}
			set
			{
				WriteBool(0x465,value);
			}
		}
		
		/// <summary>
		/// Name: UnconsciousTimeSeconds
		/// Type: FloatProperty
		/// Offset: 0x468
		/// Size: 0x04
		/// </summary>
		public float UnconsciousTimeSeconds
		{
			get
			{
				return ReadSingle(0x468);
			}
			set
			{
				WriteSingle(0x468,value);
			}
		}
		
		/// <summary>
		/// Name: ConciousnessDamageMultiplier
		/// Type: FloatProperty
		/// Offset: 0x46C
		/// Size: 0x04
		/// </summary>
		public float ConciousnessDamageMultiplier
		{
			get
			{
				return ReadSingle(0x46C);
			}
			set
			{
				WriteSingle(0x46C,value);
			}
		}
		
		/// <summary>
		/// Name: BuildingDecayTimePerScore
		/// Type: FloatProperty
		/// Offset: 0x470
		/// Size: 0x04
		/// </summary>
		public float BuildingDecayTimePerScore
		{
			get
			{
				return ReadSingle(0x470);
			}
			set
			{
				WriteSingle(0x470,value);
			}
		}
		
		/// <summary>
		/// Name: MaxBuildingDecayTime
		/// Type: FloatProperty
		/// Offset: 0x474
		/// Size: 0x04
		/// </summary>
		public float MaxBuildingDecayTime
		{
			get
			{
				return ReadSingle(0x474);
			}
			set
			{
				WriteSingle(0x474,value);
			}
		}
		
		/// <summary>
		/// Name: BuildingDecayRateModifier
		/// Type: FloatProperty
		/// Offset: 0x478
		/// Size: 0x04
		/// </summary>
		public float BuildingDecayRateModifier
		{
			get
			{
				return ReadSingle(0x478);
			}
			set
			{
				WriteSingle(0x478,value);
			}
		}
		
		/// <summary>
		/// Name: DecayCleanupTimeMultiplier
		/// Type: FloatProperty
		/// Offset: 0x47C
		/// Size: 0x04
		/// </summary>
		public float DecayCleanupTimeMultiplier
		{
			get
			{
				return ReadSingle(0x47C);
			}
			set
			{
				WriteSingle(0x47C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxDecayTimeToAutoDemolish
		/// Type: FloatProperty
		/// Offset: 0x480
		/// Size: 0x04
		/// </summary>
		public float MaxDecayTimeToAutoDemolish
		{
			get
			{
				return ReadSingle(0x480);
			}
			set
			{
				WriteSingle(0x480,value);
			}
		}
		
		/// <summary>
		/// Name: ValidatePhysNavWalkWithRaycast
		/// Type: BoolProperty
		/// Offset: 0x484
		/// Size: 0x01
		/// </summary>
		public bool ValidatePhysNavWalkWithRaycast
		{
			get
			{
				return ReadBool(0x484);
			}
			set
			{
				WriteBool(0x484,value);
			}
		}
		
		/// <summary>
		/// Name: LocalNavMeshVisualizationFrequency
		/// Type: FloatProperty
		/// Offset: 0x488
		/// Size: 0x04
		/// </summary>
		public float LocalNavMeshVisualizationFrequency
		{
			get
			{
				return ReadSingle(0x488);
			}
			set
			{
				WriteSingle(0x488,value);
			}
		}
		
		/// <summary>
		/// Name: UseLocalQuadraticAngularVelocityPrediction
		/// Type: BoolProperty
		/// Offset: 0x48C
		/// Size: 0x01
		/// </summary>
		public bool UseLocalQuadraticAngularVelocityPrediction
		{
			get
			{
				return ReadBool(0x48C);
			}
			set
			{
				WriteBool(0x48C,value);
			}
		}
		
		/// <summary>
		/// Name: LQAVPUseTime
		/// Type: FloatProperty
		/// Offset: 0x490
		/// Size: 0x04
		/// </summary>
		public float LQAVPUseTime
		{
			get
			{
				return ReadSingle(0x490);
			}
			set
			{
				WriteSingle(0x490,value);
			}
		}
		
		/// <summary>
		/// Name: LQAVPFadeTime
		/// Type: FloatProperty
		/// Offset: 0x494
		/// Size: 0x04
		/// </summary>
		public float LQAVPFadeTime
		{
			get
			{
				return ReadSingle(0x494);
			}
			set
			{
				WriteSingle(0x494,value);
			}
		}
		
		/// <summary>
		/// Name: LQAVPMethod
		/// Type: ByteProperty
		/// Offset: 0x498
		/// Size: 0x01
		/// </summary>
		public byte LQAVPMethod
		{
			get
			{
				return ReadByte(0x498);
			}
			set
			{
				WriteByte(0x498,value);
			}
		}
		
		/// <summary>
		/// Name: NetworkSimulatedSmoothRotationTimeWithLQAVP
		/// Type: FloatProperty
		/// Offset: 0x49C
		/// Size: 0x04
		/// </summary>
		public float NetworkSimulatedSmoothRotationTimeWithLQAVP
		{
			get
			{
				return ReadSingle(0x49C);
			}
			set
			{
				WriteSingle(0x49C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxNudity
		/// Type: ByteProperty
		/// Offset: 0x4A0
		/// Size: 0x01
		/// </summary>
		public byte MaxNudity
		{
			get
			{
				return ReadByte(0x4A0);
			}
			set
			{
				WriteByte(0x4A0,value);
			}
		}
		
		/// <summary>
		/// Name: ServerCommunity
		/// Type: ByteProperty
		/// Offset: 0x4A1
		/// Size: 0x01
		/// </summary>
		public byte ServerCommunity
		{
			get
			{
				return ReadByte(0x4A1);
			}
			set
			{
				WriteByte(0x4A1,value);
			}
		}
		
		/// <summary>
		/// Name: clanMaxSize
		/// Type: IntProperty
		/// Offset: 0x4A4
		/// Size: 0x04
		/// </summary>
		public int clanMaxSize
		{
			get
			{
				return ReadInt32(0x4A4);
			}
			set
			{
				WriteInt32(0x4A4,value);
			}
		}
		
		/// <summary>
		/// Name: IsLoadErrorsFatal
		/// Type: BoolProperty
		/// Offset: 0x4A8
		/// Size: 0x01
		/// </summary>
		public bool IsLoadErrorsFatal
		{
			get
			{
				return ReadBool(0x4A8);
			}
			set
			{
				WriteBool(0x4A8,value);
			}
		}
		
		/// <summary>
		/// Name: ChatHasGlobal
		/// Type: BoolProperty
		/// Offset: 0x4A9
		/// Size: 0x01
		/// </summary>
		public bool ChatHasGlobal
		{
			get
			{
				return ReadBool(0x4A9);
			}
			set
			{
				WriteBool(0x4A9,value);
			}
		}
		
		/// <summary>
		/// Name: ChatLocalRadius
		/// Type: FloatProperty
		/// Offset: 0x4AC
		/// Size: 0x04
		/// </summary>
		public float ChatLocalRadius
		{
			get
			{
				return ReadSingle(0x4AC);
			}
			set
			{
				WriteSingle(0x4AC,value);
			}
		}
		
		/// <summary>
		/// Name: ChatMaxMessageLength
		/// Type: IntProperty
		/// Offset: 0x4B0
		/// Size: 0x04
		/// </summary>
		public int ChatMaxMessageLength
		{
			get
			{
				return ReadInt32(0x4B0);
			}
			set
			{
				WriteInt32(0x4B0,value);
			}
		}
		
		/// <summary>
		/// Name: ChatFloodControlAheadCounter
		/// Type: IntProperty
		/// Offset: 0x4B4
		/// Size: 0x04
		/// </summary>
		public int ChatFloodControlAheadCounter
		{
			get
			{
				return ReadInt32(0x4B4);
			}
			set
			{
				WriteInt32(0x4B4,value);
			}
		}
		
		/// <summary>
		/// Name: serverVoiceChat
		/// Type: ByteProperty
		/// Offset: 0x4B8
		/// Size: 0x01
		/// </summary>
		public byte serverVoiceChat
		{
			get
			{
				return ReadByte(0x4B8);
			}
			set
			{
				WriteByte(0x4B8,value);
			}
		}
		
		/// <summary>
		/// Name: EnableSandStorm
		/// Type: BoolProperty
		/// Offset: 0x4B9
		/// Size: 0x01
		/// </summary>
		public bool EnableSandStorm
		{
			get
			{
				return ReadBool(0x4B9);
			}
			set
			{
				WriteBool(0x4B9,value);
			}
		}
		
		/// <summary>
		/// Name: AvatarsDisabled
		/// Type: BoolProperty
		/// Offset: 0x4BA
		/// Size: 0x01
		/// </summary>
		public bool AvatarsDisabled
		{
			get
			{
				return ReadBool(0x4BA);
			}
			set
			{
				WriteBool(0x4BA,value);
			}
		}
		
		/// <summary>
		/// Name: RestrictAvatarSummoningTime
		/// Type: BoolProperty
		/// Offset: 0x4BB
		/// Size: 0x01
		/// </summary>
		public bool RestrictAvatarSummoningTime
		{
			get
			{
				return ReadBool(0x4BB);
			}
			set
			{
				WriteBool(0x4BB,value);
			}
		}
		
		/// <summary>
		/// Name: AvatarSummoningTimeWeekdayStart
		/// Type: IntProperty
		/// Offset: 0x4BC
		/// Size: 0x04
		/// </summary>
		public int AvatarSummoningTimeWeekdayStart
		{
			get
			{
				return ReadInt32(0x4BC);
			}
			set
			{
				WriteInt32(0x4BC,value);
			}
		}
		
		/// <summary>
		/// Name: AvatarSummoningTimeWeekdayEnd
		/// Type: IntProperty
		/// Offset: 0x4C0
		/// Size: 0x04
		/// </summary>
		public int AvatarSummoningTimeWeekdayEnd
		{
			get
			{
				return ReadInt32(0x4C0);
			}
			set
			{
				WriteInt32(0x4C0,value);
			}
		}
		
		/// <summary>
		/// Name: AvatarSummoningTimeWeekendStart
		/// Type: IntProperty
		/// Offset: 0x4C4
		/// Size: 0x04
		/// </summary>
		public int AvatarSummoningTimeWeekendStart
		{
			get
			{
				return ReadInt32(0x4C4);
			}
			set
			{
				WriteInt32(0x4C4,value);
			}
		}
		
		/// <summary>
		/// Name: AvatarSummoningTimeWeekendEnd
		/// Type: IntProperty
		/// Offset: 0x4C8
		/// Size: 0x04
		/// </summary>
		public int AvatarSummoningTimeWeekendEnd
		{
			get
			{
				return ReadInt32(0x4C8);
			}
			set
			{
				WriteInt32(0x4C8,value);
			}
		}
		
		/// <summary>
		/// Name: AvatarLifetime
		/// Type: FloatProperty
		/// Offset: 0x4CC
		/// Size: 0x04
		/// </summary>
		public float AvatarLifetime
		{
			get
			{
				return ReadSingle(0x4CC);
			}
			set
			{
				WriteSingle(0x4CC,value);
			}
		}
		
		/// <summary>
		/// Name: AvatarSummonTime
		/// Type: FloatProperty
		/// Offset: 0x4D0
		/// Size: 0x04
		/// </summary>
		public float AvatarSummonTime
		{
			get
			{
				return ReadSingle(0x4D0);
			}
			set
			{
				WriteSingle(0x4D0,value);
			}
		}
		
		/// <summary>
		/// Name: IsBattlEyeEnabled
		/// Type: BoolProperty
		/// Offset: 0x4D4
		/// Size: 0x01
		/// </summary>
		public bool IsBattlEyeEnabled
		{
			get
			{
				return ReadBool(0x4D4);
			}
			set
			{
				WriteBool(0x4D4,value);
			}
		}
		
		/// <summary>
		/// Name: IsVACEnabled
		/// Type: BoolProperty
		/// Offset: 0x4D5
		/// Size: 0x01
		/// </summary>
		public bool IsVACEnabled
		{
			get
			{
				return ReadBool(0x4D5);
			}
			set
			{
				WriteBool(0x4D5,value);
			}
		}
		
		/// <summary>
		/// Name: RegionAllowAfrica
		/// Type: BoolProperty
		/// Offset: 0x4DC
		/// Size: 0x01
		/// </summary>
		public bool RegionAllowAfrica
		{
			get
			{
				return ReadBool(0x4DC);
			}
			set
			{
				WriteBool(0x4DC,value);
			}
		}
		
		/// <summary>
		/// Name: RegionAllowAsia
		/// Type: BoolProperty
		/// Offset: 0x4DD
		/// Size: 0x01
		/// </summary>
		public bool RegionAllowAsia
		{
			get
			{
				return ReadBool(0x4DD);
			}
			set
			{
				WriteBool(0x4DD,value);
			}
		}
		
		/// <summary>
		/// Name: RegionAllowCentralEurope
		/// Type: BoolProperty
		/// Offset: 0x4DE
		/// Size: 0x01
		/// </summary>
		public bool RegionAllowCentralEurope
		{
			get
			{
				return ReadBool(0x4DE);
			}
			set
			{
				WriteBool(0x4DE,value);
			}
		}
		
		/// <summary>
		/// Name: RegionAllowEasternEurope
		/// Type: BoolProperty
		/// Offset: 0x4DF
		/// Size: 0x01
		/// </summary>
		public bool RegionAllowEasternEurope
		{
			get
			{
				return ReadBool(0x4DF);
			}
			set
			{
				WriteBool(0x4DF,value);
			}
		}
		
		/// <summary>
		/// Name: RegionAllowWesternEurope
		/// Type: BoolProperty
		/// Offset: 0x4E0
		/// Size: 0x01
		/// </summary>
		public bool RegionAllowWesternEurope
		{
			get
			{
				return ReadBool(0x4E0);
			}
			set
			{
				WriteBool(0x4E0,value);
			}
		}
		
		/// <summary>
		/// Name: RegionAllowNorthAmerica
		/// Type: BoolProperty
		/// Offset: 0x4E1
		/// Size: 0x01
		/// </summary>
		public bool RegionAllowNorthAmerica
		{
			get
			{
				return ReadBool(0x4E1);
			}
			set
			{
				WriteBool(0x4E1,value);
			}
		}
		
		/// <summary>
		/// Name: RegionAllowOceania
		/// Type: BoolProperty
		/// Offset: 0x4E2
		/// Size: 0x01
		/// </summary>
		public bool RegionAllowOceania
		{
			get
			{
				return ReadBool(0x4E2);
			}
			set
			{
				WriteBool(0x4E2,value);
			}
		}
		
		/// <summary>
		/// Name: RegionAllowSouthAmerica
		/// Type: BoolProperty
		/// Offset: 0x4E3
		/// Size: 0x01
		/// </summary>
		public bool RegionAllowSouthAmerica
		{
			get
			{
				return ReadBool(0x4E3);
			}
			set
			{
				WriteBool(0x4E3,value);
			}
		}
		
		/// <summary>
		/// Name: RegionBlockList
		/// Type: StrProperty
		/// Offset: 0x4E8
		/// Size: 0x10
		/// </summary>
		public FString RegionBlockList => new FString(BaseAddress+0x4E8);
		
		/// <summary>
		/// Name: ServerModList
		/// Type: StrProperty
		/// Offset: 0x4F8
		/// Size: 0x10
		/// </summary>
		public FString ServerModList => new FString(BaseAddress+0x4F8);
		
	}


	/// <summary>
	/// UServerInfoBase:URootWidget
	/// Size: 0x548
	/// Properties: 6
	/// </summary>
	public class UServerInfoBase:URootWidget
	{
		public override int ObjectSize => 1352;
		/// <summary>
		/// Name: m_Session
		/// Type: StructProperty
		/// Offset: 0x308
		/// Size: 0xC8
		/// </summary>
		public FBlueprintSessionResult m_Session => ReadStruct<FBlueprintSessionResult>(0x308);
		
		/// <summary>
		/// Name: m_IsBattlEyeEnabled
		/// Type: BoolProperty
		/// Offset: 0x3D0
		/// Size: 0x01
		/// </summary>
		public bool m_IsBattlEyeEnabled
		{
			get
			{
				return ReadBool(0x3D0);
			}
			set
			{
				WriteBool(0x3D0,value);
			}
		}
		
		/// <summary>
		/// Name: m_IsVACEnabled
		/// Type: BoolProperty
		/// Offset: 0x3D1
		/// Size: 0x01
		/// </summary>
		public bool m_IsVACEnabled
		{
			get
			{
				return ReadBool(0x3D1);
			}
			set
			{
				WriteBool(0x3D1,value);
			}
		}
		
		/// <summary>
		/// Name: m_ServerModList
		/// Type: StructProperty
		/// Offset: 0x3D8
		/// Size: 0x18
		/// </summary>
		public FServerModList m_ServerModList => ReadStruct<FServerModList>(0x3D8);
		
		/// <summary>
		/// Name: m_IsValid
		/// Type: BoolProperty
		/// Offset: 0x3F0
		/// Size: 0x01
		/// </summary>
		public bool m_IsValid
		{
			get
			{
				return ReadBool(0x3F0);
			}
			set
			{
				WriteBool(0x3F0,value);
			}
		}
		
		/// <summary>
		/// Name: m_Entry
		/// Type: StructProperty
		/// Offset: 0x468
		/// Size: 0xD8
		/// </summary>
		public FServerListViewEntry m_Entry => ReadStruct<FServerListViewEntry>(0x468);
		
	}


	/// <summary>
	/// UFuncomGenericLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UFuncomGenericLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UGuildInviteBase:UWindowRoot
	/// Size: 0x400
	/// Properties: 2
	/// </summary>
	public class UGuildInviteBase:UWindowRoot
	{
		public override int ObjectSize => 1024;
		/// <summary>
		/// Name: ListEntryClass
		/// Type: ClassProperty
		/// Offset: 0x3C0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: m_GuildId
		/// Type: ObjectProperty
		/// Offset: 0x3F0
		/// Size: 0x08
		/// </summary>
		public UUniqueID m_GuildId => ReadUObject<UUniqueID>(0x3F0);
		
	}


	/// <summary>
	/// AGuild:AInfo
	/// Size: 0x570
	/// Properties: 6
	/// </summary>
	public class AGuild:AInfo
	{
		public override int ObjectSize => 1392;
		/// <summary>
		/// Name: m_GuildId
		/// Type: ObjectProperty
		/// Offset: 0x4D0
		/// Size: 0x08
		/// </summary>
		public UUniqueID m_GuildId => ReadUObject<UUniqueID>(0x4D0);
		
		/// <summary>
		/// Name: m_GuildName
		/// Type: StrProperty
		/// Offset: 0x4D8
		/// Size: 0x10
		/// </summary>
		public FString m_GuildName => new FString(BaseAddress+0x4D8);
		
		/// <summary>
		/// Name: m_MessageOfTheDay
		/// Type: TextProperty
		/// Offset: 0x4E8
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: m_GuildMasterPlayerId
		/// Type: Int64Property
		/// Offset: 0x500
		/// Size: 0x08
		/// </summary>
		public long m_GuildMasterPlayerId
		{
			get
			{
				return ReadInt64(0x500);
			}
			set
			{
				WriteInt64(0x500,value);
			}
		}
		
		/// <summary>
		/// Name: m_GuildMembers
		/// Type: TArray<FPlayerInfo>
		/// Offset: 0x508
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FPlayerInfo> m_GuildMembers => new TArray<FPlayerInfo>(BaseAddress+0x508);
		
		/// <summary>
		/// Name: m_GuildEvents
		/// Type: TArray<FEventInfo>
		/// Offset: 0x518
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FEventInfo> m_GuildEvents => new TArray<FEventInfo>(BaseAddress+0x518);
		
	}


	/// <summary>
	/// APawn:AActor
	/// Size: 0x430
	/// Properties: 14
	/// </summary>
	public class APawn:AActor
	{
		public override int ObjectSize => 1072;
		/// <summary>
		/// Name: bUseControllerRotationPitch
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bUseControllerRotationPitch => (ReadByte(0x03D8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUseControllerRotationYaw
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bUseControllerRotationYaw => (ReadByte(0x03D8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bUseControllerRotationRoll
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bUseControllerRotationRoll => (ReadByte(0x03D8) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bCanAffectNavigationGeneration
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bCanAffectNavigationGeneration => (ReadByte(0x03D8) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: BaseEyeHeight
		/// Type: FloatProperty
		/// Offset: 0x3DC
		/// Size: 0x04
		/// </summary>
		public float BaseEyeHeight
		{
			get
			{
				return ReadSingle(0x3DC);
			}
			set
			{
				WriteSingle(0x3DC,value);
			}
		}
		
		/// <summary>
		/// Name: AutoPossessPlayer
		/// Type: ByteProperty
		/// Offset: 0x3E0
		/// Size: 0x01
		/// </summary>
		public byte AutoPossessPlayer
		{
			get
			{
				return ReadByte(0x3E0);
			}
			set
			{
				WriteByte(0x3E0,value);
			}
		}
		
		/// <summary>
		/// Name: AutoPossessAI
		/// Type: ByteProperty
		/// Offset: 0x3E1
		/// Size: 0x01
		/// </summary>
		public byte AutoPossessAI
		{
			get
			{
				return ReadByte(0x3E1);
			}
			set
			{
				WriteByte(0x3E1,value);
			}
		}
		
		/// <summary>
		/// Name: AIControllerClass
		/// Type: ClassProperty
		/// Offset: 0x3E8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PlayerState
		/// Type: ObjectProperty
		/// Offset: 0x3F0
		/// Size: 0x08
		/// </summary>
		public APlayerState PlayerState => ReadUObject<APlayerState>(0x3F0);
		
		/// <summary>
		/// Name: RemoteViewPitch
		/// Type: ByteProperty
		/// Offset: 0x3F8
		/// Size: 0x01
		/// </summary>
		public byte RemoteViewPitch
		{
			get
			{
				return ReadByte(0x3F8);
			}
			set
			{
				WriteByte(0x3F8,value);
			}
		}
		
		/// <summary>
		/// Name: LastHitBy
		/// Type: ObjectProperty
		/// Offset: 0x400
		/// Size: 0x08
		/// </summary>
		public AController LastHitBy => ReadUObject<AController>(0x400);
		
		/// <summary>
		/// Name: Controller
		/// Type: ObjectProperty
		/// Offset: 0x408
		/// Size: 0x08
		/// </summary>
		public AController Controller => ReadUObject<AController>(0x408);
		
		/// <summary>
		/// Name: ControlInputVector
		/// Type: StructProperty
		/// Offset: 0x418
		/// Size: 0x0C
		/// </summary>
		public FVector ControlInputVector => ReadStruct<FVector>(0x418);
		
		/// <summary>
		/// Name: LastControlInputVector
		/// Type: StructProperty
		/// Offset: 0x424
		/// Size: 0x0C
		/// </summary>
		public FVector LastControlInputVector => ReadStruct<FVector>(0x424);
		
	}


	/// <summary>
	/// ACharacter:APawn
	/// Size: 0x7E0
	/// Properties: 27
	/// </summary>
	public class ACharacter:APawn
	{
		public override int ObjectSize => 2016;
		/// <summary>
		/// Name: Mesh
		/// Type: ObjectProperty
		/// Offset: 0x430
		/// Size: 0x08
		/// </summary>
		public USkeletalMeshComponent Mesh => ReadUObject<USkeletalMeshComponent>(0x430);
		
		/// <summary>
		/// Name: CharacterMovement
		/// Type: ObjectProperty
		/// Offset: 0x438
		/// Size: 0x08
		/// </summary>
		public UCharacterMovementComponent CharacterMovement => ReadUObject<UCharacterMovementComponent>(0x438);
		
		/// <summary>
		/// Name: CapsuleComponent
		/// Type: ObjectProperty
		/// Offset: 0x440
		/// Size: 0x08
		/// </summary>
		public UCapsuleComponent CapsuleComponent => ReadUObject<UCapsuleComponent>(0x440);
		
		/// <summary>
		/// Name: BasedMovement
		/// Type: StructProperty
		/// Offset: 0x448
		/// Size: 0x30
		/// </summary>
		public FBasedMovementInfo BasedMovement => ReadStruct<FBasedMovementInfo>(0x448);
		
		/// <summary>
		/// Name: ReplicatedBasedMovement
		/// Type: StructProperty
		/// Offset: 0x478
		/// Size: 0x30
		/// </summary>
		public FBasedMovementInfo ReplicatedBasedMovement => ReadStruct<FBasedMovementInfo>(0x478);
		
		/// <summary>
		/// Name: AnimRootMotionTranslationScale
		/// Type: FloatProperty
		/// Offset: 0x4A8
		/// Size: 0x04
		/// </summary>
		public float AnimRootMotionTranslationScale
		{
			get
			{
				return ReadSingle(0x4A8);
			}
			set
			{
				WriteSingle(0x4A8,value);
			}
		}
		
		/// <summary>
		/// Name: BaseTranslationOffset
		/// Type: StructProperty
		/// Offset: 0x4AC
		/// Size: 0x0C
		/// </summary>
		public FVector BaseTranslationOffset => ReadStruct<FVector>(0x4AC);
		
		/// <summary>
		/// Name: BaseRotationOffset
		/// Type: StructProperty
		/// Offset: 0x4C0
		/// Size: 0x10
		/// </summary>
		public FQuat BaseRotationOffset => ReadStruct<FQuat>(0x4C0);
		
		/// <summary>
		/// Name: ReplicatedServerLastTransformUpdateTimeStamp
		/// Type: FloatProperty
		/// Offset: 0x4D0
		/// Size: 0x04
		/// </summary>
		public float ReplicatedServerLastTransformUpdateTimeStamp
		{
			get
			{
				return ReadSingle(0x4D0);
			}
			set
			{
				WriteSingle(0x4D0,value);
			}
		}
		
		/// <summary>
		/// Name: ReplicatedMovementMode
		/// Type: ByteProperty
		/// Offset: 0x4D4
		/// Size: 0x01
		/// </summary>
		public byte ReplicatedMovementMode
		{
			get
			{
				return ReadByte(0x4D4);
			}
			set
			{
				WriteByte(0x4D4,value);
			}
		}
		
		/// <summary>
		/// Name: bInBaseReplication
		/// Type: BoolProperty
		/// Offset: 0x4D5
		/// Size: 0x01
		/// </summary>
		public bool bInBaseReplication
		{
			get
			{
				return ReadBool(0x4D5);
			}
			set
			{
				WriteBool(0x4D5,value);
			}
		}
		
		/// <summary>
		/// Name: CrouchedEyeHeight
		/// Type: FloatProperty
		/// Offset: 0x4D8
		/// Size: 0x04
		/// </summary>
		public float CrouchedEyeHeight
		{
			get
			{
				return ReadSingle(0x4D8);
			}
			set
			{
				WriteSingle(0x4D8,value);
			}
		}
		
		/// <summary>
		/// Name: bIsCrouched
		/// Type: BoolProperty
		/// Offset: 0x4DC
		/// Size: 0x01
		/// </summary>
		public bool bIsCrouched => (ReadByte(0x04DC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bPressedJump
		/// Type: BoolProperty
		/// Offset: 0x4DC
		/// Size: 0x01
		/// </summary>
		public bool bPressedJump => (ReadByte(0x04DC) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bClientUpdating
		/// Type: BoolProperty
		/// Offset: 0x4DC
		/// Size: 0x01
		/// </summary>
		public bool bClientUpdating => (ReadByte(0x04DC) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bClientWasFalling
		/// Type: BoolProperty
		/// Offset: 0x4DC
		/// Size: 0x01
		/// </summary>
		public bool bClientWasFalling => (ReadByte(0x04DC) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bClientResimulateRootMotion
		/// Type: BoolProperty
		/// Offset: 0x4DC
		/// Size: 0x01
		/// </summary>
		public bool bClientResimulateRootMotion => (ReadByte(0x04DC) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bClientResimulateRootMotionSources
		/// Type: BoolProperty
		/// Offset: 0x4DC
		/// Size: 0x01
		/// </summary>
		public bool bClientResimulateRootMotionSources => (ReadByte(0x04DC) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bSimGravityDisabled
		/// Type: BoolProperty
		/// Offset: 0x4DC
		/// Size: 0x01
		/// </summary>
		public bool bSimGravityDisabled => (ReadByte(0x04DC) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bClientCheckEncroachmentOnNetUpdate
		/// Type: BoolProperty
		/// Offset: 0x4DC
		/// Size: 0x01
		/// </summary>
		public bool bClientCheckEncroachmentOnNetUpdate => (ReadByte(0x04DC) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bServerMoveIgnoreRootMotion
		/// Type: BoolProperty
		/// Offset: 0x4DD
		/// Size: 0x01
		/// </summary>
		public bool bServerMoveIgnoreRootMotion => (ReadByte(0x04DD) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: JumpKeyHoldTime
		/// Type: FloatProperty
		/// Offset: 0x4E0
		/// Size: 0x04
		/// </summary>
		public float JumpKeyHoldTime
		{
			get
			{
				return ReadSingle(0x4E0);
			}
			set
			{
				WriteSingle(0x4E0,value);
			}
		}
		
		/// <summary>
		/// Name: JumpMaxHoldTime
		/// Type: FloatProperty
		/// Offset: 0x4E4
		/// Size: 0x04
		/// </summary>
		public float JumpMaxHoldTime
		{
			get
			{
				return ReadSingle(0x4E4);
			}
			set
			{
				WriteSingle(0x4E4,value);
			}
		}
		
		/// <summary>
		/// Name: SavedRootMotion
		/// Type: StructProperty
		/// Offset: 0x528
		/// Size: 0x100
		/// </summary>
		public FRootMotionSourceGroup SavedRootMotion => ReadStruct<FRootMotionSourceGroup>(0x528);
		
		/// <summary>
		/// Name: ClientRootMotionParams
		/// Type: StructProperty
		/// Offset: 0x630
		/// Size: 0x40
		/// </summary>
		public FRootMotionMovementParams ClientRootMotionParams => ReadStruct<FRootMotionMovementParams>(0x630);
		
		/// <summary>
		/// Name: RootMotionRepMoves
		/// Type: TArray<FSimulatedRootMotionReplicatedMove>
		/// Offset: 0x670
		/// Size: 0x10
		/// SubElement Size: 0x168
		/// </summary>
		public TArray<FSimulatedRootMotionReplicatedMove> RootMotionRepMoves => new TArray<FSimulatedRootMotionReplicatedMove>(BaseAddress+0x670);
		
		/// <summary>
		/// Name: RepRootMotion
		/// Type: StructProperty
		/// Offset: 0x680
		/// Size: 0x160
		/// </summary>
		public FRepRootMotionMontage RepRootMotion => ReadStruct<FRepRootMotionMontage>(0x680);
		
	}


	/// <summary>
	/// AConanCharacter:ACharacter
	/// Size: 0xA60
	/// Properties: 21
	/// </summary>
	public class AConanCharacter:ACharacter
	{
		public override int ObjectSize => 2656;
		/// <summary>
		/// Name: m_InteractingActor
		/// Type: ObjectProperty
		/// Offset: 0x7F0
		/// Size: 0x08
		/// </summary>
		public AActor m_InteractingActor => ReadUObject<AActor>(0x7F0);
		
		/// <summary>
		/// Name: WeaponChangeDisabled
		/// Type: BoolProperty
		/// Offset: 0x800
		/// Size: 0x01
		/// </summary>
		public bool WeaponChangeDisabled
		{
			get
			{
				return ReadBool(0x800);
			}
			set
			{
				WriteBool(0x800,value);
			}
		}
		
		/// <summary>
		/// Name: m_IsReparing
		/// Type: BoolProperty
		/// Offset: 0x801
		/// Size: 0x01
		/// </summary>
		public bool m_IsReparing
		{
			get
			{
				return ReadBool(0x801);
			}
			set
			{
				WriteBool(0x801,value);
			}
		}
		
		/// <summary>
		/// Name: HasTimeCatchedUp
		/// Type: BoolProperty
		/// Offset: 0x802
		/// Size: 0x01
		/// </summary>
		public bool HasTimeCatchedUp
		{
			get
			{
				return ReadBool(0x802);
			}
			set
			{
				WriteBool(0x802,value);
			}
		}
		
		/// <summary>
		/// Name: FeatVersion
		/// Type: IntProperty
		/// Offset: 0x804
		/// Size: 0x04
		/// </summary>
		public int FeatVersion
		{
			get
			{
				return ReadInt32(0x804);
			}
			set
			{
				WriteInt32(0x804,value);
			}
		}
		
		/// <summary>
		/// Name: characterUniqueId
		/// Type: ObjectProperty
		/// Offset: 0x808
		/// Size: 0x08
		/// </summary>
		public UUniqueID characterUniqueId => ReadUObject<UUniqueID>(0x808);
		
		/// <summary>
		/// Name: CharacterGuildID
		/// Type: ObjectProperty
		/// Offset: 0x810
		/// Size: 0x08
		/// </summary>
		public UUniqueID CharacterGuildID => ReadUObject<UUniqueID>(0x810);
		
		/// <summary>
		/// Name: SourceSpawnTable
		/// Type: NameProperty
		/// Offset: 0x818
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: isAlive
		/// Type: BoolProperty
		/// Offset: 0x820
		/// Size: 0x01
		/// </summary>
		public bool isAlive
		{
			get
			{
				return ReadBool(0x820);
			}
			set
			{
				WriteBool(0x820,value);
			}
		}
		
		/// <summary>
		/// Name: killerName
		/// Type: TextProperty
		/// Offset: 0x828
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: HarvestTimeStamp
		/// Type: StructProperty
		/// Offset: 0x840
		/// Size: 0x08
		/// </summary>
		public FDateTime HarvestTimeStamp => ReadStruct<FDateTime>(0x840);
		
		/// <summary>
		/// Name: SprintNoCost
		/// Type: BoolProperty
		/// Offset: 0x858
		/// Size: 0x01
		/// </summary>
		public bool SprintNoCost
		{
			get
			{
				return ReadBool(0x858);
			}
			set
			{
				WriteBool(0x858,value);
			}
		}
		
		/// <summary>
		/// Name: SenseDetection
		/// Type: BoolProperty
		/// Offset: 0x859
		/// Size: 0x01
		/// </summary>
		public bool SenseDetection
		{
			get
			{
				return ReadBool(0x859);
			}
			set
			{
				WriteBool(0x859,value);
			}
		}
		
		/// <summary>
		/// Name: PlayerInvisibility
		/// Type: BoolProperty
		/// Offset: 0x85A
		/// Size: 0x01
		/// </summary>
		public bool PlayerInvisibility
		{
			get
			{
				return ReadBool(0x85A);
			}
			set
			{
				WriteBool(0x85A,value);
			}
		}
		
		/// <summary>
		/// Name: AdditionalInteractionExtent
		/// Type: FloatProperty
		/// Offset: 0x85C
		/// Size: 0x04
		/// </summary>
		public float AdditionalInteractionExtent
		{
			get
			{
				return ReadSingle(0x85C);
			}
			set
			{
				WriteSingle(0x85C,value);
			}
		}
		
		/// <summary>
		/// Name: CarriedPeople
		/// Type: TArray<AConanCharacter>
		/// Offset: 0x9B0
		/// Size: 0x10
		/// SubElement Size: 0xA60
		/// </summary>
		public TArray<AConanCharacter> CarriedPeople => new TArray<AConanCharacter>(BaseAddress+0x9B0);
		
		/// <summary>
		/// Name: BeingCarriedWeight
		/// Type: FloatProperty
		/// Offset: 0x9C0
		/// Size: 0x04
		/// </summary>
		public float BeingCarriedWeight
		{
			get
			{
				return ReadSingle(0x9C0);
			}
			set
			{
				WriteSingle(0x9C0,value);
			}
		}
		
		/// <summary>
		/// Name: m_StatHolder
		/// Type: ObjectProperty
		/// Offset: 0xA00
		/// Size: 0x08
		/// </summary>
		public UStatHolder m_StatHolder => ReadUObject<UStatHolder>(0xA00);
		
		/// <summary>
		/// Name: m_GameState
		/// Type: ObjectProperty
		/// Offset: 0xA08
		/// Size: 0x08
		/// </summary>
		public AConanGameState m_GameState => ReadUObject<AConanGameState>(0xA08);
		
		/// <summary>
		/// Name: m_HungerSystem
		/// Type: ObjectProperty
		/// Offset: 0xA10
		/// Size: 0x08
		/// </summary>
		public UHungerSystem m_HungerSystem => ReadUObject<UHungerSystem>(0xA10);
		
		/// <summary>
		/// Name: m_CharacterName
		/// Type: TextProperty
		/// Offset: 0xA18
		/// Size: 0x18
		/// </summary>
		
	}


	/// <summary>
	/// AAvatarCharacter:AConanCharacter
	/// Size: 0xA70
	/// Properties: 1
	/// </summary>
	public class AAvatarCharacter:AConanCharacter
	{
		public override int ObjectSize => 2672;
		/// <summary>
		/// Name: m_Summoner
		/// Type: ObjectProperty
		/// Offset: 0xA60
		/// Size: 0x08
		/// </summary>
		public AConanCharacter m_Summoner => ReadUObject<AConanCharacter>(0xA60);
		
	}


	/// <summary>
	/// UConanCharacterComponent:UActorComponent
	/// Size: 0xE0
	/// Properties: 0
	/// </summary>
	public class UConanCharacterComponent:UActorComponent
	{
		public override int ObjectSize => 224;
	}


	/// <summary>
	/// UEncumbranceSystem:UConanCharacterComponent
	/// Size: 0xF8
	/// Properties: 2
	/// </summary>
	public class UEncumbranceSystem:UConanCharacterComponent
	{
		public override int ObjectSize => 248;
		/// <summary>
		/// Name: EncumbranceTierThresholds
		/// Type: TArray<>
		/// Offset: 0xE0
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: CurrentEncumbranceTier
		/// Type: ByteProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public byte CurrentEncumbranceTier
		{
			get
			{
				return ReadByte(0xF0);
			}
			set
			{
				WriteByte(0xF0,value);
			}
		}
		
	}


	/// <summary>
	/// UHungerSystem:UConanCharacterComponent
	/// Size: 0x100
	/// Properties: 0
	/// </summary>
	public class UHungerSystem:UConanCharacterComponent
	{
		public override int ObjectSize => 256;
	}


	/// <summary>
	/// UProgressionSystem:UConanCharacterComponent
	/// Size: 0x198
	/// Properties: 0
	/// </summary>
	public class UProgressionSystem:UConanCharacterComponent
	{
		public override int ObjectSize => 408;
	}


	/// <summary>
	/// UCharacterPersistenceComponent:UPersistenceComponent
	/// Size: 0x138
	/// Properties: 0
	/// </summary>
	public class UCharacterPersistenceComponent:UPersistenceComponent
	{
		public override int ObjectSize => 312;
	}


	/// <summary>
	/// UConanCharacterPersistenceComponent:UCharacterPersistenceComponent
	/// Size: 0x138
	/// Properties: 0
	/// </summary>
	public class UConanCharacterPersistenceComponent:UCharacterPersistenceComponent
	{
		public override int ObjectSize => 312;
	}


	/// <summary>
	/// UEmoteController:UActorComponent
	/// Size: 0xF0
	/// Properties: 3
	/// </summary>
	public class UEmoteController:UActorComponent
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: CurrentEmote
		/// Type: ByteProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public byte CurrentEmote
		{
			get
			{
				return ReadByte(0xD8);
			}
			set
			{
				WriteByte(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentEmoteAnimMontage
		/// Type: ObjectProperty
		/// Offset: 0xE0
		/// Size: 0x08
		/// </summary>
		public UAnimMontage CurrentEmoteAnimMontage => ReadUObject<UAnimMontage>(0xE0);
		
		/// <summary>
		/// Name: CurrentEmoteFlags
		/// Type: IntProperty
		/// Offset: 0xE8
		/// Size: 0x04
		/// </summary>
		public int CurrentEmoteFlags
		{
			get
			{
				return ReadInt32(0xE8);
			}
			set
			{
				WriteInt32(0xE8,value);
			}
		}
		
	}


	/// <summary>
	/// UCheatManager:UObject
	/// Size: 0x78
	/// Properties: 2
	/// </summary>
	public class UCheatManager:UObject
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: DebugCameraControllerRef
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public ADebugCameraController DebugCameraControllerRef => ReadUObject<ADebugCameraController>(0x28);
		
		/// <summary>
		/// Name: DebugCameraControllerClass
		/// Type: ClassProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UConanCheatManager:UCheatManager
	/// Size: 0xD0
	/// Properties: 0
	/// </summary>
	public class UConanCheatManager:UCheatManager
	{
		public override int ObjectSize => 208;
	}


	/// <summary>
	/// AGameMode:AInfo
	/// Size: 0x4C8
	/// Properties: 25
	/// </summary>
	public class AGameMode:AInfo
	{
		public override int ObjectSize => 1224;
		/// <summary>
		/// Name: bUseSeamlessTravel
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bUseSeamlessTravel => (ReadByte(0x03D8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bPauseable
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bPauseable => (ReadByte(0x03D8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bStartPlayersAsSpectators
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bStartPlayersAsSpectators => (ReadByte(0x03D8) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bDelayedStart
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bDelayedStart => (ReadByte(0x03D8) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: OptionsString
		/// Type: StrProperty
		/// Offset: 0x3E0
		/// Size: 0x10
		/// </summary>
		public FString OptionsString => new FString(BaseAddress+0x3E0);
		
		/// <summary>
		/// Name: DefaultPawnClass
		/// Type: ClassProperty
		/// Offset: 0x3F0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: HUDClass
		/// Type: ClassProperty
		/// Offset: 0x3F8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: NumSpectators
		/// Type: IntProperty
		/// Offset: 0x400
		/// Size: 0x04
		/// </summary>
		public int NumSpectators
		{
			get
			{
				return ReadInt32(0x400);
			}
			set
			{
				WriteInt32(0x400,value);
			}
		}
		
		/// <summary>
		/// Name: NumPlayers
		/// Type: IntProperty
		/// Offset: 0x404
		/// Size: 0x04
		/// </summary>
		public int NumPlayers
		{
			get
			{
				return ReadInt32(0x404);
			}
			set
			{
				WriteInt32(0x404,value);
			}
		}
		
		/// <summary>
		/// Name: NumBots
		/// Type: IntProperty
		/// Offset: 0x408
		/// Size: 0x04
		/// </summary>
		public int NumBots
		{
			get
			{
				return ReadInt32(0x408);
			}
			set
			{
				WriteInt32(0x408,value);
			}
		}
		
		/// <summary>
		/// Name: MinRespawnDelay
		/// Type: FloatProperty
		/// Offset: 0x40C
		/// Size: 0x04
		/// </summary>
		public float MinRespawnDelay
		{
			get
			{
				return ReadSingle(0x40C);
			}
			set
			{
				WriteSingle(0x40C,value);
			}
		}
		
		/// <summary>
		/// Name: GameSession
		/// Type: ObjectProperty
		/// Offset: 0x410
		/// Size: 0x08
		/// </summary>
		public AGameSession GameSession => ReadUObject<AGameSession>(0x410);
		
		/// <summary>
		/// Name: NumTravellingPlayers
		/// Type: IntProperty
		/// Offset: 0x418
		/// Size: 0x04
		/// </summary>
		public int NumTravellingPlayers
		{
			get
			{
				return ReadInt32(0x418);
			}
			set
			{
				WriteInt32(0x418,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultPlayerName
		/// Type: TextProperty
		/// Offset: 0x420
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: EngineMessageClass
		/// Type: ClassProperty
		/// Offset: 0x438
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PlayerControllerClass
		/// Type: ClassProperty
		/// Offset: 0x440
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SpectatorClass
		/// Type: ClassProperty
		/// Offset: 0x448
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ReplaySpectatorPlayerControllerClass
		/// Type: ClassProperty
		/// Offset: 0x450
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PlayerStateClass
		/// Type: ClassProperty
		/// Offset: 0x458
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: GameStateClass
		/// Type: ClassProperty
		/// Offset: 0x460
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: GameState
		/// Type: ObjectProperty
		/// Offset: 0x468
		/// Size: 0x08
		/// </summary>
		public AGameState GameState => ReadUObject<AGameState>(0x468);
		
		/// <summary>
		/// Name: InactivePlayerArray
		/// Type: TArray<APlayerState>
		/// Offset: 0x470
		/// Size: 0x10
		/// SubElement Size: 0x458
		/// </summary>
		public TArray<APlayerState> InactivePlayerArray => new TArray<APlayerState>(BaseAddress+0x470);
		
		/// <summary>
		/// Name: GameModeClassAliases
		/// Type: TArray<FGameClassShortName>
		/// Offset: 0x4A0
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FGameClassShortName> GameModeClassAliases => new TArray<FGameClassShortName>(BaseAddress+0x4A0);
		
		/// <summary>
		/// Name: InactivePlayerStateLifeSpan
		/// Type: FloatProperty
		/// Offset: 0x4B0
		/// Size: 0x04
		/// </summary>
		public float InactivePlayerStateLifeSpan
		{
			get
			{
				return ReadSingle(0x4B0);
			}
			set
			{
				WriteSingle(0x4B0,value);
			}
		}
		
		/// <summary>
		/// Name: bHandleDedicatedServerReplays
		/// Type: BoolProperty
		/// Offset: 0x4B4
		/// Size: 0x01
		/// </summary>
		public bool bHandleDedicatedServerReplays
		{
			get
			{
				return ReadBool(0x4B4);
			}
			set
			{
				WriteBool(0x4B4,value);
			}
		}
		
	}


	/// <summary>
	/// ADWGameMode:AGameMode
	/// Size: 0x5A0
	/// Properties: 4
	/// </summary>
	public class ADWGameMode:AGameMode
	{
		public override int ObjectSize => 1440;
		/// <summary>
		/// Name: DatabaseHost
		/// Type: StrProperty
		/// Offset: 0x4C8
		/// Size: 0x10
		/// </summary>
		public FString DatabaseHost => new FString(BaseAddress+0x4C8);
		
		/// <summary>
		/// Name: DatabasePort
		/// Type: IntProperty
		/// Offset: 0x4D8
		/// Size: 0x04
		/// </summary>
		public int DatabasePort
		{
			get
			{
				return ReadInt32(0x4D8);
			}
			set
			{
				WriteInt32(0x4D8,value);
			}
		}
		
		/// <summary>
		/// Name: DatabaseVerbose
		/// Type: BoolProperty
		/// Offset: 0x4DC
		/// Size: 0x01
		/// </summary>
		public bool DatabaseVerbose
		{
			get
			{
				return ReadBool(0x4DC);
			}
			set
			{
				WriteBool(0x4DC,value);
			}
		}
		
		/// <summary>
		/// Name: WorldPersistence
		/// Type: ObjectProperty
		/// Offset: 0x4E0
		/// Size: 0x08
		/// </summary>
		public UWorldPersistenceComponent WorldPersistence => ReadUObject<UWorldPersistenceComponent>(0x4E0);
		
	}


	/// <summary>
	/// AConanGameMode:ADWGameMode
	/// Size: 0x6A8
	/// Properties: 8
	/// </summary>
	public class AConanGameMode:ADWGameMode
	{
		public override int ObjectSize => 1704;
		/// <summary>
		/// Name: SpawnTableSystem
		/// Type: ObjectProperty
		/// Offset: 0x5A0
		/// Size: 0x08
		/// </summary>
		public USpawnTableComponent SpawnTableSystem => ReadUObject<USpawnTableComponent>(0x5A0);
		
		/// <summary>
		/// Name: SharedDebugInfoClass
		/// Type: ClassProperty
		/// Offset: 0x5A8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CountryBlackList
		/// Type: TArray<>
		/// Offset: 0x5D8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: MaxPeriodicBackupsToKeep
		/// Type: UInt32Property
		/// Offset: 0x5E8
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: PeriodicBackupInterval
		/// Type: FloatProperty
		/// Offset: 0x5EC
		/// Size: 0x04
		/// </summary>
		public float PeriodicBackupInterval
		{
			get
			{
				return ReadSingle(0x5EC);
			}
			set
			{
				WriteSingle(0x5EC,value);
			}
		}
		
		/// <summary>
		/// Name: MaxUpgradeBackupstoKeep
		/// Type: IntProperty
		/// Offset: 0x5F0
		/// Size: 0x04
		/// </summary>
		public int MaxUpgradeBackupstoKeep
		{
			get
			{
				return ReadInt32(0x5F0);
			}
			set
			{
				WriteInt32(0x5F0,value);
			}
		}
		
		/// <summary>
		/// Name: m_HarvestCorpseAntiGC
		/// Type: TArray<UUniqueID>
		/// Offset: 0x5F8
		/// Size: 0x10
		/// SubElement Size: 0x50
		/// </summary>
		public TArray<UUniqueID> m_HarvestCorpseAntiGC => new TArray<UUniqueID>(BaseAddress+0x5F8);
		
		/// <summary>
		/// Name: m_ServerFrameRateReporter
		/// Type: ObjectProperty
		/// Offset: 0x658
		/// Size: 0x08
		/// </summary>
		public UFrameRateReporter m_ServerFrameRateReporter => ReadUObject<UFrameRateReporter>(0x658);
		
	}


	/// <summary>
	/// AGameState:AInfo
	/// Size: 0x430
	/// Properties: 10
	/// </summary>
	public class AGameState:AInfo
	{
		public override int ObjectSize => 1072;
		/// <summary>
		/// Name: GameModeClass
		/// Type: ClassProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AuthorityGameMode
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public AGameMode AuthorityGameMode => ReadUObject<AGameMode>(0x3D8);
		
		/// <summary>
		/// Name: SpectatorClass
		/// Type: ClassProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: MatchState
		/// Type: NameProperty
		/// Offset: 0x3E8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PreviousMatchState
		/// Type: NameProperty
		/// Offset: 0x3F0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ElapsedTime
		/// Type: IntProperty
		/// Offset: 0x3F8
		/// Size: 0x04
		/// </summary>
		public int ElapsedTime
		{
			get
			{
				return ReadInt32(0x3F8);
			}
			set
			{
				WriteInt32(0x3F8,value);
			}
		}
		
		/// <summary>
		/// Name: PlayerArray
		/// Type: TArray<APlayerState>
		/// Offset: 0x400
		/// Size: 0x10
		/// SubElement Size: 0x458
		/// </summary>
		public TArray<APlayerState> PlayerArray => new TArray<APlayerState>(BaseAddress+0x400);
		
		/// <summary>
		/// Name: ReplicatedWorldTimeSeconds
		/// Type: FloatProperty
		/// Offset: 0x410
		/// Size: 0x04
		/// </summary>
		public float ReplicatedWorldTimeSeconds
		{
			get
			{
				return ReadSingle(0x410);
			}
			set
			{
				WriteSingle(0x410,value);
			}
		}
		
		/// <summary>
		/// Name: ServerWorldTimeSecondsDelta
		/// Type: FloatProperty
		/// Offset: 0x414
		/// Size: 0x04
		/// </summary>
		public float ServerWorldTimeSecondsDelta
		{
			get
			{
				return ReadSingle(0x414);
			}
			set
			{
				WriteSingle(0x414,value);
			}
		}
		
		/// <summary>
		/// Name: ServerWorldTimeSecondsUpdateFrequency
		/// Type: FloatProperty
		/// Offset: 0x418
		/// Size: 0x04
		/// </summary>
		public float ServerWorldTimeSecondsUpdateFrequency
		{
			get
			{
				return ReadSingle(0x418);
			}
			set
			{
				WriteSingle(0x418,value);
			}
		}
		
	}


	/// <summary>
	/// ADWGameState:AGameState
	/// Size: 0x448
	/// Properties: 2
	/// </summary>
	public class ADWGameState:AGameState
	{
		public override int ObjectSize => 1096;
		/// <summary>
		/// Name: SoundStageClassName
		/// Type: StructProperty
		/// Offset: 0x430
		/// Size: 0x10
		/// </summary>
		public FStringClassReference SoundStageClassName => ReadStruct<FStringClassReference>(0x430);
		
		/// <summary>
		/// Name: SoundStage
		/// Type: ObjectProperty
		/// Offset: 0x440
		/// Size: 0x08
		/// </summary>
		public ASoundStage SoundStage => ReadUObject<ASoundStage>(0x440);
		
	}


	/// <summary>
	/// AConanGameState:ADWGameState
	/// Size: 0x500
	/// Properties: 12
	/// </summary>
	public class AConanGameState:ADWGameState
	{
		public override int ObjectSize => 1280;
		/// <summary>
		/// Name: CharacterLodSystem
		/// Type: ObjectProperty
		/// Offset: 0x448
		/// Size: 0x08
		/// </summary>
		public ACharacterLodSystem CharacterLodSystem => ReadUObject<ACharacterLodSystem>(0x448);
		
		/// <summary>
		/// Name: ServerTimezoneHours
		/// Type: IntProperty
		/// Offset: 0x490
		/// Size: 0x04
		/// </summary>
		public int ServerTimezoneHours
		{
			get
			{
				return ReadInt32(0x490);
			}
			set
			{
				WriteInt32(0x490,value);
			}
		}
		
		/// <summary>
		/// Name: PlayerHealthMultiplier
		/// Type: FloatProperty
		/// Offset: 0x494
		/// Size: 0x04
		/// </summary>
		public float PlayerHealthMultiplier
		{
			get
			{
				return ReadSingle(0x494);
			}
			set
			{
				WriteSingle(0x494,value);
			}
		}
		
		/// <summary>
		/// Name: PlayerStaminaMultiplier
		/// Type: FloatProperty
		/// Offset: 0x498
		/// Size: 0x04
		/// </summary>
		public float PlayerStaminaMultiplier
		{
			get
			{
				return ReadSingle(0x498);
			}
			set
			{
				WriteSingle(0x498,value);
			}
		}
		
		/// <summary>
		/// Name: UseListenServerHostPlayerLocation
		/// Type: BoolProperty
		/// Offset: 0x49C
		/// Size: 0x01
		/// </summary>
		public bool UseListenServerHostPlayerLocation => (ReadByte(0x049C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ListenServerHostPlayerLocation
		/// Type: StructProperty
		/// Offset: 0x4A0
		/// Size: 0x0C
		/// </summary>
		public FVector ListenServerHostPlayerLocation => ReadStruct<FVector>(0x4A0);
		
		/// <summary>
		/// Name: UserSettingsEventDispatcher
		/// Type: ObjectProperty
		/// Offset: 0x4B0
		/// Size: 0x08
		/// </summary>
		public USettingsEventDispatchers UserSettingsEventDispatcher => ReadUObject<USettingsEventDispatchers>(0x4B0);
		
		/// <summary>
		/// Name: m_ChatCommandHelper
		/// Type: ObjectProperty
		/// Offset: 0x4B8
		/// Size: 0x08
		/// </summary>
		public UChatCommandHelper m_ChatCommandHelper => ReadUObject<UChatCommandHelper>(0x4B8);
		
		/// <summary>
		/// Name: guildList
		/// Type: TArray<AGuild>
		/// Offset: 0x4C0
		/// Size: 0x10
		/// SubElement Size: 0x570
		/// </summary>
		public TArray<AGuild> guildList => new TArray<AGuild>(BaseAddress+0x4C0);
		
		/// <summary>
		/// Name: ServerSettingsClass
		/// Type: ClassProperty
		/// Offset: 0x4D8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ReplicatedIds
		/// Type: TArray<UUniqueID>
		/// Offset: 0x4E0
		/// Size: 0x10
		/// SubElement Size: 0x50
		/// </summary>
		public TArray<UUniqueID> ReplicatedIds => new TArray<UUniqueID>(BaseAddress+0x4E0);
		
		/// <summary>
		/// Name: ServerSettings
		/// Type: ObjectProperty
		/// Offset: 0x4F0
		/// Size: 0x08
		/// </summary>
		public AServerSettings ServerSettings => ReadUObject<AServerSettings>(0x4F0);
		
	}


	/// <summary>
	/// UEngine:UObject
	/// Size: 0xBB0
	/// Properties: 196
	/// </summary>
	public class UEngine:UObject
	{
		public override int ObjectSize => 2992;
		/// <summary>
		/// Name: TinyFont
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UFont TinyFont => ReadUObject<UFont>(0x30);
		
		/// <summary>
		/// Name: TinyFontName
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference TinyFontName => ReadStruct<FStringAssetReference>(0x38);
		
		/// <summary>
		/// Name: SmallFont
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public UFont SmallFont => ReadUObject<UFont>(0x48);
		
		/// <summary>
		/// Name: SmallFontName
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference SmallFontName => ReadStruct<FStringAssetReference>(0x50);
		
		/// <summary>
		/// Name: MediumFont
		/// Type: ObjectProperty
		/// Offset: 0x60
		/// Size: 0x08
		/// </summary>
		public UFont MediumFont => ReadUObject<UFont>(0x60);
		
		/// <summary>
		/// Name: MediumFontName
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference MediumFontName => ReadStruct<FStringAssetReference>(0x68);
		
		/// <summary>
		/// Name: LargeFont
		/// Type: ObjectProperty
		/// Offset: 0x78
		/// Size: 0x08
		/// </summary>
		public UFont LargeFont => ReadUObject<UFont>(0x78);
		
		/// <summary>
		/// Name: LargeFontName
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference LargeFontName => ReadStruct<FStringAssetReference>(0x80);
		
		/// <summary>
		/// Name: SubtitleFont
		/// Type: ObjectProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		public UFont SubtitleFont => ReadUObject<UFont>(0x90);
		
		/// <summary>
		/// Name: SubtitleFontName
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference SubtitleFontName => ReadStruct<FStringAssetReference>(0x98);
		
		/// <summary>
		/// Name: AdditionalFonts
		/// Type: TArray<UFont>
		/// Offset: 0xA8
		/// Size: 0x10
		/// SubElement Size: 0x1C0
		/// </summary>
		public TArray<UFont> AdditionalFonts => new TArray<UFont>(BaseAddress+0xA8);
		
		/// <summary>
		/// Name: AdditionalFontNames
		/// Type: TArray<>
		/// Offset: 0xC0
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: ConsoleClass
		/// Type: ClassProperty
		/// Offset: 0xD0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ConsoleClassName
		/// Type: StructProperty
		/// Offset: 0xD8
		/// Size: 0x10
		/// </summary>
		public FStringClassReference ConsoleClassName => ReadStruct<FStringClassReference>(0xD8);
		
		/// <summary>
		/// Name: GameViewportClientClass
		/// Type: ClassProperty
		/// Offset: 0xE8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: GameViewportClientClassName
		/// Type: StructProperty
		/// Offset: 0xF0
		/// Size: 0x10
		/// </summary>
		public FStringClassReference GameViewportClientClassName => ReadStruct<FStringClassReference>(0xF0);
		
		/// <summary>
		/// Name: LocalPlayerClass
		/// Type: ClassProperty
		/// Offset: 0x100
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: LocalPlayerClassName
		/// Type: StructProperty
		/// Offset: 0x108
		/// Size: 0x10
		/// </summary>
		public FStringClassReference LocalPlayerClassName => ReadStruct<FStringClassReference>(0x108);
		
		/// <summary>
		/// Name: WorldSettingsClass
		/// Type: ClassProperty
		/// Offset: 0x118
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: WorldSettingsClassName
		/// Type: StructProperty
		/// Offset: 0x120
		/// Size: 0x10
		/// </summary>
		public FStringClassReference WorldSettingsClassName => ReadStruct<FStringClassReference>(0x120);
		
		/// <summary>
		/// Name: NavigationSystemClassName
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x10
		/// </summary>
		public FStringClassReference NavigationSystemClassName => ReadStruct<FStringClassReference>(0x130);
		
		/// <summary>
		/// Name: NavigationSystemClass
		/// Type: ClassProperty
		/// Offset: 0x140
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AvoidanceManagerClassName
		/// Type: StructProperty
		/// Offset: 0x148
		/// Size: 0x10
		/// </summary>
		public FStringClassReference AvoidanceManagerClassName => ReadStruct<FStringClassReference>(0x148);
		
		/// <summary>
		/// Name: AvoidanceManagerClass
		/// Type: ClassProperty
		/// Offset: 0x158
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PhysicsCollisionHandlerClass
		/// Type: ClassProperty
		/// Offset: 0x160
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PhysicsCollisionHandlerClassName
		/// Type: StructProperty
		/// Offset: 0x168
		/// Size: 0x10
		/// </summary>
		public FStringClassReference PhysicsCollisionHandlerClassName => ReadStruct<FStringClassReference>(0x168);
		
		/// <summary>
		/// Name: GameUserSettingsClassName
		/// Type: StructProperty
		/// Offset: 0x178
		/// Size: 0x10
		/// </summary>
		public FStringClassReference GameUserSettingsClassName => ReadStruct<FStringClassReference>(0x178);
		
		/// <summary>
		/// Name: GameUserSettingsClass
		/// Type: ClassProperty
		/// Offset: 0x188
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AIControllerClassName
		/// Type: StructProperty
		/// Offset: 0x190
		/// Size: 0x10
		/// </summary>
		public FStringClassReference AIControllerClassName => ReadStruct<FStringClassReference>(0x190);
		
		/// <summary>
		/// Name: GameUserSettings
		/// Type: ObjectProperty
		/// Offset: 0x1A0
		/// Size: 0x08
		/// </summary>
		public UGameUserSettings GameUserSettings => ReadUObject<UGameUserSettings>(0x1A0);
		
		/// <summary>
		/// Name: LevelScriptActorClass
		/// Type: ClassProperty
		/// Offset: 0x1A8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: LevelScriptActorClassName
		/// Type: StructProperty
		/// Offset: 0x1B0
		/// Size: 0x10
		/// </summary>
		public FStringClassReference LevelScriptActorClassName => ReadStruct<FStringClassReference>(0x1B0);
		
		/// <summary>
		/// Name: DefaultBlueprintBaseClassName
		/// Type: StructProperty
		/// Offset: 0x1C0
		/// Size: 0x10
		/// </summary>
		public FStringClassReference DefaultBlueprintBaseClassName => ReadStruct<FStringClassReference>(0x1C0);
		
		/// <summary>
		/// Name: GameSingletonClassName
		/// Type: StructProperty
		/// Offset: 0x1D0
		/// Size: 0x10
		/// </summary>
		public FStringClassReference GameSingletonClassName => ReadStruct<FStringClassReference>(0x1D0);
		
		/// <summary>
		/// Name: GameSingleton
		/// Type: ObjectProperty
		/// Offset: 0x1E0
		/// Size: 0x08
		/// </summary>
		public UObject GameSingleton => ReadUObject<UObject>(0x1E0);
		
		/// <summary>
		/// Name: DefaultTireType
		/// Type: ObjectProperty
		/// Offset: 0x1E8
		/// Size: 0x08
		/// </summary>
		public UTireType DefaultTireType => ReadUObject<UTireType>(0x1E8);
		
		/// <summary>
		/// Name: DefaultTireTypeName
		/// Type: StructProperty
		/// Offset: 0x1F0
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference DefaultTireTypeName => ReadStruct<FStringAssetReference>(0x1F0);
		
		/// <summary>
		/// Name: PlayOnConsoleSaveDir
		/// Type: StrProperty
		/// Offset: 0x200
		/// Size: 0x10
		/// </summary>
		public FString PlayOnConsoleSaveDir => new FString(BaseAddress+0x200);
		
		/// <summary>
		/// Name: DefaultTexture
		/// Type: ObjectProperty
		/// Offset: 0x210
		/// Size: 0x08
		/// </summary>
		public UTexture2D DefaultTexture => ReadUObject<UTexture2D>(0x210);
		
		/// <summary>
		/// Name: DefaultTextureName
		/// Type: StructProperty
		/// Offset: 0x218
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference DefaultTextureName => ReadStruct<FStringAssetReference>(0x218);
		
		/// <summary>
		/// Name: DefaultDiffuseTexture
		/// Type: ObjectProperty
		/// Offset: 0x228
		/// Size: 0x08
		/// </summary>
		public UTexture DefaultDiffuseTexture => ReadUObject<UTexture>(0x228);
		
		/// <summary>
		/// Name: DefaultDiffuseTextureName
		/// Type: StructProperty
		/// Offset: 0x230
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference DefaultDiffuseTextureName => ReadStruct<FStringAssetReference>(0x230);
		
		/// <summary>
		/// Name: DefaultBSPVertexTexture
		/// Type: ObjectProperty
		/// Offset: 0x240
		/// Size: 0x08
		/// </summary>
		public UTexture2D DefaultBSPVertexTexture => ReadUObject<UTexture2D>(0x240);
		
		/// <summary>
		/// Name: DefaultBSPVertexTextureName
		/// Type: StructProperty
		/// Offset: 0x248
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference DefaultBSPVertexTextureName => ReadStruct<FStringAssetReference>(0x248);
		
		/// <summary>
		/// Name: HighFrequencyNoiseTexture
		/// Type: ObjectProperty
		/// Offset: 0x258
		/// Size: 0x08
		/// </summary>
		public UTexture2D HighFrequencyNoiseTexture => ReadUObject<UTexture2D>(0x258);
		
		/// <summary>
		/// Name: HighFrequencyNoiseTextureName
		/// Type: StructProperty
		/// Offset: 0x260
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference HighFrequencyNoiseTextureName => ReadStruct<FStringAssetReference>(0x260);
		
		/// <summary>
		/// Name: DefaultBokehTexture
		/// Type: ObjectProperty
		/// Offset: 0x270
		/// Size: 0x08
		/// </summary>
		public UTexture2D DefaultBokehTexture => ReadUObject<UTexture2D>(0x270);
		
		/// <summary>
		/// Name: DefaultBokehTextureName
		/// Type: StructProperty
		/// Offset: 0x278
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference DefaultBokehTextureName => ReadStruct<FStringAssetReference>(0x278);
		
		/// <summary>
		/// Name: WireframeMaterial
		/// Type: ObjectProperty
		/// Offset: 0x288
		/// Size: 0x08
		/// </summary>
		public UMaterial WireframeMaterial => ReadUObject<UMaterial>(0x288);
		
		/// <summary>
		/// Name: WireframeMaterialName
		/// Type: StrProperty
		/// Offset: 0x290
		/// Size: 0x10
		/// </summary>
		public FString WireframeMaterialName => new FString(BaseAddress+0x290);
		
		/// <summary>
		/// Name: DebugMeshMaterial
		/// Type: ObjectProperty
		/// Offset: 0x2A0
		/// Size: 0x08
		/// </summary>
		public UMaterial DebugMeshMaterial => ReadUObject<UMaterial>(0x2A0);
		
		/// <summary>
		/// Name: DebugMeshMaterialName
		/// Type: StructProperty
		/// Offset: 0x2A8
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference DebugMeshMaterialName => ReadStruct<FStringAssetReference>(0x2A8);
		
		/// <summary>
		/// Name: LevelColorationLitMaterial
		/// Type: ObjectProperty
		/// Offset: 0x2B8
		/// Size: 0x08
		/// </summary>
		public UMaterial LevelColorationLitMaterial => ReadUObject<UMaterial>(0x2B8);
		
		/// <summary>
		/// Name: LevelColorationLitMaterialName
		/// Type: StrProperty
		/// Offset: 0x2C0
		/// Size: 0x10
		/// </summary>
		public FString LevelColorationLitMaterialName => new FString(BaseAddress+0x2C0);
		
		/// <summary>
		/// Name: LevelColorationUnlitMaterial
		/// Type: ObjectProperty
		/// Offset: 0x2D0
		/// Size: 0x08
		/// </summary>
		public UMaterial LevelColorationUnlitMaterial => ReadUObject<UMaterial>(0x2D0);
		
		/// <summary>
		/// Name: LevelColorationUnlitMaterialName
		/// Type: StrProperty
		/// Offset: 0x2D8
		/// Size: 0x10
		/// </summary>
		public FString LevelColorationUnlitMaterialName => new FString(BaseAddress+0x2D8);
		
		/// <summary>
		/// Name: LightingTexelDensityMaterial
		/// Type: ObjectProperty
		/// Offset: 0x2E8
		/// Size: 0x08
		/// </summary>
		public UMaterial LightingTexelDensityMaterial => ReadUObject<UMaterial>(0x2E8);
		
		/// <summary>
		/// Name: LightingTexelDensityName
		/// Type: StrProperty
		/// Offset: 0x2F0
		/// Size: 0x10
		/// </summary>
		public FString LightingTexelDensityName => new FString(BaseAddress+0x2F0);
		
		/// <summary>
		/// Name: ShadedLevelColorationLitMaterial
		/// Type: ObjectProperty
		/// Offset: 0x300
		/// Size: 0x08
		/// </summary>
		public UMaterial ShadedLevelColorationLitMaterial => ReadUObject<UMaterial>(0x300);
		
		/// <summary>
		/// Name: ShadedLevelColorationLitMaterialName
		/// Type: StrProperty
		/// Offset: 0x308
		/// Size: 0x10
		/// </summary>
		public FString ShadedLevelColorationLitMaterialName => new FString(BaseAddress+0x308);
		
		/// <summary>
		/// Name: ShadedLevelColorationUnlitMaterial
		/// Type: ObjectProperty
		/// Offset: 0x318
		/// Size: 0x08
		/// </summary>
		public UMaterial ShadedLevelColorationUnlitMaterial => ReadUObject<UMaterial>(0x318);
		
		/// <summary>
		/// Name: ShadedLevelColorationUnlitMaterialName
		/// Type: StrProperty
		/// Offset: 0x320
		/// Size: 0x10
		/// </summary>
		public FString ShadedLevelColorationUnlitMaterialName => new FString(BaseAddress+0x320);
		
		/// <summary>
		/// Name: RemoveSurfaceMaterial
		/// Type: ObjectProperty
		/// Offset: 0x330
		/// Size: 0x08
		/// </summary>
		public UMaterial RemoveSurfaceMaterial => ReadUObject<UMaterial>(0x330);
		
		/// <summary>
		/// Name: RemoveSurfaceMaterialName
		/// Type: StructProperty
		/// Offset: 0x338
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference RemoveSurfaceMaterialName => ReadStruct<FStringAssetReference>(0x338);
		
		/// <summary>
		/// Name: VertexColorMaterial
		/// Type: ObjectProperty
		/// Offset: 0x348
		/// Size: 0x08
		/// </summary>
		public UMaterial VertexColorMaterial => ReadUObject<UMaterial>(0x348);
		
		/// <summary>
		/// Name: VertexColorMaterialName
		/// Type: StrProperty
		/// Offset: 0x350
		/// Size: 0x10
		/// </summary>
		public FString VertexColorMaterialName => new FString(BaseAddress+0x350);
		
		/// <summary>
		/// Name: VertexColorViewModeMaterial_ColorOnly
		/// Type: ObjectProperty
		/// Offset: 0x360
		/// Size: 0x08
		/// </summary>
		public UMaterial VertexColorViewModeMaterial_ColorOnly => ReadUObject<UMaterial>(0x360);
		
		/// <summary>
		/// Name: VertexColorViewModeMaterialName_ColorOnly
		/// Type: StrProperty
		/// Offset: 0x368
		/// Size: 0x10
		/// </summary>
		public FString VertexColorViewModeMaterialName_ColorOnly => new FString(BaseAddress+0x368);
		
		/// <summary>
		/// Name: VertexColorViewModeMaterial_AlphaAsColor
		/// Type: ObjectProperty
		/// Offset: 0x378
		/// Size: 0x08
		/// </summary>
		public UMaterial VertexColorViewModeMaterial_AlphaAsColor => ReadUObject<UMaterial>(0x378);
		
		/// <summary>
		/// Name: VertexColorViewModeMaterialName_AlphaAsColor
		/// Type: StrProperty
		/// Offset: 0x380
		/// Size: 0x10
		/// </summary>
		public FString VertexColorViewModeMaterialName_AlphaAsColor => new FString(BaseAddress+0x380);
		
		/// <summary>
		/// Name: VertexColorViewModeMaterial_RedOnly
		/// Type: ObjectProperty
		/// Offset: 0x390
		/// Size: 0x08
		/// </summary>
		public UMaterial VertexColorViewModeMaterial_RedOnly => ReadUObject<UMaterial>(0x390);
		
		/// <summary>
		/// Name: VertexColorViewModeMaterialName_RedOnly
		/// Type: StrProperty
		/// Offset: 0x398
		/// Size: 0x10
		/// </summary>
		public FString VertexColorViewModeMaterialName_RedOnly => new FString(BaseAddress+0x398);
		
		/// <summary>
		/// Name: VertexColorViewModeMaterial_GreenOnly
		/// Type: ObjectProperty
		/// Offset: 0x3A8
		/// Size: 0x08
		/// </summary>
		public UMaterial VertexColorViewModeMaterial_GreenOnly => ReadUObject<UMaterial>(0x3A8);
		
		/// <summary>
		/// Name: VertexColorViewModeMaterialName_GreenOnly
		/// Type: StrProperty
		/// Offset: 0x3B0
		/// Size: 0x10
		/// </summary>
		public FString VertexColorViewModeMaterialName_GreenOnly => new FString(BaseAddress+0x3B0);
		
		/// <summary>
		/// Name: VertexColorViewModeMaterial_BlueOnly
		/// Type: ObjectProperty
		/// Offset: 0x3C0
		/// Size: 0x08
		/// </summary>
		public UMaterial VertexColorViewModeMaterial_BlueOnly => ReadUObject<UMaterial>(0x3C0);
		
		/// <summary>
		/// Name: VertexColorViewModeMaterialName_BlueOnly
		/// Type: StrProperty
		/// Offset: 0x3C8
		/// Size: 0x10
		/// </summary>
		public FString VertexColorViewModeMaterialName_BlueOnly => new FString(BaseAddress+0x3C8);
		
		/// <summary>
		/// Name: ConstraintLimitMaterial
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public UMaterial ConstraintLimitMaterial => ReadUObject<UMaterial>(0x3D8);
		
		/// <summary>
		/// Name: ConstraintLimitMaterialX
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public UMaterialInstanceDynamic ConstraintLimitMaterialX => ReadUObject<UMaterialInstanceDynamic>(0x3E0);
		
		/// <summary>
		/// Name: ConstraintLimitMaterialY
		/// Type: ObjectProperty
		/// Offset: 0x3E8
		/// Size: 0x08
		/// </summary>
		public UMaterialInstanceDynamic ConstraintLimitMaterialY => ReadUObject<UMaterialInstanceDynamic>(0x3E8);
		
		/// <summary>
		/// Name: ConstraintLimitMaterialZ
		/// Type: ObjectProperty
		/// Offset: 0x3F0
		/// Size: 0x08
		/// </summary>
		public UMaterialInstanceDynamic ConstraintLimitMaterialZ => ReadUObject<UMaterialInstanceDynamic>(0x3F0);
		
		/// <summary>
		/// Name: ConstraintLimitMaterialPrismatic
		/// Type: ObjectProperty
		/// Offset: 0x3F8
		/// Size: 0x08
		/// </summary>
		public UMaterialInstanceDynamic ConstraintLimitMaterialPrismatic => ReadUObject<UMaterialInstanceDynamic>(0x3F8);
		
		/// <summary>
		/// Name: ConstraintLimitMaterialName
		/// Type: StructProperty
		/// Offset: 0x400
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference ConstraintLimitMaterialName => ReadStruct<FStringAssetReference>(0x400);
		
		/// <summary>
		/// Name: InvalidLightmapSettingsMaterial
		/// Type: ObjectProperty
		/// Offset: 0x410
		/// Size: 0x08
		/// </summary>
		public UMaterial InvalidLightmapSettingsMaterial => ReadUObject<UMaterial>(0x410);
		
		/// <summary>
		/// Name: InvalidLightmapSettingsMaterialName
		/// Type: StructProperty
		/// Offset: 0x418
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference InvalidLightmapSettingsMaterialName => ReadStruct<FStringAssetReference>(0x418);
		
		/// <summary>
		/// Name: PreviewShadowsIndicatorMaterial
		/// Type: ObjectProperty
		/// Offset: 0x428
		/// Size: 0x08
		/// </summary>
		public UMaterial PreviewShadowsIndicatorMaterial => ReadUObject<UMaterial>(0x428);
		
		/// <summary>
		/// Name: PreviewShadowsIndicatorMaterialName
		/// Type: StructProperty
		/// Offset: 0x430
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference PreviewShadowsIndicatorMaterialName => ReadStruct<FStringAssetReference>(0x430);
		
		/// <summary>
		/// Name: ArrowMaterial
		/// Type: ObjectProperty
		/// Offset: 0x440
		/// Size: 0x08
		/// </summary>
		public UMaterial ArrowMaterial => ReadUObject<UMaterial>(0x440);
		
		/// <summary>
		/// Name: ArrowMaterialName
		/// Type: StructProperty
		/// Offset: 0x448
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference ArrowMaterialName => ReadStruct<FStringAssetReference>(0x448);
		
		/// <summary>
		/// Name: LightingOnlyBrightness
		/// Type: StructProperty
		/// Offset: 0x458
		/// Size: 0x10
		/// </summary>
		public FLinearColor LightingOnlyBrightness => ReadStruct<FLinearColor>(0x458);
		
		/// <summary>
		/// Name: ShaderComplexityColors
		/// Type: TArray<FLinearColor>
		/// Offset: 0x468
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FLinearColor> ShaderComplexityColors => new TArray<FLinearColor>(BaseAddress+0x468);
		
		/// <summary>
		/// Name: QuadComplexityColors
		/// Type: TArray<FLinearColor>
		/// Offset: 0x478
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FLinearColor> QuadComplexityColors => new TArray<FLinearColor>(BaseAddress+0x478);
		
		/// <summary>
		/// Name: LightComplexityColors
		/// Type: TArray<FLinearColor>
		/// Offset: 0x488
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FLinearColor> LightComplexityColors => new TArray<FLinearColor>(BaseAddress+0x488);
		
		/// <summary>
		/// Name: StationaryLightOverlapColors
		/// Type: TArray<FLinearColor>
		/// Offset: 0x498
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FLinearColor> StationaryLightOverlapColors => new TArray<FLinearColor>(BaseAddress+0x498);
		
		/// <summary>
		/// Name: LODColorationColors
		/// Type: TArray<FLinearColor>
		/// Offset: 0x4A8
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FLinearColor> LODColorationColors => new TArray<FLinearColor>(BaseAddress+0x4A8);
		
		/// <summary>
		/// Name: HLODColorationColors
		/// Type: TArray<FLinearColor>
		/// Offset: 0x4B8
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FLinearColor> HLODColorationColors => new TArray<FLinearColor>(BaseAddress+0x4B8);
		
		/// <summary>
		/// Name: StreamingAccuracyColors
		/// Type: TArray<FLinearColor>
		/// Offset: 0x4C8
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FLinearColor> StreamingAccuracyColors => new TArray<FLinearColor>(BaseAddress+0x4C8);
		
		/// <summary>
		/// Name: MaxPixelShaderAdditiveComplexityCount
		/// Type: FloatProperty
		/// Offset: 0x4D8
		/// Size: 0x04
		/// </summary>
		public float MaxPixelShaderAdditiveComplexityCount
		{
			get
			{
				return ReadSingle(0x4D8);
			}
			set
			{
				WriteSingle(0x4D8,value);
			}
		}
		
		/// <summary>
		/// Name: MaxES2PixelShaderAdditiveComplexityCount
		/// Type: FloatProperty
		/// Offset: 0x4DC
		/// Size: 0x04
		/// </summary>
		public float MaxES2PixelShaderAdditiveComplexityCount
		{
			get
			{
				return ReadSingle(0x4DC);
			}
			set
			{
				WriteSingle(0x4DC,value);
			}
		}
		
		/// <summary>
		/// Name: MinLightMapDensity
		/// Type: FloatProperty
		/// Offset: 0x4E0
		/// Size: 0x04
		/// </summary>
		public float MinLightMapDensity
		{
			get
			{
				return ReadSingle(0x4E0);
			}
			set
			{
				WriteSingle(0x4E0,value);
			}
		}
		
		/// <summary>
		/// Name: IdealLightMapDensity
		/// Type: FloatProperty
		/// Offset: 0x4E4
		/// Size: 0x04
		/// </summary>
		public float IdealLightMapDensity
		{
			get
			{
				return ReadSingle(0x4E4);
			}
			set
			{
				WriteSingle(0x4E4,value);
			}
		}
		
		/// <summary>
		/// Name: MaxLightMapDensity
		/// Type: FloatProperty
		/// Offset: 0x4E8
		/// Size: 0x04
		/// </summary>
		public float MaxLightMapDensity
		{
			get
			{
				return ReadSingle(0x4E8);
			}
			set
			{
				WriteSingle(0x4E8,value);
			}
		}
		
		/// <summary>
		/// Name: bRenderLightMapDensityGrayscale
		/// Type: BoolProperty
		/// Offset: 0x4EC
		/// Size: 0x01
		/// </summary>
		public bool bRenderLightMapDensityGrayscale => (ReadByte(0x04EC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: RenderLightMapDensityGrayscaleScale
		/// Type: FloatProperty
		/// Offset: 0x4F0
		/// Size: 0x04
		/// </summary>
		public float RenderLightMapDensityGrayscaleScale
		{
			get
			{
				return ReadSingle(0x4F0);
			}
			set
			{
				WriteSingle(0x4F0,value);
			}
		}
		
		/// <summary>
		/// Name: RenderLightMapDensityColorScale
		/// Type: FloatProperty
		/// Offset: 0x4F4
		/// Size: 0x04
		/// </summary>
		public float RenderLightMapDensityColorScale
		{
			get
			{
				return ReadSingle(0x4F4);
			}
			set
			{
				WriteSingle(0x4F4,value);
			}
		}
		
		/// <summary>
		/// Name: LightMapDensityVertexMappedColor
		/// Type: StructProperty
		/// Offset: 0x4F8
		/// Size: 0x10
		/// </summary>
		public FLinearColor LightMapDensityVertexMappedColor => ReadStruct<FLinearColor>(0x4F8);
		
		/// <summary>
		/// Name: LightMapDensitySelectedColor
		/// Type: StructProperty
		/// Offset: 0x508
		/// Size: 0x10
		/// </summary>
		public FLinearColor LightMapDensitySelectedColor => ReadStruct<FLinearColor>(0x508);
		
		/// <summary>
		/// Name: StatColorMappings
		/// Type: TArray<FStatColorMapping>
		/// Offset: 0x518
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FStatColorMapping> StatColorMappings => new TArray<FStatColorMapping>(BaseAddress+0x518);
		
		/// <summary>
		/// Name: DefaultPhysMaterial
		/// Type: ObjectProperty
		/// Offset: 0x528
		/// Size: 0x08
		/// </summary>
		public UPhysicalMaterial DefaultPhysMaterial => ReadUObject<UPhysicalMaterial>(0x528);
		
		/// <summary>
		/// Name: DefaultPhysMaterialName
		/// Type: StructProperty
		/// Offset: 0x530
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference DefaultPhysMaterialName => ReadStruct<FStringAssetReference>(0x530);
		
		/// <summary>
		/// Name: ActiveGameNameRedirects
		/// Type: TArray<FGameNameRedirect>
		/// Offset: 0x540
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FGameNameRedirect> ActiveGameNameRedirects => new TArray<FGameNameRedirect>(BaseAddress+0x540);
		
		/// <summary>
		/// Name: ActiveClassRedirects
		/// Type: TArray<FClassRedirect>
		/// Offset: 0x550
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FClassRedirect> ActiveClassRedirects => new TArray<FClassRedirect>(BaseAddress+0x550);
		
		/// <summary>
		/// Name: ActivePluginRedirects
		/// Type: TArray<FPluginRedirect>
		/// Offset: 0x560
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FPluginRedirect> ActivePluginRedirects => new TArray<FPluginRedirect>(BaseAddress+0x560);
		
		/// <summary>
		/// Name: ActiveStructRedirects
		/// Type: TArray<FStructRedirect>
		/// Offset: 0x570
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FStructRedirect> ActiveStructRedirects => new TArray<FStructRedirect>(BaseAddress+0x570);
		
		/// <summary>
		/// Name: PreIntegratedSkinBRDFTexture
		/// Type: ObjectProperty
		/// Offset: 0x580
		/// Size: 0x08
		/// </summary>
		public UTexture2D PreIntegratedSkinBRDFTexture => ReadUObject<UTexture2D>(0x580);
		
		/// <summary>
		/// Name: PreIntegratedSkinBRDFTextureName
		/// Type: StructProperty
		/// Offset: 0x588
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference PreIntegratedSkinBRDFTextureName => ReadStruct<FStringAssetReference>(0x588);
		
		/// <summary>
		/// Name: MiniFontTexture
		/// Type: ObjectProperty
		/// Offset: 0x598
		/// Size: 0x08
		/// </summary>
		public UTexture2D MiniFontTexture => ReadUObject<UTexture2D>(0x598);
		
		/// <summary>
		/// Name: MiniFontTextureName
		/// Type: StructProperty
		/// Offset: 0x5A0
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference MiniFontTextureName => ReadStruct<FStringAssetReference>(0x5A0);
		
		/// <summary>
		/// Name: WeightMapPlaceholderTexture
		/// Type: ObjectProperty
		/// Offset: 0x5B0
		/// Size: 0x08
		/// </summary>
		public UTexture WeightMapPlaceholderTexture => ReadUObject<UTexture>(0x5B0);
		
		/// <summary>
		/// Name: WeightMapPlaceholderTextureName
		/// Type: StructProperty
		/// Offset: 0x5B8
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference WeightMapPlaceholderTextureName => ReadStruct<FStringAssetReference>(0x5B8);
		
		/// <summary>
		/// Name: LightMapDensityTexture
		/// Type: ObjectProperty
		/// Offset: 0x5C8
		/// Size: 0x08
		/// </summary>
		public UTexture2D LightMapDensityTexture => ReadUObject<UTexture2D>(0x5C8);
		
		/// <summary>
		/// Name: LightMapDensityTextureName
		/// Type: StructProperty
		/// Offset: 0x5D0
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference LightMapDensityTextureName => ReadStruct<FStringAssetReference>(0x5D0);
		
		/// <summary>
		/// Name: GameViewport
		/// Type: ObjectProperty
		/// Offset: 0x5E8
		/// Size: 0x08
		/// </summary>
		public UGameViewportClient GameViewport => ReadUObject<UGameViewportClient>(0x5E8);
		
		/// <summary>
		/// Name: DeferredCommands
		/// Type: TArray<>
		/// Offset: 0x5F0
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: TickCycles
		/// Type: IntProperty
		/// Offset: 0x600
		/// Size: 0x04
		/// </summary>
		public int TickCycles
		{
			get
			{
				return ReadInt32(0x600);
			}
			set
			{
				WriteInt32(0x600,value);
			}
		}
		
		/// <summary>
		/// Name: GameCycles
		/// Type: IntProperty
		/// Offset: 0x604
		/// Size: 0x04
		/// </summary>
		public int GameCycles
		{
			get
			{
				return ReadInt32(0x604);
			}
			set
			{
				WriteInt32(0x604,value);
			}
		}
		
		/// <summary>
		/// Name: ClientCycles
		/// Type: IntProperty
		/// Offset: 0x608
		/// Size: 0x04
		/// </summary>
		public int ClientCycles
		{
			get
			{
				return ReadInt32(0x608);
			}
			set
			{
				WriteInt32(0x608,value);
			}
		}
		
		/// <summary>
		/// Name: NearClipPlane
		/// Type: FloatProperty
		/// Offset: 0x60C
		/// Size: 0x04
		/// </summary>
		public float NearClipPlane
		{
			get
			{
				return ReadSingle(0x60C);
			}
			set
			{
				WriteSingle(0x60C,value);
			}
		}
		
		/// <summary>
		/// Name: bHardwareSurveyEnabled
		/// Type: BoolProperty
		/// Offset: 0x610
		/// Size: 0x01
		/// </summary>
		public bool bHardwareSurveyEnabled => (ReadByte(0x0610) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSubtitlesEnabled
		/// Type: BoolProperty
		/// Offset: 0x610
		/// Size: 0x01
		/// </summary>
		public bool bSubtitlesEnabled => (ReadByte(0x0610) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bSubtitlesForcedOff
		/// Type: BoolProperty
		/// Offset: 0x610
		/// Size: 0x01
		/// </summary>
		public bool bSubtitlesForcedOff => (ReadByte(0x0610) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: MaximumLoopIterationCount
		/// Type: IntProperty
		/// Offset: 0x614
		/// Size: 0x04
		/// </summary>
		public int MaximumLoopIterationCount
		{
			get
			{
				return ReadInt32(0x614);
			}
			set
			{
				WriteInt32(0x614,value);
			}
		}
		
		/// <summary>
		/// Name: bCanBlueprintsTickByDefault
		/// Type: BoolProperty
		/// Offset: 0x618
		/// Size: 0x01
		/// </summary>
		public bool bCanBlueprintsTickByDefault => (ReadByte(0x0618) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOptimizeAnimBlueprintMemberVariableAccess
		/// Type: BoolProperty
		/// Offset: 0x618
		/// Size: 0x01
		/// </summary>
		public bool bOptimizeAnimBlueprintMemberVariableAccess => (ReadByte(0x0618) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bEnableEditorPSysRealtimeLOD
		/// Type: BoolProperty
		/// Offset: 0x618
		/// Size: 0x01
		/// </summary>
		public bool bEnableEditorPSysRealtimeLOD => (ReadByte(0x0618) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bSmoothFrameRate
		/// Type: BoolProperty
		/// Offset: 0x618
		/// Size: 0x01
		/// </summary>
		public bool bSmoothFrameRate => (ReadByte(0x0618) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bUseFixedFrameRate
		/// Type: BoolProperty
		/// Offset: 0x618
		/// Size: 0x01
		/// </summary>
		public bool bUseFixedFrameRate => (ReadByte(0x0618) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: FixedFrameRate
		/// Type: FloatProperty
		/// Offset: 0x61C
		/// Size: 0x04
		/// </summary>
		public float FixedFrameRate
		{
			get
			{
				return ReadSingle(0x61C);
			}
			set
			{
				WriteSingle(0x61C,value);
			}
		}
		
		/// <summary>
		/// Name: SmoothedFrameRateRange
		/// Type: StructProperty
		/// Offset: 0x620
		/// Size: 0x10
		/// </summary>
		public FFloatRange SmoothedFrameRateRange => ReadStruct<FFloatRange>(0x620);
		
		/// <summary>
		/// Name: bCheckForMultiplePawnsSpawnedInAFrame
		/// Type: BoolProperty
		/// Offset: 0x630
		/// Size: 0x01
		/// </summary>
		public bool bCheckForMultiplePawnsSpawnedInAFrame => (ReadByte(0x0630) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: NumPawnsAllowedToBeSpawnedInAFrame
		/// Type: IntProperty
		/// Offset: 0x634
		/// Size: 0x04
		/// </summary>
		public int NumPawnsAllowedToBeSpawnedInAFrame
		{
			get
			{
				return ReadInt32(0x634);
			}
			set
			{
				WriteInt32(0x634,value);
			}
		}
		
		/// <summary>
		/// Name: bShouldGenerateLowQualityLightmaps
		/// Type: BoolProperty
		/// Offset: 0x638
		/// Size: 0x01
		/// </summary>
		public bool bShouldGenerateLowQualityLightmaps => (ReadByte(0x0638) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: C_WorldBox
		/// Type: StructProperty
		/// Offset: 0x63C
		/// Size: 0x04
		/// </summary>
		public FColor C_WorldBox => ReadStruct<FColor>(0x63C);
		
		/// <summary>
		/// Name: C_BrushWire
		/// Type: StructProperty
		/// Offset: 0x640
		/// Size: 0x04
		/// </summary>
		public FColor C_BrushWire => ReadStruct<FColor>(0x640);
		
		/// <summary>
		/// Name: C_AddWire
		/// Type: StructProperty
		/// Offset: 0x644
		/// Size: 0x04
		/// </summary>
		public FColor C_AddWire => ReadStruct<FColor>(0x644);
		
		/// <summary>
		/// Name: C_SubtractWire
		/// Type: StructProperty
		/// Offset: 0x648
		/// Size: 0x04
		/// </summary>
		public FColor C_SubtractWire => ReadStruct<FColor>(0x648);
		
		/// <summary>
		/// Name: C_SemiSolidWire
		/// Type: StructProperty
		/// Offset: 0x64C
		/// Size: 0x04
		/// </summary>
		public FColor C_SemiSolidWire => ReadStruct<FColor>(0x64C);
		
		/// <summary>
		/// Name: C_NonSolidWire
		/// Type: StructProperty
		/// Offset: 0x650
		/// Size: 0x04
		/// </summary>
		public FColor C_NonSolidWire => ReadStruct<FColor>(0x650);
		
		/// <summary>
		/// Name: C_WireBackground
		/// Type: StructProperty
		/// Offset: 0x654
		/// Size: 0x04
		/// </summary>
		public FColor C_WireBackground => ReadStruct<FColor>(0x654);
		
		/// <summary>
		/// Name: C_ScaleBoxHi
		/// Type: StructProperty
		/// Offset: 0x658
		/// Size: 0x04
		/// </summary>
		public FColor C_ScaleBoxHi => ReadStruct<FColor>(0x658);
		
		/// <summary>
		/// Name: C_VolumeCollision
		/// Type: StructProperty
		/// Offset: 0x65C
		/// Size: 0x04
		/// </summary>
		public FColor C_VolumeCollision => ReadStruct<FColor>(0x65C);
		
		/// <summary>
		/// Name: C_BSPCollision
		/// Type: StructProperty
		/// Offset: 0x660
		/// Size: 0x04
		/// </summary>
		public FColor C_BSPCollision => ReadStruct<FColor>(0x660);
		
		/// <summary>
		/// Name: C_OrthoBackground
		/// Type: StructProperty
		/// Offset: 0x664
		/// Size: 0x04
		/// </summary>
		public FColor C_OrthoBackground => ReadStruct<FColor>(0x664);
		
		/// <summary>
		/// Name: C_Volume
		/// Type: StructProperty
		/// Offset: 0x668
		/// Size: 0x04
		/// </summary>
		public FColor C_Volume => ReadStruct<FColor>(0x668);
		
		/// <summary>
		/// Name: C_BrushShape
		/// Type: StructProperty
		/// Offset: 0x66C
		/// Size: 0x04
		/// </summary>
		public FColor C_BrushShape => ReadStruct<FColor>(0x66C);
		
		/// <summary>
		/// Name: StreamingDistanceFactor
		/// Type: FloatProperty
		/// Offset: 0x670
		/// Size: 0x04
		/// </summary>
		public float StreamingDistanceFactor
		{
			get
			{
				return ReadSingle(0x670);
			}
			set
			{
				WriteSingle(0x670,value);
			}
		}
		
		/// <summary>
		/// Name: TransitionType
		/// Type: ByteProperty
		/// Offset: 0x674
		/// Size: 0x01
		/// </summary>
		public byte TransitionType
		{
			get
			{
				return ReadByte(0x674);
			}
			set
			{
				WriteByte(0x674,value);
			}
		}
		
		/// <summary>
		/// Name: TransitionDescription
		/// Type: StrProperty
		/// Offset: 0x678
		/// Size: 0x10
		/// </summary>
		public FString TransitionDescription => new FString(BaseAddress+0x678);
		
		/// <summary>
		/// Name: TransitionGameMode
		/// Type: StrProperty
		/// Offset: 0x688
		/// Size: 0x10
		/// </summary>
		public FString TransitionGameMode => new FString(BaseAddress+0x688);
		
		/// <summary>
		/// Name: MeshLODRange
		/// Type: FloatProperty
		/// Offset: 0x698
		/// Size: 0x04
		/// </summary>
		public float MeshLODRange
		{
			get
			{
				return ReadSingle(0x698);
			}
			set
			{
				WriteSingle(0x698,value);
			}
		}
		
		/// <summary>
		/// Name: bAllowMatureLanguage
		/// Type: BoolProperty
		/// Offset: 0x69C
		/// Size: 0x01
		/// </summary>
		public bool bAllowMatureLanguage => (ReadByte(0x069C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CameraRotationThreshold
		/// Type: FloatProperty
		/// Offset: 0x6A0
		/// Size: 0x04
		/// </summary>
		public float CameraRotationThreshold
		{
			get
			{
				return ReadSingle(0x6A0);
			}
			set
			{
				WriteSingle(0x6A0,value);
			}
		}
		
		/// <summary>
		/// Name: CameraTranslationThreshold
		/// Type: FloatProperty
		/// Offset: 0x6A4
		/// Size: 0x04
		/// </summary>
		public float CameraTranslationThreshold
		{
			get
			{
				return ReadSingle(0x6A4);
			}
			set
			{
				WriteSingle(0x6A4,value);
			}
		}
		
		/// <summary>
		/// Name: PrimitiveProbablyVisibleTime
		/// Type: FloatProperty
		/// Offset: 0x6A8
		/// Size: 0x04
		/// </summary>
		public float PrimitiveProbablyVisibleTime
		{
			get
			{
				return ReadSingle(0x6A8);
			}
			set
			{
				WriteSingle(0x6A8,value);
			}
		}
		
		/// <summary>
		/// Name: MaxOcclusionPixelsFraction
		/// Type: FloatProperty
		/// Offset: 0x6AC
		/// Size: 0x04
		/// </summary>
		public float MaxOcclusionPixelsFraction
		{
			get
			{
				return ReadSingle(0x6AC);
			}
			set
			{
				WriteSingle(0x6AC,value);
			}
		}
		
		/// <summary>
		/// Name: bPauseOnLossOfFocus
		/// Type: BoolProperty
		/// Offset: 0x6B0
		/// Size: 0x01
		/// </summary>
		public bool bPauseOnLossOfFocus => (ReadByte(0x06B0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: MaxParticleResize
		/// Type: IntProperty
		/// Offset: 0x6B4
		/// Size: 0x04
		/// </summary>
		public int MaxParticleResize
		{
			get
			{
				return ReadInt32(0x6B4);
			}
			set
			{
				WriteInt32(0x6B4,value);
			}
		}
		
		/// <summary>
		/// Name: MaxParticleResizeWarn
		/// Type: IntProperty
		/// Offset: 0x6B8
		/// Size: 0x04
		/// </summary>
		public int MaxParticleResizeWarn
		{
			get
			{
				return ReadInt32(0x6B8);
			}
			set
			{
				WriteInt32(0x6B8,value);
			}
		}
		
		/// <summary>
		/// Name: PendingDroppedNotes
		/// Type: TArray<FDropNoteInfo>
		/// Offset: 0x6C0
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FDropNoteInfo> PendingDroppedNotes => new TArray<FDropNoteInfo>(BaseAddress+0x6C0);
		
		/// <summary>
		/// Name: PhysicErrorCorrection
		/// Type: StructProperty
		/// Offset: 0x6D0
		/// Size: 0x1C
		/// </summary>
		public FRigidBodyErrorCorrection PhysicErrorCorrection => ReadStruct<FRigidBodyErrorCorrection>(0x6D0);
		
		/// <summary>
		/// Name: NetClientTicksPerSecond
		/// Type: FloatProperty
		/// Offset: 0x6EC
		/// Size: 0x04
		/// </summary>
		public float NetClientTicksPerSecond
		{
			get
			{
				return ReadSingle(0x6EC);
			}
			set
			{
				WriteSingle(0x6EC,value);
			}
		}
		
		/// <summary>
		/// Name: DisplayGamma
		/// Type: FloatProperty
		/// Offset: 0x6F0
		/// Size: 0x04
		/// </summary>
		public float DisplayGamma
		{
			get
			{
				return ReadSingle(0x6F0);
			}
			set
			{
				WriteSingle(0x6F0,value);
			}
		}
		
		/// <summary>
		/// Name: MinDesiredFrameRate
		/// Type: FloatProperty
		/// Offset: 0x6F4
		/// Size: 0x04
		/// </summary>
		public float MinDesiredFrameRate
		{
			get
			{
				return ReadSingle(0x6F4);
			}
			set
			{
				WriteSingle(0x6F4,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultSelectedMaterialColor
		/// Type: StructProperty
		/// Offset: 0x6F8
		/// Size: 0x10
		/// </summary>
		public FLinearColor DefaultSelectedMaterialColor => ReadStruct<FLinearColor>(0x6F8);
		
		/// <summary>
		/// Name: SelectedMaterialColor
		/// Type: StructProperty
		/// Offset: 0x708
		/// Size: 0x10
		/// </summary>
		public FLinearColor SelectedMaterialColor => ReadStruct<FLinearColor>(0x708);
		
		/// <summary>
		/// Name: SelectionOutlineColor
		/// Type: StructProperty
		/// Offset: 0x718
		/// Size: 0x10
		/// </summary>
		public FLinearColor SelectionOutlineColor => ReadStruct<FLinearColor>(0x718);
		
		/// <summary>
		/// Name: SubduedSelectionOutlineColor
		/// Type: StructProperty
		/// Offset: 0x728
		/// Size: 0x10
		/// </summary>
		public FLinearColor SubduedSelectionOutlineColor => ReadStruct<FLinearColor>(0x728);
		
		/// <summary>
		/// Name: SelectedMaterialColorOverride
		/// Type: StructProperty
		/// Offset: 0x738
		/// Size: 0x10
		/// </summary>
		public FLinearColor SelectedMaterialColorOverride => ReadStruct<FLinearColor>(0x738);
		
		/// <summary>
		/// Name: bIsOverridingSelectedColor
		/// Type: BoolProperty
		/// Offset: 0x748
		/// Size: 0x01
		/// </summary>
		public bool bIsOverridingSelectedColor
		{
			get
			{
				return ReadBool(0x748);
			}
			set
			{
				WriteBool(0x748,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableOnScreenDebugMessages
		/// Type: BoolProperty
		/// Offset: 0x74C
		/// Size: 0x01
		/// </summary>
		public bool bEnableOnScreenDebugMessages => (ReadByte(0x074C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bEnableOnScreenDebugMessagesDisplay
		/// Type: BoolProperty
		/// Offset: 0x74C
		/// Size: 0x01
		/// </summary>
		public bool bEnableOnScreenDebugMessagesDisplay => (ReadByte(0x074C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bSuppressMapWarnings
		/// Type: BoolProperty
		/// Offset: 0x74C
		/// Size: 0x01
		/// </summary>
		public bool bSuppressMapWarnings => (ReadByte(0x074C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bCookSeparateSharedMPGameContent
		/// Type: BoolProperty
		/// Offset: 0x74C
		/// Size: 0x01
		/// </summary>
		public bool bCookSeparateSharedMPGameContent => (ReadByte(0x074C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bDisableAILogging
		/// Type: BoolProperty
		/// Offset: 0x74C
		/// Size: 0x01
		/// </summary>
		public bool bDisableAILogging => (ReadByte(0x074C) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bEnableVisualLogRecordingOnStart
		/// Type: UInt32Property
		/// Offset: 0x750
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: ScreenSaverInhibitorSemaphore
		/// Type: IntProperty
		/// Offset: 0x758
		/// Size: 0x04
		/// </summary>
		public int ScreenSaverInhibitorSemaphore
		{
			get
			{
				return ReadInt32(0x758);
			}
			set
			{
				WriteInt32(0x758,value);
			}
		}
		
		/// <summary>
		/// Name: bLockReadOnlyLevels
		/// Type: BoolProperty
		/// Offset: 0x75C
		/// Size: 0x01
		/// </summary>
		public bool bLockReadOnlyLevels => (ReadByte(0x075C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ParticleEventManagerClassPath
		/// Type: StrProperty
		/// Offset: 0x760
		/// Size: 0x10
		/// </summary>
		public FString ParticleEventManagerClassPath => new FString(BaseAddress+0x760);
		
		/// <summary>
		/// Name: SelectionHighlightIntensity
		/// Type: FloatProperty
		/// Offset: 0x780
		/// Size: 0x04
		/// </summary>
		public float SelectionHighlightIntensity
		{
			get
			{
				return ReadSingle(0x780);
			}
			set
			{
				WriteSingle(0x780,value);
			}
		}
		
		/// <summary>
		/// Name: BSPSelectionHighlightIntensity
		/// Type: FloatProperty
		/// Offset: 0x784
		/// Size: 0x04
		/// </summary>
		public float BSPSelectionHighlightIntensity
		{
			get
			{
				return ReadSingle(0x784);
			}
			set
			{
				WriteSingle(0x784,value);
			}
		}
		
		/// <summary>
		/// Name: HoverHighlightIntensity
		/// Type: FloatProperty
		/// Offset: 0x788
		/// Size: 0x04
		/// </summary>
		public float HoverHighlightIntensity
		{
			get
			{
				return ReadSingle(0x788);
			}
			set
			{
				WriteSingle(0x788,value);
			}
		}
		
		/// <summary>
		/// Name: SelectionHighlightIntensityBillboards
		/// Type: FloatProperty
		/// Offset: 0x78C
		/// Size: 0x04
		/// </summary>
		public float SelectionHighlightIntensityBillboards
		{
			get
			{
				return ReadSingle(0x78C);
			}
			set
			{
				WriteSingle(0x78C,value);
			}
		}
		
		/// <summary>
		/// Name: NetDriverDefinitions
		/// Type: TArray<FNetDriverDefinition>
		/// Offset: 0xB40
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FNetDriverDefinition> NetDriverDefinitions => new TArray<FNetDriverDefinition>(BaseAddress+0xB40);
		
		/// <summary>
		/// Name: ServerActors
		/// Type: TArray<>
		/// Offset: 0xB50
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: RuntimeServerActors
		/// Type: TArray<>
		/// Offset: 0xB60
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: bStartedLoadMapMovie
		/// Type: BoolProperty
		/// Offset: 0xB70
		/// Size: 0x01
		/// </summary>
		public bool bStartedLoadMapMovie => (ReadByte(0x0B70) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: NextWorldContextHandle
		/// Type: IntProperty
		/// Offset: 0xB88
		/// Size: 0x04
		/// </summary>
		public int NextWorldContextHandle
		{
			get
			{
				return ReadInt32(0xB88);
			}
			set
			{
				WriteInt32(0xB88,value);
			}
		}
		
	}


	/// <summary>
	/// UScriptViewportClient:UObject
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UScriptViewportClient:UObject
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UGameViewportClient:UScriptViewportClient
	/// Size: 0x450
	/// Properties: 4
	/// </summary>
	public class UGameViewportClient:UScriptViewportClient
	{
		public override int ObjectSize => 1104;
		/// <summary>
		/// Name: ViewportConsole
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UConsole ViewportConsole => ReadUObject<UConsole>(0x38);
		
		/// <summary>
		/// Name: DebugProperties
		/// Type: TArray<FDebugDisplayProperty>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FDebugDisplayProperty> DebugProperties => new TArray<FDebugDisplayProperty>(BaseAddress+0x40);
		
		/// <summary>
		/// Name: World
		/// Type: ObjectProperty
		/// Offset: 0x80
		/// Size: 0x08
		/// </summary>
		public UWorld World => ReadUObject<UWorld>(0x80);
		
		/// <summary>
		/// Name: GameInstance
		/// Type: ObjectProperty
		/// Offset: 0x88
		/// Size: 0x08
		/// </summary>
		public UGameInstance GameInstance => ReadUObject<UGameInstance>(0x88);
		
	}


	/// <summary>
	/// UConanGameViewportClient:UGameViewportClient
	/// Size: 0x450
	/// Properties: 0
	/// </summary>
	public class UConanGameViewportClient:UGameViewportClient
	{
		public override int ObjectSize => 1104;
	}


	/// <summary>
	/// AHUD:AActor
	/// Size: 0x4D0
	/// Properties: 21
	/// </summary>
	public class AHUD:AActor
	{
		public override int ObjectSize => 1232;
		/// <summary>
		/// Name: WhiteColor
		/// Type: StructProperty
		/// Offset: 0x3D0
		/// Size: 0x04
		/// </summary>
		public FColor WhiteColor => ReadStruct<FColor>(0x3D0);
		
		/// <summary>
		/// Name: GreenColor
		/// Type: StructProperty
		/// Offset: 0x3D4
		/// Size: 0x04
		/// </summary>
		public FColor GreenColor => ReadStruct<FColor>(0x3D4);
		
		/// <summary>
		/// Name: RedColor
		/// Type: StructProperty
		/// Offset: 0x3D8
		/// Size: 0x04
		/// </summary>
		public FColor RedColor => ReadStruct<FColor>(0x3D8);
		
		/// <summary>
		/// Name: PlayerOwner
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public APlayerController PlayerOwner => ReadUObject<APlayerController>(0x3E0);
		
		/// <summary>
		/// Name: bLostFocusPaused
		/// Type: BoolProperty
		/// Offset: 0x3E8
		/// Size: 0x01
		/// </summary>
		public bool bLostFocusPaused => (ReadByte(0x03E8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bShowHUD
		/// Type: BoolProperty
		/// Offset: 0x3E8
		/// Size: 0x01
		/// </summary>
		public bool bShowHUD => (ReadByte(0x03E8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bShowDebugInfo
		/// Type: BoolProperty
		/// Offset: 0x3E8
		/// Size: 0x01
		/// </summary>
		public bool bShowDebugInfo => (ReadByte(0x03E8) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bShowHitBoxDebugInfo
		/// Type: BoolProperty
		/// Offset: 0x3E8
		/// Size: 0x01
		/// </summary>
		public bool bShowHitBoxDebugInfo => (ReadByte(0x03E8) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bShowOverlays
		/// Type: BoolProperty
		/// Offset: 0x3E8
		/// Size: 0x01
		/// </summary>
		public bool bShowOverlays => (ReadByte(0x03E8) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bEnableDebugTextShadow
		/// Type: BoolProperty
		/// Offset: 0x3E8
		/// Size: 0x01
		/// </summary>
		public bool bEnableDebugTextShadow => (ReadByte(0x03E8) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: PostRenderedActors
		/// Type: TArray<AActor>
		/// Offset: 0x3F0
		/// Size: 0x10
		/// SubElement Size: 0x3D0
		/// </summary>
		public TArray<AActor> PostRenderedActors => new TArray<AActor>(BaseAddress+0x3F0);
		
		/// <summary>
		/// Name: LastHUDRenderTime
		/// Type: FloatProperty
		/// Offset: 0x400
		/// Size: 0x04
		/// </summary>
		public float LastHUDRenderTime
		{
			get
			{
				return ReadSingle(0x400);
			}
			set
			{
				WriteSingle(0x400,value);
			}
		}
		
		/// <summary>
		/// Name: RenderDelta
		/// Type: FloatProperty
		/// Offset: 0x404
		/// Size: 0x04
		/// </summary>
		public float RenderDelta
		{
			get
			{
				return ReadSingle(0x404);
			}
			set
			{
				WriteSingle(0x404,value);
			}
		}
		
		/// <summary>
		/// Name: DebugDisplay
		/// Type: TArray<FName>
		/// Offset: 0x408
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> DebugDisplay => new TArray<FName>(BaseAddress+0x408);
		
		/// <summary>
		/// Name: ToggledDebugCategories
		/// Type: TArray<FName>
		/// Offset: 0x418
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> ToggledDebugCategories => new TArray<FName>(BaseAddress+0x418);
		
		/// <summary>
		/// Name: Canvas
		/// Type: ObjectProperty
		/// Offset: 0x428
		/// Size: 0x08
		/// </summary>
		public UCanvas Canvas => ReadUObject<UCanvas>(0x428);
		
		/// <summary>
		/// Name: DebugCanvas
		/// Type: ObjectProperty
		/// Offset: 0x430
		/// Size: 0x08
		/// </summary>
		public UCanvas DebugCanvas => ReadUObject<UCanvas>(0x430);
		
		/// <summary>
		/// Name: DebugTextList
		/// Type: TArray<FDebugTextInfo>
		/// Offset: 0x438
		/// Size: 0x10
		/// SubElement Size: 0x60
		/// </summary>
		public TArray<FDebugTextInfo> DebugTextList => new TArray<FDebugTextInfo>(BaseAddress+0x438);
		
		/// <summary>
		/// Name: bShowDebugForReticleTarget
		/// Type: BoolProperty
		/// Offset: 0x448
		/// Size: 0x01
		/// </summary>
		public bool bShowDebugForReticleTarget
		{
			get
			{
				return ReadBool(0x448);
			}
			set
			{
				WriteBool(0x448,value);
			}
		}
		
		/// <summary>
		/// Name: ShowDebugTargetDesiredClass
		/// Type: ClassProperty
		/// Offset: 0x450
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ShowDebugTargetActor
		/// Type: ObjectProperty
		/// Offset: 0x458
		/// Size: 0x08
		/// </summary>
		public AActor ShowDebugTargetActor => ReadUObject<AActor>(0x458);
		
	}


	/// <summary>
	/// AConanHUD:AHUD
	/// Size: 0x4E8
	/// Properties: 1
	/// </summary>
	public class AConanHUD:AHUD
	{
		public override int ObjectSize => 1256;
		/// <summary>
		/// Name: LoadingScreenText
		/// Type: TextProperty
		/// Offset: 0x4D0
		/// Size: 0x18
		/// </summary>
		
	}


	/// <summary>
	/// ALevelScriptActor:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class ALevelScriptActor:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: bInputEnabled
		/// Type: BoolProperty
		/// Offset: 0x3D0
		/// Size: 0x01
		/// </summary>
		public bool bInputEnabled => (ReadByte(0x03D0) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// ADWLevelScriptActor:ALevelScriptActor
	/// Size: 0x3D8
	/// Properties: 0
	/// </summary>
	public class ADWLevelScriptActor:ALevelScriptActor
	{
		public override int ObjectSize => 984;
	}


	/// <summary>
	/// AConanLevelScriptActor:ADWLevelScriptActor
	/// Size: 0x3D8
	/// Properties: 0
	/// </summary>
	public class AConanLevelScriptActor:ADWLevelScriptActor
	{
		public override int ObjectSize => 984;
	}


	/// <summary>
	/// AConanSandboxLevelScriptActor:AConanLevelScriptActor
	/// Size: 0x3D8
	/// Properties: 0
	/// </summary>
	public class AConanSandboxLevelScriptActor:AConanLevelScriptActor
	{
		public override int ObjectSize => 984;
	}


	/// <summary>
	/// UPlayer:UObject
	/// Size: 0x48
	/// Properties: 4
	/// </summary>
	public class UPlayer:UObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: PlayerController
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public APlayerController PlayerController => ReadUObject<APlayerController>(0x30);
		
		/// <summary>
		/// Name: CurrentNetSpeed
		/// Type: IntProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public int CurrentNetSpeed
		{
			get
			{
				return ReadInt32(0x38);
			}
			set
			{
				WriteInt32(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: ConfiguredInternetSpeed
		/// Type: IntProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public int ConfiguredInternetSpeed
		{
			get
			{
				return ReadInt32(0x3C);
			}
			set
			{
				WriteInt32(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: ConfiguredLanSpeed
		/// Type: IntProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public int ConfiguredLanSpeed
		{
			get
			{
				return ReadInt32(0x40);
			}
			set
			{
				WriteInt32(0x40,value);
			}
		}
		
	}


	/// <summary>
	/// ULocalPlayer:UPlayer
	/// Size: 0x190
	/// Properties: 4
	/// </summary>
	public class ULocalPlayer:UPlayer
	{
		public override int ObjectSize => 400;
		/// <summary>
		/// Name: ViewportClient
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UGameViewportClient ViewportClient => ReadUObject<UGameViewportClient>(0x58);
		
		/// <summary>
		/// Name: AspectRatioAxisConstraint
		/// Type: ByteProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public byte AspectRatioAxisConstraint
		{
			get
			{
				return ReadByte(0x7C);
			}
			set
			{
				WriteByte(0x7C,value);
			}
		}
		
		/// <summary>
		/// Name: PendingLevelPlayerControllerClass
		/// Type: ClassProperty
		/// Offset: 0x80
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bSentSplitJoin
		/// Type: BoolProperty
		/// Offset: 0x88
		/// Size: 0x01
		/// </summary>
		public bool bSentSplitJoin => (ReadByte(0x0088) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UConanLocalPlayer:ULocalPlayer
	/// Size: 0x190
	/// Properties: 0
	/// </summary>
	public class UConanLocalPlayer:ULocalPlayer
	{
		public override int ObjectSize => 400;
	}


	/// <summary>
	/// UPathFollowingComponent:UActorComponent
	/// Size: 0x340
	/// Properties: 3
	/// </summary>
	public class UPathFollowingComponent:UActorComponent
	{
		public override int ObjectSize => 832;
		/// <summary>
		/// Name: MovementComp
		/// Type: ObjectProperty
		/// Offset: 0x190
		/// Size: 0x08
		/// </summary>
		public UNavMovementComponent MovementComp => ReadUObject<UNavMovementComponent>(0x190);
		
		/// <summary>
		/// Name: MyNavData
		/// Type: ObjectProperty
		/// Offset: 0x1A0
		/// Size: 0x08
		/// </summary>
		public ANavigationData MyNavData => ReadUObject<ANavigationData>(0x1A0);
		
		/// <summary>
		/// Name: bUseVisibilityTestsSimplification
		/// Type: BoolProperty
		/// Offset: 0x294
		/// Size: 0x01
		/// </summary>
		public bool bUseVisibilityTestsSimplification => (ReadByte(0x0294) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UConanPathFollowingComponent:UPathFollowingComponent
	/// Size: 0x440
	/// Properties: 15
	/// </summary>
	public class UConanPathFollowingComponent:UPathFollowingComponent
	{
		public override int ObjectSize => 1088;
		/// <summary>
		/// Name: PathWidth
		/// Type: FloatProperty
		/// Offset: 0x338
		/// Size: 0x04
		/// </summary>
		public float PathWidth
		{
			get
			{
				return ReadSingle(0x338);
			}
			set
			{
				WriteSingle(0x338,value);
			}
		}
		
		/// <summary>
		/// Name: BreakAngle
		/// Type: FloatProperty
		/// Offset: 0x33C
		/// Size: 0x04
		/// </summary>
		public float BreakAngle
		{
			get
			{
				return ReadSingle(0x33C);
			}
			set
			{
				WriteSingle(0x33C,value);
			}
		}
		
		/// <summary>
		/// Name: AccelerationFactor
		/// Type: FloatProperty
		/// Offset: 0x340
		/// Size: 0x04
		/// </summary>
		public float AccelerationFactor
		{
			get
			{
				return ReadSingle(0x340);
			}
			set
			{
				WriteSingle(0x340,value);
			}
		}
		
		/// <summary>
		/// Name: AccelerationMinSpeed
		/// Type: FloatProperty
		/// Offset: 0x344
		/// Size: 0x04
		/// </summary>
		public float AccelerationMinSpeed
		{
			get
			{
				return ReadSingle(0x344);
			}
			set
			{
				WriteSingle(0x344,value);
			}
		}
		
		/// <summary>
		/// Name: NavMeshSearchExtent
		/// Type: FloatProperty
		/// Offset: 0x348
		/// Size: 0x04
		/// </summary>
		public float NavMeshSearchExtent
		{
			get
			{
				return ReadSingle(0x348);
			}
			set
			{
				WriteSingle(0x348,value);
			}
		}
		
		/// <summary>
		/// Name: AvoidanceMaxTimeHorizonSeconds
		/// Type: FloatProperty
		/// Offset: 0x34C
		/// Size: 0x04
		/// </summary>
		public float AvoidanceMaxTimeHorizonSeconds
		{
			get
			{
				return ReadSingle(0x34C);
			}
			set
			{
				WriteSingle(0x34C,value);
			}
		}
		
		/// <summary>
		/// Name: AvoidanceMinTimeHorizonSeconds
		/// Type: FloatProperty
		/// Offset: 0x350
		/// Size: 0x04
		/// </summary>
		public float AvoidanceMinTimeHorizonSeconds
		{
			get
			{
				return ReadSingle(0x350);
			}
			set
			{
				WriteSingle(0x350,value);
			}
		}
		
		/// <summary>
		/// Name: AvoidanceMinDistance
		/// Type: FloatProperty
		/// Offset: 0x354
		/// Size: 0x04
		/// </summary>
		public float AvoidanceMinDistance
		{
			get
			{
				return ReadSingle(0x354);
			}
			set
			{
				WriteSingle(0x354,value);
			}
		}
		
		/// <summary>
		/// Name: AvoidanceSearchRadius
		/// Type: FloatProperty
		/// Offset: 0x358
		/// Size: 0x04
		/// </summary>
		public float AvoidanceSearchRadius
		{
			get
			{
				return ReadSingle(0x358);
			}
			set
			{
				WriteSingle(0x358,value);
			}
		}
		
		/// <summary>
		/// Name: InitialAvoidanceYawSearchRange
		/// Type: FloatProperty
		/// Offset: 0x35C
		/// Size: 0x04
		/// </summary>
		public float InitialAvoidanceYawSearchRange
		{
			get
			{
				return ReadSingle(0x35C);
			}
			set
			{
				WriteSingle(0x35C,value);
			}
		}
		
		/// <summary>
		/// Name: AvoidanceMinSpeed
		/// Type: FloatProperty
		/// Offset: 0x360
		/// Size: 0x04
		/// </summary>
		public float AvoidanceMinSpeed
		{
			get
			{
				return ReadSingle(0x360);
			}
			set
			{
				WriteSingle(0x360,value);
			}
		}
		
		/// <summary>
		/// Name: SecondsUntilFullAvoidanceYawSearchRange
		/// Type: FloatProperty
		/// Offset: 0x364
		/// Size: 0x04
		/// </summary>
		public float SecondsUntilFullAvoidanceYawSearchRange
		{
			get
			{
				return ReadSingle(0x364);
			}
			set
			{
				WriteSingle(0x364,value);
			}
		}
		
		/// <summary>
		/// Name: AvoidPlayerCharacters
		/// Type: BoolProperty
		/// Offset: 0x368
		/// Size: 0x01
		/// </summary>
		public bool AvoidPlayerCharacters => (ReadByte(0x0368) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: PredictedObstacles
		/// Type: TArray<FPredictedObstacle>
		/// Offset: 0x370
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FPredictedObstacle> PredictedObstacles => new TArray<FPredictedObstacle>(BaseAddress+0x370);
		
		/// <summary>
		/// Name: YawAngleWeights
		/// Type: StructProperty
		/// Offset: 0x380
		/// Size: 0x18
		/// </summary>
		public FPolarUtilityVector YawAngleWeights => ReadStruct<FPolarUtilityVector>(0x380);
		
	}


	/// <summary>
	/// APlayerCameraManager:AActor
	/// Size: 0x1518
	/// Properties: 29
	/// </summary>
	public class APlayerCameraManager:AActor
	{
		public override int ObjectSize => 5400;
		/// <summary>
		/// Name: PCOwner
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public APlayerController PCOwner => ReadUObject<APlayerController>(0x3D0);
		
		/// <summary>
		/// Name: TransformComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public USceneComponent TransformComponent => ReadUObject<USceneComponent>(0x3D8);
		
		/// <summary>
		/// Name: DefaultFOV
		/// Type: FloatProperty
		/// Offset: 0x3E8
		/// Size: 0x04
		/// </summary>
		public float DefaultFOV
		{
			get
			{
				return ReadSingle(0x3E8);
			}
			set
			{
				WriteSingle(0x3E8,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultOrthoWidth
		/// Type: FloatProperty
		/// Offset: 0x3F0
		/// Size: 0x04
		/// </summary>
		public float DefaultOrthoWidth
		{
			get
			{
				return ReadSingle(0x3F0);
			}
			set
			{
				WriteSingle(0x3F0,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultAspectRatio
		/// Type: FloatProperty
		/// Offset: 0x3F8
		/// Size: 0x04
		/// </summary>
		public float DefaultAspectRatio
		{
			get
			{
				return ReadSingle(0x3F8);
			}
			set
			{
				WriteSingle(0x3F8,value);
			}
		}
		
		/// <summary>
		/// Name: CameraCache
		/// Type: StructProperty
		/// Offset: 0x440
		/// Size: 0x3E8
		/// </summary>
		public FCameraCacheEntry CameraCache => ReadStruct<FCameraCacheEntry>(0x440);
		
		/// <summary>
		/// Name: LastFrameCameraCache
		/// Type: StructProperty
		/// Offset: 0x828
		/// Size: 0x3E8
		/// </summary>
		public FCameraCacheEntry LastFrameCameraCache => ReadStruct<FCameraCacheEntry>(0x828);
		
		/// <summary>
		/// Name: ViewTarget
		/// Type: StructProperty
		/// Offset: 0xC10
		/// Size: 0x3F0
		/// </summary>
		public FTViewTarget ViewTarget => ReadStruct<FTViewTarget>(0xC10);
		
		/// <summary>
		/// Name: PendingViewTarget
		/// Type: StructProperty
		/// Offset: 0x1000
		/// Size: 0x3F0
		/// </summary>
		public FTViewTarget PendingViewTarget => ReadStruct<FTViewTarget>(0x1000);
		
		/// <summary>
		/// Name: ModifierList
		/// Type: TArray<UCameraModifier>
		/// Offset: 0x1408
		/// Size: 0x10
		/// SubElement Size: 0x48
		/// </summary>
		public TArray<UCameraModifier> ModifierList => new TArray<UCameraModifier>(BaseAddress+0x1408);
		
		/// <summary>
		/// Name: DefaultModifiers
		/// Type: TArray<>
		/// Offset: 0x1418
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: FreeCamDistance
		/// Type: FloatProperty
		/// Offset: 0x1428
		/// Size: 0x04
		/// </summary>
		public float FreeCamDistance
		{
			get
			{
				return ReadSingle(0x1428);
			}
			set
			{
				WriteSingle(0x1428,value);
			}
		}
		
		/// <summary>
		/// Name: FreeCamOffset
		/// Type: StructProperty
		/// Offset: 0x142C
		/// Size: 0x0C
		/// </summary>
		public FVector FreeCamOffset => ReadStruct<FVector>(0x142C);
		
		/// <summary>
		/// Name: ViewTargetOffset
		/// Type: StructProperty
		/// Offset: 0x1438
		/// Size: 0x0C
		/// </summary>
		public FVector ViewTargetOffset => ReadStruct<FVector>(0x1438);
		
		/// <summary>
		/// Name: CameraLensEffects
		/// Type: TArray<AEmitterCameraLensEffectBase>
		/// Offset: 0x1458
		/// Size: 0x10
		/// SubElement Size: 0x490
		/// </summary>
		public TArray<AEmitterCameraLensEffectBase> CameraLensEffects => new TArray<AEmitterCameraLensEffectBase>(BaseAddress+0x1458);
		
		/// <summary>
		/// Name: CachedCameraShakeMod
		/// Type: ObjectProperty
		/// Offset: 0x1468
		/// Size: 0x08
		/// </summary>
		public UCameraModifier_CameraShake CachedCameraShakeMod => ReadUObject<UCameraModifier_CameraShake>(0x1468);
		
		/// <summary>
		/// Name: AnimInstPool
		/// Type: ObjectProperty
		/// Offset: 0x1470
		/// Size: 0x08
		/// </summary>
		public UCameraAnimInst AnimInstPool => ReadUObject<UCameraAnimInst>(0x1470);
		
		/// <summary>
		/// Name: PostProcessBlendCache
		/// Type: TArray<FPostProcessSettings>
		/// Offset: 0x14B0
		/// Size: 0x10
		/// SubElement Size: 0x3A0
		/// </summary>
		public TArray<FPostProcessSettings> PostProcessBlendCache => new TArray<FPostProcessSettings>(BaseAddress+0x14B0);
		
		/// <summary>
		/// Name: ActiveAnims
		/// Type: TArray<UCameraAnimInst>
		/// Offset: 0x14D0
		/// Size: 0x10
		/// SubElement Size: 0x110
		/// </summary>
		public TArray<UCameraAnimInst> ActiveAnims => new TArray<UCameraAnimInst>(BaseAddress+0x14D0);
		
		/// <summary>
		/// Name: FreeAnims
		/// Type: TArray<UCameraAnimInst>
		/// Offset: 0x14E0
		/// Size: 0x10
		/// SubElement Size: 0x110
		/// </summary>
		public TArray<UCameraAnimInst> FreeAnims => new TArray<UCameraAnimInst>(BaseAddress+0x14E0);
		
		/// <summary>
		/// Name: AnimCameraActor
		/// Type: ObjectProperty
		/// Offset: 0x14F0
		/// Size: 0x08
		/// </summary>
		public ACameraActor AnimCameraActor => ReadUObject<ACameraActor>(0x14F0);
		
		/// <summary>
		/// Name: bIsOrthographic
		/// Type: BoolProperty
		/// Offset: 0x14F8
		/// Size: 0x01
		/// </summary>
		public bool bIsOrthographic => (ReadByte(0x14F8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUseClientSideCameraUpdates
		/// Type: BoolProperty
		/// Offset: 0x14F8
		/// Size: 0x01
		/// </summary>
		public bool bUseClientSideCameraUpdates => (ReadByte(0x14F8) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: ViewPitchMin
		/// Type: FloatProperty
		/// Offset: 0x14FC
		/// Size: 0x04
		/// </summary>
		public float ViewPitchMin
		{
			get
			{
				return ReadSingle(0x14FC);
			}
			set
			{
				WriteSingle(0x14FC,value);
			}
		}
		
		/// <summary>
		/// Name: ViewPitchMax
		/// Type: FloatProperty
		/// Offset: 0x1500
		/// Size: 0x04
		/// </summary>
		public float ViewPitchMax
		{
			get
			{
				return ReadSingle(0x1500);
			}
			set
			{
				WriteSingle(0x1500,value);
			}
		}
		
		/// <summary>
		/// Name: ViewYawMin
		/// Type: FloatProperty
		/// Offset: 0x1504
		/// Size: 0x04
		/// </summary>
		public float ViewYawMin
		{
			get
			{
				return ReadSingle(0x1504);
			}
			set
			{
				WriteSingle(0x1504,value);
			}
		}
		
		/// <summary>
		/// Name: ViewYawMax
		/// Type: FloatProperty
		/// Offset: 0x1508
		/// Size: 0x04
		/// </summary>
		public float ViewYawMax
		{
			get
			{
				return ReadSingle(0x1508);
			}
			set
			{
				WriteSingle(0x1508,value);
			}
		}
		
		/// <summary>
		/// Name: ViewRollMin
		/// Type: FloatProperty
		/// Offset: 0x150C
		/// Size: 0x04
		/// </summary>
		public float ViewRollMin
		{
			get
			{
				return ReadSingle(0x150C);
			}
			set
			{
				WriteSingle(0x150C,value);
			}
		}
		
		/// <summary>
		/// Name: ViewRollMax
		/// Type: FloatProperty
		/// Offset: 0x1510
		/// Size: 0x04
		/// </summary>
		public float ViewRollMax
		{
			get
			{
				return ReadSingle(0x1510);
			}
			set
			{
				WriteSingle(0x1510,value);
			}
		}
		
	}


	/// <summary>
	/// AConanPlayerCameraManager:APlayerCameraManager
	/// Size: 0x1518
	/// Properties: 0
	/// </summary>
	public class AConanPlayerCameraManager:APlayerCameraManager
	{
		public override int ObjectSize => 5400;
	}


	/// <summary>
	/// APlayerState:AInfo
	/// Size: 0x458
	/// Properties: 13
	/// </summary>
	public class APlayerState:AInfo
	{
		public override int ObjectSize => 1112;
		/// <summary>
		/// Name: score
		/// Type: FloatProperty
		/// Offset: 0x3D0
		/// Size: 0x04
		/// </summary>
		public float score
		{
			get
			{
				return ReadSingle(0x3D0);
			}
			set
			{
				WriteSingle(0x3D0,value);
			}
		}
		
		/// <summary>
		/// Name: Ping
		/// Type: ByteProperty
		/// Offset: 0x3D4
		/// Size: 0x01
		/// </summary>
		public byte Ping
		{
			get
			{
				return ReadByte(0x3D4);
			}
			set
			{
				WriteByte(0x3D4,value);
			}
		}
		
		/// <summary>
		/// Name: PlayerName
		/// Type: StrProperty
		/// Offset: 0x3D8
		/// Size: 0x10
		/// </summary>
		public FString PlayerName => new FString(BaseAddress+0x3D8);
		
		/// <summary>
		/// Name: PlayerId
		/// Type: IntProperty
		/// Offset: 0x3F8
		/// Size: 0x04
		/// </summary>
		public int PlayerId
		{
			get
			{
				return ReadInt32(0x3F8);
			}
			set
			{
				WriteInt32(0x3F8,value);
			}
		}
		
		/// <summary>
		/// Name: bIsSpectator
		/// Type: BoolProperty
		/// Offset: 0x3FC
		/// Size: 0x01
		/// </summary>
		public bool bIsSpectator => (ReadByte(0x03FC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOnlySpectator
		/// Type: BoolProperty
		/// Offset: 0x3FC
		/// Size: 0x01
		/// </summary>
		public bool bOnlySpectator => (ReadByte(0x03FC) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bIsABot
		/// Type: BoolProperty
		/// Offset: 0x3FC
		/// Size: 0x01
		/// </summary>
		public bool bIsABot => (ReadByte(0x03FC) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bIsInactive
		/// Type: BoolProperty
		/// Offset: 0x3FC
		/// Size: 0x01
		/// </summary>
		public bool bIsInactive => (ReadByte(0x03FC) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bFromPreviousLevel
		/// Type: BoolProperty
		/// Offset: 0x3FC
		/// Size: 0x01
		/// </summary>
		public bool bFromPreviousLevel => (ReadByte(0x03FC) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: StartTime
		/// Type: IntProperty
		/// Offset: 0x400
		/// Size: 0x04
		/// </summary>
		public int StartTime
		{
			get
			{
				return ReadInt32(0x400);
			}
			set
			{
				WriteInt32(0x400,value);
			}
		}
		
		/// <summary>
		/// Name: EngineMessageClass
		/// Type: ClassProperty
		/// Offset: 0x408
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SavedNetworkAddress
		/// Type: StrProperty
		/// Offset: 0x418
		/// Size: 0x10
		/// </summary>
		public FString SavedNetworkAddress => new FString(BaseAddress+0x418);
		
		/// <summary>
		/// Name: UniqueID
		/// Type: StructProperty
		/// Offset: 0x428
		/// Size: 0x10
		/// </summary>
		public FUniqueNetIdRepl UniqueID => ReadStruct<FUniqueNetIdRepl>(0x428);
		
	}


	/// <summary>
	/// AConanPlayerState:APlayerState
	/// Size: 0x458
	/// Properties: 0
	/// </summary>
	public class AConanPlayerState:APlayerState
	{
		public override int ObjectSize => 1112;
	}


	/// <summary>
	/// UMovementComponent:UActorComponent
	/// Size: 0x130
	/// Properties: 13
	/// </summary>
	public class UMovementComponent:UActorComponent
	{
		public override int ObjectSize => 304;
		/// <summary>
		/// Name: UpdatedComponent
		/// Type: ObjectProperty
		/// Offset: 0xD8
		/// Size: 0x08
		/// </summary>
		public USceneComponent UpdatedComponent => ReadUObject<USceneComponent>(0xD8);
		
		/// <summary>
		/// Name: UpdatedPrimitive
		/// Type: ObjectProperty
		/// Offset: 0xE0
		/// Size: 0x08
		/// </summary>
		public UPrimitiveComponent UpdatedPrimitive => ReadUObject<UPrimitiveComponent>(0xE0);
		
		/// <summary>
		/// Name: Velocity
		/// Type: StructProperty
		/// Offset: 0xEC
		/// Size: 0x0C
		/// </summary>
		public FVector Velocity => ReadStruct<FVector>(0xEC);
		
		/// <summary>
		/// Name: AngularVelocity
		/// Type: StructProperty
		/// Offset: 0xF8
		/// Size: 0x0C
		/// </summary>
		public FVector AngularVelocity => ReadStruct<FVector>(0xF8);
		
		/// <summary>
		/// Name: bConstrainToPlane
		/// Type: BoolProperty
		/// Offset: 0x104
		/// Size: 0x01
		/// </summary>
		public bool bConstrainToPlane => (ReadByte(0x0104) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSnapToPlaneAtStart
		/// Type: BoolProperty
		/// Offset: 0x104
		/// Size: 0x01
		/// </summary>
		public bool bSnapToPlaneAtStart => (ReadByte(0x0104) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: PlaneConstraintAxisSetting
		/// Type: ByteProperty
		/// Offset: 0x108
		/// Size: 0x01
		/// </summary>
		public byte PlaneConstraintAxisSetting
		{
			get
			{
				return ReadByte(0x108);
			}
			set
			{
				WriteByte(0x108,value);
			}
		}
		
		/// <summary>
		/// Name: PlaneConstraintNormal
		/// Type: StructProperty
		/// Offset: 0x10C
		/// Size: 0x0C
		/// </summary>
		public FVector PlaneConstraintNormal => ReadStruct<FVector>(0x10C);
		
		/// <summary>
		/// Name: PlaneConstraintOrigin
		/// Type: StructProperty
		/// Offset: 0x118
		/// Size: 0x0C
		/// </summary>
		public FVector PlaneConstraintOrigin => ReadStruct<FVector>(0x118);
		
		/// <summary>
		/// Name: bUpdateOnlyIfRendered
		/// Type: BoolProperty
		/// Offset: 0x124
		/// Size: 0x01
		/// </summary>
		public bool bUpdateOnlyIfRendered => (ReadByte(0x0124) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bAutoUpdateTickRegistration
		/// Type: BoolProperty
		/// Offset: 0x124
		/// Size: 0x01
		/// </summary>
		public bool bAutoUpdateTickRegistration => (ReadByte(0x0124) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bTickBeforeOwner
		/// Type: BoolProperty
		/// Offset: 0x124
		/// Size: 0x01
		/// </summary>
		public bool bTickBeforeOwner => (ReadByte(0x0124) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bAutoRegisterUpdatedComponent
		/// Type: BoolProperty
		/// Offset: 0x124
		/// Size: 0x01
		/// </summary>
		public bool bAutoRegisterUpdatedComponent => (ReadByte(0x0124) & 0x08) == 0x08;
		
	}


	/// <summary>
	/// UProjectileMovementComponent:UMovementComponent
	/// Size: 0x198
	/// Properties: 19
	/// </summary>
	public class UProjectileMovementComponent:UMovementComponent
	{
		public override int ObjectSize => 408;
		/// <summary>
		/// Name: InitialSpeed
		/// Type: FloatProperty
		/// Offset: 0x130
		/// Size: 0x04
		/// </summary>
		public float InitialSpeed
		{
			get
			{
				return ReadSingle(0x130);
			}
			set
			{
				WriteSingle(0x130,value);
			}
		}
		
		/// <summary>
		/// Name: MaxSpeed
		/// Type: FloatProperty
		/// Offset: 0x134
		/// Size: 0x04
		/// </summary>
		public float MaxSpeed
		{
			get
			{
				return ReadSingle(0x134);
			}
			set
			{
				WriteSingle(0x134,value);
			}
		}
		
		/// <summary>
		/// Name: bRotationFollowsVelocity
		/// Type: BoolProperty
		/// Offset: 0x138
		/// Size: 0x01
		/// </summary>
		public bool bRotationFollowsVelocity => (ReadByte(0x0138) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bShouldBounce
		/// Type: BoolProperty
		/// Offset: 0x138
		/// Size: 0x01
		/// </summary>
		public bool bShouldBounce => (ReadByte(0x0138) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bInitialVelocityInLocalSpace
		/// Type: BoolProperty
		/// Offset: 0x138
		/// Size: 0x01
		/// </summary>
		public bool bInitialVelocityInLocalSpace => (ReadByte(0x0138) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bForceSubStepping
		/// Type: BoolProperty
		/// Offset: 0x138
		/// Size: 0x01
		/// </summary>
		public bool bForceSubStepping => (ReadByte(0x0138) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bIsHomingProjectile
		/// Type: BoolProperty
		/// Offset: 0x138
		/// Size: 0x01
		/// </summary>
		public bool bIsHomingProjectile => (ReadByte(0x0138) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bBounceAngleAffectsFriction
		/// Type: BoolProperty
		/// Offset: 0x138
		/// Size: 0x01
		/// </summary>
		public bool bBounceAngleAffectsFriction => (ReadByte(0x0138) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bIsSliding
		/// Type: BoolProperty
		/// Offset: 0x138
		/// Size: 0x01
		/// </summary>
		public bool bIsSliding => (ReadByte(0x0138) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: PreviousHitTime
		/// Type: FloatProperty
		/// Offset: 0x13C
		/// Size: 0x04
		/// </summary>
		public float PreviousHitTime
		{
			get
			{
				return ReadSingle(0x13C);
			}
			set
			{
				WriteSingle(0x13C,value);
			}
		}
		
		/// <summary>
		/// Name: PreviousHitNormal
		/// Type: StructProperty
		/// Offset: 0x140
		/// Size: 0x0C
		/// </summary>
		public FVector PreviousHitNormal => ReadStruct<FVector>(0x140);
		
		/// <summary>
		/// Name: ProjectileGravityScale
		/// Type: FloatProperty
		/// Offset: 0x14C
		/// Size: 0x04
		/// </summary>
		public float ProjectileGravityScale
		{
			get
			{
				return ReadSingle(0x14C);
			}
			set
			{
				WriteSingle(0x14C,value);
			}
		}
		
		/// <summary>
		/// Name: Buoyancy
		/// Type: FloatProperty
		/// Offset: 0x150
		/// Size: 0x04
		/// </summary>
		public float Buoyancy
		{
			get
			{
				return ReadSingle(0x150);
			}
			set
			{
				WriteSingle(0x150,value);
			}
		}
		
		/// <summary>
		/// Name: Bounciness
		/// Type: FloatProperty
		/// Offset: 0x154
		/// Size: 0x04
		/// </summary>
		public float Bounciness
		{
			get
			{
				return ReadSingle(0x154);
			}
			set
			{
				WriteSingle(0x154,value);
			}
		}
		
		/// <summary>
		/// Name: Friction
		/// Type: FloatProperty
		/// Offset: 0x158
		/// Size: 0x04
		/// </summary>
		public float Friction
		{
			get
			{
				return ReadSingle(0x158);
			}
			set
			{
				WriteSingle(0x158,value);
			}
		}
		
		/// <summary>
		/// Name: BounceVelocityStopSimulatingThreshold
		/// Type: FloatProperty
		/// Offset: 0x15C
		/// Size: 0x04
		/// </summary>
		public float BounceVelocityStopSimulatingThreshold
		{
			get
			{
				return ReadSingle(0x15C);
			}
			set
			{
				WriteSingle(0x15C,value);
			}
		}
		
		/// <summary>
		/// Name: HomingAccelerationMagnitude
		/// Type: FloatProperty
		/// Offset: 0x180
		/// Size: 0x04
		/// </summary>
		public float HomingAccelerationMagnitude
		{
			get
			{
				return ReadSingle(0x180);
			}
			set
			{
				WriteSingle(0x180,value);
			}
		}
		
		/// <summary>
		/// Name: MaxSimulationTimeStep
		/// Type: FloatProperty
		/// Offset: 0x18C
		/// Size: 0x04
		/// </summary>
		public float MaxSimulationTimeStep
		{
			get
			{
				return ReadSingle(0x18C);
			}
			set
			{
				WriteSingle(0x18C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxSimulationIterations
		/// Type: IntProperty
		/// Offset: 0x190
		/// Size: 0x04
		/// </summary>
		public int MaxSimulationIterations
		{
			get
			{
				return ReadInt32(0x190);
			}
			set
			{
				WriteInt32(0x190,value);
			}
		}
		
	}


	/// <summary>
	/// UConanProjectileMovementComponent:UProjectileMovementComponent
	/// Size: 0x198
	/// Properties: 0
	/// </summary>
	public class UConanProjectileMovementComponent:UProjectileMovementComponent
	{
		public override int ObjectSize => 408;
	}


	/// <summary>
	/// AConanTimeOfDayManager:AActor
	/// Size: 0x3F0
	/// Properties: 4
	/// </summary>
	public class AConanTimeOfDayManager:AActor
	{
		public override int ObjectSize => 1008;
		/// <summary>
		/// Name: DayLength
		/// Type: FloatProperty
		/// Offset: 0x3D0
		/// Size: 0x04
		/// </summary>
		public float DayLength
		{
			get
			{
				return ReadSingle(0x3D0);
			}
			set
			{
				WriteSingle(0x3D0,value);
			}
		}
		
		/// <summary>
		/// Name: StartTimeOfDay
		/// Type: FloatProperty
		/// Offset: 0x3D4
		/// Size: 0x04
		/// </summary>
		public float StartTimeOfDay
		{
			get
			{
				return ReadSingle(0x3D4);
			}
			set
			{
				WriteSingle(0x3D4,value);
			}
		}
		
		/// <summary>
		/// Name: TimeEnabled
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool TimeEnabled
		{
			get
			{
				return ReadBool(0x3D8);
			}
			set
			{
				WriteBool(0x3D8,value);
			}
		}
		
		/// <summary>
		/// Name: TimeOfDay
		/// Type: FloatProperty
		/// Offset: 0x3DC
		/// Size: 0x04
		/// </summary>
		public float TimeOfDay
		{
			get
			{
				return ReadSingle(0x3DC);
			}
			set
			{
				WriteSingle(0x3DC,value);
			}
		}
		
	}


	/// <summary>
	/// UWorldComposition:UObject
	/// Size: 0x68
	/// Properties: 5
	/// </summary>
	public class UWorldComposition:UObject
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: TilesStreaming
		/// Type: TArray<ULevelStreaming>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x160
		/// </summary>
		public TArray<ULevelStreaming> TilesStreaming => new TArray<ULevelStreaming>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: TilesStreamingTimeThreshold
		/// Type: DoubleProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public double TilesStreamingTimeThreshold
		{
			get
			{
				return ReadDouble(0x58);
			}
			set
			{
				WriteDouble(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: bLoadAllTilesDuringCinematic
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bLoadAllTilesDuringCinematic
		{
			get
			{
				return ReadBool(0x60);
			}
			set
			{
				WriteBool(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: bRebaseOriginIn3DSpace
		/// Type: BoolProperty
		/// Offset: 0x61
		/// Size: 0x01
		/// </summary>
		public bool bRebaseOriginIn3DSpace
		{
			get
			{
				return ReadBool(0x61);
			}
			set
			{
				WriteBool(0x61,value);
			}
		}
		
		/// <summary>
		/// Name: RebaseOriginDistance
		/// Type: FloatProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public float RebaseOriginDistance
		{
			get
			{
				return ReadSingle(0x64);
			}
			set
			{
				WriteSingle(0x64,value);
			}
		}
		
	}


	/// <summary>
	/// UConanWorldComposition:UWorldComposition
	/// Size: 0x68
	/// Properties: 0
	/// </summary>
	public class UConanWorldComposition:UWorldComposition
	{
		public override int ObjectSize => 104;
	}


	/// <summary>
	/// ACorpseBase:AActor
	/// Size: 0x3E8
	/// Properties: 1
	/// </summary>
	public class ACorpseBase:AActor
	{
		public override int ObjectSize => 1000;
		/// <summary>
		/// Name: DisplayName
		/// Type: TextProperty
		/// Offset: 0x3D0
		/// Size: 0x18
		/// </summary>
		
	}


	/// <summary>
	/// UCraftingStationInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UCraftingStationInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UCustomRenderWidget:UWidget
	/// Size: 0x128
	/// Properties: 0
	/// </summary>
	public class UCustomRenderWidget:UWidget
	{
		public override int ObjectSize => 296;
	}


	/// <summary>
	/// UPieRenderWidget:UCustomRenderWidget
	/// Size: 0x150
	/// Properties: 6
	/// </summary>
	public class UPieRenderWidget:UCustomRenderWidget
	{
		public override int ObjectSize => 336;
		/// <summary>
		/// Name: Texture
		/// Type: ObjectProperty
		/// Offset: 0x128
		/// Size: 0x08
		/// </summary>
		public UTexture2D Texture => ReadUObject<UTexture2D>(0x128);
		
		/// <summary>
		/// Name: ColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x10
		/// </summary>
		public FLinearColor ColorAndOpacity => ReadStruct<FLinearColor>(0x130);
		
		/// <summary>
		/// Name: StartAngle
		/// Type: FloatProperty
		/// Offset: 0x140
		/// Size: 0x04
		/// </summary>
		public float StartAngle
		{
			get
			{
				return ReadSingle(0x140);
			}
			set
			{
				WriteSingle(0x140,value);
			}
		}
		
		/// <summary>
		/// Name: AngleSpan
		/// Type: FloatProperty
		/// Offset: 0x144
		/// Size: 0x04
		/// </summary>
		public float AngleSpan
		{
			get
			{
				return ReadSingle(0x144);
			}
			set
			{
				WriteSingle(0x144,value);
			}
		}
		
		/// <summary>
		/// Name: InnerRadius
		/// Type: FloatProperty
		/// Offset: 0x148
		/// Size: 0x04
		/// </summary>
		public float InnerRadius
		{
			get
			{
				return ReadSingle(0x148);
			}
			set
			{
				WriteSingle(0x148,value);
			}
		}
		
		/// <summary>
		/// Name: OuterRadius
		/// Type: FloatProperty
		/// Offset: 0x14C
		/// Size: 0x04
		/// </summary>
		public float OuterRadius
		{
			get
			{
				return ReadSingle(0x14C);
			}
			set
			{
				WriteSingle(0x14C,value);
			}
		}
		
	}


	/// <summary>
	/// UDamageMonitorInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UDamageMonitorInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UDamageMonitorHelper:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UDamageMonitorHelper:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// ADynamicSkyBase:AActor
	/// Size: 0x3E0
	/// Properties: 3
	/// </summary>
	public class ADynamicSkyBase:AActor
	{
		public override int ObjectSize => 992;
		/// <summary>
		/// Name: TimeManager
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public AConanTimeOfDayManager TimeManager => ReadUObject<AConanTimeOfDayManager>(0x3D0);
		
		/// <summary>
		/// Name: AnimateDayNight
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool AnimateDayNight
		{
			get
			{
				return ReadBool(0x3D8);
			}
			set
			{
				WriteBool(0x3D8,value);
			}
		}
		
		/// <summary>
		/// Name: TimeOfDay
		/// Type: FloatProperty
		/// Offset: 0x3DC
		/// Size: 0x04
		/// </summary>
		public float TimeOfDay
		{
			get
			{
				return ReadSingle(0x3DC);
			}
			set
			{
				WriteSingle(0x3DC,value);
			}
		}
		
	}


	/// <summary>
	/// UEgocentricParticleSpawnerComponent:UActorComponent
	/// Size: 0x170
	/// Properties: 6
	/// </summary>
	public class UEgocentricParticleSpawnerComponent:UActorComponent
	{
		public override int ObjectSize => 368;
		/// <summary>
		/// Name: MinSpawnInterval
		/// Type: FloatProperty
		/// Offset: 0xD8
		/// Size: 0x04
		/// </summary>
		public float MinSpawnInterval
		{
			get
			{
				return ReadSingle(0xD8);
			}
			set
			{
				WriteSingle(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: MaxRadius
		/// Type: FloatProperty
		/// Offset: 0xDC
		/// Size: 0x04
		/// </summary>
		public float MaxRadius
		{
			get
			{
				return ReadSingle(0xDC);
			}
			set
			{
				WriteSingle(0xDC,value);
			}
		}
		
		/// <summary>
		/// Name: TraceStartZ
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float TraceStartZ
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: TraceEndZ
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float TraceEndZ
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
		/// <summary>
		/// Name: MaxSpawnCount
		/// Type: IntProperty
		/// Offset: 0xE8
		/// Size: 0x04
		/// </summary>
		public int MaxSpawnCount
		{
			get
			{
				return ReadInt32(0xE8);
			}
			set
			{
				WriteInt32(0xE8,value);
			}
		}
		
		/// <summary>
		/// Name: m_SpawnedParticles
		/// Type: TArray<AActor>
		/// Offset: 0xF0
		/// Size: 0x10
		/// SubElement Size: 0x3D0
		/// </summary>
		public TArray<AActor> m_SpawnedParticles => new TArray<AActor>(BaseAddress+0xF0);
		
	}


	/// <summary>
	/// UEnergySourceComponent:UActorComponent
	/// Size: 0xF0
	/// Properties: 2
	/// </summary>
	public class UEnergySourceComponent:UActorComponent
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: TickInterval
		/// Type: FloatProperty
		/// Offset: 0xD8
		/// Size: 0x04
		/// </summary>
		public float TickInterval
		{
			get
			{
				return ReadSingle(0xD8);
			}
			set
			{
				WriteSingle(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: RegisterAsSourceForEnergies
		/// Type: TArray<FBaseEnergy>
		/// Offset: 0xE0
		/// Size: 0x10
		/// SubElement Size: 0x24
		/// </summary>
		public TArray<FBaseEnergy> RegisterAsSourceForEnergies => new TArray<FBaseEnergy>(BaseAddress+0xE0);
		
	}


	/// <summary>
	/// UEnvironmentFunctionLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UEnvironmentFunctionLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UTextLayoutWidget:UWidget
	/// Size: 0x140
	/// Properties: 7
	/// </summary>
	public class UTextLayoutWidget:UWidget
	{
		public override int ObjectSize => 320;
		/// <summary>
		/// Name: ShapedTextOptions
		/// Type: StructProperty
		/// Offset: 0x118
		/// Size: 0x08
		/// </summary>
		public FShapedTextOptions ShapedTextOptions => ReadStruct<FShapedTextOptions>(0x118);
		
		/// <summary>
		/// Name: Justification
		/// Type: ByteProperty
		/// Offset: 0x120
		/// Size: 0x01
		/// </summary>
		public byte Justification
		{
			get
			{
				return ReadByte(0x120);
			}
			set
			{
				WriteByte(0x120,value);
			}
		}
		
		/// <summary>
		/// Name: AutoWrapText
		/// Type: BoolProperty
		/// Offset: 0x121
		/// Size: 0x01
		/// </summary>
		public bool AutoWrapText
		{
			get
			{
				return ReadBool(0x121);
			}
			set
			{
				WriteBool(0x121,value);
			}
		}
		
		/// <summary>
		/// Name: WrapTextAt
		/// Type: FloatProperty
		/// Offset: 0x124
		/// Size: 0x04
		/// </summary>
		public float WrapTextAt
		{
			get
			{
				return ReadSingle(0x124);
			}
			set
			{
				WriteSingle(0x124,value);
			}
		}
		
		/// <summary>
		/// Name: WrappingPolicy
		/// Type: ByteProperty
		/// Offset: 0x128
		/// Size: 0x01
		/// </summary>
		public byte WrappingPolicy
		{
			get
			{
				return ReadByte(0x128);
			}
			set
			{
				WriteByte(0x128,value);
			}
		}
		
		/// <summary>
		/// Name: Margin
		/// Type: StructProperty
		/// Offset: 0x12C
		/// Size: 0x10
		/// </summary>
		public FMargin Margin => ReadStruct<FMargin>(0x12C);
		
		/// <summary>
		/// Name: LineHeightPercentage
		/// Type: FloatProperty
		/// Offset: 0x13C
		/// Size: 0x04
		/// </summary>
		public float LineHeightPercentage
		{
			get
			{
				return ReadSingle(0x13C);
			}
			set
			{
				WriteSingle(0x13C,value);
			}
		}
		
	}


	/// <summary>
	/// URichTextBlock:UTextLayoutWidget
	/// Size: 0x328
	/// Properties: 5
	/// </summary>
	public class URichTextBlock:UTextLayoutWidget
	{
		public override int ObjectSize => 808;
		/// <summary>
		/// Name: Text
		/// Type: TextProperty
		/// Offset: 0x140
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: TextDelegate
		/// Type: DelegateProperty
		/// Offset: 0x158
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: Font
		/// Type: StructProperty
		/// Offset: 0x168
		/// Size: 0x40
		/// </summary>
		public FSlateFontInfo Font => ReadStruct<FSlateFontInfo>(0x168);
		
		/// <summary>
		/// Name: Color
		/// Type: StructProperty
		/// Offset: 0x1A8
		/// Size: 0x10
		/// </summary>
		public FLinearColor Color => ReadStruct<FLinearColor>(0x1A8);
		
		/// <summary>
		/// Name: Decorators
		/// Type: TArray<URichTextBlockDecorator>
		/// Offset: 0x1B8
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<URichTextBlockDecorator> Decorators => new TArray<URichTextBlockDecorator>(BaseAddress+0x1B8);
		
	}


	/// <summary>
	/// UFCRichTextBlock:URichTextBlock
	/// Size: 0x328
	/// Properties: 0
	/// </summary>
	public class UFCRichTextBlock:URichTextBlock
	{
		public override int ObjectSize => 808;
	}


	/// <summary>
	/// USkinnedMeshComponent:UMeshComponent
	/// Size: 0x7B0
	/// Properties: 31
	/// </summary>
	public class USkinnedMeshComponent:UMeshComponent
	{
		public override int ObjectSize => 1968;
		/// <summary>
		/// Name: SkeletalMesh
		/// Type: ObjectProperty
		/// Offset: 0x658
		/// Size: 0x08
		/// </summary>
		public USkeletalMesh SkeletalMesh => ReadUObject<USkeletalMesh>(0x658);
		
		/// <summary>
		/// Name: bUseBoundsFromMasterPoseComponent
		/// Type: BoolProperty
		/// Offset: 0x6BC
		/// Size: 0x01
		/// </summary>
		public bool bUseBoundsFromMasterPoseComponent => (ReadByte(0x06BC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ActiveVertexAnims
		/// Type: TArray<FActiveVertexAnim>
		/// Offset: 0x6C0
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FActiveVertexAnim> ActiveVertexAnims => new TArray<FActiveVertexAnim>(BaseAddress+0x6C0);
		
		/// <summary>
		/// Name: PhysicsAssetOverride
		/// Type: ObjectProperty
		/// Offset: 0x6D0
		/// Size: 0x08
		/// </summary>
		public UPhysicsAsset PhysicsAssetOverride => ReadUObject<UPhysicsAsset>(0x6D0);
		
		/// <summary>
		/// Name: ForcedLodModel
		/// Type: IntProperty
		/// Offset: 0x6D8
		/// Size: 0x04
		/// </summary>
		public int ForcedLodModel
		{
			get
			{
				return ReadInt32(0x6D8);
			}
			set
			{
				WriteInt32(0x6D8,value);
			}
		}
		
		/// <summary>
		/// Name: MinLodModel
		/// Type: IntProperty
		/// Offset: 0x6DC
		/// Size: 0x04
		/// </summary>
		public int MinLodModel
		{
			get
			{
				return ReadInt32(0x6DC);
			}
			set
			{
				WriteInt32(0x6DC,value);
			}
		}
		
		/// <summary>
		/// Name: PredictedLODLevel
		/// Type: IntProperty
		/// Offset: 0x6E0
		/// Size: 0x04
		/// </summary>
		public int PredictedLODLevel
		{
			get
			{
				return ReadInt32(0x6E0);
			}
			set
			{
				WriteInt32(0x6E0,value);
			}
		}
		
		/// <summary>
		/// Name: OldPredictedLODLevel
		/// Type: IntProperty
		/// Offset: 0x6E4
		/// Size: 0x04
		/// </summary>
		public int OldPredictedLODLevel
		{
			get
			{
				return ReadInt32(0x6E4);
			}
			set
			{
				WriteInt32(0x6E4,value);
			}
		}
		
		/// <summary>
		/// Name: MaxDistanceFactor
		/// Type: FloatProperty
		/// Offset: 0x6E8
		/// Size: 0x04
		/// </summary>
		public float MaxDistanceFactor
		{
			get
			{
				return ReadSingle(0x6E8);
			}
			set
			{
				WriteSingle(0x6E8,value);
			}
		}
		
		/// <summary>
		/// Name: LODInfo
		/// Type: TArray<FSkelMeshComponentLODInfo>
		/// Offset: 0x6F0
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FSkelMeshComponentLODInfo> LODInfo => new TArray<FSkelMeshComponentLODInfo>(BaseAddress+0x6F0);
		
		/// <summary>
		/// Name: StreamingDistanceMultiplier
		/// Type: FloatProperty
		/// Offset: 0x700
		/// Size: 0x04
		/// </summary>
		public float StreamingDistanceMultiplier
		{
			get
			{
				return ReadSingle(0x700);
			}
			set
			{
				WriteSingle(0x700,value);
			}
		}
		
		/// <summary>
		/// Name: WireframeColor
		/// Type: StructProperty
		/// Offset: 0x704
		/// Size: 0x04
		/// </summary>
		public FColor WireframeColor => ReadStruct<FColor>(0x704);
		
		/// <summary>
		/// Name: bForceWireframe
		/// Type: BoolProperty
		/// Offset: 0x708
		/// Size: 0x01
		/// </summary>
		public bool bForceWireframe => (ReadByte(0x0708) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDisplayBones
		/// Type: BoolProperty
		/// Offset: 0x708
		/// Size: 0x01
		/// </summary>
		public bool bDisplayBones => (ReadByte(0x0708) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bDisableMorphTarget
		/// Type: BoolProperty
		/// Offset: 0x708
		/// Size: 0x01
		/// </summary>
		public bool bDisableMorphTarget => (ReadByte(0x0708) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bHideSkin
		/// Type: BoolProperty
		/// Offset: 0x708
		/// Size: 0x01
		/// </summary>
		public bool bHideSkin => (ReadByte(0x0708) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bPerBoneMotionBlur
		/// Type: BoolProperty
		/// Offset: 0x720
		/// Size: 0x01
		/// </summary>
		public bool bPerBoneMotionBlur => (ReadByte(0x0720) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bComponentUseFixedSkelBounds
		/// Type: BoolProperty
		/// Offset: 0x720
		/// Size: 0x01
		/// </summary>
		public bool bComponentUseFixedSkelBounds => (ReadByte(0x0720) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bConsiderAllBodiesForBounds
		/// Type: BoolProperty
		/// Offset: 0x720
		/// Size: 0x01
		/// </summary>
		public bool bConsiderAllBodiesForBounds => (ReadByte(0x0720) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: MeshComponentUpdateFlag
		/// Type: ByteProperty
		/// Offset: 0x724
		/// Size: 0x01
		/// </summary>
		public byte MeshComponentUpdateFlag
		{
			get
			{
				return ReadByte(0x724);
			}
			set
			{
				WriteByte(0x724,value);
			}
		}
		
		/// <summary>
		/// Name: bForceMeshObjectUpdate
		/// Type: BoolProperty
		/// Offset: 0x728
		/// Size: 0x01
		/// </summary>
		public bool bForceMeshObjectUpdate => (ReadByte(0x0728) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bCanHighlightSelectedSections
		/// Type: BoolProperty
		/// Offset: 0x728
		/// Size: 0x01
		/// </summary>
		public bool bCanHighlightSelectedSections => (ReadByte(0x0728) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bRecentlyRendered
		/// Type: BoolProperty
		/// Offset: 0x728
		/// Size: 0x01
		/// </summary>
		public bool bRecentlyRendered => (ReadByte(0x0728) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: ProgressiveDrawingFraction
		/// Type: FloatProperty
		/// Offset: 0x72C
		/// Size: 0x04
		/// </summary>
		public float ProgressiveDrawingFraction
		{
			get
			{
				return ReadSingle(0x72C);
			}
			set
			{
				WriteSingle(0x72C,value);
			}
		}
		
		/// <summary>
		/// Name: CustomSortAlternateIndexMode
		/// Type: ByteProperty
		/// Offset: 0x730
		/// Size: 0x01
		/// </summary>
		public byte CustomSortAlternateIndexMode
		{
			get
			{
				return ReadByte(0x730);
			}
			set
			{
				WriteByte(0x730,value);
			}
		}
		
		/// <summary>
		/// Name: bCastCapsuleDirectShadow
		/// Type: BoolProperty
		/// Offset: 0x734
		/// Size: 0x01
		/// </summary>
		public bool bCastCapsuleDirectShadow => (ReadByte(0x0734) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bCastCapsuleIndirectShadow
		/// Type: BoolProperty
		/// Offset: 0x734
		/// Size: 0x01
		/// </summary>
		public bool bCastCapsuleIndirectShadow => (ReadByte(0x0734) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: CachedLocalBounds
		/// Type: StructProperty
		/// Offset: 0x744
		/// Size: 0x1C
		/// </summary>
		public FBoxSphereBounds CachedLocalBounds => ReadStruct<FBoxSphereBounds>(0x744);
		
		/// <summary>
		/// Name: bCachedLocalBoundsUpToDate
		/// Type: BoolProperty
		/// Offset: 0x760
		/// Size: 0x01
		/// </summary>
		public bool bCachedLocalBoundsUpToDate
		{
			get
			{
				return ReadBool(0x760);
			}
			set
			{
				WriteBool(0x760,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableUpdateRateOptimizations
		/// Type: BoolProperty
		/// Offset: 0x761
		/// Size: 0x01
		/// </summary>
		public bool bEnableUpdateRateOptimizations
		{
			get
			{
				return ReadBool(0x761);
			}
			set
			{
				WriteBool(0x761,value);
			}
		}
		
		/// <summary>
		/// Name: bDisplayDebugUpdateRateOptimizations
		/// Type: BoolProperty
		/// Offset: 0x762
		/// Size: 0x01
		/// </summary>
		public bool bDisplayDebugUpdateRateOptimizations
		{
			get
			{
				return ReadBool(0x762);
			}
			set
			{
				WriteBool(0x762,value);
			}
		}
		
	}


	/// <summary>
	/// USkeletalMeshComponent:USkinnedMeshComponent
	/// Size: 0xD20
	/// Properties: 44
	/// </summary>
	public class USkeletalMeshComponent:USkinnedMeshComponent
	{
		public override int ObjectSize => 3360;
		/// <summary>
		/// Name: AnimationMode
		/// Type: ByteProperty
		/// Offset: 0x7B8
		/// Size: 0x01
		/// </summary>
		public byte AnimationMode
		{
			get
			{
				return ReadByte(0x7B8);
			}
			set
			{
				WriteByte(0x7B8,value);
			}
		}
		
		/// <summary>
		/// Name: AnimBlueprintGeneratedClass
		/// Type: ClassProperty
		/// Offset: 0x7C0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AnimClass
		/// Type: ClassProperty
		/// Offset: 0x7C8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AnimScriptInstance
		/// Type: ObjectProperty
		/// Offset: 0x7D0
		/// Size: 0x08
		/// </summary>
		public UAnimInstance AnimScriptInstance => ReadUObject<UAnimInstance>(0x7D0);
		
		/// <summary>
		/// Name: AnimationData
		/// Type: StructProperty
		/// Offset: 0x7D8
		/// Size: 0x20
		/// </summary>
		public FSingleAnimationPlayData AnimationData => ReadStruct<FSingleAnimationPlayData>(0x7D8);
		
		/// <summary>
		/// Name: CachedLocalAtoms
		/// Type: TArray<FTransform>
		/// Offset: 0x808
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FTransform> CachedLocalAtoms => new TArray<FTransform>(BaseAddress+0x808);
		
		/// <summary>
		/// Name: CachedSpaceBases
		/// Type: TArray<FTransform>
		/// Offset: 0x818
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FTransform> CachedSpaceBases => new TArray<FTransform>(BaseAddress+0x818);
		
		/// <summary>
		/// Name: GlobalAnimRateScale
		/// Type: FloatProperty
		/// Offset: 0x848
		/// Size: 0x04
		/// </summary>
		public float GlobalAnimRateScale
		{
			get
			{
				return ReadSingle(0x848);
			}
			set
			{
				WriteSingle(0x848,value);
			}
		}
		
		/// <summary>
		/// Name: bHasValidBodies
		/// Type: BoolProperty
		/// Offset: 0x84C
		/// Size: 0x01
		/// </summary>
		public bool bHasValidBodies => (ReadByte(0x084C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: KinematicBonesUpdateType
		/// Type: ByteProperty
		/// Offset: 0x850
		/// Size: 0x01
		/// </summary>
		public byte KinematicBonesUpdateType
		{
			get
			{
				return ReadByte(0x850);
			}
			set
			{
				WriteByte(0x850,value);
			}
		}
		
		/// <summary>
		/// Name: bBlendPhysics
		/// Type: BoolProperty
		/// Offset: 0x854
		/// Size: 0x01
		/// </summary>
		public bool bBlendPhysics => (ReadByte(0x0854) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bEnablePhysicsOnDedicatedServer
		/// Type: BoolProperty
		/// Offset: 0x854
		/// Size: 0x01
		/// </summary>
		public bool bEnablePhysicsOnDedicatedServer => (ReadByte(0x0854) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bUpdateJointsFromAnimation
		/// Type: BoolProperty
		/// Offset: 0x854
		/// Size: 0x01
		/// </summary>
		public bool bUpdateJointsFromAnimation => (ReadByte(0x0854) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bDisableClothSimulation
		/// Type: BoolProperty
		/// Offset: 0x854
		/// Size: 0x01
		/// </summary>
		public bool bDisableClothSimulation => (ReadByte(0x0854) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bCollideWithEnvironment
		/// Type: BoolProperty
		/// Offset: 0x854
		/// Size: 0x01
		/// </summary>
		public bool bCollideWithEnvironment => (ReadByte(0x0854) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bCollideWithAttachedChildren
		/// Type: BoolProperty
		/// Offset: 0x854
		/// Size: 0x01
		/// </summary>
		public bool bCollideWithAttachedChildren => (ReadByte(0x0854) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bLocalSpaceSimulation
		/// Type: BoolProperty
		/// Offset: 0x854
		/// Size: 0x01
		/// </summary>
		public bool bLocalSpaceSimulation => (ReadByte(0x0854) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bClothMorphTarget
		/// Type: BoolProperty
		/// Offset: 0x854
		/// Size: 0x01
		/// </summary>
		public bool bClothMorphTarget => (ReadByte(0x0854) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bResetAfterTeleport
		/// Type: BoolProperty
		/// Offset: 0x855
		/// Size: 0x01
		/// </summary>
		public bool bResetAfterTeleport => (ReadByte(0x0855) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: TeleportDistanceThreshold
		/// Type: FloatProperty
		/// Offset: 0x858
		/// Size: 0x04
		/// </summary>
		public float TeleportDistanceThreshold
		{
			get
			{
				return ReadSingle(0x858);
			}
			set
			{
				WriteSingle(0x858,value);
			}
		}
		
		/// <summary>
		/// Name: TeleportRotationThreshold
		/// Type: FloatProperty
		/// Offset: 0x85C
		/// Size: 0x04
		/// </summary>
		public float TeleportRotationThreshold
		{
			get
			{
				return ReadSingle(0x85C);
			}
			set
			{
				WriteSingle(0x85C,value);
			}
		}
		
		/// <summary>
		/// Name: ClothBlendWeight
		/// Type: FloatProperty
		/// Offset: 0x860
		/// Size: 0x04
		/// </summary>
		public float ClothBlendWeight
		{
			get
			{
				return ReadSingle(0x860);
			}
			set
			{
				WriteSingle(0x860,value);
			}
		}
		
		/// <summary>
		/// Name: RootBoneTranslation
		/// Type: StructProperty
		/// Offset: 0x868
		/// Size: 0x0C
		/// </summary>
		public FVector RootBoneTranslation => ReadStruct<FVector>(0x868);
		
		/// <summary>
		/// Name: bNoSkeletonUpdate
		/// Type: BoolProperty
		/// Offset: 0x874
		/// Size: 0x01
		/// </summary>
		public bool bNoSkeletonUpdate => (ReadByte(0x0874) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bPauseAnims
		/// Type: BoolProperty
		/// Offset: 0x874
		/// Size: 0x01
		/// </summary>
		public bool bPauseAnims => (ReadByte(0x0874) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bUseRefPoseOnInitAnim
		/// Type: BoolProperty
		/// Offset: 0x878
		/// Size: 0x01
		/// </summary>
		public bool bUseRefPoseOnInitAnim
		{
			get
			{
				return ReadBool(0x878);
			}
			set
			{
				WriteBool(0x878,value);
			}
		}
		
		/// <summary>
		/// Name: bEnablePerPolyCollision
		/// Type: BoolProperty
		/// Offset: 0x87C
		/// Size: 0x01
		/// </summary>
		public bool bEnablePerPolyCollision => (ReadByte(0x087C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: BodySetup
		/// Type: ObjectProperty
		/// Offset: 0x880
		/// Size: 0x08
		/// </summary>
		public UBodySetup BodySetup => ReadUObject<UBodySetup>(0x880);
		
		/// <summary>
		/// Name: bAutonomousTickPose
		/// Type: BoolProperty
		/// Offset: 0x888
		/// Size: 0x01
		/// </summary>
		public bool bAutonomousTickPose => (ReadByte(0x0888) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bForceRefpose
		/// Type: BoolProperty
		/// Offset: 0x888
		/// Size: 0x01
		/// </summary>
		public bool bForceRefpose => (ReadByte(0x0888) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOldForceRefPose
		/// Type: BoolProperty
		/// Offset: 0x888
		/// Size: 0x01
		/// </summary>
		public bool bOldForceRefPose => (ReadByte(0x0888) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bShowPrePhysBones
		/// Type: BoolProperty
		/// Offset: 0x888
		/// Size: 0x01
		/// </summary>
		public bool bShowPrePhysBones => (ReadByte(0x0888) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bRequiredBonesUpToDate
		/// Type: BoolProperty
		/// Offset: 0x888
		/// Size: 0x01
		/// </summary>
		public bool bRequiredBonesUpToDate => (ReadByte(0x0888) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bAnimTreeInitialised
		/// Type: BoolProperty
		/// Offset: 0x888
		/// Size: 0x01
		/// </summary>
		public bool bAnimTreeInitialised => (ReadByte(0x0888) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bEnableLineCheckWithBounds
		/// Type: BoolProperty
		/// Offset: 0x888
		/// Size: 0x01
		/// </summary>
		public bool bEnableLineCheckWithBounds => (ReadByte(0x0888) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: LineCheckBoundsScale
		/// Type: StructProperty
		/// Offset: 0x88C
		/// Size: 0x0C
		/// </summary>
		public FVector LineCheckBoundsScale => ReadStruct<FVector>(0x88C);
		
		/// <summary>
		/// Name: RagdollAggregateThreshold
		/// Type: IntProperty
		/// Offset: 0x898
		/// Size: 0x04
		/// </summary>
		public int RagdollAggregateThreshold
		{
			get
			{
				return ReadInt32(0x898);
			}
			set
			{
				WriteInt32(0x898,value);
			}
		}
		
		/// <summary>
		/// Name: SequenceToPlay
		/// Type: ObjectProperty
		/// Offset: 0xC78
		/// Size: 0x08
		/// </summary>
		public UAnimSequence SequenceToPlay => ReadUObject<UAnimSequence>(0xC78);
		
		/// <summary>
		/// Name: AnimToPlay
		/// Type: ObjectProperty
		/// Offset: 0xC80
		/// Size: 0x08
		/// </summary>
		public UAnimationAsset AnimToPlay => ReadUObject<UAnimationAsset>(0xC80);
		
		/// <summary>
		/// Name: bDefaultLooping
		/// Type: BoolProperty
		/// Offset: 0xC88
		/// Size: 0x01
		/// </summary>
		public bool bDefaultLooping => (ReadByte(0x0C88) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDefaultPlaying
		/// Type: BoolProperty
		/// Offset: 0xC88
		/// Size: 0x01
		/// </summary>
		public bool bDefaultPlaying => (ReadByte(0x0C88) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: DefaultPosition
		/// Type: FloatProperty
		/// Offset: 0xC8C
		/// Size: 0x04
		/// </summary>
		public float DefaultPosition
		{
			get
			{
				return ReadSingle(0xC8C);
			}
			set
			{
				WriteSingle(0xC8C,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultPlayRate
		/// Type: FloatProperty
		/// Offset: 0xC90
		/// Size: 0x04
		/// </summary>
		public float DefaultPlayRate
		{
			get
			{
				return ReadSingle(0xC90);
			}
			set
			{
				WriteSingle(0xC90,value);
			}
		}
		
		/// <summary>
		/// Name: LastPoseTickTime
		/// Type: FloatProperty
		/// Offset: 0xCA8
		/// Size: 0x04
		/// </summary>
		public float LastPoseTickTime
		{
			get
			{
				return ReadSingle(0xCA8);
			}
			set
			{
				WriteSingle(0xCA8,value);
			}
		}
		
	}


	/// <summary>
	/// UFuncomSkeletalMeshComponent:USkeletalMeshComponent
	/// Size: 0xD40
	/// Properties: 2
	/// </summary>
	public class UFuncomSkeletalMeshComponent:USkeletalMeshComponent
	{
		public override int ObjectSize => 3392;
		/// <summary>
		/// Name: bHasCachedPose
		/// Type: BoolProperty
		/// Offset: 0xD20
		/// Size: 0x01
		/// </summary>
		public bool bHasCachedPose
		{
			get
			{
				return ReadBool(0xD20);
			}
			set
			{
				WriteBool(0xD20,value);
			}
		}
		
		/// <summary>
		/// Name: CachedPose
		/// Type: StructProperty
		/// Offset: 0xD28
		/// Size: 0x10
		/// </summary>
		public FPoseSnapshot CachedPose => ReadStruct<FPoseSnapshot>(0xD28);
		
	}


	/// <summary>
	/// UAvatarItem:UGameItem
	/// Size: 0x368
	/// Properties: 0
	/// </summary>
	public class UAvatarItem:UGameItem
	{
		public override int ObjectSize => 872;
	}


	/// <summary>
	/// UEmoteItem:UGameItem
	/// Size: 0x390
	/// Properties: 3
	/// </summary>
	public class UEmoteItem:UGameItem
	{
		public override int ObjectSize => 912;
		/// <summary>
		/// Name: emoteID
		/// Type: ByteProperty
		/// Offset: 0x360
		/// Size: 0x01
		/// </summary>
		public byte emoteID
		{
			get
			{
				return ReadByte(0x360);
			}
			set
			{
				WriteByte(0x360,value);
			}
		}
		
		/// <summary>
		/// Name: EmoteFlags
		/// Type: IntProperty
		/// Offset: 0x364
		/// Size: 0x04
		/// </summary>
		public int EmoteFlags
		{
			get
			{
				return ReadInt32(0x364);
			}
			set
			{
				WriteInt32(0x364,value);
			}
		}
		
		/// <summary>
		/// Name: EmoteCategory
		/// Type: ByteProperty
		/// Offset: 0x388
		/// Size: 0x01
		/// </summary>
		public byte EmoteCategory
		{
			get
			{
				return ReadByte(0x388);
			}
			set
			{
				WriteByte(0x388,value);
			}
		}
		
	}


	/// <summary>
	/// UFeatItem:UGameItem
	/// Size: 0x3C8
	/// Properties: 7
	/// </summary>
	public class UFeatItem:UGameItem
	{
		public override int ObjectSize => 968;
		/// <summary>
		/// Name: GiveOnSpawn
		/// Type: BoolProperty
		/// Offset: 0x380
		/// Size: 0x01
		/// </summary>
		public bool GiveOnSpawn
		{
			get
			{
				return ReadBool(0x380);
			}
			set
			{
				WriteBool(0x380,value);
			}
		}
		
		/// <summary>
		/// Name: LevelRequirement
		/// Type: IntProperty
		/// Offset: 0x384
		/// Size: 0x04
		/// </summary>
		public int LevelRequirement
		{
			get
			{
				return ReadInt32(0x384);
			}
			set
			{
				WriteInt32(0x384,value);
			}
		}
		
		/// <summary>
		/// Name: FeatCost
		/// Type: IntProperty
		/// Offset: 0x388
		/// Size: 0x04
		/// </summary>
		public int FeatCost
		{
			get
			{
				return ReadInt32(0x388);
			}
			set
			{
				WriteInt32(0x388,value);
			}
		}
		
		/// <summary>
		/// Name: Categories
		/// Type: TArray<>
		/// Offset: 0x390
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: PrerequisiteFeat
		/// Type: TArray<>
		/// Offset: 0x3A0
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: RewardRecipe
		/// Type: TArray<>
		/// Offset: 0x3B0
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: LearnedFromNPC
		/// Type: BoolProperty
		/// Offset: 0x3C0
		/// Size: 0x01
		/// </summary>
		public bool LearnedFromNPC
		{
			get
			{
				return ReadBool(0x3C0);
			}
			set
			{
				WriteBool(0x3C0,value);
			}
		}
		
	}


	/// <summary>
	/// URecipeItem:UGameItem
	/// Size: 0x3D0
	/// Properties: 12
	/// </summary>
	public class URecipeItem:UGameItem
	{
		public override int ObjectSize => 976;
		/// <summary>
		/// Name: RecipeType
		/// Type: IntProperty
		/// Offset: 0x360
		/// Size: 0x04
		/// </summary>
		public int RecipeType
		{
			get
			{
				return ReadInt32(0x360);
			}
			set
			{
				WriteInt32(0x360,value);
			}
		}
		
		/// <summary>
		/// Name: Tier
		/// Type: IntProperty
		/// Offset: 0x364
		/// Size: 0x04
		/// </summary>
		public int Tier
		{
			get
			{
				return ReadInt32(0x364);
			}
			set
			{
				WriteInt32(0x364,value);
			}
		}
		
		/// <summary>
		/// Name: CraftXP
		/// Type: IntProperty
		/// Offset: 0x368
		/// Size: 0x04
		/// </summary>
		public int CraftXP
		{
			get
			{
				return ReadInt32(0x368);
			}
			set
			{
				WriteInt32(0x368,value);
			}
		}
		
		/// <summary>
		/// Name: CraftingStations
		/// Type: IntProperty
		/// Offset: 0x36C
		/// Size: 0x04
		/// </summary>
		public int CraftingStations
		{
			get
			{
				return ReadInt32(0x36C);
			}
			set
			{
				WriteInt32(0x36C,value);
			}
		}
		
		/// <summary>
		/// Name: RequiredFuel
		/// Type: IntProperty
		/// Offset: 0x370
		/// Size: 0x04
		/// </summary>
		public int RequiredFuel
		{
			get
			{
				return ReadInt32(0x370);
			}
			set
			{
				WriteInt32(0x370,value);
			}
		}
		
		/// <summary>
		/// Name: BuildingModuleClass
		/// Type: ClassProperty
		/// Offset: 0x378
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CraftingCharacterUID
		/// Type: ObjectProperty
		/// Offset: 0x380
		/// Size: 0x08
		/// </summary>
		public UUniqueID CraftingCharacterUID => ReadUObject<UUniqueID>(0x380);
		
		/// <summary>
		/// Name: Ingredients
		/// Type: TArray<FIngredientEntry>
		/// Offset: 0x388
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FIngredientEntry> Ingredients => new TArray<FIngredientEntry>(BaseAddress+0x388);
		
		/// <summary>
		/// Name: Results
		/// Type: TArray<FIngredientEntry>
		/// Offset: 0x398
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FIngredientEntry> Results => new TArray<FIngredientEntry>(BaseAddress+0x398);
		
		/// <summary>
		/// Name: BuildingModule
		/// Type: AssetClassProperty
		/// Offset: 0x3A8
		/// Size: 0x20
		/// </summary>
		
		/// <summary>
		/// Name: DestroyStationOnComplete
		/// Type: BoolProperty
		/// Offset: 0x3C8
		/// Size: 0x01
		/// </summary>
		public bool DestroyStationOnComplete
		{
			get
			{
				return ReadBool(0x3C8);
			}
			set
			{
				WriteBool(0x3C8,value);
			}
		}
		
		/// <summary>
		/// Name: ThrallRecipeFeatRequirement
		/// Type: IntProperty
		/// Offset: 0x3CC
		/// Size: 0x04
		/// </summary>
		public int ThrallRecipeFeatRequirement
		{
			get
			{
				return ReadInt32(0x3CC);
			}
			set
			{
				WriteInt32(0x3CC,value);
			}
		}
		
	}


	/// <summary>
	/// UItemInventoryClientMonitor:UObject
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UItemInventoryClientMonitor:UObject
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UItemInventory:UPersistenceComponent
	/// Size: 0x280
	/// Properties: 7
	/// </summary>
	public class UItemInventory:UPersistenceComponent
	{
		public override int ObjectSize => 640;
		/// <summary>
		/// Name: DelegateCanBeDropped
		/// Type: DelegateProperty
		/// Offset: 0x188
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: ItemList
		/// Type: TArray<UGameItem>
		/// Offset: 0x210
		/// Size: 0x10
		/// SubElement Size: 0x360
		/// </summary>
		public TArray<UGameItem> ItemList => new TArray<UGameItem>(BaseAddress+0x210);
		
		/// <summary>
		/// Name: bReplicatesToEveryone
		/// Type: BoolProperty
		/// Offset: 0x220
		/// Size: 0x01
		/// </summary>
		public bool bReplicatesToEveryone
		{
			get
			{
				return ReadBool(0x220);
			}
			set
			{
				WriteBool(0x220,value);
			}
		}
		
		/// <summary>
		/// Name: InventoryType
		/// Type: ByteProperty
		/// Offset: 0x221
		/// Size: 0x01
		/// </summary>
		public byte InventoryType
		{
			get
			{
				return ReadByte(0x221);
			}
			set
			{
				WriteByte(0x221,value);
			}
		}
		
		/// <summary>
		/// Name: MaxItemCount
		/// Type: IntProperty
		/// Offset: 0x224
		/// Size: 0x04
		/// </summary>
		public int MaxItemCount
		{
			get
			{
				return ReadInt32(0x224);
			}
			set
			{
				WriteInt32(0x224,value);
			}
		}
		
		/// <summary>
		/// Name: PerishModifier
		/// Type: FloatProperty
		/// Offset: 0x228
		/// Size: 0x04
		/// </summary>
		public float PerishModifier
		{
			get
			{
				return ReadSingle(0x228);
			}
			set
			{
				WriteSingle(0x228,value);
			}
		}
		
		/// <summary>
		/// Name: LootContainerClass
		/// Type: ClassProperty
		/// Offset: 0x270
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UItemInventoryReplicateToAll:UItemInventory
	/// Size: 0x280
	/// Properties: 0
	/// </summary>
	public class UItemInventoryReplicateToAll:UItemInventory
	{
		public override int ObjectSize => 640;
	}


	/// <summary>
	/// UEquipmentInventory:UItemInventoryReplicateToAll
	/// Size: 0x2A0
	/// Properties: 0
	/// </summary>
	public class UEquipmentInventory:UItemInventoryReplicateToAll
	{
		public override int ObjectSize => 672;
	}


	/// <summary>
	/// UThrallRecipeItem:URecipeItem
	/// Size: 0x3E0
	/// Properties: 3
	/// </summary>
	public class UThrallRecipeItem:URecipeItem
	{
		public override int ObjectSize => 992;
		/// <summary>
		/// Name: SourceThrallItem
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UThrallItem SourceThrallItem => ReadUObject<UThrallItem>(0x3D0);
		
		/// <summary>
		/// Name: SourceThrallItemIndex
		/// Type: IntProperty
		/// Offset: 0x3D8
		/// Size: 0x04
		/// </summary>
		public int SourceThrallItemIndex
		{
			get
			{
				return ReadInt32(0x3D8);
			}
			set
			{
				WriteInt32(0x3D8,value);
			}
		}
		
		/// <summary>
		/// Name: SourceThrallInventoryIndex
		/// Type: IntProperty
		/// Offset: 0x3DC
		/// Size: 0x04
		/// </summary>
		public int SourceThrallInventoryIndex
		{
			get
			{
				return ReadInt32(0x3DC);
			}
			set
			{
				WriteInt32(0x3DC,value);
			}
		}
		
	}


	/// <summary>
	/// UShortcutRefItem:UGameItem
	/// Size: 0x378
	/// Properties: 0
	/// </summary>
	public class UShortcutRefItem:UGameItem
	{
		public override int ObjectSize => 888;
	}


	/// <summary>
	/// UShortcutUsableItem:UGameItem
	/// Size: 0x370
	/// Properties: 0
	/// </summary>
	public class UShortcutUsableItem:UGameItem
	{
		public override int ObjectSize => 880;
	}


	/// <summary>
	/// UBuildingItem:UShortcutUsableItem
	/// Size: 0x3A0
	/// Properties: 2
	/// </summary>
	public class UBuildingItem:UShortcutUsableItem
	{
		public override int ObjectSize => 928;
		/// <summary>
		/// Name: BuildingObject
		/// Type: AssetClassProperty
		/// Offset: 0x370
		/// Size: 0x20
		/// </summary>
		
		/// <summary>
		/// Name: BuildingObjectClass
		/// Type: ClassProperty
		/// Offset: 0x390
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// AThrallBase:AActor
	/// Size: 0x3D0
	/// Properties: 0
	/// </summary>
	public class AThrallBase:AActor
	{
		public override int ObjectSize => 976;
	}


	/// <summary>
	/// UThrallItem:UShortcutUsableItem
	/// Size: 0x550
	/// Properties: 5
	/// </summary>
	public class UThrallItem:UShortcutUsableItem
	{
		public override int ObjectSize => 1360;
		/// <summary>
		/// Name: ThrallCharLayout
		/// Type: StructProperty
		/// Offset: 0x370
		/// Size: 0x124
		/// </summary>
		public FCharacterLayout ThrallCharLayout => ReadStruct<FCharacterLayout>(0x370);
		
		/// <summary>
		/// Name: EquipmentTemplateIDs
		/// Type: TArray<>
		/// Offset: 0x498
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: BackpackTemplateIDs
		/// Type: TArray<>
		/// Offset: 0x4A8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: ThrallInfo
		/// Type: StructProperty
		/// Offset: 0x4B8
		/// Size: 0x80
		/// </summary>
		public FThrallInfo ThrallInfo => ReadStruct<FThrallInfo>(0x4B8);
		
		/// <summary>
		/// Name: m_bHasRequestedCharLayout
		/// Type: BoolProperty
		/// Offset: 0x548
		/// Size: 0x01
		/// </summary>
		public bool m_bHasRequestedCharLayout
		{
			get
			{
				return ReadBool(0x548);
			}
			set
			{
				WriteBool(0x548,value);
			}
		}
		
	}


	/// <summary>
	/// UGameItemSelection:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UGameItemSelection:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UGameItemSpawner:UBlueprintFunctionLibrary
	/// Size: 0x60
	/// Properties: 7
	/// </summary>
	public class UGameItemSpawner:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: m_ItemTable
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UDataTable m_ItemTable => ReadUObject<UDataTable>(0x28);
		
		/// <summary>
		/// Name: m_RecipeTable
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UDataTable m_RecipeTable => ReadUObject<UDataTable>(0x30);
		
		/// <summary>
		/// Name: m_EmoteTable
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UDataTable m_EmoteTable => ReadUObject<UDataTable>(0x38);
		
		/// <summary>
		/// Name: m_FeatTable
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UDataTable m_FeatTable => ReadUObject<UDataTable>(0x40);
		
		/// <summary>
		/// Name: m_CraftingStationNameTable
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public UDataTable m_CraftingStationNameTable => ReadUObject<UDataTable>(0x48);
		
		/// <summary>
		/// Name: m_DyeItemTable
		/// Type: ObjectProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public UDataTable m_DyeItemTable => ReadUObject<UDataTable>(0x50);
		
		/// <summary>
		/// Name: m_EquipmentVariationTable
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UDataTable m_EquipmentVariationTable => ReadUObject<UDataTable>(0x58);
		
	}


	/// <summary>
	/// UGetGuildMembersListCallProxy:UBlueprintAsyncActionBase
	/// Size: 0x58
	/// Properties: 0
	/// </summary>
	public class UGetGuildMembersListCallProxy:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 88;
	}


	/// <summary>
	/// UGetOwnerCallProxy:UBlueprintAsyncActionBase
	/// Size: 0x58
	/// Properties: 0
	/// </summary>
	public class UGetOwnerCallProxy:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 88;
	}


	/// <summary>
	/// UHierarchicalInstancedStaticMeshComponent:UInstancedStaticMeshComponent
	/// Size: 0x8C0
	/// Properties: 8
	/// </summary>
	public class UHierarchicalInstancedStaticMeshComponent:UInstancedStaticMeshComponent
	{
		public override int ObjectSize => 2240;
		/// <summary>
		/// Name: SortedInstances
		/// Type: TArray<>
		/// Offset: 0x7E8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: NumBuiltInstances
		/// Type: IntProperty
		/// Offset: 0x7F8
		/// Size: 0x04
		/// </summary>
		public int NumBuiltInstances
		{
			get
			{
				return ReadInt32(0x7F8);
			}
			set
			{
				WriteInt32(0x7F8,value);
			}
		}
		
		/// <summary>
		/// Name: BuiltInstanceBounds
		/// Type: StructProperty
		/// Offset: 0x800
		/// Size: 0x1C
		/// </summary>
		public FBox BuiltInstanceBounds => ReadStruct<FBox>(0x800);
		
		/// <summary>
		/// Name: UnbuiltInstanceBounds
		/// Type: StructProperty
		/// Offset: 0x81C
		/// Size: 0x1C
		/// </summary>
		public FBox UnbuiltInstanceBounds => ReadStruct<FBox>(0x81C);
		
		/// <summary>
		/// Name: UnbuiltInstanceBoundsList
		/// Type: TArray<FBox>
		/// Offset: 0x838
		/// Size: 0x10
		/// SubElement Size: 0x1C
		/// </summary>
		public TArray<FBox> UnbuiltInstanceBoundsList => new TArray<FBox>(BaseAddress+0x838);
		
		/// <summary>
		/// Name: bEnableDensityScaling
		/// Type: BoolProperty
		/// Offset: 0x848
		/// Size: 0x01
		/// </summary>
		public bool bEnableDensityScaling => (ReadByte(0x0848) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: OcclusionLayerNumNodes
		/// Type: IntProperty
		/// Offset: 0x870
		/// Size: 0x04
		/// </summary>
		public int OcclusionLayerNumNodes
		{
			get
			{
				return ReadInt32(0x870);
			}
			set
			{
				WriteInt32(0x870,value);
			}
		}
		
		/// <summary>
		/// Name: bDisableCollision
		/// Type: BoolProperty
		/// Offset: 0x877
		/// Size: 0x01
		/// </summary>
		public bool bDisableCollision
		{
			get
			{
				return ReadBool(0x877);
			}
			set
			{
				WriteBool(0x877,value);
			}
		}
		
	}


	/// <summary>
	/// UFoliageInstancedStaticMeshComponent:UHierarchicalInstancedStaticMeshComponent
	/// Size: 0x8E0
	/// Properties: 0
	/// </summary>
	public class UFoliageInstancedStaticMeshComponent:UHierarchicalInstancedStaticMeshComponent
	{
		public override int ObjectSize => 2272;
	}


	/// <summary>
	/// UPickupFoliage:UFoliageInstancedStaticMeshComponent
	/// Size: 0xA00
	/// Properties: 2
	/// </summary>
	public class UPickupFoliage:UFoliageInstancedStaticMeshComponent
	{
		public override int ObjectSize => 2560;
		/// <summary>
		/// Name: ReplicatedRespawnParams
		/// Type: StructProperty
		/// Offset: 0x8D8
		/// Size: 0x18
		/// </summary>
		public FoliageRespawnParams ReplicatedRespawnParams => ReadStruct<FoliageRespawnParams>(0x8D8);
		
		/// <summary>
		/// Name: RespawnTimes
		/// Type: TArray<FVector2D>
		/// Offset: 0x8F0
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FVector2D> RespawnTimes => new TArray<FVector2D>(BaseAddress+0x8F0);
		
	}


	/// <summary>
	/// UHarvestFoliage:UFoliageInstancedStaticMeshComponent
	/// Size: 0xA50
	/// Properties: 2
	/// </summary>
	public class UHarvestFoliage:UFoliageInstancedStaticMeshComponent
	{
		public override int ObjectSize => 2640;
		/// <summary>
		/// Name: ReplicatedRespawnParams
		/// Type: StructProperty
		/// Offset: 0x8D8
		/// Size: 0x18
		/// </summary>
		public FoliageRespawnParams ReplicatedRespawnParams => ReadStruct<FoliageRespawnParams>(0x8D8);
		
		/// <summary>
		/// Name: RespawnTimes
		/// Type: TArray<FVector2D>
		/// Offset: 0x8F0
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FVector2D> RespawnTimes => new TArray<FVector2D>(BaseAddress+0x8F0);
		
	}


	/// <summary>
	/// AHarvestFoliageSystem:AActor
	/// Size: 0x430
	/// Properties: 0
	/// </summary>
	public class AHarvestFoliageSystem:AActor
	{
		public override int ObjectSize => 1072;
	}


	/// <summary>
	/// UHeatmapDataGeneration:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UHeatmapDataGeneration:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UIKInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UIKInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UInventoryItemInterfaceBase:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UInventoryItemInterfaceBase:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// AInventoryItemBase:AActor
	/// Size: 0x3E8
	/// Properties: 2
	/// </summary>
	public class AInventoryItemBase:AActor
	{
		public override int ObjectSize => 1000;
		/// <summary>
		/// Name: EquipSocketName
		/// Type: NameProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: OwnerItem
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public UGameItem OwnerItem => ReadUObject<UGameItem>(0x3E0);
		
	}


	/// <summary>
	/// UCraftingQueue:UItemInventory
	/// Size: 0x3D0
	/// Properties: 19
	/// </summary>
	public class UCraftingQueue:UItemInventory
	{
		public override int ObjectSize => 976;
		/// <summary>
		/// Name: AcceptedFuels
		/// Type: TArray<>
		/// Offset: 0x278
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: BurnTimeMultiplier
		/// Type: FloatProperty
		/// Offset: 0x288
		/// Size: 0x04
		/// </summary>
		public float BurnTimeMultiplier
		{
			get
			{
				return ReadSingle(0x288);
			}
			set
			{
				WriteSingle(0x288,value);
			}
		}
		
		/// <summary>
		/// Name: AutoScheduleRecipes
		/// Type: BoolProperty
		/// Offset: 0x28C
		/// Size: 0x01
		/// </summary>
		public bool AutoScheduleRecipes
		{
			get
			{
				return ReadBool(0x28C);
			}
			set
			{
				WriteBool(0x28C,value);
			}
		}
		
		/// <summary>
		/// Name: MachineRecipes
		/// Type: TArray<>
		/// Offset: 0x290
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: MaxAutoCraftQueueSize
		/// Type: IntProperty
		/// Offset: 0x2A0
		/// Size: 0x04
		/// </summary>
		public int MaxAutoCraftQueueSize
		{
			get
			{
				return ReadInt32(0x2A0);
			}
			set
			{
				WriteInt32(0x2A0,value);
			}
		}
		
		/// <summary>
		/// Name: MachineBannerImage
		/// Type: ObjectProperty
		/// Offset: 0x2A8
		/// Size: 0x08
		/// </summary>
		public UTexture2D MachineBannerImage => ReadUObject<UTexture2D>(0x2A8);
		
		/// <summary>
		/// Name: CanConvertThralls
		/// Type: BoolProperty
		/// Offset: 0x2B0
		/// Size: 0x01
		/// </summary>
		public bool CanConvertThralls
		{
			get
			{
				return ReadBool(0x2B0);
			}
			set
			{
				WriteBool(0x2B0,value);
			}
		}
		
		/// <summary>
		/// Name: ThrallConversionRecipeIDs
		/// Type: TArray<>
		/// Offset: 0x2B8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: m_ResourceInventories
		/// Type: TArray<UItemInventory>
		/// Offset: 0x300
		/// Size: 0x10
		/// SubElement Size: 0x280
		/// </summary>
		public TArray<UItemInventory> m_ResourceInventories => new TArray<UItemInventory>(BaseAddress+0x300);
		
		/// <summary>
		/// Name: m_TargetInventories
		/// Type: TArray<UItemInventory>
		/// Offset: 0x310
		/// Size: 0x10
		/// SubElement Size: 0x280
		/// </summary>
		public TArray<UItemInventory> m_TargetInventories => new TArray<UItemInventory>(BaseAddress+0x310);
		
		/// <summary>
		/// Name: m_EquipmentInventory
		/// Type: ObjectProperty
		/// Offset: 0x320
		/// Size: 0x08
		/// </summary>
		public UEquipmentInventory m_EquipmentInventory => ReadUObject<UEquipmentInventory>(0x320);
		
		/// <summary>
		/// Name: m_MachineRecipeList
		/// Type: TArray<URecipeItem>
		/// Offset: 0x328
		/// Size: 0x10
		/// SubElement Size: 0x3D0
		/// </summary>
		public TArray<URecipeItem> m_MachineRecipeList => new TArray<URecipeItem>(BaseAddress+0x328);
		
		/// <summary>
		/// Name: m_ArtisanThrallInventory
		/// Type: ObjectProperty
		/// Offset: 0x338
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_ArtisanThrallInventory => ReadUObject<UItemInventory>(0x338);
		
		/// <summary>
		/// Name: m_ArtisanRecipeInventory
		/// Type: ObjectProperty
		/// Offset: 0x340
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_ArtisanRecipeInventory => ReadUObject<UItemInventory>(0x340);
		
		/// <summary>
		/// Name: m_IsStarted
		/// Type: BoolProperty
		/// Offset: 0x34C
		/// Size: 0x01
		/// </summary>
		public bool m_IsStarted
		{
			get
			{
				return ReadBool(0x34C);
			}
			set
			{
				WriteBool(0x34C,value);
			}
		}
		
		/// <summary>
		/// Name: m_FuelTemplateID
		/// Type: IntProperty
		/// Offset: 0x350
		/// Size: 0x04
		/// </summary>
		public int m_FuelTemplateID
		{
			get
			{
				return ReadInt32(0x350);
			}
			set
			{
				WriteInt32(0x350,value);
			}
		}
		
		/// <summary>
		/// Name: m_CurrentBurnTimePerFuelItem
		/// Type: FloatProperty
		/// Offset: 0x354
		/// Size: 0x04
		/// </summary>
		public float m_CurrentBurnTimePerFuelItem
		{
			get
			{
				return ReadSingle(0x354);
			}
			set
			{
				WriteSingle(0x354,value);
			}
		}
		
		/// <summary>
		/// Name: m_RemainingBurnTime
		/// Type: FloatProperty
		/// Offset: 0x358
		/// Size: 0x04
		/// </summary>
		public float m_RemainingBurnTime
		{
			get
			{
				return ReadSingle(0x358);
			}
			set
			{
				WriteSingle(0x358,value);
			}
		}
		
		/// <summary>
		/// Name: m_CurrentBurnTimePerFuelItemBase
		/// Type: FloatProperty
		/// Offset: 0x35C
		/// Size: 0x04
		/// </summary>
		public float m_CurrentBurnTimePerFuelItemBase
		{
			get
			{
				return ReadSingle(0x35C);
			}
			set
			{
				WriteSingle(0x35C,value);
			}
		}
		
	}


	/// <summary>
	/// UEmoteInventory:UItemInventory
	/// Size: 0x290
	/// Properties: 0
	/// </summary>
	public class UEmoteInventory:UItemInventory
	{
		public override int ObjectSize => 656;
	}


	/// <summary>
	/// UFeatInventory:UItemInventory
	/// Size: 0x280
	/// Properties: 0
	/// </summary>
	public class UFeatInventory:UItemInventory
	{
		public override int ObjectSize => 640;
	}


	/// <summary>
	/// URecipeManager:UItemInventory
	/// Size: 0x2A0
	/// Properties: 0
	/// </summary>
	public class URecipeManager:UItemInventory
	{
		public override int ObjectSize => 672;
	}


	/// <summary>
	/// ULandClaimCell:UObject
	/// Size: 0xC0
	/// Properties: 2
	/// </summary>
	public class ULandClaimCell:UObject
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: CellDataIndex
		/// Type: IntProperty
		/// Offset: 0xB0
		/// Size: 0x04
		/// </summary>
		public int CellDataIndex
		{
			get
			{
				return ReadInt32(0xB0);
			}
			set
			{
				WriteInt32(0xB0,value);
			}
		}
		
		/// <summary>
		/// Name: RefCount
		/// Type: IntProperty
		/// Offset: 0xB4
		/// Size: 0x04
		/// </summary>
		public int RefCount
		{
			get
			{
				return ReadInt32(0xB4);
			}
			set
			{
				WriteInt32(0xB4,value);
			}
		}
		
	}


	/// <summary>
	/// ULandClaimSystem:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class ULandClaimSystem:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// ULoadCharacterCallProxy:UBlueprintAsyncActionBase
	/// Size: 0x78
	/// Properties: 3
	/// </summary>
	public class ULoadCharacterCallProxy:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: WorldContextObject
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public UObject WorldContextObject => ReadUObject<UObject>(0x48);
		
		/// <summary>
		/// Name: UID
		/// Type: ObjectProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public UUniqueID UID => ReadUObject<UUniqueID>(0x50);
		
		/// <summary>
		/// Name: IsNPC
		/// Type: BoolProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public bool IsNPC
		{
			get
			{
				return ReadBool(0x58);
			}
			set
			{
				WriteBool(0x58,value);
			}
		}
		
	}


	/// <summary>
	/// ULoadGuildIdCallProxy:UBlueprintAsyncActionBase
	/// Size: 0x58
	/// Properties: 0
	/// </summary>
	public class ULoadGuildIdCallProxy:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 88;
	}


	/// <summary>
	/// ULoadGuildsCallProxy:UBlueprintAsyncActionBase
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class ULoadGuildsCallProxy:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// ULoadInventoryCallProxy:UBlueprintAsyncActionBase
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class ULoadInventoryCallProxy:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// ULoadStatHolderCallProxy:UBlueprintAsyncActionBase
	/// Size: 0xC0
	/// Properties: 0
	/// </summary>
	public class ULoadStatHolderCallProxy:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 192;
	}


	/// <summary>
	/// ALootContainer:AActor
	/// Size: 0x3E8
	/// Properties: 2
	/// </summary>
	public class ALootContainer:AActor
	{
		public override int ObjectSize => 1000;
		/// <summary>
		/// Name: m_InventoryMonitor
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UItemInventoryClientMonitor m_InventoryMonitor => ReadUObject<UItemInventoryClientMonitor>(0x3D0);
		
		/// <summary>
		/// Name: m_Inventory
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_Inventory => ReadUObject<UItemInventory>(0x3D8);
		
	}


	/// <summary>
	/// AStaticMeshActor:AActor
	/// Size: 0x3E0
	/// Properties: 3
	/// </summary>
	public class AStaticMeshActor:AActor
	{
		public override int ObjectSize => 992;
		/// <summary>
		/// Name: StaticMeshComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UStaticMeshComponent StaticMeshComponent => ReadUObject<UStaticMeshComponent>(0x3D0);
		
		/// <summary>
		/// Name: bStaticMeshReplicateMovement
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bStaticMeshReplicateMovement
		{
			get
			{
				return ReadBool(0x3D8);
			}
			set
			{
				WriteBool(0x3D8,value);
			}
		}
		
		/// <summary>
		/// Name: NavigationGeometryGatheringMode
		/// Type: ByteProperty
		/// Offset: 0x3D9
		/// Size: 0x01
		/// </summary>
		public byte NavigationGeometryGatheringMode
		{
			get
			{
				return ReadByte(0x3D9);
			}
			set
			{
				WriteByte(0x3D9,value);
			}
		}
		
	}


	/// <summary>
	/// ALoreMeshActor:AStaticMeshActor
	/// Size: 0x3F0
	/// Properties: 1
	/// </summary>
	public class ALoreMeshActor:AStaticMeshActor
	{
		public override int ObjectSize => 1008;
		/// <summary>
		/// Name: LoreId
		/// Type: IntProperty
		/// Offset: 0x3E8
		/// Size: 0x04
		/// </summary>
		public int LoreId
		{
			get
			{
				return ReadInt32(0x3E8);
			}
			set
			{
				WriteInt32(0x3E8,value);
			}
		}
		
	}


	/// <summary>
	/// UNPCCommunicationInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNPCCommunicationInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UNPCCommunicationHelper:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNPCCommunicationHelper:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UOnScreenInfoInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UOnScreenInfoInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UPathFollowingAnimationInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UPathFollowingAnimationInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UPathPoints:UObject
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class UPathPoints:UObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: PathPoints
		/// Type: TArray<FVector>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> PathPoints => new TArray<FVector>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UPlayerMarkerComponent:UActorComponent
	/// Size: 0xD8
	/// Properties: 0
	/// </summary>
	public class UPlayerMarkerComponent:UActorComponent
	{
		public override int ObjectSize => 216;
	}


	/// <summary>
	/// APlayerPawnRegistry:AActor
	/// Size: 0x3E0
	/// Properties: 1
	/// </summary>
	public class APlayerPawnRegistry:AActor
	{
		public override int ObjectSize => 992;
		/// <summary>
		/// Name: m_ExtraPlayerPawns
		/// Type: TArray<APawn>
		/// Offset: 0x3D0
		/// Size: 0x10
		/// SubElement Size: 0x430
		/// </summary>
		public TArray<APawn> m_ExtraPlayerPawns => new TArray<APawn>(BaseAddress+0x3D0);
		
	}


	/// <summary>
	/// URadialMenuEntry:UObject
	/// Size: 0xA8
	/// Properties: 9
	/// </summary>
	public class URadialMenuEntry:UObject
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: label
		/// Type: TextProperty
		/// Offset: 0x28
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: subtitle
		/// Type: TextProperty
		/// Offset: 0x40
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: Icon
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UTexture2D Icon => ReadUObject<UTexture2D>(0x58);
		
		/// <summary>
		/// Name: UserCategory
		/// Type: IntProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public int UserCategory
		{
			get
			{
				return ReadInt32(0x60);
			}
			set
			{
				WriteInt32(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: UserValue
		/// Type: IntProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public int UserValue
		{
			get
			{
				return ReadInt32(0x64);
			}
			set
			{
				WriteInt32(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: UserObject
		/// Type: ObjectProperty
		/// Offset: 0x68
		/// Size: 0x08
		/// </summary>
		public UObject UserObject => ReadUObject<UObject>(0x68);
		
		/// <summary>
		/// Name: KeyShortcutName
		/// Type: NameProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: m_ChildEntries
		/// Type: TArray<URadialMenuEntry>
		/// Offset: 0x90
		/// Size: 0x10
		/// SubElement Size: 0xA8
		/// </summary>
		public TArray<URadialMenuEntry> m_ChildEntries => new TArray<URadialMenuEntry>(BaseAddress+0x90);
		
		/// <summary>
		/// Name: m_Parent
		/// Type: ObjectProperty
		/// Offset: 0xA0
		/// Size: 0x08
		/// </summary>
		public URadialMenuEntry m_Parent => ReadUObject<URadialMenuEntry>(0xA0);
		
	}


	/// <summary>
	/// URadialMenu:URootWidget
	/// Size: 0x478
	/// Properties: 29
	/// </summary>
	public class URadialMenu:URootWidget
	{
		public override int ObjectSize => 1144;
		/// <summary>
		/// Name: AnimTime
		/// Type: FloatProperty
		/// Offset: 0x308
		/// Size: 0x04
		/// </summary>
		public float AnimTime
		{
			get
			{
				return ReadSingle(0x308);
			}
			set
			{
				WriteSingle(0x308,value);
			}
		}
		
		/// <summary>
		/// Name: AnimFullRadiusThreshold
		/// Type: FloatProperty
		/// Offset: 0x30C
		/// Size: 0x04
		/// </summary>
		public float AnimFullRadiusThreshold
		{
			get
			{
				return ReadSingle(0x30C);
			}
			set
			{
				WriteSingle(0x30C,value);
			}
		}
		
		/// <summary>
		/// Name: StartAngle
		/// Type: FloatProperty
		/// Offset: 0x310
		/// Size: 0x04
		/// </summary>
		public float StartAngle
		{
			get
			{
				return ReadSingle(0x310);
			}
			set
			{
				WriteSingle(0x310,value);
			}
		}
		
		/// <summary>
		/// Name: InnerRadius
		/// Type: FloatProperty
		/// Offset: 0x314
		/// Size: 0x04
		/// </summary>
		public float InnerRadius
		{
			get
			{
				return ReadSingle(0x314);
			}
			set
			{
				WriteSingle(0x314,value);
			}
		}
		
		/// <summary>
		/// Name: OuterRadius
		/// Type: FloatProperty
		/// Offset: 0x318
		/// Size: 0x04
		/// </summary>
		public float OuterRadius
		{
			get
			{
				return ReadSingle(0x318);
			}
			set
			{
				WriteSingle(0x318,value);
			}
		}
		
		/// <summary>
		/// Name: IconCenterRadius
		/// Type: FloatProperty
		/// Offset: 0x31C
		/// Size: 0x04
		/// </summary>
		public float IconCenterRadius
		{
			get
			{
				return ReadSingle(0x31C);
			}
			set
			{
				WriteSingle(0x31C,value);
			}
		}
		
		/// <summary>
		/// Name: StartCapOffset
		/// Type: StructProperty
		/// Offset: 0x320
		/// Size: 0x08
		/// </summary>
		public FVector2D StartCapOffset => ReadStruct<FVector2D>(0x320);
		
		/// <summary>
		/// Name: EndCapOffset
		/// Type: StructProperty
		/// Offset: 0x328
		/// Size: 0x08
		/// </summary>
		public FVector2D EndCapOffset => ReadStruct<FVector2D>(0x328);
		
		/// <summary>
		/// Name: StartCapScale
		/// Type: StructProperty
		/// Offset: 0x330
		/// Size: 0x08
		/// </summary>
		public FVector2D StartCapScale => ReadStruct<FVector2D>(0x330);
		
		/// <summary>
		/// Name: EndCapScale
		/// Type: StructProperty
		/// Offset: 0x338
		/// Size: 0x08
		/// </summary>
		public FVector2D EndCapScale => ReadStruct<FVector2D>(0x338);
		
		/// <summary>
		/// Name: SegmentSpacing
		/// Type: FloatProperty
		/// Offset: 0x340
		/// Size: 0x04
		/// </summary>
		public float SegmentSpacing
		{
			get
			{
				return ReadSingle(0x340);
			}
			set
			{
				WriteSingle(0x340,value);
			}
		}
		
		/// <summary>
		/// Name: SelectedScale
		/// Type: FloatProperty
		/// Offset: 0x344
		/// Size: 0x04
		/// </summary>
		public float SelectedScale
		{
			get
			{
				return ReadSingle(0x344);
			}
			set
			{
				WriteSingle(0x344,value);
			}
		}
		
		/// <summary>
		/// Name: HoverScale
		/// Type: FloatProperty
		/// Offset: 0x348
		/// Size: 0x04
		/// </summary>
		public float HoverScale
		{
			get
			{
				return ReadSingle(0x348);
			}
			set
			{
				WriteSingle(0x348,value);
			}
		}
		
		/// <summary>
		/// Name: SegmentViewClass
		/// Type: ClassProperty
		/// Offset: 0x350
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SegmentTextureUnselected
		/// Type: ObjectProperty
		/// Offset: 0x358
		/// Size: 0x08
		/// </summary>
		public UTexture2D SegmentTextureUnselected => ReadUObject<UTexture2D>(0x358);
		
		/// <summary>
		/// Name: SegmentTextureSelected
		/// Type: ObjectProperty
		/// Offset: 0x360
		/// Size: 0x08
		/// </summary>
		public UTexture2D SegmentTextureSelected => ReadUObject<UTexture2D>(0x360);
		
		/// <summary>
		/// Name: SegmentTextureHovered
		/// Type: ObjectProperty
		/// Offset: 0x368
		/// Size: 0x08
		/// </summary>
		public UTexture2D SegmentTextureHovered => ReadUObject<UTexture2D>(0x368);
		
		/// <summary>
		/// Name: StartCapTextureUnselected
		/// Type: ObjectProperty
		/// Offset: 0x370
		/// Size: 0x08
		/// </summary>
		public UTexture2D StartCapTextureUnselected => ReadUObject<UTexture2D>(0x370);
		
		/// <summary>
		/// Name: StartCapTextureSelected
		/// Type: ObjectProperty
		/// Offset: 0x378
		/// Size: 0x08
		/// </summary>
		public UTexture2D StartCapTextureSelected => ReadUObject<UTexture2D>(0x378);
		
		/// <summary>
		/// Name: StartCapTextureHovered
		/// Type: ObjectProperty
		/// Offset: 0x380
		/// Size: 0x08
		/// </summary>
		public UTexture2D StartCapTextureHovered => ReadUObject<UTexture2D>(0x380);
		
		/// <summary>
		/// Name: EndCapTextureUnselected
		/// Type: ObjectProperty
		/// Offset: 0x388
		/// Size: 0x08
		/// </summary>
		public UTexture2D EndCapTextureUnselected => ReadUObject<UTexture2D>(0x388);
		
		/// <summary>
		/// Name: EndCapTextureSelected
		/// Type: ObjectProperty
		/// Offset: 0x390
		/// Size: 0x08
		/// </summary>
		public UTexture2D EndCapTextureSelected => ReadUObject<UTexture2D>(0x390);
		
		/// <summary>
		/// Name: EndCapTextureHovered
		/// Type: ObjectProperty
		/// Offset: 0x398
		/// Size: 0x08
		/// </summary>
		public UTexture2D EndCapTextureHovered => ReadUObject<UTexture2D>(0x398);
		
		/// <summary>
		/// Name: InputAxisDeadZone
		/// Type: FloatProperty
		/// Offset: 0x3A0
		/// Size: 0x04
		/// </summary>
		public float InputAxisDeadZone
		{
			get
			{
				return ReadSingle(0x3A0);
			}
			set
			{
				WriteSingle(0x3A0,value);
			}
		}
		
		/// <summary>
		/// Name: PressedSlateSound
		/// Type: StructProperty
		/// Offset: 0x3A8
		/// Size: 0x18
		/// </summary>
		public FSlateSound PressedSlateSound => ReadStruct<FSlateSound>(0x3A8);
		
		/// <summary>
		/// Name: HoveredSlateSound
		/// Type: StructProperty
		/// Offset: 0x3C0
		/// Size: 0x18
		/// </summary>
		public FSlateSound HoveredSlateSound => ReadStruct<FSlateSound>(0x3C0);
		
		/// <summary>
		/// Name: m_CurrentSubMenu
		/// Type: ObjectProperty
		/// Offset: 0x450
		/// Size: 0x08
		/// </summary>
		public URadialMenuEntry m_CurrentSubMenu => ReadUObject<URadialMenuEntry>(0x450);
		
		/// <summary>
		/// Name: m_RootEntries
		/// Type: TArray<URadialMenuEntry>
		/// Offset: 0x458
		/// Size: 0x10
		/// SubElement Size: 0xA8
		/// </summary>
		public TArray<URadialMenuEntry> m_RootEntries => new TArray<URadialMenuEntry>(BaseAddress+0x458);
		
		/// <summary>
		/// Name: m_ShortcutsInputComponent
		/// Type: ObjectProperty
		/// Offset: 0x470
		/// Size: 0x08
		/// </summary>
		public UInputComponent m_ShortcutsInputComponent => ReadUObject<UInputComponent>(0x470);
		
	}


	/// <summary>
	/// URandomWalkComponent:UActorComponent
	/// Size: 0xD8
	/// Properties: 0
	/// </summary>
	public class URandomWalkComponent:UActorComponent
	{
		public override int ObjectSize => 216;
	}


	/// <summary>
	/// AResourceActorBase:AActor
	/// Size: 0x3D0
	/// Properties: 0
	/// </summary>
	public class AResourceActorBase:AActor
	{
		public override int ObjectSize => 976;
	}


	/// <summary>
	/// UAttributesBase:URootWidget
	/// Size: 0x398
	/// Properties: 1
	/// </summary>
	public class UAttributesBase:URootWidget
	{
		public override int ObjectSize => 920;
		/// <summary>
		/// Name: m_ProgressionSystem
		/// Type: ObjectProperty
		/// Offset: 0x308
		/// Size: 0x08
		/// </summary>
		public UProgressionSystem m_ProgressionSystem => ReadUObject<UProgressionSystem>(0x308);
		
	}


	/// <summary>
	/// UCircularProgressbar:URootWidget
	/// Size: 0x3F8
	/// Properties: 11
	/// </summary>
	public class UCircularProgressbar:URootWidget
	{
		public override int ObjectSize => 1016;
		/// <summary>
		/// Name: progress
		/// Type: FloatProperty
		/// Offset: 0x308
		/// Size: 0x04
		/// </summary>
		public float progress
		{
			get
			{
				return ReadSingle(0x308);
			}
			set
			{
				WriteSingle(0x308,value);
			}
		}
		
		/// <summary>
		/// Name: SegmentSpacing
		/// Type: FloatProperty
		/// Offset: 0x30C
		/// Size: 0x04
		/// </summary>
		public float SegmentSpacing
		{
			get
			{
				return ReadSingle(0x30C);
			}
			set
			{
				WriteSingle(0x30C,value);
			}
		}
		
		/// <summary>
		/// Name: StartAngle
		/// Type: FloatProperty
		/// Offset: 0x310
		/// Size: 0x04
		/// </summary>
		public float StartAngle
		{
			get
			{
				return ReadSingle(0x310);
			}
			set
			{
				WriteSingle(0x310,value);
			}
		}
		
		/// <summary>
		/// Name: AngleSpan
		/// Type: FloatProperty
		/// Offset: 0x314
		/// Size: 0x04
		/// </summary>
		public float AngleSpan
		{
			get
			{
				return ReadSingle(0x314);
			}
			set
			{
				WriteSingle(0x314,value);
			}
		}
		
		/// <summary>
		/// Name: InnerRadius
		/// Type: FloatProperty
		/// Offset: 0x318
		/// Size: 0x04
		/// </summary>
		public float InnerRadius
		{
			get
			{
				return ReadSingle(0x318);
			}
			set
			{
				WriteSingle(0x318,value);
			}
		}
		
		/// <summary>
		/// Name: OuterRadius
		/// Type: FloatProperty
		/// Offset: 0x31C
		/// Size: 0x04
		/// </summary>
		public float OuterRadius
		{
			get
			{
				return ReadSingle(0x31C);
			}
			set
			{
				WriteSingle(0x31C,value);
			}
		}
		
		/// <summary>
		/// Name: IconBrush
		/// Type: StructProperty
		/// Offset: 0x320
		/// Size: 0x90
		/// </summary>
		public FSlateBrush IconBrush => ReadStruct<FSlateBrush>(0x320);
		
		/// <summary>
		/// Name: IconColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x3B0
		/// Size: 0x10
		/// </summary>
		public FLinearColor IconColorAndOpacity => ReadStruct<FLinearColor>(0x3B0);
		
		/// <summary>
		/// Name: TextureEmpty
		/// Type: ObjectProperty
		/// Offset: 0x3C0
		/// Size: 0x08
		/// </summary>
		public UTexture2D TextureEmpty => ReadUObject<UTexture2D>(0x3C0);
		
		/// <summary>
		/// Name: ColorAndOpacityEmpty
		/// Type: StructProperty
		/// Offset: 0x3C8
		/// Size: 0x10
		/// </summary>
		public FLinearColor ColorAndOpacityEmpty => ReadStruct<FLinearColor>(0x3C8);
		
		/// <summary>
		/// Name: Segments
		/// Type: TArray<FCircularProgressbarSegment>
		/// Offset: 0x3D8
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FCircularProgressbarSegment> Segments => new TArray<FCircularProgressbarSegment>(BaseAddress+0x3D8);
		
	}


	/// <summary>
	/// UCraftingManagerGUI:URootWidget
	/// Size: 0x310
	/// Properties: 0
	/// </summary>
	public class UCraftingManagerGUI:URootWidget
	{
		public override int ObjectSize => 784;
	}


	/// <summary>
	/// UCraftingPanel:URootWidget
	/// Size: 0x428
	/// Properties: 9
	/// </summary>
	public class UCraftingPanel:URootWidget
	{
		public override int ObjectSize => 1064;
		/// <summary>
		/// Name: MinRecipeIconSize
		/// Type: FloatProperty
		/// Offset: 0x308
		/// Size: 0x04
		/// </summary>
		public float MinRecipeIconSize
		{
			get
			{
				return ReadSingle(0x308);
			}
			set
			{
				WriteSingle(0x308,value);
			}
		}
		
		/// <summary>
		/// Name: MaxRecipeIconSize
		/// Type: FloatProperty
		/// Offset: 0x30C
		/// Size: 0x04
		/// </summary>
		public float MaxRecipeIconSize
		{
			get
			{
				return ReadSingle(0x30C);
			}
			set
			{
				WriteSingle(0x30C,value);
			}
		}
		
		/// <summary>
		/// Name: m_StationInventory
		/// Type: ObjectProperty
		/// Offset: 0x3C0
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_StationInventory => ReadUObject<UItemInventory>(0x3C0);
		
		/// <summary>
		/// Name: m_ShortcutBar
		/// Type: ObjectProperty
		/// Offset: 0x3C8
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_ShortcutBar => ReadUObject<UItemInventory>(0x3C8);
		
		/// <summary>
		/// Name: m_RecipeIngredientsInventory
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_RecipeIngredientsInventory => ReadUObject<UItemInventory>(0x3D0);
		
		/// <summary>
		/// Name: m_CraftingStation
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public APlaceableBase m_CraftingStation => ReadUObject<APlaceableBase>(0x3D8);
		
		/// <summary>
		/// Name: m_CraftingQueue
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public UCraftingQueue m_CraftingQueue => ReadUObject<UCraftingQueue>(0x3E0);
		
		/// <summary>
		/// Name: m_ArtisanThrallInventory
		/// Type: ObjectProperty
		/// Offset: 0x3E8
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_ArtisanThrallInventory => ReadUObject<UItemInventory>(0x3E8);
		
		/// <summary>
		/// Name: m_CurrentlySelectedRecipe
		/// Type: ObjectProperty
		/// Offset: 0x3F0
		/// Size: 0x08
		/// </summary>
		public URecipeItem m_CurrentlySelectedRecipe => ReadUObject<URecipeItem>(0x3F0);
		
	}


	/// <summary>
	/// UCraftingStationInventoryView:URootWidget
	/// Size: 0x380
	/// Properties: 1
	/// </summary>
	public class UCraftingStationInventoryView:URootWidget
	{
		public override int ObjectSize => 896;
		/// <summary>
		/// Name: m_CraftingQueue
		/// Type: ObjectProperty
		/// Offset: 0x308
		/// Size: 0x08
		/// </summary>
		public UCraftingQueue m_CraftingQueue => ReadUObject<UCraftingQueue>(0x308);
		
	}


	/// <summary>
	/// UEditableLabeledSlider:URootWidget
	/// Size: 0xDD0
	/// Properties: 7
	/// </summary>
	public class UEditableLabeledSlider:URootWidget
	{
		public override int ObjectSize => 3536;
		/// <summary>
		/// Name: Value
		/// Type: FloatProperty
		/// Offset: 0x308
		/// Size: 0x04
		/// </summary>
		public float Value
		{
			get
			{
				return ReadSingle(0x308);
			}
			set
			{
				WriteSingle(0x308,value);
			}
		}
		
		/// <summary>
		/// Name: MinValue
		/// Type: FloatProperty
		/// Offset: 0x30C
		/// Size: 0x04
		/// </summary>
		public float MinValue
		{
			get
			{
				return ReadSingle(0x30C);
			}
			set
			{
				WriteSingle(0x30C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxValue
		/// Type: FloatProperty
		/// Offset: 0x310
		/// Size: 0x04
		/// </summary>
		public float MaxValue
		{
			get
			{
				return ReadSingle(0x310);
			}
			set
			{
				WriteSingle(0x310,value);
			}
		}
		
		/// <summary>
		/// Name: MinFractionalDigits
		/// Type: IntProperty
		/// Offset: 0x314
		/// Size: 0x04
		/// </summary>
		public int MinFractionalDigits
		{
			get
			{
				return ReadInt32(0x314);
			}
			set
			{
				WriteInt32(0x314,value);
			}
		}
		
		/// <summary>
		/// Name: MaxFractionalDigits
		/// Type: IntProperty
		/// Offset: 0x318
		/// Size: 0x04
		/// </summary>
		public int MaxFractionalDigits
		{
			get
			{
				return ReadInt32(0x318);
			}
			set
			{
				WriteInt32(0x318,value);
			}
		}
		
		/// <summary>
		/// Name: SliderWidgetStyle
		/// Type: StructProperty
		/// Offset: 0x320
		/// Size: 0x250
		/// </summary>
		public FSliderStyle SliderWidgetStyle => ReadStruct<FSliderStyle>(0x320);
		
		/// <summary>
		/// Name: TextWidgetStyle
		/// Type: StructProperty
		/// Offset: 0x570
		/// Size: 0x848
		/// </summary>
		public FEditableTextBoxStyle TextWidgetStyle => ReadStruct<FEditableTextBoxStyle>(0x570);
		
	}


	/// <summary>
	/// UInventoryFilterSelector:URootWidget
	/// Size: 0x3A8
	/// Properties: 1
	/// </summary>
	public class UInventoryFilterSelector:URootWidget
	{
		public override int ObjectSize => 936;
		/// <summary>
		/// Name: ShowEncumbrance
		/// Type: BoolProperty
		/// Offset: 0x308
		/// Size: 0x01
		/// </summary>
		public bool ShowEncumbrance
		{
			get
			{
				return ReadBool(0x308);
			}
			set
			{
				WriteBool(0x308,value);
			}
		}
		
	}


	/// <summary>
	/// UInventoryViewBase:URootWidget
	/// Size: 0x490
	/// Properties: 2
	/// </summary>
	public class UInventoryViewBase:URootWidget
	{
		public override int ObjectSize => 1168;
		/// <summary>
		/// Name: inventory
		/// Type: ObjectProperty
		/// Offset: 0x348
		/// Size: 0x08
		/// </summary>
		public UItemInventory inventory => ReadUObject<UItemInventory>(0x348);
		
		/// <summary>
		/// Name: FilterButtonSpacing
		/// Type: FloatProperty
		/// Offset: 0x350
		/// Size: 0x04
		/// </summary>
		public float FilterButtonSpacing
		{
			get
			{
				return ReadSingle(0x350);
			}
			set
			{
				WriteSingle(0x350,value);
			}
		}
		
	}


	/// <summary>
	/// UInventoryItemActionBar:URootWidget
	/// Size: 0x338
	/// Properties: 2
	/// </summary>
	public class UInventoryItemActionBar:URootWidget
	{
		public override int ObjectSize => 824;
		/// <summary>
		/// Name: m_ButtonListLeft
		/// Type: TArray<UFCButton>
		/// Offset: 0x318
		/// Size: 0x10
		/// SubElement Size: 0xB90
		/// </summary>
		public TArray<UFCButton> m_ButtonListLeft => new TArray<UFCButton>(BaseAddress+0x318);
		
		/// <summary>
		/// Name: m_ButtonListRight
		/// Type: TArray<UFCButton>
		/// Offset: 0x328
		/// Size: 0x10
		/// SubElement Size: 0xB90
		/// </summary>
		public TArray<UFCButton> m_ButtonListRight => new TArray<UFCButton>(BaseAddress+0x328);
		
	}


	/// <summary>
	/// UExternalInventoryView:URootWidget
	/// Size: 0x360
	/// Properties: 3
	/// </summary>
	public class UExternalInventoryView:URootWidget
	{
		public override int ObjectSize => 864;
		/// <summary>
		/// Name: CanItemBeDropedOn
		/// Type: BoolProperty
		/// Offset: 0x308
		/// Size: 0x01
		/// </summary>
		public bool CanItemBeDropedOn
		{
			get
			{
				return ReadBool(0x308);
			}
			set
			{
				WriteBool(0x308,value);
			}
		}
		
		/// <summary>
		/// Name: m_Inventory
		/// Type: ObjectProperty
		/// Offset: 0x350
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_Inventory => ReadUObject<UItemInventory>(0x350);
		
		/// <summary>
		/// Name: m_TargetInventory
		/// Type: ObjectProperty
		/// Offset: 0x358
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_TargetInventory => ReadUObject<UItemInventory>(0x358);
		
	}


	/// <summary>
	/// UCharacterInventoryView:UExternalInventoryView
	/// Size: 0x360
	/// Properties: 0
	/// </summary>
	public class UCharacterInventoryView:UExternalInventoryView
	{
		public override int ObjectSize => 864;
	}


	/// <summary>
	/// UChestInventoryView:UExternalInventoryView
	/// Size: 0x360
	/// Properties: 0
	/// </summary>
	public class UChestInventoryView:UExternalInventoryView
	{
		public override int ObjectSize => 864;
	}


	/// <summary>
	/// UFCButton:URootWidget
	/// Size: 0xB90
	/// Properties: 14
	/// </summary>
	public class UFCButton:URootWidget
	{
		public override int ObjectSize => 2960;
		/// <summary>
		/// Name: label
		/// Type: TextProperty
		/// Offset: 0x308
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: KeyShortcutName
		/// Type: NameProperty
		/// Offset: 0x320
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: GamepadIconKey
		/// Type: StructProperty
		/// Offset: 0x328
		/// Size: 0x18
		/// </summary>
		public FKey GamepadIconKey => ReadStruct<FKey>(0x328);
		
		/// <summary>
		/// Name: ShowOnlyGamepadIcon
		/// Type: BoolProperty
		/// Offset: 0x340
		/// Size: 0x01
		/// </summary>
		public bool ShowOnlyGamepadIcon
		{
			get
			{
				return ReadBool(0x340);
			}
			set
			{
				WriteBool(0x340,value);
			}
		}
		
		/// <summary>
		/// Name: Style
		/// Type: StructProperty
		/// Offset: 0x348
		/// Size: 0x6C0
		/// </summary>
		public FFCButtonStyle Style => ReadStruct<FFCButtonStyle>(0x348);
		
		/// <summary>
		/// Name: IsCheckable
		/// Type: BoolProperty
		/// Offset: 0xA08
		/// Size: 0x01
		/// </summary>
		public bool IsCheckable
		{
			get
			{
				return ReadBool(0xA08);
			}
			set
			{
				WriteBool(0xA08,value);
			}
		}
		
		/// <summary>
		/// Name: ToggleWhenClicked
		/// Type: BoolProperty
		/// Offset: 0xA09
		/// Size: 0x01
		/// </summary>
		public bool ToggleWhenClicked
		{
			get
			{
				return ReadBool(0xA09);
			}
			set
			{
				WriteBool(0xA09,value);
			}
		}
		
		/// <summary>
		/// Name: ToggleAction
		/// Type: ByteProperty
		/// Offset: 0xA0A
		/// Size: 0x01
		/// </summary>
		public byte ToggleAction
		{
			get
			{
				return ReadByte(0xA0A);
			}
			set
			{
				WriteByte(0xA0A,value);
			}
		}
		
		/// <summary>
		/// Name: IsChecked
		/// Type: BoolProperty
		/// Offset: 0xA0B
		/// Size: 0x01
		/// </summary>
		public bool IsChecked
		{
			get
			{
				return ReadBool(0xA0B);
			}
			set
			{
				WriteBool(0xA0B,value);
			}
		}
		
		/// <summary>
		/// Name: HoveredFontColor
		/// Type: StructProperty
		/// Offset: 0xA10
		/// Size: 0x28
		/// </summary>
		public FSlateColor HoveredFontColor => ReadStruct<FSlateColor>(0xA10);
		
		/// <summary>
		/// Name: PressedFontColor
		/// Type: StructProperty
		/// Offset: 0xA38
		/// Size: 0x28
		/// </summary>
		public FSlateColor PressedFontColor => ReadStruct<FSlateColor>(0xA38);
		
		/// <summary>
		/// Name: PressedHoveredFontColor
		/// Type: StructProperty
		/// Offset: 0xA60
		/// Size: 0x28
		/// </summary>
		public FSlateColor PressedHoveredFontColor => ReadStruct<FSlateColor>(0xA60);
		
		/// <summary>
		/// Name: FontColor
		/// Type: StructProperty
		/// Offset: 0xA88
		/// Size: 0x28
		/// </summary>
		public FSlateColor FontColor => ReadStruct<FSlateColor>(0xA88);
		
		/// <summary>
		/// Name: m_SubButtons
		/// Type: TArray<UFCButton>
		/// Offset: 0xB70
		/// Size: 0x10
		/// SubElement Size: 0xB90
		/// </summary>
		public TArray<UFCButton> m_SubButtons => new TArray<UFCButton>(BaseAddress+0xB70);
		
	}


	/// <summary>
	/// UTabButtonBase:UFCButton
	/// Size: 0xB98
	/// Properties: 1
	/// </summary>
	public class UTabButtonBase:UFCButton
	{
		public override int ObjectSize => 2968;
		/// <summary>
		/// Name: SwitcherIndex
		/// Type: IntProperty
		/// Offset: 0xB90
		/// Size: 0x04
		/// </summary>
		public int SwitcherIndex
		{
			get
			{
				return ReadInt32(0xB90);
			}
			set
			{
				WriteInt32(0xB90,value);
			}
		}
		
	}


	/// <summary>
	/// UFCComboBoxString:URootWidget
	/// Size: 0x370
	/// Properties: 1
	/// </summary>
	public class UFCComboBoxString:URootWidget
	{
		public override int ObjectSize => 880;
		/// <summary>
		/// Name: m_ComboBox
		/// Type: ObjectProperty
		/// Offset: 0x318
		/// Size: 0x08
		/// </summary>
		public UComboBoxString m_ComboBox => ReadUObject<UComboBoxString>(0x318);
		
	}


	/// <summary>
	/// UFCEditableMultiLineText:URootWidget
	/// Size: 0xD58
	/// Properties: 22
	/// </summary>
	public class UFCEditableMultiLineText:URootWidget
	{
		public override int ObjectSize => 3416;
		/// <summary>
		/// Name: Text
		/// Type: TextProperty
		/// Offset: 0x308
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: WidgetStyle
		/// Type: StructProperty
		/// Offset: 0x320
		/// Size: 0x848
		/// </summary>
		public FEditableTextBoxStyle WidgetStyle => ReadStruct<FEditableTextBoxStyle>(0x320);
		
		/// <summary>
		/// Name: TextStyle
		/// Type: StructProperty
		/// Offset: 0xB68
		/// Size: 0x150
		/// </summary>
		public FTextBlockStyle TextStyle => ReadStruct<FTextBlockStyle>(0xB68);
		
		/// <summary>
		/// Name: HintText
		/// Type: TextProperty
		/// Offset: 0xCB8
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: HintTextDelegate
		/// Type: DelegateProperty
		/// Offset: 0xCD0
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: IsReadOnly
		/// Type: BoolProperty
		/// Offset: 0xCE0
		/// Size: 0x01
		/// </summary>
		public bool IsReadOnly
		{
			get
			{
				return ReadBool(0xCE0);
			}
			set
			{
				WriteBool(0xCE0,value);
			}
		}
		
		/// <summary>
		/// Name: IsPassword
		/// Type: BoolProperty
		/// Offset: 0xCE1
		/// Size: 0x01
		/// </summary>
		public bool IsPassword
		{
			get
			{
				return ReadBool(0xCE1);
			}
			set
			{
				WriteBool(0xCE1,value);
			}
		}
		
		/// <summary>
		/// Name: MinimumDesiredWidth
		/// Type: FloatProperty
		/// Offset: 0xCE4
		/// Size: 0x04
		/// </summary>
		public float MinimumDesiredWidth
		{
			get
			{
				return ReadSingle(0xCE4);
			}
			set
			{
				WriteSingle(0xCE4,value);
			}
		}
		
		/// <summary>
		/// Name: TextMaxLength
		/// Type: IntProperty
		/// Offset: 0xCE8
		/// Size: 0x04
		/// </summary>
		public int TextMaxLength
		{
			get
			{
				return ReadInt32(0xCE8);
			}
			set
			{
				WriteInt32(0xCE8,value);
			}
		}
		
		/// <summary>
		/// Name: IsCaretMovedWhenGainFocus
		/// Type: BoolProperty
		/// Offset: 0xCEC
		/// Size: 0x01
		/// </summary>
		public bool IsCaretMovedWhenGainFocus
		{
			get
			{
				return ReadBool(0xCEC);
			}
			set
			{
				WriteBool(0xCEC,value);
			}
		}
		
		/// <summary>
		/// Name: SelectAllTextWhenFocused
		/// Type: BoolProperty
		/// Offset: 0xCED
		/// Size: 0x01
		/// </summary>
		public bool SelectAllTextWhenFocused
		{
			get
			{
				return ReadBool(0xCED);
			}
			set
			{
				WriteBool(0xCED,value);
			}
		}
		
		/// <summary>
		/// Name: RevertTextOnEscape
		/// Type: BoolProperty
		/// Offset: 0xCEE
		/// Size: 0x01
		/// </summary>
		public bool RevertTextOnEscape
		{
			get
			{
				return ReadBool(0xCEE);
			}
			set
			{
				WriteBool(0xCEE,value);
			}
		}
		
		/// <summary>
		/// Name: ClearKeyboardFocusOnCommit
		/// Type: BoolProperty
		/// Offset: 0xCEF
		/// Size: 0x01
		/// </summary>
		public bool ClearKeyboardFocusOnCommit
		{
			get
			{
				return ReadBool(0xCEF);
			}
			set
			{
				WriteBool(0xCEF,value);
			}
		}
		
		/// <summary>
		/// Name: SelectAllTextOnCommit
		/// Type: BoolProperty
		/// Offset: 0xCF0
		/// Size: 0x01
		/// </summary>
		public bool SelectAllTextOnCommit
		{
			get
			{
				return ReadBool(0xCF0);
			}
			set
			{
				WriteBool(0xCF0,value);
			}
		}
		
		/// <summary>
		/// Name: AllowContextMenu
		/// Type: BoolProperty
		/// Offset: 0xCF1
		/// Size: 0x01
		/// </summary>
		public bool AllowContextMenu
		{
			get
			{
				return ReadBool(0xCF1);
			}
			set
			{
				WriteBool(0xCF1,value);
			}
		}
		
		/// <summary>
		/// Name: ShapedTextOptions
		/// Type: StructProperty
		/// Offset: 0xCF4
		/// Size: 0x08
		/// </summary>
		public FShapedTextOptions ShapedTextOptions => ReadStruct<FShapedTextOptions>(0xCF4);
		
		/// <summary>
		/// Name: Justification
		/// Type: ByteProperty
		/// Offset: 0xCFC
		/// Size: 0x01
		/// </summary>
		public byte Justification
		{
			get
			{
				return ReadByte(0xCFC);
			}
			set
			{
				WriteByte(0xCFC,value);
			}
		}
		
		/// <summary>
		/// Name: AutoWrapText
		/// Type: BoolProperty
		/// Offset: 0xCFD
		/// Size: 0x01
		/// </summary>
		public bool AutoWrapText
		{
			get
			{
				return ReadBool(0xCFD);
			}
			set
			{
				WriteBool(0xCFD,value);
			}
		}
		
		/// <summary>
		/// Name: WrapTextAt
		/// Type: FloatProperty
		/// Offset: 0xD00
		/// Size: 0x04
		/// </summary>
		public float WrapTextAt
		{
			get
			{
				return ReadSingle(0xD00);
			}
			set
			{
				WriteSingle(0xD00,value);
			}
		}
		
		/// <summary>
		/// Name: WrappingPolicy
		/// Type: ByteProperty
		/// Offset: 0xD04
		/// Size: 0x01
		/// </summary>
		public byte WrappingPolicy
		{
			get
			{
				return ReadByte(0xD04);
			}
			set
			{
				WriteByte(0xD04,value);
			}
		}
		
		/// <summary>
		/// Name: Margin
		/// Type: StructProperty
		/// Offset: 0xD08
		/// Size: 0x10
		/// </summary>
		public FMargin Margin => ReadStruct<FMargin>(0xD08);
		
		/// <summary>
		/// Name: LineHeightPercentage
		/// Type: FloatProperty
		/// Offset: 0xD18
		/// Size: 0x04
		/// </summary>
		public float LineHeightPercentage
		{
			get
			{
				return ReadSingle(0xD18);
			}
			set
			{
				WriteSingle(0xD18,value);
			}
		}
		
	}


	/// <summary>
	/// UFCEditableTextBox:URootWidget
	/// Size: 0xBF8
	/// Properties: 16
	/// </summary>
	public class UFCEditableTextBox:URootWidget
	{
		public override int ObjectSize => 3064;
		/// <summary>
		/// Name: Text
		/// Type: TextProperty
		/// Offset: 0x308
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: TextDelegate
		/// Type: DelegateProperty
		/// Offset: 0x320
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: WidgetStyle
		/// Type: StructProperty
		/// Offset: 0x330
		/// Size: 0x848
		/// </summary>
		public FEditableTextBoxStyle WidgetStyle => ReadStruct<FEditableTextBoxStyle>(0x330);
		
		/// <summary>
		/// Name: HintText
		/// Type: TextProperty
		/// Offset: 0xB78
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: HintTextDelegate
		/// Type: DelegateProperty
		/// Offset: 0xB90
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: IsReadOnly
		/// Type: BoolProperty
		/// Offset: 0xBA0
		/// Size: 0x01
		/// </summary>
		public bool IsReadOnly
		{
			get
			{
				return ReadBool(0xBA0);
			}
			set
			{
				WriteBool(0xBA0,value);
			}
		}
		
		/// <summary>
		/// Name: IsPassword
		/// Type: BoolProperty
		/// Offset: 0xBA1
		/// Size: 0x01
		/// </summary>
		public bool IsPassword
		{
			get
			{
				return ReadBool(0xBA1);
			}
			set
			{
				WriteBool(0xBA1,value);
			}
		}
		
		/// <summary>
		/// Name: MinimumDesiredWidth
		/// Type: FloatProperty
		/// Offset: 0xBA4
		/// Size: 0x04
		/// </summary>
		public float MinimumDesiredWidth
		{
			get
			{
				return ReadSingle(0xBA4);
			}
			set
			{
				WriteSingle(0xBA4,value);
			}
		}
		
		/// <summary>
		/// Name: TextMaxLength
		/// Type: IntProperty
		/// Offset: 0xBA8
		/// Size: 0x04
		/// </summary>
		public int TextMaxLength
		{
			get
			{
				return ReadInt32(0xBA8);
			}
			set
			{
				WriteInt32(0xBA8,value);
			}
		}
		
		/// <summary>
		/// Name: IsCaretMovedWhenGainFocus
		/// Type: BoolProperty
		/// Offset: 0xBAC
		/// Size: 0x01
		/// </summary>
		public bool IsCaretMovedWhenGainFocus
		{
			get
			{
				return ReadBool(0xBAC);
			}
			set
			{
				WriteBool(0xBAC,value);
			}
		}
		
		/// <summary>
		/// Name: SelectAllTextWhenFocused
		/// Type: BoolProperty
		/// Offset: 0xBAD
		/// Size: 0x01
		/// </summary>
		public bool SelectAllTextWhenFocused
		{
			get
			{
				return ReadBool(0xBAD);
			}
			set
			{
				WriteBool(0xBAD,value);
			}
		}
		
		/// <summary>
		/// Name: RevertTextOnEscape
		/// Type: BoolProperty
		/// Offset: 0xBAE
		/// Size: 0x01
		/// </summary>
		public bool RevertTextOnEscape
		{
			get
			{
				return ReadBool(0xBAE);
			}
			set
			{
				WriteBool(0xBAE,value);
			}
		}
		
		/// <summary>
		/// Name: ClearKeyboardFocusOnCommit
		/// Type: BoolProperty
		/// Offset: 0xBAF
		/// Size: 0x01
		/// </summary>
		public bool ClearKeyboardFocusOnCommit
		{
			get
			{
				return ReadBool(0xBAF);
			}
			set
			{
				WriteBool(0xBAF,value);
			}
		}
		
		/// <summary>
		/// Name: SelectAllTextOnCommit
		/// Type: BoolProperty
		/// Offset: 0xBB0
		/// Size: 0x01
		/// </summary>
		public bool SelectAllTextOnCommit
		{
			get
			{
				return ReadBool(0xBB0);
			}
			set
			{
				WriteBool(0xBB0,value);
			}
		}
		
		/// <summary>
		/// Name: AllowContextMenu
		/// Type: BoolProperty
		/// Offset: 0xBB1
		/// Size: 0x01
		/// </summary>
		public bool AllowContextMenu
		{
			get
			{
				return ReadBool(0xBB1);
			}
			set
			{
				WriteBool(0xBB1,value);
			}
		}
		
		/// <summary>
		/// Name: ShapedTextOptions
		/// Type: StructProperty
		/// Offset: 0xBB4
		/// Size: 0x08
		/// </summary>
		public FShapedTextOptions ShapedTextOptions => ReadStruct<FShapedTextOptions>(0xBB4);
		
	}


	/// <summary>
	/// UFCProgressbar:URootWidget
	/// Size: 0x338
	/// Properties: 3
	/// </summary>
	public class UFCProgressbar:URootWidget
	{
		public override int ObjectSize => 824;
		/// <summary>
		/// Name: progress
		/// Type: FloatProperty
		/// Offset: 0x308
		/// Size: 0x04
		/// </summary>
		public float progress
		{
			get
			{
				return ReadSingle(0x308);
			}
			set
			{
				WriteSingle(0x308,value);
			}
		}
		
		/// <summary>
		/// Name: Segments
		/// Type: TArray<FFCProgressbarSegment>
		/// Offset: 0x310
		/// Size: 0x10
		/// SubElement Size: 0x1C0
		/// </summary>
		public TArray<FFCProgressbarSegment> Segments => new TArray<FFCProgressbarSegment>(BaseAddress+0x310);
		
		/// <summary>
		/// Name: m_ProgressBars
		/// Type: TArray<UProgressBar>
		/// Offset: 0x328
		/// Size: 0x10
		/// SubElement Size: 0x338
		/// </summary>
		public TArray<UProgressBar> m_ProgressBars => new TArray<UProgressBar>(BaseAddress+0x328);
		
	}


	/// <summary>
	/// UFCSlider:URootWidget
	/// Size: 0x5A8
	/// Properties: 8
	/// </summary>
	public class UFCSlider:URootWidget
	{
		public override int ObjectSize => 1448;
		/// <summary>
		/// Name: Value
		/// Type: FloatProperty
		/// Offset: 0x308
		/// Size: 0x04
		/// </summary>
		public float Value
		{
			get
			{
				return ReadSingle(0x308);
			}
			set
			{
				WriteSingle(0x308,value);
			}
		}
		
		/// <summary>
		/// Name: WidgetStyle
		/// Type: StructProperty
		/// Offset: 0x310
		/// Size: 0x250
		/// </summary>
		public FSliderStyle WidgetStyle => ReadStruct<FSliderStyle>(0x310);
		
		/// <summary>
		/// Name: Orientation
		/// Type: ByteProperty
		/// Offset: 0x560
		/// Size: 0x01
		/// </summary>
		public byte Orientation
		{
			get
			{
				return ReadByte(0x560);
			}
			set
			{
				WriteByte(0x560,value);
			}
		}
		
		/// <summary>
		/// Name: SliderBarColor
		/// Type: StructProperty
		/// Offset: 0x564
		/// Size: 0x10
		/// </summary>
		public FLinearColor SliderBarColor => ReadStruct<FLinearColor>(0x564);
		
		/// <summary>
		/// Name: SliderHandleColor
		/// Type: StructProperty
		/// Offset: 0x574
		/// Size: 0x10
		/// </summary>
		public FLinearColor SliderHandleColor => ReadStruct<FLinearColor>(0x574);
		
		/// <summary>
		/// Name: IndentHandle
		/// Type: BoolProperty
		/// Offset: 0x584
		/// Size: 0x01
		/// </summary>
		public bool IndentHandle
		{
			get
			{
				return ReadBool(0x584);
			}
			set
			{
				WriteBool(0x584,value);
			}
		}
		
		/// <summary>
		/// Name: Locked
		/// Type: BoolProperty
		/// Offset: 0x585
		/// Size: 0x01
		/// </summary>
		public bool Locked
		{
			get
			{
				return ReadBool(0x585);
			}
			set
			{
				WriteBool(0x585,value);
			}
		}
		
		/// <summary>
		/// Name: StepSize
		/// Type: FloatProperty
		/// Offset: 0x588
		/// Size: 0x04
		/// </summary>
		public float StepSize
		{
			get
			{
				return ReadSingle(0x588);
			}
			set
			{
				WriteSingle(0x588,value);
			}
		}
		
	}


	/// <summary>
	/// UFeatResultRecipeInfoView:URootWidget
	/// Size: 0x340
	/// Properties: 1
	/// </summary>
	public class UFeatResultRecipeInfoView:URootWidget
	{
		public override int ObjectSize => 832;
		/// <summary>
		/// Name: m_Item
		/// Type: ObjectProperty
		/// Offset: 0x308
		/// Size: 0x08
		/// </summary>
		public URecipeItem m_Item => ReadUObject<URecipeItem>(0x308);
		
	}


	/// <summary>
	/// UFIFOMessageView:URootWidget
	/// Size: 0x308
	/// Properties: 0
	/// </summary>
	public class UFIFOMessageView:URootWidget
	{
		public override int ObjectSize => 776;
	}


	/// <summary>
	/// UFloatingNameBase:URootWidget
	/// Size: 0x310
	/// Properties: 0
	/// </summary>
	public class UFloatingNameBase:URootWidget
	{
		public override int ObjectSize => 784;
	}


	/// <summary>
	/// UGuildLogBase:URootWidget
	/// Size: 0x3A0
	/// Properties: 1
	/// </summary>
	public class UGuildLogBase:URootWidget
	{
		public override int ObjectSize => 928;
		/// <summary>
		/// Name: ListEntryClass
		/// Type: ClassProperty
		/// Offset: 0x350
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UGuildMembersBase:URootWidget
	/// Size: 0x348
	/// Properties: 2
	/// </summary>
	public class UGuildMembersBase:URootWidget
	{
		public override int ObjectSize => 840;
		/// <summary>
		/// Name: ListEntryClass
		/// Type: ClassProperty
		/// Offset: 0x308
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: OptionsMenuClass
		/// Type: ClassProperty
		/// Offset: 0x310
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UHotkeyIcon:URootWidget
	/// Size: 0x3F8
	/// Properties: 8
	/// </summary>
	public class UHotkeyIcon:URootWidget
	{
		public override int ObjectSize => 1016;
		/// <summary>
		/// Name: GamepadKey
		/// Type: StructProperty
		/// Offset: 0x308
		/// Size: 0x18
		/// </summary>
		public FKey GamepadKey => ReadStruct<FKey>(0x308);
		
		/// <summary>
		/// Name: BindingLabel
		/// Type: TextProperty
		/// Offset: 0x320
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: BindingLabelFormat
		/// Type: TextProperty
		/// Offset: 0x338
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: InputActionName
		/// Type: NameProperty
		/// Offset: 0x350
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ShowOnlyGamepadIcon
		/// Type: BoolProperty
		/// Offset: 0x358
		/// Size: 0x01
		/// </summary>
		public bool ShowOnlyGamepadIcon
		{
			get
			{
				return ReadBool(0x358);
			}
			set
			{
				WriteBool(0x358,value);
			}
		}
		
		/// <summary>
		/// Name: IconSize
		/// Type: FloatProperty
		/// Offset: 0x35C
		/// Size: 0x04
		/// </summary>
		public float IconSize
		{
			get
			{
				return ReadSingle(0x35C);
			}
			set
			{
				WriteSingle(0x35C,value);
			}
		}
		
		/// <summary>
		/// Name: Font
		/// Type: StructProperty
		/// Offset: 0x360
		/// Size: 0x40
		/// </summary>
		public FSlateFontInfo Font => ReadStruct<FSlateFontInfo>(0x360);
		
		/// <summary>
		/// Name: Platforms
		/// Type: TArray<FHotkeyIconPlatform>
		/// Offset: 0x3A0
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FHotkeyIconPlatform> Platforms => new TArray<FHotkeyIconPlatform>(BaseAddress+0x3A0);
		
	}


	/// <summary>
	/// UInventoryGridSlotViewBase:URootWidget
	/// Size: 0x490
	/// Properties: 9
	/// </summary>
	public class UInventoryGridSlotViewBase:URootWidget
	{
		public override int ObjectSize => 1168;
		/// <summary>
		/// Name: IconSize
		/// Type: FloatProperty
		/// Offset: 0x308
		/// Size: 0x04
		/// </summary>
		public float IconSize
		{
			get
			{
				return ReadSingle(0x308);
			}
			set
			{
				WriteSingle(0x308,value);
			}
		}
		
		/// <summary>
		/// Name: IconPadding
		/// Type: StructProperty
		/// Offset: 0x30C
		/// Size: 0x10
		/// </summary>
		public FMargin IconPadding => ReadStruct<FMargin>(0x30C);
		
		/// <summary>
		/// Name: AnimationSelect
		/// Type: ObjectProperty
		/// Offset: 0x320
		/// Size: 0x08
		/// </summary>
		public UWidgetAnimation AnimationSelect => ReadUObject<UWidgetAnimation>(0x320);
		
		/// <summary>
		/// Name: AnimationMouseOver
		/// Type: ObjectProperty
		/// Offset: 0x328
		/// Size: 0x08
		/// </summary>
		public UWidgetAnimation AnimationMouseOver => ReadUObject<UWidgetAnimation>(0x328);
		
		/// <summary>
		/// Name: IconView
		/// Type: ObjectProperty
		/// Offset: 0x330
		/// Size: 0x08
		/// </summary>
		public UInventoryIconViewBase IconView => ReadUObject<UInventoryIconViewBase>(0x330);
		
		/// <summary>
		/// Name: DropSound
		/// Type: ObjectProperty
		/// Offset: 0x338
		/// Size: 0x08
		/// </summary>
		public USoundCue DropSound => ReadUObject<USoundCue>(0x338);
		
		/// <summary>
		/// Name: HoveredSlateSound
		/// Type: StructProperty
		/// Offset: 0x340
		/// Size: 0x18
		/// </summary>
		public FSlateSound HoveredSlateSound => ReadStruct<FSlateSound>(0x340);
		
		/// <summary>
		/// Name: m_IconSlot
		/// Type: ObjectProperty
		/// Offset: 0x358
		/// Size: 0x08
		/// </summary>
		public UNamedSlot m_IconSlot => ReadUObject<UNamedSlot>(0x358);
		
		/// <summary>
		/// Name: m_SizeBox
		/// Type: ObjectProperty
		/// Offset: 0x480
		/// Size: 0x08
		/// </summary>
		public USizeBox m_SizeBox => ReadUObject<USizeBox>(0x480);
		
	}


	/// <summary>
	/// UInventoryGridViewBase:URootWidget
	/// Size: 0x550
	/// Properties: 20
	/// </summary>
	public class UInventoryGridViewBase:URootWidget
	{
		public override int ObjectSize => 1360;
		/// <summary>
		/// Name: GridSlotViewClass
		/// Type: ClassProperty
		/// Offset: 0x308
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ItemViewClass
		/// Type: ClassProperty
		/// Offset: 0x310
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ItemTooltipViewClass
		/// Type: ClassProperty
		/// Offset: 0x318
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: StackSplitDialogClass
		/// Type: ClassProperty
		/// Offset: 0x320
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: inventory
		/// Type: ObjectProperty
		/// Offset: 0x328
		/// Size: 0x08
		/// </summary>
		public UItemInventory inventory => ReadUObject<UItemInventory>(0x328);
		
		/// <summary>
		/// Name: ColumnCount
		/// Type: IntProperty
		/// Offset: 0x330
		/// Size: 0x04
		/// </summary>
		public int ColumnCount
		{
			get
			{
				return ReadInt32(0x330);
			}
			set
			{
				WriteInt32(0x330,value);
			}
		}
		
		/// <summary>
		/// Name: RowCount
		/// Type: IntProperty
		/// Offset: 0x334
		/// Size: 0x04
		/// </summary>
		public int RowCount
		{
			get
			{
				return ReadInt32(0x334);
			}
			set
			{
				WriteInt32(0x334,value);
			}
		}
		
		/// <summary>
		/// Name: IconSlotSize
		/// Type: FloatProperty
		/// Offset: 0x338
		/// Size: 0x04
		/// </summary>
		public float IconSlotSize
		{
			get
			{
				return ReadSingle(0x338);
			}
			set
			{
				WriteSingle(0x338,value);
			}
		}
		
		/// <summary>
		/// Name: IconSlotPadding
		/// Type: StructProperty
		/// Offset: 0x33C
		/// Size: 0x10
		/// </summary>
		public FMargin IconSlotPadding => ReadStruct<FMargin>(0x33C);
		
		/// <summary>
		/// Name: Orientation
		/// Type: ByteProperty
		/// Offset: 0x34C
		/// Size: 0x01
		/// </summary>
		public byte Orientation
		{
			get
			{
				return ReadByte(0x34C);
			}
			set
			{
				WriteByte(0x34C,value);
			}
		}
		
		/// <summary>
		/// Name: EnableScrollBar
		/// Type: BoolProperty
		/// Offset: 0x34D
		/// Size: 0x01
		/// </summary>
		public bool EnableScrollBar
		{
			get
			{
				return ReadBool(0x34D);
			}
			set
			{
				WriteBool(0x34D,value);
			}
		}
		
		/// <summary>
		/// Name: ShowItemProgress
		/// Type: BoolProperty
		/// Offset: 0x34E
		/// Size: 0x01
		/// </summary>
		public bool ShowItemProgress
		{
			get
			{
				return ReadBool(0x34E);
			}
			set
			{
				WriteBool(0x34E,value);
			}
		}
		
		/// <summary>
		/// Name: AllowItemDrag
		/// Type: BoolProperty
		/// Offset: 0x34F
		/// Size: 0x01
		/// </summary>
		public bool AllowItemDrag
		{
			get
			{
				return ReadBool(0x34F);
			}
			set
			{
				WriteBool(0x34F,value);
			}
		}
		
		/// <summary>
		/// Name: AllowItemDrop
		/// Type: BoolProperty
		/// Offset: 0x350
		/// Size: 0x01
		/// </summary>
		public bool AllowItemDrop
		{
			get
			{
				return ReadBool(0x350);
			}
			set
			{
				WriteBool(0x350,value);
			}
		}
		
		/// <summary>
		/// Name: ItemsCombinedSound
		/// Type: StructProperty
		/// Offset: 0x358
		/// Size: 0x18
		/// </summary>
		public FSlateSound ItemsCombinedSound => ReadStruct<FSlateSound>(0x358);
		
		/// <summary>
		/// Name: DelegateGetItemTooltip
		/// Type: DelegateProperty
		/// Offset: 0x370
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: DelegateFilterItem
		/// Type: DelegateProperty
		/// Offset: 0x380
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: DelegateCompareItems
		/// Type: DelegateProperty
		/// Offset: 0x390
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: m_SplitStackDialog
		/// Type: ObjectProperty
		/// Offset: 0x520
		/// Size: 0x08
		/// </summary>
		public UStackSplitValueDialog m_SplitStackDialog => ReadUObject<UStackSplitValueDialog>(0x520);
		
		/// <summary>
		/// Name: m_InventoryMonitor
		/// Type: ObjectProperty
		/// Offset: 0x528
		/// Size: 0x08
		/// </summary>
		public UItemInventoryClientMonitor m_InventoryMonitor => ReadUObject<UItemInventoryClientMonitor>(0x528);
		
	}


	/// <summary>
	/// UInventoryIconViewBase:URootWidget
	/// Size: 0x370
	/// Properties: 3
	/// </summary>
	public class UInventoryIconViewBase:URootWidget
	{
		public override int ObjectSize => 880;
		/// <summary>
		/// Name: AllowItemDrag
		/// Type: BoolProperty
		/// Offset: 0x308
		/// Size: 0x01
		/// </summary>
		public bool AllowItemDrag
		{
			get
			{
				return ReadBool(0x308);
			}
			set
			{
				WriteBool(0x308,value);
			}
		}
		
		/// <summary>
		/// Name: DragSound
		/// Type: ObjectProperty
		/// Offset: 0x310
		/// Size: 0x08
		/// </summary>
		public USoundCue DragSound => ReadUObject<USoundCue>(0x310);
		
		/// <summary>
		/// Name: m_GameItem
		/// Type: ObjectProperty
		/// Offset: 0x318
		/// Size: 0x08
		/// </summary>
		public UGameItem m_GameItem => ReadUObject<UGameItem>(0x318);
		
	}


	/// <summary>
	/// UInventoryItemInfoPanel:URootWidget
	/// Size: 0x360
	/// Properties: 1
	/// </summary>
	public class UInventoryItemInfoPanel:URootWidget
	{
		public override int ObjectSize => 864;
		/// <summary>
		/// Name: m_GameItem
		/// Type: ObjectProperty
		/// Offset: 0x358
		/// Size: 0x08
		/// </summary>
		public UGameItem m_GameItem => ReadUObject<UGameItem>(0x358);
		
	}


	/// <summary>
	/// UItemStatView:URootWidget
	/// Size: 0x330
	/// Properties: 1
	/// </summary>
	public class UItemStatView:URootWidget
	{
		public override int ObjectSize => 816;
		/// <summary>
		/// Name: fontSize
		/// Type: IntProperty
		/// Offset: 0x308
		/// Size: 0x04
		/// </summary>
		public int fontSize
		{
			get
			{
				return ReadInt32(0x308);
			}
			set
			{
				WriteInt32(0x308,value);
			}
		}
		
	}


	/// <summary>
	/// UKeyBindingsCategoryBase:URootWidget
	/// Size: 0x410
	/// Properties: 1
	/// </summary>
	public class UKeyBindingsCategoryBase:URootWidget
	{
		public override int ObjectSize => 1040;
		/// <summary>
		/// Name: m_EntryClass
		/// Type: ClassProperty
		/// Offset: 0x400
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UKeyBindingsCommandBase:URootWidget
	/// Size: 0x3C0
	/// Properties: 0
	/// </summary>
	public class UKeyBindingsCommandBase:URootWidget
	{
		public override int ObjectSize => 960;
	}


	/// <summary>
	/// UKeyBindingsCommandEntryBase:URootWidget
	/// Size: 0x3B0
	/// Properties: 0
	/// </summary>
	public class UKeyBindingsCommandEntryBase:URootWidget
	{
		public override int ObjectSize => 944;
	}


	/// <summary>
	/// UKeyBindingsEntryBase:URootWidget
	/// Size: 0x420
	/// Properties: 0
	/// </summary>
	public class UKeyBindingsEntryBase:URootWidget
	{
		public override int ObjectSize => 1056;
	}


	/// <summary>
	/// UKeyBindingsKeyBase:URootWidget
	/// Size: 0x430
	/// Properties: 0
	/// </summary>
	public class UKeyBindingsKeyBase:URootWidget
	{
		public override int ObjectSize => 1072;
	}


	/// <summary>
	/// UKeyNavIndicator:URootWidget
	/// Size: 0x310
	/// Properties: 0
	/// </summary>
	public class UKeyNavIndicator:URootWidget
	{
		public override int ObjectSize => 784;
	}


	/// <summary>
	/// UListEntryBase:URootWidget
	/// Size: 0x4A8
	/// Properties: 5
	/// </summary>
	public class UListEntryBase:URootWidget
	{
		public override int ObjectSize => 1192;
		/// <summary>
		/// Name: m_HighlightedColor
		/// Type: StructProperty
		/// Offset: 0x328
		/// Size: 0x28
		/// </summary>
		public FSlateColor m_HighlightedColor => ReadStruct<FSlateColor>(0x328);
		
		/// <summary>
		/// Name: m_OnlineColor
		/// Type: StructProperty
		/// Offset: 0x350
		/// Size: 0x28
		/// </summary>
		public FSlateColor m_OnlineColor => ReadStruct<FSlateColor>(0x350);
		
		/// <summary>
		/// Name: m_OfflineColor
		/// Type: StructProperty
		/// Offset: 0x378
		/// Size: 0x28
		/// </summary>
		public FSlateColor m_OfflineColor => ReadStruct<FSlateColor>(0x378);
		
		/// <summary>
		/// Name: m_PlayerId
		/// Type: Int64Property
		/// Offset: 0x490
		/// Size: 0x08
		/// </summary>
		public long m_PlayerId
		{
			get
			{
				return ReadInt64(0x490);
			}
			set
			{
				WriteInt64(0x490,value);
			}
		}
		
		/// <summary>
		/// Name: m_GuildId
		/// Type: ObjectProperty
		/// Offset: 0x498
		/// Size: 0x08
		/// </summary>
		public UUniqueID m_GuildId => ReadUObject<UUniqueID>(0x498);
		
	}


	/// <summary>
	/// UListMenu:URootWidget
	/// Size: 0x4D0
	/// Properties: 10
	/// </summary>
	public class UListMenu:URootWidget
	{
		public override int ObjectSize => 1232;
		/// <summary>
		/// Name: ButtonClass
		/// Type: ClassProperty
		/// Offset: 0x308
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: NormalHovered
		/// Type: StructProperty
		/// Offset: 0x310
		/// Size: 0x28
		/// </summary>
		public FSlateColor NormalHovered => ReadStruct<FSlateColor>(0x310);
		
		/// <summary>
		/// Name: NormalColor
		/// Type: StructProperty
		/// Offset: 0x338
		/// Size: 0x28
		/// </summary>
		public FSlateColor NormalColor => ReadStruct<FSlateColor>(0x338);
		
		/// <summary>
		/// Name: NormalPressedHovered
		/// Type: StructProperty
		/// Offset: 0x360
		/// Size: 0x28
		/// </summary>
		public FSlateColor NormalPressedHovered => ReadStruct<FSlateColor>(0x360);
		
		/// <summary>
		/// Name: NormalPressed
		/// Type: StructProperty
		/// Offset: 0x388
		/// Size: 0x28
		/// </summary>
		public FSlateColor NormalPressed => ReadStruct<FSlateColor>(0x388);
		
		/// <summary>
		/// Name: GuildMasterHovered
		/// Type: StructProperty
		/// Offset: 0x3B0
		/// Size: 0x28
		/// </summary>
		public FSlateColor GuildMasterHovered => ReadStruct<FSlateColor>(0x3B0);
		
		/// <summary>
		/// Name: GuildMasterColor
		/// Type: StructProperty
		/// Offset: 0x3D8
		/// Size: 0x28
		/// </summary>
		public FSlateColor GuildMasterColor => ReadStruct<FSlateColor>(0x3D8);
		
		/// <summary>
		/// Name: GuildMasterPressedHovered
		/// Type: StructProperty
		/// Offset: 0x400
		/// Size: 0x28
		/// </summary>
		public FSlateColor GuildMasterPressedHovered => ReadStruct<FSlateColor>(0x400);
		
		/// <summary>
		/// Name: GuildMasterPressed
		/// Type: StructProperty
		/// Offset: 0x428
		/// Size: 0x28
		/// </summary>
		public FSlateColor GuildMasterPressed => ReadStruct<FSlateColor>(0x428);
		
		/// <summary>
		/// Name: m_selectedPlayerId
		/// Type: Int64Property
		/// Offset: 0x4C0
		/// Size: 0x08
		/// </summary>
		public long m_selectedPlayerId
		{
			get
			{
				return ReadInt64(0x4C0);
			}
			set
			{
				WriteInt64(0x4C0,value);
			}
		}
		
	}


	/// <summary>
	/// UMapWithMarkerWidget:URootWidget
	/// Size: 0x348
	/// Properties: 0
	/// </summary>
	public class UMapWithMarkerWidget:URootWidget
	{
		public override int ObjectSize => 840;
	}


	/// <summary>
	/// UPaperdollIconSlot:URootWidget
	/// Size: 0x360
	/// Properties: 0
	/// </summary>
	public class UPaperdollIconSlot:URootWidget
	{
		public override int ObjectSize => 864;
	}


	/// <summary>
	/// UPaperdollPanel:URootWidget
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class UPaperdollPanel:URootWidget
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: m_EquipmentInventory
		/// Type: ObjectProperty
		/// Offset: 0x308
		/// Size: 0x08
		/// </summary>
		public UEquipmentInventory m_EquipmentInventory => ReadUObject<UEquipmentInventory>(0x308);
		
	}


	/// <summary>
	/// UPlayerInventoryView:URootWidget
	/// Size: 0x360
	/// Properties: 6
	/// </summary>
	public class UPlayerInventoryView:URootWidget
	{
		public override int ObjectSize => 864;
		/// <summary>
		/// Name: m_BackpackInventory
		/// Type: ObjectProperty
		/// Offset: 0x308
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_BackpackInventory => ReadUObject<UItemInventory>(0x308);
		
		/// <summary>
		/// Name: m_EquipmentInventory
		/// Type: ObjectProperty
		/// Offset: 0x310
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_EquipmentInventory => ReadUObject<UItemInventory>(0x310);
		
		/// <summary>
		/// Name: m_ShortcutbarInventory
		/// Type: ObjectProperty
		/// Offset: 0x318
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_ShortcutbarInventory => ReadUObject<UItemInventory>(0x318);
		
		/// <summary>
		/// Name: m_BackpackInventoryView
		/// Type: ObjectProperty
		/// Offset: 0x320
		/// Size: 0x08
		/// </summary>
		public UChestInventoryView m_BackpackInventoryView => ReadUObject<UChestInventoryView>(0x320);
		
		/// <summary>
		/// Name: m_EquipmentInventoryView
		/// Type: ObjectProperty
		/// Offset: 0x328
		/// Size: 0x08
		/// </summary>
		public UChestInventoryView m_EquipmentInventoryView => ReadUObject<UChestInventoryView>(0x328);
		
		/// <summary>
		/// Name: m_ShortcutbarInventoryView
		/// Type: ObjectProperty
		/// Offset: 0x330
		/// Size: 0x08
		/// </summary>
		public UChestInventoryView m_ShortcutbarInventoryView => ReadUObject<UChestInventoryView>(0x330);
		
	}


	/// <summary>
	/// URadialMenuSegment:URootWidget
	/// Size: 0x348
	/// Properties: 3
	/// </summary>
	public class URadialMenuSegment:URootWidget
	{
		public override int ObjectSize => 840;
		/// <summary>
		/// Name: m_IconTexture
		/// Type: ObjectProperty
		/// Offset: 0x328
		/// Size: 0x08
		/// </summary>
		public UTexture2D m_IconTexture => ReadUObject<UTexture2D>(0x328);
		
		/// <summary>
		/// Name: m_StartCapTexture
		/// Type: ObjectProperty
		/// Offset: 0x330
		/// Size: 0x08
		/// </summary>
		public UTexture2D m_StartCapTexture => ReadUObject<UTexture2D>(0x330);
		
		/// <summary>
		/// Name: m_EndCapTexture
		/// Type: ObjectProperty
		/// Offset: 0x338
		/// Size: 0x08
		/// </summary>
		public UTexture2D m_EndCapTexture => ReadUObject<UTexture2D>(0x338);
		
	}


	/// <summary>
	/// UServerListView:URootWidget
	/// Size: 0x490
	/// Properties: 6
	/// </summary>
	public class UServerListView:URootWidget
	{
		public override int ObjectSize => 1168;
		/// <summary>
		/// Name: m_CurrentSteamFilter
		/// Type: ByteProperty
		/// Offset: 0x338
		/// Size: 0x01
		/// </summary>
		public byte m_CurrentSteamFilter
		{
			get
			{
				return ReadByte(0x338);
			}
			set
			{
				WriteByte(0x338,value);
			}
		}
		
		/// <summary>
		/// Name: m_CurrentOfficalFilter
		/// Type: ByteProperty
		/// Offset: 0x339
		/// Size: 0x01
		/// </summary>
		public byte m_CurrentOfficalFilter
		{
			get
			{
				return ReadByte(0x339);
			}
			set
			{
				WriteByte(0x339,value);
			}
		}
		
		/// <summary>
		/// Name: m_ServerInfoClass
		/// Type: ClassProperty
		/// Offset: 0x368
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: m_ListUpdateProgressView
		/// Type: ObjectProperty
		/// Offset: 0x370
		/// Size: 0x08
		/// </summary>
		public UTextBlock m_ListUpdateProgressView => ReadUObject<UTextBlock>(0x370);
		
		/// <summary>
		/// Name: m_UnusedListEntryWidgets
		/// Type: TArray<UServerInfoBase>
		/// Offset: 0x380
		/// Size: 0x10
		/// SubElement Size: 0x548
		/// </summary>
		public TArray<UServerInfoBase> m_UnusedListEntryWidgets => new TArray<UServerInfoBase>(BaseAddress+0x380);
		
		/// <summary>
		/// Name: m_ListViewEntries
		/// Type: TArray<FServerListViewEntry>
		/// Offset: 0x390
		/// Size: 0x10
		/// SubElement Size: 0xD8
		/// </summary>
		public TArray<FServerListViewEntry> m_ListViewEntries => new TArray<FServerListViewEntry>(BaseAddress+0x390);
		
	}


	/// <summary>
	/// UShortcutIconBase:URootWidget
	/// Size: 0x470
	/// Properties: 0
	/// </summary>
	public class UShortcutIconBase:URootWidget
	{
		public override int ObjectSize => 1136;
	}


	/// <summary>
	/// USubSettingsMaster:URootWidget
	/// Size: 0x310
	/// Properties: 1
	/// </summary>
	public class USubSettingsMaster:URootWidget
	{
		public override int ObjectSize => 784;
		/// <summary>
		/// Name: IsDirty
		/// Type: BoolProperty
		/// Offset: 0x308
		/// Size: 0x01
		/// </summary>
		public bool IsDirty
		{
			get
			{
				return ReadBool(0x308);
			}
			set
			{
				WriteBool(0x308,value);
			}
		}
		
	}


	/// <summary>
	/// USettingsAudioBase:USubSettingsMaster
	/// Size: 0x3B8
	/// Properties: 8
	/// </summary>
	public class USettingsAudioBase:USubSettingsMaster
	{
		public override int ObjectSize => 952;
		/// <summary>
		/// Name: MasterClass
		/// Type: ObjectProperty
		/// Offset: 0x310
		/// Size: 0x08
		/// </summary>
		public USoundClass MasterClass => ReadUObject<USoundClass>(0x310);
		
		/// <summary>
		/// Name: MusicClass
		/// Type: ObjectProperty
		/// Offset: 0x318
		/// Size: 0x08
		/// </summary>
		public USoundClass MusicClass => ReadUObject<USoundClass>(0x318);
		
		/// <summary>
		/// Name: VoiceClass
		/// Type: ObjectProperty
		/// Offset: 0x320
		/// Size: 0x08
		/// </summary>
		public USoundClass VoiceClass => ReadUObject<USoundClass>(0x320);
		
		/// <summary>
		/// Name: VoiceChatClass
		/// Type: ObjectProperty
		/// Offset: 0x328
		/// Size: 0x08
		/// </summary>
		public USoundClass VoiceChatClass => ReadUObject<USoundClass>(0x328);
		
		/// <summary>
		/// Name: SFXClass
		/// Type: ObjectProperty
		/// Offset: 0x330
		/// Size: 0x08
		/// </summary>
		public USoundClass SFXClass => ReadUObject<USoundClass>(0x330);
		
		/// <summary>
		/// Name: maxVolume
		/// Type: FloatProperty
		/// Offset: 0x338
		/// Size: 0x04
		/// </summary>
		public float maxVolume
		{
			get
			{
				return ReadSingle(0x338);
			}
			set
			{
				WriteSingle(0x338,value);
			}
		}
		
		/// <summary>
		/// Name: MinSliderValue
		/// Type: IntProperty
		/// Offset: 0x33C
		/// Size: 0x04
		/// </summary>
		public int MinSliderValue
		{
			get
			{
				return ReadInt32(0x33C);
			}
			set
			{
				WriteInt32(0x33C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxSliderValue
		/// Type: IntProperty
		/// Offset: 0x340
		/// Size: 0x04
		/// </summary>
		public int MaxSliderValue
		{
			get
			{
				return ReadInt32(0x340);
			}
			set
			{
				WriteInt32(0x340,value);
			}
		}
		
	}


	/// <summary>
	/// USettingsControlBase:USubSettingsMaster
	/// Size: 0x3B0
	/// Properties: 8
	/// </summary>
	public class USettingsControlBase:USubSettingsMaster
	{
		public override int ObjectSize => 944;
		/// <summary>
		/// Name: maxMouseSensitivity
		/// Type: FloatProperty
		/// Offset: 0x310
		/// Size: 0x04
		/// </summary>
		public float maxMouseSensitivity
		{
			get
			{
				return ReadSingle(0x310);
			}
			set
			{
				WriteSingle(0x310,value);
			}
		}
		
		/// <summary>
		/// Name: minMouseSensitivity
		/// Type: FloatProperty
		/// Offset: 0x314
		/// Size: 0x04
		/// </summary>
		public float minMouseSensitivity
		{
			get
			{
				return ReadSingle(0x314);
			}
			set
			{
				WriteSingle(0x314,value);
			}
		}
		
		/// <summary>
		/// Name: maxAxisSensitivity
		/// Type: FloatProperty
		/// Offset: 0x318
		/// Size: 0x04
		/// </summary>
		public float maxAxisSensitivity
		{
			get
			{
				return ReadSingle(0x318);
			}
			set
			{
				WriteSingle(0x318,value);
			}
		}
		
		/// <summary>
		/// Name: minAxisSensitivity
		/// Type: FloatProperty
		/// Offset: 0x31C
		/// Size: 0x04
		/// </summary>
		public float minAxisSensitivity
		{
			get
			{
				return ReadSingle(0x31C);
			}
			set
			{
				WriteSingle(0x31C,value);
			}
		}
		
		/// <summary>
		/// Name: maxAxisDeadzone
		/// Type: FloatProperty
		/// Offset: 0x320
		/// Size: 0x04
		/// </summary>
		public float maxAxisDeadzone
		{
			get
			{
				return ReadSingle(0x320);
			}
			set
			{
				WriteSingle(0x320,value);
			}
		}
		
		/// <summary>
		/// Name: minAxisDeadzone
		/// Type: FloatProperty
		/// Offset: 0x324
		/// Size: 0x04
		/// </summary>
		public float minAxisDeadzone
		{
			get
			{
				return ReadSingle(0x324);
			}
			set
			{
				WriteSingle(0x324,value);
			}
		}
		
		/// <summary>
		/// Name: maxTriggerDeadzone
		/// Type: FloatProperty
		/// Offset: 0x328
		/// Size: 0x04
		/// </summary>
		public float maxTriggerDeadzone
		{
			get
			{
				return ReadSingle(0x328);
			}
			set
			{
				WriteSingle(0x328,value);
			}
		}
		
		/// <summary>
		/// Name: minTriggerDeadzone
		/// Type: FloatProperty
		/// Offset: 0x32C
		/// Size: 0x04
		/// </summary>
		public float minTriggerDeadzone
		{
			get
			{
				return ReadSingle(0x32C);
			}
			set
			{
				WriteSingle(0x32C,value);
			}
		}
		
	}


	/// <summary>
	/// USettingsGameplayBase:USubSettingsMaster
	/// Size: 0x4A0
	/// Properties: 12
	/// </summary>
	public class USettingsGameplayBase:USubSettingsMaster
	{
		public override int ObjectSize => 1184;
		/// <summary>
		/// Name: m_LastNudity
		/// Type: ByteProperty
		/// Offset: 0x310
		/// Size: 0x01
		/// </summary>
		public byte m_LastNudity
		{
			get
			{
				return ReadByte(0x310);
			}
			set
			{
				WriteByte(0x310,value);
			}
		}
		
		/// <summary>
		/// Name: English
		/// Type: TextProperty
		/// Offset: 0x318
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: German
		/// Type: TextProperty
		/// Offset: 0x330
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: Spanish
		/// Type: TextProperty
		/// Offset: 0x348
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: French
		/// Type: TextProperty
		/// Offset: 0x360
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: Russian
		/// Type: TextProperty
		/// Offset: 0x378
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: Polish
		/// Type: TextProperty
		/// Offset: 0x390
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: Brazilian
		/// Type: TextProperty
		/// Offset: 0x3A8
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: Korean
		/// Type: TextProperty
		/// Offset: 0x3C0
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: Japanese
		/// Type: TextProperty
		/// Offset: 0x3D8
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: SimplifiedChinese
		/// Type: TextProperty
		/// Offset: 0x3F0
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: TraditionalChinese
		/// Type: TextProperty
		/// Offset: 0x408
		/// Size: 0x18
		/// </summary>
		
	}


	/// <summary>
	/// USettingsKeyBindingsBase:USubSettingsMaster
	/// Size: 0x388
	/// Properties: 1
	/// </summary>
	public class USettingsKeyBindingsBase:USubSettingsMaster
	{
		public override int ObjectSize => 904;
		/// <summary>
		/// Name: m_CategoryClass
		/// Type: ClassProperty
		/// Offset: 0x360
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// USettingsServerBase:USubSettingsMaster
	/// Size: 0x5C8
	/// Properties: 1
	/// </summary>
	public class USettingsServerBase:USubSettingsMaster
	{
		public override int ObjectSize => 1480;
		/// <summary>
		/// Name: MaxPasswordLength
		/// Type: FloatProperty
		/// Offset: 0x310
		/// Size: 0x04
		/// </summary>
		public float MaxPasswordLength
		{
			get
			{
				return ReadSingle(0x310);
			}
			set
			{
				WriteSingle(0x310,value);
			}
		}
		
	}


	/// <summary>
	/// USettingsVideoBase:USubSettingsMaster
	/// Size: 0x430
	/// Properties: 5
	/// </summary>
	public class USettingsVideoBase:USubSettingsMaster
	{
		public override int ObjectSize => 1072;
		/// <summary>
		/// Name: maxGamma
		/// Type: FloatProperty
		/// Offset: 0x320
		/// Size: 0x04
		/// </summary>
		public float maxGamma
		{
			get
			{
				return ReadSingle(0x320);
			}
			set
			{
				WriteSingle(0x320,value);
			}
		}
		
		/// <summary>
		/// Name: minGAMMA
		/// Type: FloatProperty
		/// Offset: 0x324
		/// Size: 0x04
		/// </summary>
		public float minGAMMA
		{
			get
			{
				return ReadSingle(0x324);
			}
			set
			{
				WriteSingle(0x324,value);
			}
		}
		
		/// <summary>
		/// Name: maxFOV
		/// Type: FloatProperty
		/// Offset: 0x328
		/// Size: 0x04
		/// </summary>
		public float maxFOV
		{
			get
			{
				return ReadSingle(0x328);
			}
			set
			{
				WriteSingle(0x328,value);
			}
		}
		
		/// <summary>
		/// Name: minFOV
		/// Type: FloatProperty
		/// Offset: 0x32C
		/// Size: 0x04
		/// </summary>
		public float minFOV
		{
			get
			{
				return ReadSingle(0x32C);
			}
			set
			{
				WriteSingle(0x32C,value);
			}
		}
		
		/// <summary>
		/// Name: IsVideoModeDirty
		/// Type: BoolProperty
		/// Offset: 0x330
		/// Size: 0x01
		/// </summary>
		public bool IsVideoModeDirty
		{
			get
			{
				return ReadBool(0x330);
			}
			set
			{
				WriteBool(0x330,value);
			}
		}
		
	}


	/// <summary>
	/// UTimeInputBox:URootWidget
	/// Size: 0x340
	/// Properties: 0
	/// </summary>
	public class UTimeInputBox:URootWidget
	{
		public override int ObjectSize => 832;
	}


	/// <summary>
	/// UAddMemberBase:UWindowRoot
	/// Size: 0x420
	/// Properties: 1
	/// </summary>
	public class UAddMemberBase:UWindowRoot
	{
		public override int ObjectSize => 1056;
		/// <summary>
		/// Name: ListEntryClass
		/// Type: ClassProperty
		/// Offset: 0x3C0
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UChatWindow:UWindowRoot
	/// Size: 0x3B0
	/// Properties: 7
	/// </summary>
	public class UChatWindow:UWindowRoot
	{
		public override int ObjectSize => 944;
		/// <summary>
		/// Name: ChatLineClass
		/// Type: ClassProperty
		/// Offset: 0x378
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SystemMessageColor
		/// Type: StructProperty
		/// Offset: 0x380
		/// Size: 0x04
		/// </summary>
		public FColor SystemMessageColor => ReadStruct<FColor>(0x380);
		
		/// <summary>
		/// Name: GlobalMessageColor
		/// Type: StructProperty
		/// Offset: 0x384
		/// Size: 0x04
		/// </summary>
		public FColor GlobalMessageColor => ReadStruct<FColor>(0x384);
		
		/// <summary>
		/// Name: LocalMessageColor
		/// Type: StructProperty
		/// Offset: 0x388
		/// Size: 0x04
		/// </summary>
		public FColor LocalMessageColor => ReadStruct<FColor>(0x388);
		
		/// <summary>
		/// Name: GuildMessageColor
		/// Type: StructProperty
		/// Offset: 0x38C
		/// Size: 0x04
		/// </summary>
		public FColor GuildMessageColor => ReadStruct<FColor>(0x38C);
		
		/// <summary>
		/// Name: PlayerNameColor
		/// Type: StructProperty
		/// Offset: 0x390
		/// Size: 0x04
		/// </summary>
		public FColor PlayerNameColor => ReadStruct<FColor>(0x390);
		
		/// <summary>
		/// Name: OtherPlayerNameColors
		/// Type: TArray<FColor>
		/// Offset: 0x398
		/// Size: 0x10
		/// SubElement Size: 0x04
		/// </summary>
		public TArray<FColor> OtherPlayerNameColors => new TArray<FColor>(BaseAddress+0x398);
		
	}


	/// <summary>
	/// UChestInventoryGUI:UWindowRoot
	/// Size: 0x390
	/// Properties: 1
	/// </summary>
	public class UChestInventoryGUI:UWindowRoot
	{
		public override int ObjectSize => 912;
		/// <summary>
		/// Name: m_ChestInventory
		/// Type: ObjectProperty
		/// Offset: 0x388
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_ChestInventory => ReadUObject<UItemInventory>(0x388);
		
	}


	/// <summary>
	/// UConanIngameLoadingScreen:UWindowRoot
	/// Size: 0x378
	/// Properties: 0
	/// </summary>
	public class UConanIngameLoadingScreen:UWindowRoot
	{
		public override int ObjectSize => 888;
	}


	/// <summary>
	/// UCraftingGUIBase:UWindowRoot
	/// Size: 0x3D0
	/// Properties: 5
	/// </summary>
	public class UCraftingGUIBase:UWindowRoot
	{
		public override int ObjectSize => 976;
		/// <summary>
		/// Name: ChestInventoryViewClass
		/// Type: ClassProperty
		/// Offset: 0x378
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CraftingStationInventoryViewClass
		/// Type: ClassProperty
		/// Offset: 0x380
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PaperDollViewClass
		/// Type: ClassProperty
		/// Offset: 0x388
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PlayerInventoryViewClass
		/// Type: ClassProperty
		/// Offset: 0x390
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: m_CurrentCenterPanel
		/// Type: ObjectProperty
		/// Offset: 0x3C8
		/// Size: 0x08
		/// </summary>
		public URootWidget m_CurrentCenterPanel => ReadUObject<URootWidget>(0x3C8);
		
	}


	/// <summary>
	/// UDyeWindow:UWindowRoot
	/// Size: 0x3D0
	/// Properties: 3
	/// </summary>
	public class UDyeWindow:UWindowRoot
	{
		public override int ObjectSize => 976;
		/// <summary>
		/// Name: DyeIndices
		/// Type: TArray<>
		/// Offset: 0x380
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: SavedDyeIndices
		/// Type: TArray<>
		/// Offset: 0x390
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: SelectedTintChannel
		/// Type: IntProperty
		/// Offset: 0x3A0
		/// Size: 0x04
		/// </summary>
		public int SelectedTintChannel
		{
			get
			{
				return ReadInt32(0x3A0);
			}
			set
			{
				WriteInt32(0x3A0,value);
			}
		}
		
	}


	/// <summary>
	/// UEmotesMenu:UWindowRoot
	/// Size: 0x3B8
	/// Properties: 6
	/// </summary>
	public class UEmotesMenu:UWindowRoot
	{
		public override int ObjectSize => 952;
		/// <summary>
		/// Name: Categories
		/// Type: TArray<FEmotesMenuCategoryNode>
		/// Offset: 0x378
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FEmotesMenuCategoryNode> Categories => new TArray<FEmotesMenuCategoryNode>(BaseAddress+0x378);
		
		/// <summary>
		/// Name: CancelIcon
		/// Type: ObjectProperty
		/// Offset: 0x388
		/// Size: 0x08
		/// </summary>
		public UTexture2D CancelIcon => ReadUObject<UTexture2D>(0x388);
		
		/// <summary>
		/// Name: InventoryIcon
		/// Type: ObjectProperty
		/// Offset: 0x390
		/// Size: 0x08
		/// </summary>
		public UTexture2D InventoryIcon => ReadUObject<UTexture2D>(0x390);
		
		/// <summary>
		/// Name: MainMenuIcon
		/// Type: ObjectProperty
		/// Offset: 0x398
		/// Size: 0x08
		/// </summary>
		public UTexture2D MainMenuIcon => ReadUObject<UTexture2D>(0x398);
		
		/// <summary>
		/// Name: BackIcon
		/// Type: ObjectProperty
		/// Offset: 0x3A0
		/// Size: 0x08
		/// </summary>
		public UTexture2D BackIcon => ReadUObject<UTexture2D>(0x3A0);
		
		/// <summary>
		/// Name: m_Inventory
		/// Type: ObjectProperty
		/// Offset: 0x3A8
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_Inventory => ReadUObject<UItemInventory>(0x3A8);
		
	}


	/// <summary>
	/// UFeatWindow:UWindowRoot
	/// Size: 0x4B0
	/// Properties: 10
	/// </summary>
	public class UFeatWindow:UWindowRoot
	{
		public override int ObjectSize => 1200;
		/// <summary>
		/// Name: FeatResultRecipeInfoViewClass
		/// Type: ClassProperty
		/// Offset: 0x378
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ResultListItemSpacing
		/// Type: FloatProperty
		/// Offset: 0x380
		/// Size: 0x04
		/// </summary>
		public float ResultListItemSpacing
		{
			get
			{
				return ReadSingle(0x380);
			}
			set
			{
				WriteSingle(0x380,value);
			}
		}
		
		/// <summary>
		/// Name: BackgroundColorNotPurchaseable
		/// Type: StructProperty
		/// Offset: 0x384
		/// Size: 0x10
		/// </summary>
		public FLinearColor BackgroundColorNotPurchaseable => ReadStruct<FLinearColor>(0x384);
		
		/// <summary>
		/// Name: BackgroundColorPurchaseable
		/// Type: StructProperty
		/// Offset: 0x394
		/// Size: 0x10
		/// </summary>
		public FLinearColor BackgroundColorPurchaseable => ReadStruct<FLinearColor>(0x394);
		
		/// <summary>
		/// Name: BackgroundColorPurchased
		/// Type: StructProperty
		/// Offset: 0x3A4
		/// Size: 0x10
		/// </summary>
		public FLinearColor BackgroundColorPurchased => ReadStruct<FLinearColor>(0x3A4);
		
		/// <summary>
		/// Name: FrameColorIsBlocking
		/// Type: StructProperty
		/// Offset: 0x3B4
		/// Size: 0x10
		/// </summary>
		public FLinearColor FrameColorIsBlocking => ReadStruct<FLinearColor>(0x3B4);
		
		/// <summary>
		/// Name: FrameColorIsUnlocking
		/// Type: StructProperty
		/// Offset: 0x3C4
		/// Size: 0x10
		/// </summary>
		public FLinearColor FrameColorIsUnlocking => ReadStruct<FLinearColor>(0x3C4);
		
		/// <summary>
		/// Name: BorderOpen
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public UTexture2D BorderOpen => ReadUObject<UTexture2D>(0x3D8);
		
		/// <summary>
		/// Name: BorderNotPurchaseable
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public UTexture2D BorderNotPurchaseable => ReadUObject<UTexture2D>(0x3E0);
		
		/// <summary>
		/// Name: BorderPurchaseable
		/// Type: ObjectProperty
		/// Offset: 0x3E8
		/// Size: 0x08
		/// </summary>
		public UTexture2D BorderPurchaseable => ReadUObject<UTexture2D>(0x3E8);
		
	}


	/// <summary>
	/// UFIFOWindow:UWindowRoot
	/// Size: 0x378
	/// Properties: 0
	/// </summary>
	public class UFIFOWindow:UWindowRoot
	{
		public override int ObjectSize => 888;
	}


	/// <summary>
	/// UGuildViewBase:UWindowRoot
	/// Size: 0x438
	/// Properties: 0
	/// </summary>
	public class UGuildViewBase:UWindowRoot
	{
		public override int ObjectSize => 1080;
	}


	/// <summary>
	/// UHostLocalBase:UWindowRoot
	/// Size: 0x388
	/// Properties: 1
	/// </summary>
	public class UHostLocalBase:UWindowRoot
	{
		public override int ObjectSize => 904;
		/// <summary>
		/// Name: ServerSettingsClass
		/// Type: ClassProperty
		/// Offset: 0x380
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UHUDCharacterStatIndicators:UWindowRoot
	/// Size: 0x3A8
	/// Properties: 0
	/// </summary>
	public class UHUDCharacterStatIndicators:UWindowRoot
	{
		public override int ObjectSize => 936;
	}


	/// <summary>
	/// UHUDCraftingBase:UWindowRoot
	/// Size: 0x390
	/// Properties: 1
	/// </summary>
	public class UHUDCraftingBase:UWindowRoot
	{
		public override int ObjectSize => 912;
		/// <summary>
		/// Name: m_CratfingQueue
		/// Type: ObjectProperty
		/// Offset: 0x378
		/// Size: 0x08
		/// </summary>
		public UCraftingQueue m_CratfingQueue => ReadUObject<UCraftingQueue>(0x378);
		
	}


	/// <summary>
	/// UIconGridBase:UWindowRoot
	/// Size: 0x378
	/// Properties: 0
	/// </summary>
	public class UIconGridBase:UWindowRoot
	{
		public override int ObjectSize => 888;
	}


	/// <summary>
	/// UInputBoxWidget:UWindowRoot
	/// Size: 0x3B8
	/// Properties: 0
	/// </summary>
	public class UInputBoxWidget:UWindowRoot
	{
		public override int ObjectSize => 952;
	}


	/// <summary>
	/// UItemInfoPopup:UWindowRoot
	/// Size: 0x3A8
	/// Properties: 1
	/// </summary>
	public class UItemInfoPopup:UWindowRoot
	{
		public override int ObjectSize => 936;
		/// <summary>
		/// Name: ItemStatViewClass
		/// Type: ClassProperty
		/// Offset: 0x378
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UMainMenuBase:UWindowRoot
	/// Size: 0x3E0
	/// Properties: 0
	/// </summary>
	public class UMainMenuBase:UWindowRoot
	{
		public override int ObjectSize => 992;
	}


	/// <summary>
	/// UMainRadialMenu:UWindowRoot
	/// Size: 0x380
	/// Properties: 0
	/// </summary>
	public class UMainRadialMenu:UWindowRoot
	{
		public override int ObjectSize => 896;
	}


	/// <summary>
	/// UPaperdollGUIBase:UWindowRoot
	/// Size: 0x378
	/// Properties: 0
	/// </summary>
	public class UPaperdollGUIBase:UWindowRoot
	{
		public override int ObjectSize => 888;
	}


	/// <summary>
	/// UPasswordDialogBase:UWindowRoot
	/// Size: 0x5E0
	/// Properties: 1
	/// </summary>
	public class UPasswordDialogBase:UWindowRoot
	{
		public override int ObjectSize => 1504;
		/// <summary>
		/// Name: m_Session
		/// Type: StructProperty
		/// Offset: 0x410
		/// Size: 0xC8
		/// </summary>
		public FBlueprintSessionResult m_Session => ReadStruct<FBlueprintSessionResult>(0x410);
		
	}


	/// <summary>
	/// UPlaceableInfoBase:UWindowRoot
	/// Size: 0x398
	/// Properties: 0
	/// </summary>
	public class UPlaceableInfoBase:UWindowRoot
	{
		public override int ObjectSize => 920;
	}


	/// <summary>
	/// UPlayerlistBase:UWindowRoot
	/// Size: 0x3F8
	/// Properties: 3
	/// </summary>
	public class UPlayerlistBase:UWindowRoot
	{
		public override int ObjectSize => 1016;
		/// <summary>
		/// Name: PlayerNames
		/// Type: TArray<>
		/// Offset: 0x378
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: PlayerIds
		/// Type: TArray<>
		/// Offset: 0x388
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: BannedPlayers
		/// Type: TArray<>
		/// Offset: 0x398
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// USettingsBase:UWindowRoot
	/// Size: 0x3D0
	/// Properties: 0
	/// </summary>
	public class USettingsBase:UWindowRoot
	{
		public override int ObjectSize => 976;
	}


	/// <summary>
	/// UShortcutBarBase:UWindowRoot
	/// Size: 0x408
	/// Properties: 4
	/// </summary>
	public class UShortcutBarBase:UWindowRoot
	{
		public override int ObjectSize => 1032;
		/// <summary>
		/// Name: m_ShortcutInventory
		/// Type: ObjectProperty
		/// Offset: 0x378
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_ShortcutInventory => ReadUObject<UItemInventory>(0x378);
		
		/// <summary>
		/// Name: m_BackpackInventory
		/// Type: ObjectProperty
		/// Offset: 0x380
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_BackpackInventory => ReadUObject<UItemInventory>(0x380);
		
		/// <summary>
		/// Name: m_EquipmentInventory
		/// Type: ObjectProperty
		/// Offset: 0x388
		/// Size: 0x08
		/// </summary>
		public UEquipmentInventory m_EquipmentInventory => ReadUObject<UEquipmentInventory>(0x388);
		
		/// <summary>
		/// Name: m_CharacterCratfingQ
		/// Type: ObjectProperty
		/// Offset: 0x390
		/// Size: 0x08
		/// </summary>
		public UCraftingQueue m_CharacterCratfingQ => ReadUObject<UCraftingQueue>(0x390);
		
	}


	/// <summary>
	/// UStackSplitValueDialog:UWindowRoot
	/// Size: 0x3B0
	/// Properties: 2
	/// </summary>
	public class UStackSplitValueDialog:UWindowRoot
	{
		public override int ObjectSize => 944;
		/// <summary>
		/// Name: m_SrcInventory
		/// Type: ObjectProperty
		/// Offset: 0x390
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_SrcInventory => ReadUObject<UItemInventory>(0x390);
		
		/// <summary>
		/// Name: m_DstInventory
		/// Type: ObjectProperty
		/// Offset: 0x398
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_DstInventory => ReadUObject<UItemInventory>(0x398);
		
	}


	/// <summary>
	/// UThrallViewBase:UWindowRoot
	/// Size: 0x3A0
	/// Properties: 0
	/// </summary>
	public class UThrallViewBase:UWindowRoot
	{
		public override int ObjectSize => 928;
	}


	/// <summary>
	/// UVoiceChatWindow:UWindowRoot
	/// Size: 0x388
	/// Properties: 1
	/// </summary>
	public class UVoiceChatWindow:UWindowRoot
	{
		public override int ObjectSize => 904;
		/// <summary>
		/// Name: ChatLineClass
		/// Type: ClassProperty
		/// Offset: 0x378
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// USaveLevelCallProxy:UBlueprintAsyncActionBase
	/// Size: 0x68
	/// Properties: 0
	/// </summary>
	public class USaveLevelCallProxy:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 104;
	}


	/// <summary>
	/// AServerBlacklist:AInfo
	/// Size: 0x420
	/// Properties: 1
	/// </summary>
	public class AServerBlacklist:AInfo
	{
		public override int ObjectSize => 1056;
		/// <summary>
		/// Name: Blacklist
		/// Type: MapProperty
		/// Offset: 0x3D0
		/// Size: 0x50
		/// </summary>
		
	}


	/// <summary>
	/// USetUserLoginStatusCallProxy:UBlueprintAsyncActionBase
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class USetUserLoginStatusCallProxy:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// ASharedDebugInfo:AActor
	/// Size: 0x3D8
	/// Properties: 0
	/// </summary>
	public class ASharedDebugInfo:AActor
	{
		public override int ObjectSize => 984;
	}


	/// <summary>
	/// USoundBase:UObject
	/// Size: 0x70
	/// Properties: 11
	/// </summary>
	public class USoundBase:UObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: SoundClassObject
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public USoundClass SoundClassObject => ReadUObject<USoundClass>(0x28);
		
		/// <summary>
		/// Name: bDebug
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bDebug => (ReadByte(0x0030) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverrideConcurrency
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bOverrideConcurrency => (ReadByte(0x0030) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bIgnoreFocus
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreFocus => (ReadByte(0x0030) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: SoundConcurrencySettings
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public USoundConcurrency SoundConcurrencySettings => ReadUObject<USoundConcurrency>(0x38);
		
		/// <summary>
		/// Name: ConcurrencyOverrides
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FSoundConcurrencySettings ConcurrencyOverrides => ReadStruct<FSoundConcurrencySettings>(0x40);
		
		/// <summary>
		/// Name: MaxConcurrentResolutionRule
		/// Type: ByteProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public byte MaxConcurrentResolutionRule
		{
			get
			{
				return ReadByte(0x50);
			}
			set
			{
				WriteByte(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: MaxConcurrentPlayCount
		/// Type: IntProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public int MaxConcurrentPlayCount
		{
			get
			{
				return ReadInt32(0x54);
			}
			set
			{
				WriteInt32(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: Duration
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float Duration
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: AttenuationSettings
		/// Type: ObjectProperty
		/// Offset: 0x60
		/// Size: 0x08
		/// </summary>
		public USoundAttenuation AttenuationSettings => ReadUObject<USoundAttenuation>(0x60);
		
		/// <summary>
		/// Name: Priority
		/// Type: FloatProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public float Priority
		{
			get
			{
				return ReadSingle(0x68);
			}
			set
			{
				WriteSingle(0x68,value);
			}
		}
		
	}


	/// <summary>
	/// USoundWave:USoundBase
	/// Size: 0x238
	/// Properties: 17
	/// </summary>
	public class USoundWave:USoundBase
	{
		public override int ObjectSize => 568;
		/// <summary>
		/// Name: CompressionQuality
		/// Type: IntProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public int CompressionQuality
		{
			get
			{
				return ReadInt32(0x70);
			}
			set
			{
				WriteInt32(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: bLooping
		/// Type: BoolProperty
		/// Offset: 0x74
		/// Size: 0x01
		/// </summary>
		public bool bLooping => (ReadByte(0x0074) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bStreaming
		/// Type: BoolProperty
		/// Offset: 0x74
		/// Size: 0x01
		/// </summary>
		public bool bStreaming => (ReadByte(0x0074) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: StreamingPriority
		/// Type: IntProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public int StreamingPriority
		{
			get
			{
				return ReadInt32(0x78);
			}
			set
			{
				WriteInt32(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: bMature
		/// Type: BoolProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public bool bMature => (ReadByte(0x007C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bManualWordWrap
		/// Type: BoolProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public bool bManualWordWrap => (ReadByte(0x007C) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bSingleLine
		/// Type: BoolProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public bool bSingleLine => (ReadByte(0x007C) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: SoundGroup
		/// Type: ByteProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public byte SoundGroup
		{
			get
			{
				return ReadByte(0x80);
			}
			set
			{
				WriteByte(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: SpokenText
		/// Type: StrProperty
		/// Offset: 0x88
		/// Size: 0x10
		/// </summary>
		public FString SpokenText => new FString(BaseAddress+0x88);
		
		/// <summary>
		/// Name: SubtitlePriority
		/// Type: FloatProperty
		/// Offset: 0x98
		/// Size: 0x04
		/// </summary>
		public float SubtitlePriority
		{
			get
			{
				return ReadSingle(0x98);
			}
			set
			{
				WriteSingle(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: Volume
		/// Type: FloatProperty
		/// Offset: 0x9C
		/// Size: 0x04
		/// </summary>
		public float Volume
		{
			get
			{
				return ReadSingle(0x9C);
			}
			set
			{
				WriteSingle(0x9C,value);
			}
		}
		
		/// <summary>
		/// Name: Pitch
		/// Type: FloatProperty
		/// Offset: 0xA0
		/// Size: 0x04
		/// </summary>
		public float Pitch
		{
			get
			{
				return ReadSingle(0xA0);
			}
			set
			{
				WriteSingle(0xA0,value);
			}
		}
		
		/// <summary>
		/// Name: NumChannels
		/// Type: IntProperty
		/// Offset: 0xA4
		/// Size: 0x04
		/// </summary>
		public int NumChannels
		{
			get
			{
				return ReadInt32(0xA4);
			}
			set
			{
				WriteInt32(0xA4,value);
			}
		}
		
		/// <summary>
		/// Name: SampleRate
		/// Type: IntProperty
		/// Offset: 0xA8
		/// Size: 0x04
		/// </summary>
		public int SampleRate
		{
			get
			{
				return ReadInt32(0xA8);
			}
			set
			{
				WriteInt32(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: RawPCMDataSize
		/// Type: IntProperty
		/// Offset: 0xAC
		/// Size: 0x04
		/// </summary>
		public int RawPCMDataSize
		{
			get
			{
				return ReadInt32(0xAC);
			}
			set
			{
				WriteInt32(0xAC,value);
			}
		}
		
		/// <summary>
		/// Name: Subtitles
		/// Type: TArray<FSubtitleCue>
		/// Offset: 0xB0
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FSubtitleCue> Subtitles => new TArray<FSubtitleCue>(BaseAddress+0xB0);
		
		/// <summary>
		/// Name: LocalizedSubtitles
		/// Type: TArray<FLocalizedSubtitle>
		/// Offset: 0xC0
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FLocalizedSubtitle> LocalizedSubtitles => new TArray<FLocalizedSubtitle>(BaseAddress+0xC0);
		
	}


	/// <summary>
	/// USoundWaveProcedural:USoundWave
	/// Size: 0x2C0
	/// Properties: 0
	/// </summary>
	public class USoundWaveProcedural:USoundWave
	{
		public override int ObjectSize => 704;
	}


	/// <summary>
	/// USoundWaveVoiceChat:USoundWaveProcedural
	/// Size: 0x2C0
	/// Properties: 0
	/// </summary>
	public class USoundWaveVoiceChat:USoundWaveProcedural
	{
		public override int ObjectSize => 704;
	}


	/// <summary>
	/// UStatIntArray:UObject
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class UStatIntArray:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Key
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Stats
		/// Type: TArray<FStatIntEntry>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FStatIntEntry> Stats => new TArray<FStatIntEntry>(BaseAddress+0x30);
		
	}


	/// <summary>
	/// UStatFloatArray:UObject
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class UStatFloatArray:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Key
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Stats
		/// Type: TArray<FStatFloatEntry>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FStatFloatEntry> Stats => new TArray<FStatFloatEntry>(BaseAddress+0x30);
		
	}


	/// <summary>
	/// UWeightedTableArray:UObject
	/// Size: 0x48
	/// Properties: 3
	/// </summary>
	public class UWeightedTableArray:UObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: Key
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: TotalWeight
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float TotalWeight
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: Entries
		/// Type: TArray<FWeightedTableEntry>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FWeightedTableEntry> Entries => new TArray<FWeightedTableEntry>(BaseAddress+0x38);
		
	}


	/// <summary>
	/// USpawnTableComponent:UActorComponent
	/// Size: 0x2E0
	/// Properties: 9
	/// </summary>
	public class USpawnTableComponent:UActorComponent
	{
		public override int ObjectSize => 736;
		/// <summary>
		/// Name: m_StatIntTable
		/// Type: TArray<UStatIntArray>
		/// Offset: 0xD8
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UStatIntArray> m_StatIntTable => new TArray<UStatIntArray>(BaseAddress+0xD8);
		
		/// <summary>
		/// Name: m_StatIntModifierTable
		/// Type: TArray<UStatIntArray>
		/// Offset: 0xE8
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UStatIntArray> m_StatIntModifierTable => new TArray<UStatIntArray>(BaseAddress+0xE8);
		
		/// <summary>
		/// Name: m_StatFloatTable
		/// Type: TArray<UStatFloatArray>
		/// Offset: 0xF8
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UStatFloatArray> m_StatFloatTable => new TArray<UStatFloatArray>(BaseAddress+0xF8);
		
		/// <summary>
		/// Name: m_StatFloatModifierTable
		/// Type: TArray<UStatFloatArray>
		/// Offset: 0x108
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UStatFloatArray> m_StatFloatModifierTable => new TArray<UStatFloatArray>(BaseAddress+0x108);
		
		/// <summary>
		/// Name: m_WeightedSpawnTable
		/// Type: TArray<UWeightedTableArray>
		/// Offset: 0x118
		/// Size: 0x10
		/// SubElement Size: 0x48
		/// </summary>
		public TArray<UWeightedTableArray> m_WeightedSpawnTable => new TArray<UWeightedTableArray>(BaseAddress+0x118);
		
		/// <summary>
		/// Name: m_SpawnTable
		/// Type: ObjectProperty
		/// Offset: 0x128
		/// Size: 0x08
		/// </summary>
		public UDataTable m_SpawnTable => ReadUObject<UDataTable>(0x128);
		
		/// <summary>
		/// Name: m_EquipmentTable
		/// Type: ObjectProperty
		/// Offset: 0x130
		/// Size: 0x08
		/// </summary>
		public UDataTable m_EquipmentTable => ReadUObject<UDataTable>(0x130);
		
		/// <summary>
		/// Name: m_ProfessionTable
		/// Type: ObjectProperty
		/// Offset: 0x138
		/// Size: 0x08
		/// </summary>
		public UDataTable m_ProfessionTable => ReadUObject<UDataTable>(0x138);
		
		/// <summary>
		/// Name: m_RaceTable
		/// Type: ObjectProperty
		/// Offset: 0x140
		/// Size: 0x08
		/// </summary>
		public UDataTable m_RaceTable => ReadUObject<UDataTable>(0x140);
		
	}


	/// <summary>
	/// AStaticWaypoint:AActor
	/// Size: 0x3E0
	/// Properties: 2
	/// </summary>
	public class AStaticWaypoint:AActor
	{
		public override int ObjectSize => 992;
		/// <summary>
		/// Name: NextWaypoint
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public AStaticWaypoint NextWaypoint => ReadUObject<AStaticWaypoint>(0x3D0);
		
		/// <summary>
		/// Name: Root
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public USceneComponent Root => ReadUObject<USceneComponent>(0x3D8);
		
	}


	/// <summary>
	/// AStaticSpawnPoint:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class AStaticSpawnPoint:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: Root
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public USceneComponent Root => ReadUObject<USceneComponent>(0x3D0);
		
	}


	/// <summary>
	/// UStaticNavigationProviderInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UStaticNavigationProviderInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// ASuspendableActor:AActor
	/// Size: 0x3D8
	/// Properties: 0
	/// </summary>
	public class ASuspendableActor:AActor
	{
		public override int ObjectSize => 984;
	}


	/// <summary>
	/// UTargetAreaAllocatorComponent:UActorComponent
	/// Size: 0xF0
	/// Properties: 1
	/// </summary>
	public class UTargetAreaAllocatorComponent:UActorComponent
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: CachedAreas
		/// Type: TArray<FTargetAreaAllocationData>
		/// Offset: 0xD8
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FTargetAreaAllocationData> CachedAreas => new TArray<FTargetAreaAllocationData>(BaseAddress+0xD8);
		
	}


	/// <summary>
	/// UShapeComponent:UPrimitiveComponent
	/// Size: 0x5D0
	/// Properties: 7
	/// </summary>
	public class UShapeComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1488;
		/// <summary>
		/// Name: ShapeColor
		/// Type: StructProperty
		/// Offset: 0x5A0
		/// Size: 0x04
		/// </summary>
		public FColor ShapeColor => ReadStruct<FColor>(0x5A0);
		
		/// <summary>
		/// Name: ShapeBodySetup
		/// Type: ObjectProperty
		/// Offset: 0x5A8
		/// Size: 0x08
		/// </summary>
		public UBodySetup ShapeBodySetup => ReadUObject<UBodySetup>(0x5A8);
		
		/// <summary>
		/// Name: bDrawOnlyIfSelected
		/// Type: BoolProperty
		/// Offset: 0x5B0
		/// Size: 0x01
		/// </summary>
		public bool bDrawOnlyIfSelected => (ReadByte(0x05B0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bShouldCollideWhenPlacing
		/// Type: BoolProperty
		/// Offset: 0x5B0
		/// Size: 0x01
		/// </summary>
		public bool bShouldCollideWhenPlacing => (ReadByte(0x05B0) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bDynamicObstacle
		/// Type: BoolProperty
		/// Offset: 0x5B0
		/// Size: 0x01
		/// </summary>
		public bool bDynamicObstacle => (ReadByte(0x05B0) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: AreaClass
		/// Type: ClassProperty
		/// Offset: 0x5B8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: HitLocation
		/// Type: ByteProperty
		/// Offset: 0x5C0
		/// Size: 0x01
		/// </summary>
		public byte HitLocation
		{
			get
			{
				return ReadByte(0x5C0);
			}
			set
			{
				WriteByte(0x5C0,value);
			}
		}
		
	}


	/// <summary>
	/// UTargetAreaComponent:UShapeComponent
	/// Size: 0x5D0
	/// Properties: 2
	/// </summary>
	public class UTargetAreaComponent:UShapeComponent
	{
		public override int ObjectSize => 1488;
		/// <summary>
		/// Name: TargetAreaRadius
		/// Type: FloatProperty
		/// Offset: 0x5C8
		/// Size: 0x04
		/// </summary>
		public float TargetAreaRadius
		{
			get
			{
				return ReadSingle(0x5C8);
			}
			set
			{
				WriteSingle(0x5C8,value);
			}
		}
		
		/// <summary>
		/// Name: TargetAreaDepth
		/// Type: FloatProperty
		/// Offset: 0x5CC
		/// Size: 0x04
		/// </summary>
		public float TargetAreaDepth
		{
			get
			{
				return ReadSingle(0x5CC);
			}
			set
			{
				WriteSingle(0x5CC,value);
			}
		}
		
	}


	/// <summary>
	/// UTargetingMonitorInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UTargetingMonitorInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UTargetingMonitorHelper:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UTargetingMonitorHelper:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UTargetingControllersComponent:UActorComponent
	/// Size: 0xE8
	/// Properties: 0
	/// </summary>
	public class UTargetingControllersComponent:UActorComponent
	{
		public override int ObjectSize => 232;
	}


	/// <summary>
	/// UTestable:UActorComponent
	/// Size: 0x110
	/// Properties: 1
	/// </summary>
	public class UTestable:UActorComponent
	{
		public override int ObjectSize => 272;
		/// <summary>
		/// Name: TestLabels
		/// Type: TArray<>
		/// Offset: 0xD8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// UTestUtils:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UTestUtils:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UThrallComponent:UActorComponent
	/// Size: 0x180
	/// Properties: 6
	/// </summary>
	public class UThrallComponent:UActorComponent
	{
		public override int ObjectSize => 384;
		/// <summary>
		/// Name: ClaimRadiusBuilding
		/// Type: FloatProperty
		/// Offset: 0xD8
		/// Size: 0x04
		/// </summary>
		public float ClaimRadiusBuilding
		{
			get
			{
				return ReadSingle(0xD8);
			}
			set
			{
				WriteSingle(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: ClaimRadiusFoliage
		/// Type: FloatProperty
		/// Offset: 0xDC
		/// Size: 0x04
		/// </summary>
		public float ClaimRadiusFoliage
		{
			get
			{
				return ReadSingle(0xDC);
			}
			set
			{
				WriteSingle(0xDC,value);
			}
		}
		
		/// <summary>
		/// Name: ClaimLocation
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x0C
		/// </summary>
		public FVector ClaimLocation => ReadStruct<FVector>(0xE0);
		
		/// <summary>
		/// Name: ThrallInfo
		/// Type: StructProperty
		/// Offset: 0xF0
		/// Size: 0x80
		/// </summary>
		public FThrallInfo ThrallInfo => ReadStruct<FThrallInfo>(0xF0);
		
		/// <summary>
		/// Name: OwnerUniqueID
		/// Type: ObjectProperty
		/// Offset: 0x170
		/// Size: 0x08
		/// </summary>
		public UUniqueID OwnerUniqueID => ReadUObject<UUniqueID>(0x170);
		
		/// <summary>
		/// Name: IsABrush
		/// Type: BoolProperty
		/// Offset: 0x178
		/// Size: 0x01
		/// </summary>
		public bool IsABrush
		{
			get
			{
				return ReadBool(0x178);
			}
			set
			{
				WriteBool(0x178,value);
			}
		}
		
	}


	/// <summary>
	/// UThrallInfoComponent:UActorComponent
	/// Size: 0x158
	/// Properties: 1
	/// </summary>
	public class UThrallInfoComponent:UActorComponent
	{
		public override int ObjectSize => 344;
		/// <summary>
		/// Name: ThrallInfo
		/// Type: StructProperty
		/// Offset: 0xD8
		/// Size: 0x80
		/// </summary>
		public FThrallInfo ThrallInfo => ReadStruct<FThrallInfo>(0xD8);
		
	}


	/// <summary>
	/// UThrallOwnerInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UThrallOwnerInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UThrallSystemComponent:UActorComponent
	/// Size: 0xF0
	/// Properties: 3
	/// </summary>
	public class UThrallSystemComponent:UActorComponent
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: IsPlacingThrall
		/// Type: BoolProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public bool IsPlacingThrall
		{
			get
			{
				return ReadBool(0xD8);
			}
			set
			{
				WriteBool(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentThrallBrushClass
		/// Type: ClassProperty
		/// Offset: 0xE0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CurrentThrallItem
		/// Type: ObjectProperty
		/// Offset: 0xE8
		/// Size: 0x08
		/// </summary>
		public UThrallItem CurrentThrallItem => ReadUObject<UThrallItem>(0xE8);
		
	}


	/// <summary>
	/// UInventoryIconTooltipView:UTooltipWidget
	/// Size: 0x250
	/// Properties: 1
	/// </summary>
	public class UInventoryIconTooltipView:UTooltipWidget
	{
		public override int ObjectSize => 592;
		/// <summary>
		/// Name: m_GameItem
		/// Type: ObjectProperty
		/// Offset: 0x240
		/// Size: 0x08
		/// </summary>
		public UGameItem m_GameItem => ReadUObject<UGameItem>(0x240);
		
	}


	/// <summary>
	/// UUIResourceSingleton:UObject
	/// Size: 0x60
	/// Properties: 5
	/// </summary>
	public class UUIResourceSingleton:UObject
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: MessageBoxWidgetClass
		/// Type: ClassProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: MouseBlockWindowClass
		/// Type: ClassProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: LoadingScreenWidget
		/// Type: ClassProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: InputBoxWidgetClass
		/// Type: ClassProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: StartupSound
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x18
		/// </summary>
		public FSlateSound StartupSound => ReadStruct<FSlateSound>(0x48);
		
	}


	/// <summary>
	/// UUtilityMatrix:UObject
	/// Size: 0x98
	/// Properties: 2
	/// </summary>
	public class UUtilityMatrix:UObject
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: Bounds
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x18
		/// </summary>
		public FBoxBounds Bounds => ReadStruct<FBoxBounds>(0x28);
		
		/// <summary>
		/// Name: UnitsPerCell
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float UnitsPerCell
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
	}


	/// <summary>
	/// UAnimNotifyState:UObject
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UAnimNotifyState:UObject
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UWeaponCollisionAnimNotifyState:UAnimNotifyState
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UWeaponCollisionAnimNotifyState:UAnimNotifyState
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UGCObjectReferencer:UObject
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class UGCObjectReferencer:UObject
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UTextBuffer:UObject
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UTextBuffer:UObject
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UPackage:UObject
	/// Size: 0x150
	/// Properties: 0
	/// </summary>
	public class UPackage:UObject
	{
		public override int ObjectSize => 336;
	}


	/// <summary>
	/// UDelegateFunction:UFunction
	/// Size: 0xB8
	/// Properties: 0
	/// </summary>
	public class UDelegateFunction:UFunction
	{
		public override int ObjectSize => 184;
	}


	/// <summary>
	/// UDynamicClass:UClass
	/// Size: 0x280
	/// Properties: 0
	/// </summary>
	public class UDynamicClass:UClass
	{
		public override int ObjectSize => 640;
	}


	/// <summary>
	/// UPackageMap:UObject
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UPackageMap:UObject
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UEnum:UField
	/// Size: 0x58
	/// Properties: 0
	/// </summary>
	public class UEnum:UField
	{
		public override int ObjectSize => 88;
	}


	/// <summary>
	/// ULinkerPlaceholderClass:UClass
	/// Size: 0x368
	/// Properties: 0
	/// </summary>
	public class ULinkerPlaceholderClass:UClass
	{
		public override int ObjectSize => 872;
	}


	/// <summary>
	/// ULinkerPlaceholderExportObject:UObject
	/// Size: 0x88
	/// Properties: 0
	/// </summary>
	public class ULinkerPlaceholderExportObject:UObject
	{
		public override int ObjectSize => 136;
	}


	/// <summary>
	/// ULinkerPlaceholderFunction:UFunction
	/// Size: 0x208
	/// Properties: 0
	/// </summary>
	public class ULinkerPlaceholderFunction:UFunction
	{
		public override int ObjectSize => 520;
	}


	/// <summary>
	/// UMetaData:UObject
	/// Size: 0x78
	/// Properties: 0
	/// </summary>
	public class UMetaData:UObject
	{
		public override int ObjectSize => 120;
	}


	/// <summary>
	/// UObjectRedirector:UObject
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UObjectRedirector:UObject
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UObjectPropertyBase:UProperty
	/// Size: 0x80
	/// Properties: 0
	/// </summary>
	public class UObjectPropertyBase:UProperty
	{
		public override int ObjectSize => 128;
	}


	/// <summary>
	/// UAssetObjectProperty:UObjectPropertyBase
	/// Size: 0x80
	/// Properties: 0
	/// </summary>
	public class UAssetObjectProperty:UObjectPropertyBase
	{
		public override int ObjectSize => 128;
	}


	/// <summary>
	/// UAssetClassProperty:UAssetObjectProperty
	/// Size: 0x88
	/// Properties: 0
	/// </summary>
	public class UAssetClassProperty:UAssetObjectProperty
	{
		public override int ObjectSize => 136;
	}


	/// <summary>
	/// UDelegateProperty:UProperty
	/// Size: 0x80
	/// Properties: 0
	/// </summary>
	public class UDelegateProperty:UProperty
	{
		public override int ObjectSize => 128;
	}


	/// <summary>
	/// UDoubleProperty:UNumericProperty
	/// Size: 0x78
	/// Properties: 0
	/// </summary>
	public class UDoubleProperty:UNumericProperty
	{
		public override int ObjectSize => 120;
	}


	/// <summary>
	/// UInt16Property:UNumericProperty
	/// Size: 0x78
	/// Properties: 0
	/// </summary>
	public class UInt16Property:UNumericProperty
	{
		public override int ObjectSize => 120;
	}


	/// <summary>
	/// UInt64Property:UNumericProperty
	/// Size: 0x78
	/// Properties: 0
	/// </summary>
	public class UInt64Property:UNumericProperty
	{
		public override int ObjectSize => 120;
	}


	/// <summary>
	/// UInt8Property:UNumericProperty
	/// Size: 0x78
	/// Properties: 0
	/// </summary>
	public class UInt8Property:UNumericProperty
	{
		public override int ObjectSize => 120;
	}


	/// <summary>
	/// ULazyObjectProperty:UObjectPropertyBase
	/// Size: 0x80
	/// Properties: 0
	/// </summary>
	public class ULazyObjectProperty:UObjectPropertyBase
	{
		public override int ObjectSize => 128;
	}


	/// <summary>
	/// UMapProperty:UProperty
	/// Size: 0xB0
	/// Properties: 0
	/// </summary>
	public class UMapProperty:UProperty
	{
		public override int ObjectSize => 176;
	}


	/// <summary>
	/// UMulticastDelegateProperty:UProperty
	/// Size: 0x80
	/// Properties: 0
	/// </summary>
	public class UMulticastDelegateProperty:UProperty
	{
		public override int ObjectSize => 128;
	}


	/// <summary>
	/// UNameProperty:UProperty
	/// Size: 0x78
	/// Properties: 0
	/// </summary>
	public class UNameProperty:UProperty
	{
		public override int ObjectSize => 120;
	}


	/// <summary>
	/// UStrProperty:UProperty
	/// Size: 0x78
	/// Properties: 0
	/// </summary>
	public class UStrProperty:UProperty
	{
		public override int ObjectSize => 120;
	}


	/// <summary>
	/// UUInt16Property:UNumericProperty
	/// Size: 0x78
	/// Properties: 0
	/// </summary>
	public class UUInt16Property:UNumericProperty
	{
		public override int ObjectSize => 120;
	}


	/// <summary>
	/// UUInt32Property:UNumericProperty
	/// Size: 0x78
	/// Properties: 0
	/// </summary>
	public class UUInt32Property:UNumericProperty
	{
		public override int ObjectSize => 120;
	}


	/// <summary>
	/// UUInt64Property:UNumericProperty
	/// Size: 0x78
	/// Properties: 0
	/// </summary>
	public class UUInt64Property:UNumericProperty
	{
		public override int ObjectSize => 120;
	}


	/// <summary>
	/// UWeakObjectProperty:UObjectPropertyBase
	/// Size: 0x80
	/// Properties: 0
	/// </summary>
	public class UWeakObjectProperty:UObjectPropertyBase
	{
		public override int ObjectSize => 128;
	}


	/// <summary>
	/// UTextProperty:UProperty
	/// Size: 0x78
	/// Properties: 0
	/// </summary>
	public class UTextProperty:UProperty
	{
		public override int ObjectSize => 120;
	}


	/// <summary>
	/// UInputCoreTypes:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UInputCoreTypes:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UFontBulkData:UObject
	/// Size: 0xC0
	/// Properties: 0
	/// </summary>
	public class UFontBulkData:UObject
	{
		public override int ObjectSize => 192;
	}


	/// <summary>
	/// UFontProviderInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UFontProviderInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// USlateTypes:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class USlateTypes:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// USlateWidgetStyleContainerInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class USlateWidgetStyleContainerInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// USlateWidgetStyleContainerBase:UObject
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class USlateWidgetStyleContainerBase:UObject
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// USlateWidgetStyleAsset:UObject
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class USlateWidgetStyleAsset:UObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: CustomStyle
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public USlateWidgetStyleContainerBase CustomStyle => ReadUObject<USlateWidgetStyleContainerBase>(0x28);
		
	}


	/// <summary>
	/// UButtonWidgetStyle:USlateWidgetStyleContainerBase
	/// Size: 0x2D8
	/// Properties: 1
	/// </summary>
	public class UButtonWidgetStyle:USlateWidgetStyleContainerBase
	{
		public override int ObjectSize => 728;
		/// <summary>
		/// Name: ButtonStyle
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x2A8
		/// </summary>
		public FButtonStyle ButtonStyle => ReadStruct<FButtonStyle>(0x30);
		
	}


	/// <summary>
	/// UCheckBoxWidgetStyle:USlateWidgetStyleContainerBase
	/// Size: 0x610
	/// Properties: 1
	/// </summary>
	public class UCheckBoxWidgetStyle:USlateWidgetStyleContainerBase
	{
		public override int ObjectSize => 1552;
		/// <summary>
		/// Name: CheckBoxStyle
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x5E0
		/// </summary>
		public FCheckBoxStyle CheckBoxStyle => ReadStruct<FCheckBoxStyle>(0x30);
		
	}


	/// <summary>
	/// UComboBoxWidgetStyle:USlateWidgetStyleContainerBase
	/// Size: 0x480
	/// Properties: 1
	/// </summary>
	public class UComboBoxWidgetStyle:USlateWidgetStyleContainerBase
	{
		public override int ObjectSize => 1152;
		/// <summary>
		/// Name: ComboBoxStyle
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x450
		/// </summary>
		public FComboBoxStyle ComboBoxStyle => ReadStruct<FComboBoxStyle>(0x30);
		
	}


	/// <summary>
	/// UComboButtonWidgetStyle:USlateWidgetStyleContainerBase
	/// Size: 0x438
	/// Properties: 1
	/// </summary>
	public class UComboButtonWidgetStyle:USlateWidgetStyleContainerBase
	{
		public override int ObjectSize => 1080;
		/// <summary>
		/// Name: ComboButtonStyle
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x408
		/// </summary>
		public FComboButtonStyle ComboButtonStyle => ReadStruct<FComboButtonStyle>(0x30);
		
	}


	/// <summary>
	/// UEditableTextBoxWidgetStyle:USlateWidgetStyleContainerBase
	/// Size: 0x878
	/// Properties: 1
	/// </summary>
	public class UEditableTextBoxWidgetStyle:USlateWidgetStyleContainerBase
	{
		public override int ObjectSize => 2168;
		/// <summary>
		/// Name: EditableTextBoxStyle
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x848
		/// </summary>
		public FEditableTextBoxStyle EditableTextBoxStyle => ReadStruct<FEditableTextBoxStyle>(0x30);
		
	}


	/// <summary>
	/// UEditableTextWidgetStyle:USlateWidgetStyleContainerBase
	/// Size: 0x250
	/// Properties: 1
	/// </summary>
	public class UEditableTextWidgetStyle:USlateWidgetStyleContainerBase
	{
		public override int ObjectSize => 592;
		/// <summary>
		/// Name: EditableTextStyle
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x220
		/// </summary>
		public FEditableTextStyle EditableTextStyle => ReadStruct<FEditableTextStyle>(0x30);
		
	}


	/// <summary>
	/// UProgressWidgetStyle:USlateWidgetStyleContainerBase
	/// Size: 0x1E8
	/// Properties: 1
	/// </summary>
	public class UProgressWidgetStyle:USlateWidgetStyleContainerBase
	{
		public override int ObjectSize => 488;
		/// <summary>
		/// Name: ProgressBarStyle
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x1B8
		/// </summary>
		public FProgressBarStyle ProgressBarStyle => ReadStruct<FProgressBarStyle>(0x30);
		
	}


	/// <summary>
	/// UScrollBarWidgetStyle:USlateWidgetStyleContainerBase
	/// Size: 0x548
	/// Properties: 1
	/// </summary>
	public class UScrollBarWidgetStyle:USlateWidgetStyleContainerBase
	{
		public override int ObjectSize => 1352;
		/// <summary>
		/// Name: ScrollBarStyle
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x518
		/// </summary>
		public FScrollBarStyle ScrollBarStyle => ReadStruct<FScrollBarStyle>(0x30);
		
	}


	/// <summary>
	/// UScrollBoxWidgetStyle:USlateWidgetStyleContainerBase
	/// Size: 0x278
	/// Properties: 1
	/// </summary>
	public class UScrollBoxWidgetStyle:USlateWidgetStyleContainerBase
	{
		public override int ObjectSize => 632;
		/// <summary>
		/// Name: ScrollBoxStyle
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x248
		/// </summary>
		public FScrollBoxStyle ScrollBoxStyle => ReadStruct<FScrollBoxStyle>(0x30);
		
	}


	/// <summary>
	/// USpinBoxWidgetStyle:USlateWidgetStyleContainerBase
	/// Size: 0x340
	/// Properties: 1
	/// </summary>
	public class USpinBoxWidgetStyle:USlateWidgetStyleContainerBase
	{
		public override int ObjectSize => 832;
		/// <summary>
		/// Name: SpinBoxStyle
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x310
		/// </summary>
		public FSpinBoxStyle SpinBoxStyle => ReadStruct<FSpinBoxStyle>(0x30);
		
	}


	/// <summary>
	/// UTextBlockWidgetStyle:USlateWidgetStyleContainerBase
	/// Size: 0x180
	/// Properties: 1
	/// </summary>
	public class UTextBlockWidgetStyle:USlateWidgetStyleContainerBase
	{
		public override int ObjectSize => 384;
		/// <summary>
		/// Name: TextBlockStyle
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x150
		/// </summary>
		public FTextBlockStyle TextBlockStyle => ReadStruct<FTextBlockStyle>(0x30);
		
	}


	/// <summary>
	/// UShaderPlatformQualitySettings:UObject
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UShaderPlatformQualitySettings:UObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: QualityOverrides
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x05
		/// </summary>
		public FMaterialQualityOverrides QualityOverrides => ReadStruct<FMaterialQualityOverrides>(0x28);
		
	}


	/// <summary>
	/// UMaterialShaderQualitySettings:UObject
	/// Size: 0x80
	/// Properties: 1
	/// </summary>
	public class UMaterialShaderQualitySettings:UObject
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: ForwardSettingMap
		/// Type: MapProperty
		/// Offset: 0x28
		/// Size: 0x50
		/// </summary>
		
	}


	/// <summary>
	/// UMotionControllerComponent:UPrimitiveComponent
	/// Size: 0x5C0
	/// Properties: 4
	/// </summary>
	public class UMotionControllerComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1472;
		/// <summary>
		/// Name: PlayerIndex
		/// Type: IntProperty
		/// Offset: 0x5A0
		/// Size: 0x04
		/// </summary>
		public int PlayerIndex
		{
			get
			{
				return ReadInt32(0x5A0);
			}
			set
			{
				WriteInt32(0x5A0,value);
			}
		}
		
		/// <summary>
		/// Name: Hand
		/// Type: ByteProperty
		/// Offset: 0x5A4
		/// Size: 0x01
		/// </summary>
		public byte Hand
		{
			get
			{
				return ReadByte(0x5A4);
			}
			set
			{
				WriteByte(0x5A4,value);
			}
		}
		
		/// <summary>
		/// Name: bDisableLowLatencyUpdate
		/// Type: BoolProperty
		/// Offset: 0x5A8
		/// Size: 0x01
		/// </summary>
		public bool bDisableLowLatencyUpdate => (ReadByte(0x05A8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CurrentTrackingStatus
		/// Type: ByteProperty
		/// Offset: 0x5AC
		/// Size: 0x01
		/// </summary>
		public byte CurrentTrackingStatus
		{
			get
			{
				return ReadByte(0x5AC);
			}
			set
			{
				WriteByte(0x5AC,value);
			}
		}
		
	}


	/// <summary>
	/// UVRNotificationsComponent:UActorComponent
	/// Size: 0x108
	/// Properties: 0
	/// </summary>
	public class UVRNotificationsComponent:UActorComponent
	{
		public override int ObjectSize => 264;
	}


	/// <summary>
	/// UFoliageStatistics:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UFoliageStatistics:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UFoliageType:UObject
	/// Size: 0x3E0
	/// Properties: 74
	/// </summary>
	public class UFoliageType:UObject
	{
		public override int ObjectSize => 992;
		/// <summary>
		/// Name: UpdateGuid
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FGuid UpdateGuid => ReadStruct<FGuid>(0x28);
		
		/// <summary>
		/// Name: Density
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float Density
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: DensityAdjustmentFactor
		/// Type: FloatProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public float DensityAdjustmentFactor
		{
			get
			{
				return ReadSingle(0x5C);
			}
			set
			{
				WriteSingle(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: Radius
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float Radius
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: Scaling
		/// Type: ByteProperty
		/// Offset: 0x64
		/// Size: 0x01
		/// </summary>
		public byte Scaling
		{
			get
			{
				return ReadByte(0x64);
			}
			set
			{
				WriteByte(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: ScaleX
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x08
		/// </summary>
		public FFloatInterval ScaleX => ReadStruct<FFloatInterval>(0x68);
		
		/// <summary>
		/// Name: ScaleY
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public FFloatInterval ScaleY => ReadStruct<FFloatInterval>(0x70);
		
		/// <summary>
		/// Name: ScaleZ
		/// Type: StructProperty
		/// Offset: 0x78
		/// Size: 0x08
		/// </summary>
		public FFloatInterval ScaleZ => ReadStruct<FFloatInterval>(0x78);
		
		/// <summary>
		/// Name: VertexColorMaskByChannel
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x0C
		/// </summary>
		public FFoliageVertexColorChannelMask VertexColorMaskByChannel => ReadStruct<FFoliageVertexColorChannelMask>(0x80);
		
		/// <summary>
		/// Name: VertexColorMask
		/// Type: ByteProperty
		/// Offset: 0xB0
		/// Size: 0x01
		/// </summary>
		public byte VertexColorMask
		{
			get
			{
				return ReadByte(0xB0);
			}
			set
			{
				WriteByte(0xB0,value);
			}
		}
		
		/// <summary>
		/// Name: VertexColorMaskThreshold
		/// Type: FloatProperty
		/// Offset: 0xB4
		/// Size: 0x04
		/// </summary>
		public float VertexColorMaskThreshold
		{
			get
			{
				return ReadSingle(0xB4);
			}
			set
			{
				WriteSingle(0xB4,value);
			}
		}
		
		/// <summary>
		/// Name: VertexColorMaskInvert
		/// Type: BoolProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public bool VertexColorMaskInvert => (ReadByte(0x00B8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ZOffset
		/// Type: StructProperty
		/// Offset: 0xBC
		/// Size: 0x08
		/// </summary>
		public FFloatInterval ZOffset => ReadStruct<FFloatInterval>(0xBC);
		
		/// <summary>
		/// Name: AlignToNormal
		/// Type: BoolProperty
		/// Offset: 0xC4
		/// Size: 0x01
		/// </summary>
		public bool AlignToNormal => (ReadByte(0x00C4) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: AlignMaxAngle
		/// Type: FloatProperty
		/// Offset: 0xC8
		/// Size: 0x04
		/// </summary>
		public float AlignMaxAngle
		{
			get
			{
				return ReadSingle(0xC8);
			}
			set
			{
				WriteSingle(0xC8,value);
			}
		}
		
		/// <summary>
		/// Name: RandomYaw
		/// Type: BoolProperty
		/// Offset: 0xCC
		/// Size: 0x01
		/// </summary>
		public bool RandomYaw => (ReadByte(0x00CC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: RandomPitchAngle
		/// Type: FloatProperty
		/// Offset: 0xD0
		/// Size: 0x04
		/// </summary>
		public float RandomPitchAngle
		{
			get
			{
				return ReadSingle(0xD0);
			}
			set
			{
				WriteSingle(0xD0,value);
			}
		}
		
		/// <summary>
		/// Name: GroundSlopeAngle
		/// Type: StructProperty
		/// Offset: 0xD4
		/// Size: 0x08
		/// </summary>
		public FFloatInterval GroundSlopeAngle => ReadStruct<FFloatInterval>(0xD4);
		
		/// <summary>
		/// Name: Height
		/// Type: StructProperty
		/// Offset: 0xDC
		/// Size: 0x08
		/// </summary>
		public FFloatInterval Height => ReadStruct<FFloatInterval>(0xDC);
		
		/// <summary>
		/// Name: LandscapeLayers
		/// Type: TArray<FName>
		/// Offset: 0xE8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> LandscapeLayers => new TArray<FName>(BaseAddress+0xE8);
		
		/// <summary>
		/// Name: LandscapeLayer
		/// Type: NameProperty
		/// Offset: 0xF8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CollisionWithWorld
		/// Type: BoolProperty
		/// Offset: 0x100
		/// Size: 0x01
		/// </summary>
		public bool CollisionWithWorld => (ReadByte(0x0100) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CollisionScale
		/// Type: StructProperty
		/// Offset: 0x104
		/// Size: 0x0C
		/// </summary>
		public FVector CollisionScale => ReadStruct<FVector>(0x104);
		
		/// <summary>
		/// Name: MinimumLayerWeight
		/// Type: FloatProperty
		/// Offset: 0x110
		/// Size: 0x04
		/// </summary>
		public float MinimumLayerWeight
		{
			get
			{
				return ReadSingle(0x110);
			}
			set
			{
				WriteSingle(0x110,value);
			}
		}
		
		/// <summary>
		/// Name: MeshBounds
		/// Type: StructProperty
		/// Offset: 0x114
		/// Size: 0x1C
		/// </summary>
		public FBoxSphereBounds MeshBounds => ReadStruct<FBoxSphereBounds>(0x114);
		
		/// <summary>
		/// Name: LowBoundOriginRadius
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x0C
		/// </summary>
		public FVector LowBoundOriginRadius => ReadStruct<FVector>(0x130);
		
		/// <summary>
		/// Name: Mobility
		/// Type: ByteProperty
		/// Offset: 0x13C
		/// Size: 0x01
		/// </summary>
		public byte Mobility
		{
			get
			{
				return ReadByte(0x13C);
			}
			set
			{
				WriteByte(0x13C,value);
			}
		}
		
		/// <summary>
		/// Name: CullDistance
		/// Type: StructProperty
		/// Offset: 0x140
		/// Size: 0x08
		/// </summary>
		public FInt32Interval CullDistance => ReadStruct<FInt32Interval>(0x140);
		
		/// <summary>
		/// Name: bEnableStaticLighting
		/// Type: BoolProperty
		/// Offset: 0x148
		/// Size: 0x01
		/// </summary>
		public bool bEnableStaticLighting => (ReadByte(0x0148) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CastShadow
		/// Type: BoolProperty
		/// Offset: 0x148
		/// Size: 0x01
		/// </summary>
		public bool CastShadow => (ReadByte(0x0148) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bAffectDynamicIndirectLighting
		/// Type: BoolProperty
		/// Offset: 0x148
		/// Size: 0x01
		/// </summary>
		public bool bAffectDynamicIndirectLighting => (ReadByte(0x0148) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bAffectDistanceFieldLighting
		/// Type: BoolProperty
		/// Offset: 0x148
		/// Size: 0x01
		/// </summary>
		public bool bAffectDistanceFieldLighting => (ReadByte(0x0148) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bCastDynamicShadow
		/// Type: BoolProperty
		/// Offset: 0x148
		/// Size: 0x01
		/// </summary>
		public bool bCastDynamicShadow => (ReadByte(0x0148) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bCastStaticShadow
		/// Type: BoolProperty
		/// Offset: 0x148
		/// Size: 0x01
		/// </summary>
		public bool bCastStaticShadow => (ReadByte(0x0148) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bCastShadowAsTwoSided
		/// Type: BoolProperty
		/// Offset: 0x148
		/// Size: 0x01
		/// </summary>
		public bool bCastShadowAsTwoSided => (ReadByte(0x0148) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bReceivesDecals
		/// Type: BoolProperty
		/// Offset: 0x148
		/// Size: 0x01
		/// </summary>
		public bool bReceivesDecals => (ReadByte(0x0148) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverrideLightMapRes
		/// Type: BoolProperty
		/// Offset: 0x149
		/// Size: 0x01
		/// </summary>
		public bool bOverrideLightMapRes => (ReadByte(0x0149) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: OverriddenLightMapRes
		/// Type: IntProperty
		/// Offset: 0x14C
		/// Size: 0x04
		/// </summary>
		public int OverriddenLightMapRes
		{
			get
			{
				return ReadInt32(0x14C);
			}
			set
			{
				WriteInt32(0x14C,value);
			}
		}
		
		/// <summary>
		/// Name: bUseAsOccluder
		/// Type: BoolProperty
		/// Offset: 0x150
		/// Size: 0x01
		/// </summary>
		public bool bUseAsOccluder => (ReadByte(0x0150) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: BodyInstance
		/// Type: StructProperty
		/// Offset: 0x160
		/// Size: 0x1B0
		/// </summary>
		public FBodyInstance BodyInstance => ReadStruct<FBodyInstance>(0x160);
		
		/// <summary>
		/// Name: CustomNavigableGeometry
		/// Type: ByteProperty
		/// Offset: 0x310
		/// Size: 0x01
		/// </summary>
		public byte CustomNavigableGeometry
		{
			get
			{
				return ReadByte(0x310);
			}
			set
			{
				WriteByte(0x310,value);
			}
		}
		
		/// <summary>
		/// Name: CollisionRadius
		/// Type: FloatProperty
		/// Offset: 0x314
		/// Size: 0x04
		/// </summary>
		public float CollisionRadius
		{
			get
			{
				return ReadSingle(0x314);
			}
			set
			{
				WriteSingle(0x314,value);
			}
		}
		
		/// <summary>
		/// Name: ShadeRadius
		/// Type: FloatProperty
		/// Offset: 0x318
		/// Size: 0x04
		/// </summary>
		public float ShadeRadius
		{
			get
			{
				return ReadSingle(0x318);
			}
			set
			{
				WriteSingle(0x318,value);
			}
		}
		
		/// <summary>
		/// Name: NumSteps
		/// Type: IntProperty
		/// Offset: 0x31C
		/// Size: 0x04
		/// </summary>
		public int NumSteps
		{
			get
			{
				return ReadInt32(0x31C);
			}
			set
			{
				WriteInt32(0x31C,value);
			}
		}
		
		/// <summary>
		/// Name: InitialSeedDensity
		/// Type: FloatProperty
		/// Offset: 0x320
		/// Size: 0x04
		/// </summary>
		public float InitialSeedDensity
		{
			get
			{
				return ReadSingle(0x320);
			}
			set
			{
				WriteSingle(0x320,value);
			}
		}
		
		/// <summary>
		/// Name: AverageSpreadDistance
		/// Type: FloatProperty
		/// Offset: 0x324
		/// Size: 0x04
		/// </summary>
		public float AverageSpreadDistance
		{
			get
			{
				return ReadSingle(0x324);
			}
			set
			{
				WriteSingle(0x324,value);
			}
		}
		
		/// <summary>
		/// Name: SpreadVariance
		/// Type: FloatProperty
		/// Offset: 0x328
		/// Size: 0x04
		/// </summary>
		public float SpreadVariance
		{
			get
			{
				return ReadSingle(0x328);
			}
			set
			{
				WriteSingle(0x328,value);
			}
		}
		
		/// <summary>
		/// Name: SeedsPerStep
		/// Type: IntProperty
		/// Offset: 0x32C
		/// Size: 0x04
		/// </summary>
		public int SeedsPerStep
		{
			get
			{
				return ReadInt32(0x32C);
			}
			set
			{
				WriteInt32(0x32C,value);
			}
		}
		
		/// <summary>
		/// Name: DistributionSeed
		/// Type: IntProperty
		/// Offset: 0x330
		/// Size: 0x04
		/// </summary>
		public int DistributionSeed
		{
			get
			{
				return ReadInt32(0x330);
			}
			set
			{
				WriteInt32(0x330,value);
			}
		}
		
		/// <summary>
		/// Name: MaxInitialSeedOffset
		/// Type: FloatProperty
		/// Offset: 0x334
		/// Size: 0x04
		/// </summary>
		public float MaxInitialSeedOffset
		{
			get
			{
				return ReadSingle(0x334);
			}
			set
			{
				WriteSingle(0x334,value);
			}
		}
		
		/// <summary>
		/// Name: bCanGrowInShade
		/// Type: BoolProperty
		/// Offset: 0x338
		/// Size: 0x01
		/// </summary>
		public bool bCanGrowInShade
		{
			get
			{
				return ReadBool(0x338);
			}
			set
			{
				WriteBool(0x338,value);
			}
		}
		
		/// <summary>
		/// Name: bSpawnsInShade
		/// Type: BoolProperty
		/// Offset: 0x339
		/// Size: 0x01
		/// </summary>
		public bool bSpawnsInShade
		{
			get
			{
				return ReadBool(0x339);
			}
			set
			{
				WriteBool(0x339,value);
			}
		}
		
		/// <summary>
		/// Name: MaxInitialAge
		/// Type: FloatProperty
		/// Offset: 0x33C
		/// Size: 0x04
		/// </summary>
		public float MaxInitialAge
		{
			get
			{
				return ReadSingle(0x33C);
			}
			set
			{
				WriteSingle(0x33C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxAge
		/// Type: FloatProperty
		/// Offset: 0x340
		/// Size: 0x04
		/// </summary>
		public float MaxAge
		{
			get
			{
				return ReadSingle(0x340);
			}
			set
			{
				WriteSingle(0x340,value);
			}
		}
		
		/// <summary>
		/// Name: OverlapPriority
		/// Type: FloatProperty
		/// Offset: 0x344
		/// Size: 0x04
		/// </summary>
		public float OverlapPriority
		{
			get
			{
				return ReadSingle(0x344);
			}
			set
			{
				WriteSingle(0x344,value);
			}
		}
		
		/// <summary>
		/// Name: ProceduralScale
		/// Type: StructProperty
		/// Offset: 0x348
		/// Size: 0x08
		/// </summary>
		public FFloatInterval ProceduralScale => ReadStruct<FFloatInterval>(0x348);
		
		/// <summary>
		/// Name: ScaleCurve
		/// Type: StructProperty
		/// Offset: 0x350
		/// Size: 0x80
		/// </summary>
		public FRuntimeFloatCurve ScaleCurve => ReadStruct<FRuntimeFloatCurve>(0x350);
		
		/// <summary>
		/// Name: ChangeCount
		/// Type: IntProperty
		/// Offset: 0x3D0
		/// Size: 0x04
		/// </summary>
		public int ChangeCount
		{
			get
			{
				return ReadInt32(0x3D0);
			}
			set
			{
				WriteInt32(0x3D0,value);
			}
		}
		
		/// <summary>
		/// Name: ReapplyDensity
		/// Type: BoolProperty
		/// Offset: 0x3D4
		/// Size: 0x01
		/// </summary>
		public bool ReapplyDensity => (ReadByte(0x03D4) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ReapplyRadius
		/// Type: BoolProperty
		/// Offset: 0x3D4
		/// Size: 0x01
		/// </summary>
		public bool ReapplyRadius => (ReadByte(0x03D4) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: ReapplyAlignToNormal
		/// Type: BoolProperty
		/// Offset: 0x3D4
		/// Size: 0x01
		/// </summary>
		public bool ReapplyAlignToNormal => (ReadByte(0x03D4) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: ReapplyRandomYaw
		/// Type: BoolProperty
		/// Offset: 0x3D4
		/// Size: 0x01
		/// </summary>
		public bool ReapplyRandomYaw => (ReadByte(0x03D4) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: ReapplyScaling
		/// Type: BoolProperty
		/// Offset: 0x3D4
		/// Size: 0x01
		/// </summary>
		public bool ReapplyScaling => (ReadByte(0x03D4) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: ReapplyScaleX
		/// Type: BoolProperty
		/// Offset: 0x3D4
		/// Size: 0x01
		/// </summary>
		public bool ReapplyScaleX => (ReadByte(0x03D4) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: ReapplyScaleY
		/// Type: BoolProperty
		/// Offset: 0x3D4
		/// Size: 0x01
		/// </summary>
		public bool ReapplyScaleY => (ReadByte(0x03D4) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: ReapplyScaleZ
		/// Type: BoolProperty
		/// Offset: 0x3D4
		/// Size: 0x01
		/// </summary>
		public bool ReapplyScaleZ => (ReadByte(0x03D4) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: ReapplyRandomPitchAngle
		/// Type: BoolProperty
		/// Offset: 0x3D5
		/// Size: 0x01
		/// </summary>
		public bool ReapplyRandomPitchAngle => (ReadByte(0x03D5) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ReapplyGroundSlope
		/// Type: BoolProperty
		/// Offset: 0x3D5
		/// Size: 0x01
		/// </summary>
		public bool ReapplyGroundSlope => (ReadByte(0x03D5) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: ReapplyHeight
		/// Type: BoolProperty
		/// Offset: 0x3D5
		/// Size: 0x01
		/// </summary>
		public bool ReapplyHeight => (ReadByte(0x03D5) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: ReapplyLandscapeLayers
		/// Type: BoolProperty
		/// Offset: 0x3D5
		/// Size: 0x01
		/// </summary>
		public bool ReapplyLandscapeLayers => (ReadByte(0x03D5) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: ReapplyZOffset
		/// Type: BoolProperty
		/// Offset: 0x3D5
		/// Size: 0x01
		/// </summary>
		public bool ReapplyZOffset => (ReadByte(0x03D5) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: ReapplyCollisionWithWorld
		/// Type: BoolProperty
		/// Offset: 0x3D5
		/// Size: 0x01
		/// </summary>
		public bool ReapplyCollisionWithWorld => (ReadByte(0x03D5) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: ReapplyVertexColorMask
		/// Type: BoolProperty
		/// Offset: 0x3D5
		/// Size: 0x01
		/// </summary>
		public bool ReapplyVertexColorMask => (ReadByte(0x03D5) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bEnableDensityScaling
		/// Type: BoolProperty
		/// Offset: 0x3D5
		/// Size: 0x01
		/// </summary>
		public bool bEnableDensityScaling => (ReadByte(0x03D5) & 0x80) == 0x80;
		
	}


	/// <summary>
	/// UFoliageType_InstancedStaticMesh:UFoliageType
	/// Size: 0x400
	/// Properties: 3
	/// </summary>
	public class UFoliageType_InstancedStaticMesh:UFoliageType
	{
		public override int ObjectSize => 1024;
		/// <summary>
		/// Name: Mesh
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public UStaticMesh Mesh => ReadUObject<UStaticMesh>(0x3D8);
		
		/// <summary>
		/// Name: OverrideMaterials
		/// Type: TArray<UMaterialInterface>
		/// Offset: 0x3E0
		/// Size: 0x10
		/// SubElement Size: 0x58
		/// </summary>
		public TArray<UMaterialInterface> OverrideMaterials => new TArray<UMaterialInterface>(BaseAddress+0x3E0);
		
		/// <summary>
		/// Name: ComponentClass
		/// Type: ClassProperty
		/// Offset: 0x3F0
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// AInstancedFoliageActor:AActor
	/// Size: 0x420
	/// Properties: 0
	/// </summary>
	public class AInstancedFoliageActor:AActor
	{
		public override int ObjectSize => 1056;
	}


	/// <summary>
	/// AInteractiveFoliageActor:AStaticMeshActor
	/// Size: 0x440
	/// Properties: 14
	/// </summary>
	public class AInteractiveFoliageActor:AStaticMeshActor
	{
		public override int ObjectSize => 1088;
		/// <summary>
		/// Name: CapsuleComponent
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public UCapsuleComponent CapsuleComponent => ReadUObject<UCapsuleComponent>(0x3E0);
		
		/// <summary>
		/// Name: TouchingActorEntryPosition
		/// Type: StructProperty
		/// Offset: 0x3E8
		/// Size: 0x0C
		/// </summary>
		public FVector TouchingActorEntryPosition => ReadStruct<FVector>(0x3E8);
		
		/// <summary>
		/// Name: FoliageVelocity
		/// Type: StructProperty
		/// Offset: 0x3F4
		/// Size: 0x0C
		/// </summary>
		public FVector FoliageVelocity => ReadStruct<FVector>(0x3F4);
		
		/// <summary>
		/// Name: FoliageForce
		/// Type: StructProperty
		/// Offset: 0x400
		/// Size: 0x0C
		/// </summary>
		public FVector FoliageForce => ReadStruct<FVector>(0x400);
		
		/// <summary>
		/// Name: FoliagePosition
		/// Type: StructProperty
		/// Offset: 0x40C
		/// Size: 0x0C
		/// </summary>
		public FVector FoliagePosition => ReadStruct<FVector>(0x40C);
		
		/// <summary>
		/// Name: FoliageDamageImpulseScale
		/// Type: FloatProperty
		/// Offset: 0x418
		/// Size: 0x04
		/// </summary>
		public float FoliageDamageImpulseScale
		{
			get
			{
				return ReadSingle(0x418);
			}
			set
			{
				WriteSingle(0x418,value);
			}
		}
		
		/// <summary>
		/// Name: FoliageTouchImpulseScale
		/// Type: FloatProperty
		/// Offset: 0x41C
		/// Size: 0x04
		/// </summary>
		public float FoliageTouchImpulseScale
		{
			get
			{
				return ReadSingle(0x41C);
			}
			set
			{
				WriteSingle(0x41C,value);
			}
		}
		
		/// <summary>
		/// Name: FoliageStiffness
		/// Type: FloatProperty
		/// Offset: 0x420
		/// Size: 0x04
		/// </summary>
		public float FoliageStiffness
		{
			get
			{
				return ReadSingle(0x420);
			}
			set
			{
				WriteSingle(0x420,value);
			}
		}
		
		/// <summary>
		/// Name: FoliageStiffnessQuadratic
		/// Type: FloatProperty
		/// Offset: 0x424
		/// Size: 0x04
		/// </summary>
		public float FoliageStiffnessQuadratic
		{
			get
			{
				return ReadSingle(0x424);
			}
			set
			{
				WriteSingle(0x424,value);
			}
		}
		
		/// <summary>
		/// Name: FoliageDamping
		/// Type: FloatProperty
		/// Offset: 0x428
		/// Size: 0x04
		/// </summary>
		public float FoliageDamping
		{
			get
			{
				return ReadSingle(0x428);
			}
			set
			{
				WriteSingle(0x428,value);
			}
		}
		
		/// <summary>
		/// Name: MaxDamageImpulse
		/// Type: FloatProperty
		/// Offset: 0x42C
		/// Size: 0x04
		/// </summary>
		public float MaxDamageImpulse
		{
			get
			{
				return ReadSingle(0x42C);
			}
			set
			{
				WriteSingle(0x42C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxTouchImpulse
		/// Type: FloatProperty
		/// Offset: 0x430
		/// Size: 0x04
		/// </summary>
		public float MaxTouchImpulse
		{
			get
			{
				return ReadSingle(0x430);
			}
			set
			{
				WriteSingle(0x430,value);
			}
		}
		
		/// <summary>
		/// Name: MaxForce
		/// Type: FloatProperty
		/// Offset: 0x434
		/// Size: 0x04
		/// </summary>
		public float MaxForce
		{
			get
			{
				return ReadSingle(0x434);
			}
			set
			{
				WriteSingle(0x434,value);
			}
		}
		
		/// <summary>
		/// Name: Mass
		/// Type: FloatProperty
		/// Offset: 0x438
		/// Size: 0x04
		/// </summary>
		public float Mass
		{
			get
			{
				return ReadSingle(0x438);
			}
			set
			{
				WriteSingle(0x438,value);
			}
		}
		
	}


	/// <summary>
	/// UInteractiveFoliageComponent:UStaticMeshComponent
	/// Size: 0x6F0
	/// Properties: 0
	/// </summary>
	public class UInteractiveFoliageComponent:UStaticMeshComponent
	{
		public override int ObjectSize => 1776;
	}


	/// <summary>
	/// ABrush:AActor
	/// Size: 0x408
	/// Properties: 11
	/// </summary>
	public class ABrush:AActor
	{
		public override int ObjectSize => 1032;
		/// <summary>
		/// Name: BrushType
		/// Type: ByteProperty
		/// Offset: 0x3D0
		/// Size: 0x01
		/// </summary>
		public byte BrushType
		{
			get
			{
				return ReadByte(0x3D0);
			}
			set
			{
				WriteByte(0x3D0,value);
			}
		}
		
		/// <summary>
		/// Name: BrushColor
		/// Type: StructProperty
		/// Offset: 0x3D4
		/// Size: 0x04
		/// </summary>
		public FColor BrushColor => ReadStruct<FColor>(0x3D4);
		
		/// <summary>
		/// Name: PolyFlags
		/// Type: IntProperty
		/// Offset: 0x3D8
		/// Size: 0x04
		/// </summary>
		public int PolyFlags
		{
			get
			{
				return ReadInt32(0x3D8);
			}
			set
			{
				WriteInt32(0x3D8,value);
			}
		}
		
		/// <summary>
		/// Name: bColored
		/// Type: BoolProperty
		/// Offset: 0x3DC
		/// Size: 0x01
		/// </summary>
		public bool bColored => (ReadByte(0x03DC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSolidWhenSelected
		/// Type: BoolProperty
		/// Offset: 0x3DC
		/// Size: 0x01
		/// </summary>
		public bool bSolidWhenSelected => (ReadByte(0x03DC) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bPlaceableFromClassBrowser
		/// Type: BoolProperty
		/// Offset: 0x3DC
		/// Size: 0x01
		/// </summary>
		public bool bPlaceableFromClassBrowser => (ReadByte(0x03DC) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bNotForClientOrServer
		/// Type: BoolProperty
		/// Offset: 0x3DC
		/// Size: 0x01
		/// </summary>
		public bool bNotForClientOrServer => (ReadByte(0x03DC) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: Brush
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public UModel Brush => ReadUObject<UModel>(0x3E0);
		
		/// <summary>
		/// Name: BrushComponent
		/// Type: ObjectProperty
		/// Offset: 0x3E8
		/// Size: 0x08
		/// </summary>
		public UBrushComponent BrushComponent => ReadUObject<UBrushComponent>(0x3E8);
		
		/// <summary>
		/// Name: bInManipulation
		/// Type: BoolProperty
		/// Offset: 0x3F0
		/// Size: 0x01
		/// </summary>
		public bool bInManipulation => (ReadByte(0x03F0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: SavedSelections
		/// Type: TArray<FGeomSelection>
		/// Offset: 0x3F8
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FGeomSelection> SavedSelections => new TArray<FGeomSelection>(BaseAddress+0x3F8);
		
	}


	/// <summary>
	/// AVolume:ABrush
	/// Size: 0x408
	/// Properties: 0
	/// </summary>
	public class AVolume:ABrush
	{
		public override int ObjectSize => 1032;
	}


	/// <summary>
	/// AProceduralFoliageBlockingVolume:AVolume
	/// Size: 0x410
	/// Properties: 1
	/// </summary>
	public class AProceduralFoliageBlockingVolume:AVolume
	{
		public override int ObjectSize => 1040;
		/// <summary>
		/// Name: ProceduralFoliageVolume
		/// Type: ObjectProperty
		/// Offset: 0x408
		/// Size: 0x08
		/// </summary>
		public AProceduralFoliageVolume ProceduralFoliageVolume => ReadUObject<AProceduralFoliageVolume>(0x408);
		
	}


	/// <summary>
	/// UProceduralFoliageComponent:UActorComponent
	/// Size: 0x100
	/// Properties: 4
	/// </summary>
	public class UProceduralFoliageComponent:UActorComponent
	{
		public override int ObjectSize => 256;
		/// <summary>
		/// Name: FoliageSpawner
		/// Type: ObjectProperty
		/// Offset: 0xD8
		/// Size: 0x08
		/// </summary>
		public UProceduralFoliageSpawner FoliageSpawner => ReadUObject<UProceduralFoliageSpawner>(0xD8);
		
		/// <summary>
		/// Name: TileOverlap
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float TileOverlap
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: SpawningVolume
		/// Type: ObjectProperty
		/// Offset: 0xE8
		/// Size: 0x08
		/// </summary>
		public AVolume SpawningVolume => ReadUObject<AVolume>(0xE8);
		
		/// <summary>
		/// Name: ProceduralGuid
		/// Type: StructProperty
		/// Offset: 0xF0
		/// Size: 0x10
		/// </summary>
		public FGuid ProceduralGuid => ReadStruct<FGuid>(0xF0);
		
	}


	/// <summary>
	/// UProceduralFoliageSpawner:UObject
	/// Size: 0x68
	/// Properties: 5
	/// </summary>
	public class UProceduralFoliageSpawner:UObject
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: RandomSeed
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int RandomSeed
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: TileSize
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float TileSize
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: NumUniqueTiles
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int NumUniqueTiles
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: FoliageTypes
		/// Type: TArray<FFoliageTypeObject>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FFoliageTypeObject> FoliageTypes => new TArray<FFoliageTypeObject>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: bNeedsSimulation
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool bNeedsSimulation
		{
			get
			{
				return ReadBool(0x48);
			}
			set
			{
				WriteBool(0x48,value);
			}
		}
		
	}


	/// <summary>
	/// UProceduralFoliageTile:UObject
	/// Size: 0x150
	/// Properties: 2
	/// </summary>
	public class UProceduralFoliageTile:UObject
	{
		public override int ObjectSize => 336;
		/// <summary>
		/// Name: FoliageSpawner
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UProceduralFoliageSpawner FoliageSpawner => ReadUObject<UProceduralFoliageSpawner>(0x28);
		
		/// <summary>
		/// Name: InstancesArray
		/// Type: TArray<FProceduralFoliageInstance>
		/// Offset: 0xD0
		/// Size: 0x10
		/// SubElement Size: 0x60
		/// </summary>
		public TArray<FProceduralFoliageInstance> InstancesArray => new TArray<FProceduralFoliageInstance>(BaseAddress+0xD0);
		
	}


	/// <summary>
	/// AProceduralFoliageVolume:AVolume
	/// Size: 0x410
	/// Properties: 1
	/// </summary>
	public class AProceduralFoliageVolume:AVolume
	{
		public override int ObjectSize => 1040;
		/// <summary>
		/// Name: ProceduralComponent
		/// Type: ObjectProperty
		/// Offset: 0x408
		/// Size: 0x08
		/// </summary>
		public UProceduralFoliageComponent ProceduralComponent => ReadUObject<UProceduralFoliageComponent>(0x408);
		
	}


	/// <summary>
	/// UControlPointMeshComponent:UStaticMeshComponent
	/// Size: 0x6E0
	/// Properties: 0
	/// </summary>
	public class UControlPointMeshComponent:UStaticMeshComponent
	{
		public override int ObjectSize => 1760;
	}


	/// <summary>
	/// ULandscapeGrassType:UObject
	/// Size: 0x58
	/// Properties: 8
	/// </summary>
	public class ULandscapeGrassType:UObject
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: GrassVarieties
		/// Type: TArray<FGrassVariety>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FGrassVariety> GrassVarieties => new TArray<FGrassVariety>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: GrassMesh
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UStaticMesh GrassMesh => ReadUObject<UStaticMesh>(0x38);
		
		/// <summary>
		/// Name: GrassDensity
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float GrassDensity
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: PlacementJitter
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float PlacementJitter
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: StartCullDistance
		/// Type: IntProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public int StartCullDistance
		{
			get
			{
				return ReadInt32(0x48);
			}
			set
			{
				WriteInt32(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: EndCullDistance
		/// Type: IntProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public int EndCullDistance
		{
			get
			{
				return ReadInt32(0x4C);
			}
			set
			{
				WriteInt32(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: RandomRotation
		/// Type: BoolProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public bool RandomRotation
		{
			get
			{
				return ReadBool(0x50);
			}
			set
			{
				WriteBool(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: AlignToSurface
		/// Type: BoolProperty
		/// Offset: 0x51
		/// Size: 0x01
		/// </summary>
		public bool AlignToSurface
		{
			get
			{
				return ReadBool(0x51);
			}
			set
			{
				WriteBool(0x51,value);
			}
		}
		
	}


	/// <summary>
	/// ULandscapeComponent:UPrimitiveComponent
	/// Size: 0x710
	/// Properties: 31
	/// </summary>
	public class ULandscapeComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1808;
		/// <summary>
		/// Name: SectionBaseX
		/// Type: IntProperty
		/// Offset: 0x5A0
		/// Size: 0x04
		/// </summary>
		public int SectionBaseX
		{
			get
			{
				return ReadInt32(0x5A0);
			}
			set
			{
				WriteInt32(0x5A0,value);
			}
		}
		
		/// <summary>
		/// Name: SectionBaseY
		/// Type: IntProperty
		/// Offset: 0x5A4
		/// Size: 0x04
		/// </summary>
		public int SectionBaseY
		{
			get
			{
				return ReadInt32(0x5A4);
			}
			set
			{
				WriteInt32(0x5A4,value);
			}
		}
		
		/// <summary>
		/// Name: ComponentSizeQuads
		/// Type: IntProperty
		/// Offset: 0x5A8
		/// Size: 0x04
		/// </summary>
		public int ComponentSizeQuads
		{
			get
			{
				return ReadInt32(0x5A8);
			}
			set
			{
				WriteInt32(0x5A8,value);
			}
		}
		
		/// <summary>
		/// Name: SubsectionSizeQuads
		/// Type: IntProperty
		/// Offset: 0x5AC
		/// Size: 0x04
		/// </summary>
		public int SubsectionSizeQuads
		{
			get
			{
				return ReadInt32(0x5AC);
			}
			set
			{
				WriteInt32(0x5AC,value);
			}
		}
		
		/// <summary>
		/// Name: NumSubsections
		/// Type: IntProperty
		/// Offset: 0x5B0
		/// Size: 0x04
		/// </summary>
		public int NumSubsections
		{
			get
			{
				return ReadInt32(0x5B0);
			}
			set
			{
				WriteInt32(0x5B0,value);
			}
		}
		
		/// <summary>
		/// Name: OverrideMaterial
		/// Type: ObjectProperty
		/// Offset: 0x5B8
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface OverrideMaterial => ReadUObject<UMaterialInterface>(0x5B8);
		
		/// <summary>
		/// Name: OverrideHoleMaterial
		/// Type: ObjectProperty
		/// Offset: 0x5C0
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface OverrideHoleMaterial => ReadUObject<UMaterialInterface>(0x5C0);
		
		/// <summary>
		/// Name: MaterialInstance
		/// Type: ObjectProperty
		/// Offset: 0x5C8
		/// Size: 0x08
		/// </summary>
		public UMaterialInstanceConstant MaterialInstance => ReadUObject<UMaterialInstanceConstant>(0x5C8);
		
		/// <summary>
		/// Name: WeightmapLayerAllocations
		/// Type: TArray<FWeightmapLayerAllocationInfo>
		/// Offset: 0x5D0
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FWeightmapLayerAllocationInfo> WeightmapLayerAllocations => new TArray<FWeightmapLayerAllocationInfo>(BaseAddress+0x5D0);
		
		/// <summary>
		/// Name: WeightmapTextures
		/// Type: TArray<UTexture2D>
		/// Offset: 0x5E0
		/// Size: 0x10
		/// SubElement Size: 0x100
		/// </summary>
		public TArray<UTexture2D> WeightmapTextures => new TArray<UTexture2D>(BaseAddress+0x5E0);
		
		/// <summary>
		/// Name: XYOffsetmapTexture
		/// Type: ObjectProperty
		/// Offset: 0x5F0
		/// Size: 0x08
		/// </summary>
		public UTexture2D XYOffsetmapTexture => ReadUObject<UTexture2D>(0x5F0);
		
		/// <summary>
		/// Name: WeightmapScaleBias
		/// Type: StructProperty
		/// Offset: 0x600
		/// Size: 0x10
		/// </summary>
		public FVector4 WeightmapScaleBias => ReadStruct<FVector4>(0x600);
		
		/// <summary>
		/// Name: WeightmapSubsectionOffset
		/// Type: FloatProperty
		/// Offset: 0x610
		/// Size: 0x04
		/// </summary>
		public float WeightmapSubsectionOffset
		{
			get
			{
				return ReadSingle(0x610);
			}
			set
			{
				WriteSingle(0x610,value);
			}
		}
		
		/// <summary>
		/// Name: HeightmapScaleBias
		/// Type: StructProperty
		/// Offset: 0x620
		/// Size: 0x10
		/// </summary>
		public FVector4 HeightmapScaleBias => ReadStruct<FVector4>(0x620);
		
		/// <summary>
		/// Name: HeightmapTexture
		/// Type: ObjectProperty
		/// Offset: 0x630
		/// Size: 0x08
		/// </summary>
		public UTexture2D HeightmapTexture => ReadUObject<UTexture2D>(0x630);
		
		/// <summary>
		/// Name: CachedLocalBox
		/// Type: StructProperty
		/// Offset: 0x638
		/// Size: 0x1C
		/// </summary>
		public FBox CachedLocalBox => ReadStruct<FBox>(0x638);
		
		/// <summary>
		/// Name: CollisionComponent
		/// Type: LazyObjectProperty
		/// Offset: 0x654
		/// Size: 0x1C
		/// </summary>
		
		/// <summary>
		/// Name: IrrelevantLights
		/// Type: TArray<FGuid>
		/// Offset: 0x670
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FGuid> IrrelevantLights => new TArray<FGuid>(BaseAddress+0x670);
		
		/// <summary>
		/// Name: CollisionMipLevel
		/// Type: IntProperty
		/// Offset: 0x690
		/// Size: 0x04
		/// </summary>
		public int CollisionMipLevel
		{
			get
			{
				return ReadInt32(0x690);
			}
			set
			{
				WriteInt32(0x690,value);
			}
		}
		
		/// <summary>
		/// Name: SimpleCollisionMipLevel
		/// Type: IntProperty
		/// Offset: 0x694
		/// Size: 0x04
		/// </summary>
		public int SimpleCollisionMipLevel
		{
			get
			{
				return ReadInt32(0x694);
			}
			set
			{
				WriteInt32(0x694,value);
			}
		}
		
		/// <summary>
		/// Name: NegativeZBoundsExtension
		/// Type: FloatProperty
		/// Offset: 0x698
		/// Size: 0x04
		/// </summary>
		public float NegativeZBoundsExtension
		{
			get
			{
				return ReadSingle(0x698);
			}
			set
			{
				WriteSingle(0x698,value);
			}
		}
		
		/// <summary>
		/// Name: PositiveZBoundsExtension
		/// Type: FloatProperty
		/// Offset: 0x69C
		/// Size: 0x04
		/// </summary>
		public float PositiveZBoundsExtension
		{
			get
			{
				return ReadSingle(0x69C);
			}
			set
			{
				WriteSingle(0x69C,value);
			}
		}
		
		/// <summary>
		/// Name: StaticLightingResolution
		/// Type: FloatProperty
		/// Offset: 0x6A0
		/// Size: 0x04
		/// </summary>
		public float StaticLightingResolution
		{
			get
			{
				return ReadSingle(0x6A0);
			}
			set
			{
				WriteSingle(0x6A0,value);
			}
		}
		
		/// <summary>
		/// Name: ForcedLOD
		/// Type: IntProperty
		/// Offset: 0x6A4
		/// Size: 0x04
		/// </summary>
		public int ForcedLOD
		{
			get
			{
				return ReadInt32(0x6A4);
			}
			set
			{
				WriteInt32(0x6A4,value);
			}
		}
		
		/// <summary>
		/// Name: LODBias
		/// Type: IntProperty
		/// Offset: 0x6A8
		/// Size: 0x04
		/// </summary>
		public int LODBias
		{
			get
			{
				return ReadInt32(0x6A8);
			}
			set
			{
				WriteInt32(0x6A8,value);
			}
		}
		
		/// <summary>
		/// Name: StateId
		/// Type: StructProperty
		/// Offset: 0x6AC
		/// Size: 0x10
		/// </summary>
		public FGuid StateId => ReadStruct<FGuid>(0x6AC);
		
		/// <summary>
		/// Name: BakedTextureMaterialGuid
		/// Type: StructProperty
		/// Offset: 0x6BC
		/// Size: 0x10
		/// </summary>
		public FGuid BakedTextureMaterialGuid => ReadStruct<FGuid>(0x6BC);
		
		/// <summary>
		/// Name: GIBakedBaseColorTexture
		/// Type: ObjectProperty
		/// Offset: 0x6D0
		/// Size: 0x08
		/// </summary>
		public UTexture2D GIBakedBaseColorTexture => ReadUObject<UTexture2D>(0x6D0);
		
		/// <summary>
		/// Name: MobileBlendableLayerMask
		/// Type: ByteProperty
		/// Offset: 0x6D8
		/// Size: 0x01
		/// </summary>
		public byte MobileBlendableLayerMask
		{
			get
			{
				return ReadByte(0x6D8);
			}
			set
			{
				WriteByte(0x6D8,value);
			}
		}
		
		/// <summary>
		/// Name: MobileMaterialInterface
		/// Type: ObjectProperty
		/// Offset: 0x6E0
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface MobileMaterialInterface => ReadUObject<UMaterialInterface>(0x6E0);
		
		/// <summary>
		/// Name: MobileWeightNormalmapTexture
		/// Type: ObjectProperty
		/// Offset: 0x6E8
		/// Size: 0x08
		/// </summary>
		public UTexture2D MobileWeightNormalmapTexture => ReadUObject<UTexture2D>(0x6E8);
		
	}


	/// <summary>
	/// ALandscapeGizmoActor:AActor
	/// Size: 0x3D0
	/// Properties: 0
	/// </summary>
	public class ALandscapeGizmoActor:AActor
	{
		public override int ObjectSize => 976;
	}


	/// <summary>
	/// ALandscapeGizmoActiveActor:ALandscapeGizmoActor
	/// Size: 0x420
	/// Properties: 0
	/// </summary>
	public class ALandscapeGizmoActiveActor:ALandscapeGizmoActor
	{
		public override int ObjectSize => 1056;
	}


	/// <summary>
	/// ULandscapeGizmoRenderComponent:UPrimitiveComponent
	/// Size: 0x5A0
	/// Properties: 0
	/// </summary>
	public class ULandscapeGizmoRenderComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1440;
	}


	/// <summary>
	/// ULandscapeHeightfieldCollisionComponent:UPrimitiveComponent
	/// Size: 0x680
	/// Properties: 11
	/// </summary>
	public class ULandscapeHeightfieldCollisionComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1664;
		/// <summary>
		/// Name: ComponentLayerInfos
		/// Type: TArray<ULandscapeLayerInfoObject>
		/// Offset: 0x5A0
		/// Size: 0x10
		/// SubElement Size: 0x50
		/// </summary>
		public TArray<ULandscapeLayerInfoObject> ComponentLayerInfos => new TArray<ULandscapeLayerInfoObject>(BaseAddress+0x5A0);
		
		/// <summary>
		/// Name: SectionBaseX
		/// Type: IntProperty
		/// Offset: 0x5B0
		/// Size: 0x04
		/// </summary>
		public int SectionBaseX
		{
			get
			{
				return ReadInt32(0x5B0);
			}
			set
			{
				WriteInt32(0x5B0,value);
			}
		}
		
		/// <summary>
		/// Name: SectionBaseY
		/// Type: IntProperty
		/// Offset: 0x5B4
		/// Size: 0x04
		/// </summary>
		public int SectionBaseY
		{
			get
			{
				return ReadInt32(0x5B4);
			}
			set
			{
				WriteInt32(0x5B4,value);
			}
		}
		
		/// <summary>
		/// Name: CollisionSizeQuads
		/// Type: IntProperty
		/// Offset: 0x5B8
		/// Size: 0x04
		/// </summary>
		public int CollisionSizeQuads
		{
			get
			{
				return ReadInt32(0x5B8);
			}
			set
			{
				WriteInt32(0x5B8,value);
			}
		}
		
		/// <summary>
		/// Name: CollisionScale
		/// Type: FloatProperty
		/// Offset: 0x5BC
		/// Size: 0x04
		/// </summary>
		public float CollisionScale
		{
			get
			{
				return ReadSingle(0x5BC);
			}
			set
			{
				WriteSingle(0x5BC,value);
			}
		}
		
		/// <summary>
		/// Name: SimpleCollisionSizeQuads
		/// Type: IntProperty
		/// Offset: 0x5C0
		/// Size: 0x04
		/// </summary>
		public int SimpleCollisionSizeQuads
		{
			get
			{
				return ReadInt32(0x5C0);
			}
			set
			{
				WriteInt32(0x5C0,value);
			}
		}
		
		/// <summary>
		/// Name: CollisionQuadFlags
		/// Type: TArray<>
		/// Offset: 0x5C8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: HeightfieldGuid
		/// Type: StructProperty
		/// Offset: 0x5D8
		/// Size: 0x10
		/// </summary>
		public FGuid HeightfieldGuid => ReadStruct<FGuid>(0x5D8);
		
		/// <summary>
		/// Name: CachedLocalBox
		/// Type: StructProperty
		/// Offset: 0x5E8
		/// Size: 0x1C
		/// </summary>
		public FBox CachedLocalBox => ReadStruct<FBox>(0x5E8);
		
		/// <summary>
		/// Name: RenderComponent
		/// Type: LazyObjectProperty
		/// Offset: 0x604
		/// Size: 0x1C
		/// </summary>
		
		/// <summary>
		/// Name: CookedPhysicalMaterials
		/// Type: TArray<UPhysicalMaterial>
		/// Offset: 0x630
		/// Size: 0x10
		/// SubElement Size: 0x88
		/// </summary>
		public TArray<UPhysicalMaterial> CookedPhysicalMaterials => new TArray<UPhysicalMaterial>(BaseAddress+0x630);
		
	}


	/// <summary>
	/// ULandscapeMeshCollisionComponent:ULandscapeHeightfieldCollisionComponent
	/// Size: 0x6A0
	/// Properties: 1
	/// </summary>
	public class ULandscapeMeshCollisionComponent:ULandscapeHeightfieldCollisionComponent
	{
		public override int ObjectSize => 1696;
		/// <summary>
		/// Name: MeshGuid
		/// Type: StructProperty
		/// Offset: 0x680
		/// Size: 0x10
		/// </summary>
		public FGuid MeshGuid => ReadStruct<FGuid>(0x680);
		
	}


	/// <summary>
	/// ULandscapeInfo:UObject
	/// Size: 0x210
	/// Properties: 6
	/// </summary>
	public class ULandscapeInfo:UObject
	{
		public override int ObjectSize => 528;
		/// <summary>
		/// Name: LandscapeActor
		/// Type: LazyObjectProperty
		/// Offset: 0x28
		/// Size: 0x1C
		/// </summary>
		
		/// <summary>
		/// Name: LandscapeGuid
		/// Type: StructProperty
		/// Offset: 0x44
		/// Size: 0x10
		/// </summary>
		public FGuid LandscapeGuid => ReadStruct<FGuid>(0x44);
		
		/// <summary>
		/// Name: ComponentSizeQuads
		/// Type: IntProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public int ComponentSizeQuads
		{
			get
			{
				return ReadInt32(0x54);
			}
			set
			{
				WriteInt32(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: SubsectionSizeQuads
		/// Type: IntProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public int SubsectionSizeQuads
		{
			get
			{
				return ReadInt32(0x58);
			}
			set
			{
				WriteInt32(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: ComponentNumSubsections
		/// Type: IntProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public int ComponentNumSubsections
		{
			get
			{
				return ReadInt32(0x5C);
			}
			set
			{
				WriteInt32(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: DrawScale
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x0C
		/// </summary>
		public FVector DrawScale => ReadStruct<FVector>(0x60);
		
	}


	/// <summary>
	/// ULandscapeInfoMap:UObject
	/// Size: 0x78
	/// Properties: 0
	/// </summary>
	public class ULandscapeInfoMap:UObject
	{
		public override int ObjectSize => 120;
	}


	/// <summary>
	/// ULandscapeLayerInfoObject:UObject
	/// Size: 0x50
	/// Properties: 4
	/// </summary>
	public class ULandscapeLayerInfoObject:UObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: LayerName
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PhysMaterial
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UPhysicalMaterial PhysMaterial => ReadUObject<UPhysicalMaterial>(0x30);
		
		/// <summary>
		/// Name: Hardness
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float Hardness
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: LayerUsageDebugColor
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x10
		/// </summary>
		public FLinearColor LayerUsageDebugColor => ReadStruct<FLinearColor>(0x3C);
		
	}


	/// <summary>
	/// UMaterialInterface:UObject
	/// Size: 0x58
	/// Properties: 2
	/// </summary>
	public class UMaterialInterface:UObject
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: SubsurfaceProfile
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public USubsurfaceProfile SubsurfaceProfile => ReadUObject<USubsurfaceProfile>(0x30);
		
		/// <summary>
		/// Name: LightmassSettings
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x14
		/// </summary>
		public FLightmassMaterialInterfaceSettings LightmassSettings => ReadStruct<FLightmassMaterialInterfaceSettings>(0x40);
		
	}


	/// <summary>
	/// UMaterialInstance:UMaterialInterface
	/// Size: 0x1C8
	/// Properties: 13
	/// </summary>
	public class UMaterialInstance:UMaterialInterface
	{
		public override int ObjectSize => 456;
		/// <summary>
		/// Name: PhysMaterial
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UPhysicalMaterial PhysMaterial => ReadUObject<UPhysicalMaterial>(0x58);
		
		/// <summary>
		/// Name: Parent
		/// Type: ObjectProperty
		/// Offset: 0x60
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface Parent => ReadUObject<UMaterialInterface>(0x60);
		
		/// <summary>
		/// Name: bHasStaticPermutationResource
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bHasStaticPermutationResource => (ReadByte(0x0068) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverrideSubsurfaceProfile
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bOverrideSubsurfaceProfile => (ReadByte(0x0068) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: ParentLightingGuid
		/// Type: StructProperty
		/// Offset: 0x6C
		/// Size: 0x10
		/// </summary>
		public FGuid ParentLightingGuid => ReadStruct<FGuid>(0x6C);
		
		/// <summary>
		/// Name: FontParameterValues
		/// Type: TArray<FFontParameterValue>
		/// Offset: 0x80
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FFontParameterValue> FontParameterValues => new TArray<FFontParameterValue>(BaseAddress+0x80);
		
		/// <summary>
		/// Name: ScalarParameterValues
		/// Type: TArray<FScalarParameterValue>
		/// Offset: 0x90
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FScalarParameterValue> ScalarParameterValues => new TArray<FScalarParameterValue>(BaseAddress+0x90);
		
		/// <summary>
		/// Name: TextureParameterValues
		/// Type: TArray<FTextureParameterValue>
		/// Offset: 0xA0
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FTextureParameterValue> TextureParameterValues => new TArray<FTextureParameterValue>(BaseAddress+0xA0);
		
		/// <summary>
		/// Name: GraniteTextureParameterValues
		/// Type: TArray<FGraniteTextureParameterValue>
		/// Offset: 0xB0
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FGraniteTextureParameterValue> GraniteTextureParameterValues => new TArray<FGraniteTextureParameterValue>(BaseAddress+0xB0);
		
		/// <summary>
		/// Name: GraniteErrors
		/// Type: TArray<>
		/// Offset: 0xC0
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: VectorParameterValues
		/// Type: TArray<FVectorParameterValue>
		/// Offset: 0xD0
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FVectorParameterValue> VectorParameterValues => new TArray<FVectorParameterValue>(BaseAddress+0xD0);
		
		/// <summary>
		/// Name: bOverrideBaseProperties
		/// Type: BoolProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public bool bOverrideBaseProperties
		{
			get
			{
				return ReadBool(0xE0);
			}
			set
			{
				WriteBool(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: BasePropertyOverrides
		/// Type: StructProperty
		/// Offset: 0xE4
		/// Size: 0x14
		/// </summary>
		public FMaterialInstanceBasePropertyOverrides BasePropertyOverrides => ReadStruct<FMaterialInstanceBasePropertyOverrides>(0xE4);
		
	}


	/// <summary>
	/// UMaterialInstanceConstant:UMaterialInstance
	/// Size: 0x1C8
	/// Properties: 0
	/// </summary>
	public class UMaterialInstanceConstant:UMaterialInstance
	{
		public override int ObjectSize => 456;
	}


	/// <summary>
	/// ULandscapeMaterialInstanceConstant:UMaterialInstanceConstant
	/// Size: 0x1D0
	/// Properties: 1
	/// </summary>
	public class ULandscapeMaterialInstanceConstant:UMaterialInstanceConstant
	{
		public override int ObjectSize => 464;
		/// <summary>
		/// Name: bIsLayerThumbnail
		/// Type: BoolProperty
		/// Offset: 0x1C8
		/// Size: 0x01
		/// </summary>
		public bool bIsLayerThumbnail => (ReadByte(0x01C8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// ALandscapeMeshProxyActor:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class ALandscapeMeshProxyActor:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: LandscapeMeshProxyComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public ULandscapeMeshProxyComponent LandscapeMeshProxyComponent => ReadUObject<ULandscapeMeshProxyComponent>(0x3D0);
		
	}


	/// <summary>
	/// ULandscapeMeshProxyComponent:UStaticMeshComponent
	/// Size: 0x710
	/// Properties: 3
	/// </summary>
	public class ULandscapeMeshProxyComponent:UStaticMeshComponent
	{
		public override int ObjectSize => 1808;
		/// <summary>
		/// Name: LandscapeGuid
		/// Type: StructProperty
		/// Offset: 0x6E0
		/// Size: 0x10
		/// </summary>
		public FGuid LandscapeGuid => ReadStruct<FGuid>(0x6E0);
		
		/// <summary>
		/// Name: ProxyComponentBases
		/// Type: TArray<FIntPoint>
		/// Offset: 0x6F0
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FIntPoint> ProxyComponentBases => new TArray<FIntPoint>(BaseAddress+0x6F0);
		
		/// <summary>
		/// Name: ProxyLOD
		/// Type: Int8Property
		/// Offset: 0x700
		/// Size: 0x01
		/// </summary>
		
	}


	/// <summary>
	/// ALandscapeProxy:AActor
	/// Size: 0x780
	/// Properties: 36
	/// </summary>
	public class ALandscapeProxy:AActor
	{
		public override int ObjectSize => 1920;
		/// <summary>
		/// Name: SplineComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public ULandscapeSplinesComponent SplineComponent => ReadUObject<ULandscapeSplinesComponent>(0x3D0);
		
		/// <summary>
		/// Name: LandscapeGuid
		/// Type: StructProperty
		/// Offset: 0x3D8
		/// Size: 0x10
		/// </summary>
		public FGuid LandscapeGuid => ReadStruct<FGuid>(0x3D8);
		
		/// <summary>
		/// Name: LandscapeSectionOffset
		/// Type: StructProperty
		/// Offset: 0x3E8
		/// Size: 0x08
		/// </summary>
		public FIntPoint LandscapeSectionOffset => ReadStruct<FIntPoint>(0x3E8);
		
		/// <summary>
		/// Name: MaxLODLevel
		/// Type: IntProperty
		/// Offset: 0x3F0
		/// Size: 0x04
		/// </summary>
		public int MaxLODLevel
		{
			get
			{
				return ReadInt32(0x3F0);
			}
			set
			{
				WriteInt32(0x3F0,value);
			}
		}
		
		/// <summary>
		/// Name: LODDistanceFactor
		/// Type: FloatProperty
		/// Offset: 0x3F4
		/// Size: 0x04
		/// </summary>
		public float LODDistanceFactor
		{
			get
			{
				return ReadSingle(0x3F4);
			}
			set
			{
				WriteSingle(0x3F4,value);
			}
		}
		
		/// <summary>
		/// Name: LODFalloff
		/// Type: ByteProperty
		/// Offset: 0x3F8
		/// Size: 0x01
		/// </summary>
		public byte LODFalloff
		{
			get
			{
				return ReadByte(0x3F8);
			}
			set
			{
				WriteByte(0x3F8,value);
			}
		}
		
		/// <summary>
		/// Name: StaticLightingLOD
		/// Type: IntProperty
		/// Offset: 0x3FC
		/// Size: 0x04
		/// </summary>
		public int StaticLightingLOD
		{
			get
			{
				return ReadInt32(0x3FC);
			}
			set
			{
				WriteInt32(0x3FC,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultPhysMaterial
		/// Type: ObjectProperty
		/// Offset: 0x400
		/// Size: 0x08
		/// </summary>
		public UPhysicalMaterial DefaultPhysMaterial => ReadUObject<UPhysicalMaterial>(0x400);
		
		/// <summary>
		/// Name: StreamingDistanceMultiplier
		/// Type: FloatProperty
		/// Offset: 0x408
		/// Size: 0x04
		/// </summary>
		public float StreamingDistanceMultiplier
		{
			get
			{
				return ReadSingle(0x408);
			}
			set
			{
				WriteSingle(0x408,value);
			}
		}
		
		/// <summary>
		/// Name: LandscapeMaterial
		/// Type: ObjectProperty
		/// Offset: 0x410
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface LandscapeMaterial => ReadUObject<UMaterialInterface>(0x410);
		
		/// <summary>
		/// Name: LandscapeHoleMaterial
		/// Type: ObjectProperty
		/// Offset: 0x418
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface LandscapeHoleMaterial => ReadUObject<UMaterialInterface>(0x418);
		
		/// <summary>
		/// Name: NegativeZBoundsExtension
		/// Type: FloatProperty
		/// Offset: 0x420
		/// Size: 0x04
		/// </summary>
		public float NegativeZBoundsExtension
		{
			get
			{
				return ReadSingle(0x420);
			}
			set
			{
				WriteSingle(0x420,value);
			}
		}
		
		/// <summary>
		/// Name: PositiveZBoundsExtension
		/// Type: FloatProperty
		/// Offset: 0x424
		/// Size: 0x04
		/// </summary>
		public float PositiveZBoundsExtension
		{
			get
			{
				return ReadSingle(0x424);
			}
			set
			{
				WriteSingle(0x424,value);
			}
		}
		
		/// <summary>
		/// Name: LandscapeComponents
		/// Type: TArray<ULandscapeComponent>
		/// Offset: 0x428
		/// Size: 0x10
		/// SubElement Size: 0x710
		/// </summary>
		public TArray<ULandscapeComponent> LandscapeComponents => new TArray<ULandscapeComponent>(BaseAddress+0x428);
		
		/// <summary>
		/// Name: CollisionComponents
		/// Type: TArray<ULandscapeHeightfieldCollisionComponent>
		/// Offset: 0x438
		/// Size: 0x10
		/// SubElement Size: 0x680
		/// </summary>
		public TArray<ULandscapeHeightfieldCollisionComponent> CollisionComponents => new TArray<ULandscapeHeightfieldCollisionComponent>(BaseAddress+0x438);
		
		/// <summary>
		/// Name: FoliageComponents
		/// Type: TArray<UHierarchicalInstancedStaticMeshComponent>
		/// Offset: 0x448
		/// Size: 0x10
		/// SubElement Size: 0x8C0
		/// </summary>
		public TArray<UHierarchicalInstancedStaticMeshComponent> FoliageComponents => new TArray<UHierarchicalInstancedStaticMeshComponent>(BaseAddress+0x448);
		
		/// <summary>
		/// Name: bHasLandscapeGrass
		/// Type: BoolProperty
		/// Offset: 0x4B8
		/// Size: 0x01
		/// </summary>
		public bool bHasLandscapeGrass
		{
			get
			{
				return ReadBool(0x4B8);
			}
			set
			{
				WriteBool(0x4B8,value);
			}
		}
		
		/// <summary>
		/// Name: StaticLightingResolution
		/// Type: FloatProperty
		/// Offset: 0x4BC
		/// Size: 0x04
		/// </summary>
		public float StaticLightingResolution
		{
			get
			{
				return ReadSingle(0x4BC);
			}
			set
			{
				WriteSingle(0x4BC,value);
			}
		}
		
		/// <summary>
		/// Name: LandscapeActor
		/// Type: LazyObjectProperty
		/// Offset: 0x4C0
		/// Size: 0x1C
		/// </summary>
		
		/// <summary>
		/// Name: bCastStaticShadow
		/// Type: BoolProperty
		/// Offset: 0x4DC
		/// Size: 0x01
		/// </summary>
		public bool bCastStaticShadow => (ReadByte(0x04DC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bCastShadowAsTwoSided
		/// Type: BoolProperty
		/// Offset: 0x4DC
		/// Size: 0x01
		/// </summary>
		public bool bCastShadowAsTwoSided => (ReadByte(0x04DC) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bCastFarShadow
		/// Type: BoolProperty
		/// Offset: 0x4DC
		/// Size: 0x01
		/// </summary>
		public bool bCastFarShadow => (ReadByte(0x04DC) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bUseMaterialPositionOffsetInStaticLighting
		/// Type: BoolProperty
		/// Offset: 0x4DC
		/// Size: 0x01
		/// </summary>
		public bool bUseMaterialPositionOffsetInStaticLighting => (ReadByte(0x04DC) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bIsProxy
		/// Type: BoolProperty
		/// Offset: 0x4DC
		/// Size: 0x01
		/// </summary>
		public bool bIsProxy => (ReadByte(0x04DC) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: LightmassSettings
		/// Type: StructProperty
		/// Offset: 0x4E0
		/// Size: 0x18
		/// </summary>
		public FLightmassPrimitiveSettings LightmassSettings => ReadStruct<FLightmassPrimitiveSettings>(0x4E0);
		
		/// <summary>
		/// Name: CollisionMipLevel
		/// Type: IntProperty
		/// Offset: 0x4F8
		/// Size: 0x04
		/// </summary>
		public int CollisionMipLevel
		{
			get
			{
				return ReadInt32(0x4F8);
			}
			set
			{
				WriteInt32(0x4F8,value);
			}
		}
		
		/// <summary>
		/// Name: SimpleCollisionMipLevel
		/// Type: IntProperty
		/// Offset: 0x4FC
		/// Size: 0x04
		/// </summary>
		public int SimpleCollisionMipLevel
		{
			get
			{
				return ReadInt32(0x4FC);
			}
			set
			{
				WriteInt32(0x4FC,value);
			}
		}
		
		/// <summary>
		/// Name: CollisionThickness
		/// Type: FloatProperty
		/// Offset: 0x500
		/// Size: 0x04
		/// </summary>
		public float CollisionThickness
		{
			get
			{
				return ReadSingle(0x500);
			}
			set
			{
				WriteSingle(0x500,value);
			}
		}
		
		/// <summary>
		/// Name: BodyInstance
		/// Type: StructProperty
		/// Offset: 0x510
		/// Size: 0x1B0
		/// </summary>
		public FBodyInstance BodyInstance => ReadStruct<FBodyInstance>(0x510);
		
		/// <summary>
		/// Name: bBakeMaterialPositionOffsetIntoCollision
		/// Type: BoolProperty
		/// Offset: 0x6C0
		/// Size: 0x01
		/// </summary>
		public bool bBakeMaterialPositionOffsetIntoCollision => (ReadByte(0x06C0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ComponentSizeQuads
		/// Type: IntProperty
		/// Offset: 0x6C4
		/// Size: 0x04
		/// </summary>
		public int ComponentSizeQuads
		{
			get
			{
				return ReadInt32(0x6C4);
			}
			set
			{
				WriteInt32(0x6C4,value);
			}
		}
		
		/// <summary>
		/// Name: SubsectionSizeQuads
		/// Type: IntProperty
		/// Offset: 0x6C8
		/// Size: 0x04
		/// </summary>
		public int SubsectionSizeQuads
		{
			get
			{
				return ReadInt32(0x6C8);
			}
			set
			{
				WriteInt32(0x6C8,value);
			}
		}
		
		/// <summary>
		/// Name: NumSubsections
		/// Type: IntProperty
		/// Offset: 0x6CC
		/// Size: 0x04
		/// </summary>
		public int NumSubsections
		{
			get
			{
				return ReadInt32(0x6CC);
			}
			set
			{
				WriteInt32(0x6CC,value);
			}
		}
		
		/// <summary>
		/// Name: bUsedForNavigation
		/// Type: BoolProperty
		/// Offset: 0x6D0
		/// Size: 0x01
		/// </summary>
		public bool bUsedForNavigation => (ReadByte(0x06D0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: NavigationGeometryGatheringMode
		/// Type: ByteProperty
		/// Offset: 0x6D4
		/// Size: 0x01
		/// </summary>
		public byte NavigationGeometryGatheringMode
		{
			get
			{
				return ReadByte(0x6D4);
			}
			set
			{
				WriteByte(0x6D4,value);
			}
		}
		
		/// <summary>
		/// Name: bUseLandscapeForCullingInvisibleHLODVertices
		/// Type: BoolProperty
		/// Offset: 0x6D5
		/// Size: 0x01
		/// </summary>
		public bool bUseLandscapeForCullingInvisibleHLODVertices
		{
			get
			{
				return ReadBool(0x6D5);
			}
			set
			{
				WriteBool(0x6D5,value);
			}
		}
		
	}


	/// <summary>
	/// ALandscape:ALandscapeProxy
	/// Size: 0x780
	/// Properties: 0
	/// </summary>
	public class ALandscape:ALandscapeProxy
	{
		public override int ObjectSize => 1920;
	}


	/// <summary>
	/// ULandscapeSplinesComponent:UPrimitiveComponent
	/// Size: 0x5D0
	/// Properties: 3
	/// </summary>
	public class ULandscapeSplinesComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1488;
		/// <summary>
		/// Name: ControlPoints
		/// Type: TArray<ULandscapeSplineControlPoint>
		/// Offset: 0x5A0
		/// Size: 0x10
		/// SubElement Size: 0x98
		/// </summary>
		public TArray<ULandscapeSplineControlPoint> ControlPoints => new TArray<ULandscapeSplineControlPoint>(BaseAddress+0x5A0);
		
		/// <summary>
		/// Name: Segments
		/// Type: TArray<ULandscapeSplineSegment>
		/// Offset: 0x5B0
		/// Size: 0x10
		/// SubElement Size: 0xB0
		/// </summary>
		public TArray<ULandscapeSplineSegment> Segments => new TArray<ULandscapeSplineSegment>(BaseAddress+0x5B0);
		
		/// <summary>
		/// Name: CookedForeignMeshComponents
		/// Type: TArray<UMeshComponent>
		/// Offset: 0x5C0
		/// Size: 0x10
		/// SubElement Size: 0x660
		/// </summary>
		public TArray<UMeshComponent> CookedForeignMeshComponents => new TArray<UMeshComponent>(BaseAddress+0x5C0);
		
	}


	/// <summary>
	/// ULandscapeSplineSegment:UObject
	/// Size: 0xB0
	/// Properties: 5
	/// </summary>
	public class ULandscapeSplineSegment:UObject
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: Connections
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x18
		/// </summary>
		public FLandscapeSplineSegmentConnection Connections => ReadStruct<FLandscapeSplineSegmentConnection>(0x28);
		
		/// <summary>
		/// Name: SplineInfo
		/// Type: StructProperty
		/// Offset: 0x58
		/// Size: 0x18
		/// </summary>
		public FInterpCurveVector SplineInfo => ReadStruct<FInterpCurveVector>(0x58);
		
		/// <summary>
		/// Name: Points
		/// Type: TArray<FLandscapeSplineInterpPoint>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FLandscapeSplineInterpPoint> Points => new TArray<FLandscapeSplineInterpPoint>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: Bounds
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x1C
		/// </summary>
		public FBox Bounds => ReadStruct<FBox>(0x80);
		
		/// <summary>
		/// Name: LocalMeshComponents
		/// Type: TArray<USplineMeshComponent>
		/// Offset: 0xA0
		/// Size: 0x10
		/// SubElement Size: 0x780
		/// </summary>
		public TArray<USplineMeshComponent> LocalMeshComponents => new TArray<USplineMeshComponent>(BaseAddress+0xA0);
		
	}


	/// <summary>
	/// ULandscapeSplineControlPoint:UObject
	/// Size: 0x98
	/// Properties: 9
	/// </summary>
	public class ULandscapeSplineControlPoint:UObject
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x0C
		/// </summary>
		public FVector Location => ReadStruct<FVector>(0x28);
		
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x34
		/// Size: 0x0C
		/// </summary>
		public FRotator Rotation => ReadStruct<FRotator>(0x34);
		
		/// <summary>
		/// Name: Width
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float Width
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: SideFalloff
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float SideFalloff
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: EndFalloff
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float EndFalloff
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: ConnectedSegments
		/// Type: TArray<FLandscapeSplineConnection>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FLandscapeSplineConnection> ConnectedSegments => new TArray<FLandscapeSplineConnection>(BaseAddress+0x50);
		
		/// <summary>
		/// Name: Points
		/// Type: TArray<FLandscapeSplineInterpPoint>
		/// Offset: 0x60
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FLandscapeSplineInterpPoint> Points => new TArray<FLandscapeSplineInterpPoint>(BaseAddress+0x60);
		
		/// <summary>
		/// Name: Bounds
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x1C
		/// </summary>
		public FBox Bounds => ReadStruct<FBox>(0x70);
		
		/// <summary>
		/// Name: LocalMeshComponent
		/// Type: ObjectProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		public UControlPointMeshComponent LocalMeshComponent => ReadUObject<UControlPointMeshComponent>(0x90);
		
	}


	/// <summary>
	/// UMaterialExpression:UObject
	/// Size: 0x70
	/// Properties: 16
	/// </summary>
	public class UMaterialExpression:UObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: Material
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UMaterial Material => ReadUObject<UMaterial>(0x28);
		
		/// <summary>
		/// Name: Function
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UMaterialFunction Function => ReadUObject<UMaterialFunction>(0x30);
		
		/// <summary>
		/// Name: Desc
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString Desc => new FString(BaseAddress+0x38);
		
		/// <summary>
		/// Name: BorderColor
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public FColor BorderColor => ReadStruct<FColor>(0x48);
		
		/// <summary>
		/// Name: bRealtimePreview
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bRealtimePreview => (ReadByte(0x004C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bNeedToUpdatePreview
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bNeedToUpdatePreview => (ReadByte(0x004C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bIsParameterExpression
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bIsParameterExpression => (ReadByte(0x004C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bCommentBubbleVisible
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bCommentBubbleVisible => (ReadByte(0x004C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bShowOutputNameOnPin
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bShowOutputNameOnPin => (ReadByte(0x004C) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bHidePreviewWindow
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bHidePreviewWindow => (ReadByte(0x004C) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bCollapsed
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bCollapsed => (ReadByte(0x004C) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bShaderInputData
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bShaderInputData => (ReadByte(0x004C) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bShowInputs
		/// Type: BoolProperty
		/// Offset: 0x4D
		/// Size: 0x01
		/// </summary>
		public bool bShowInputs => (ReadByte(0x004D) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bShowOutputs
		/// Type: BoolProperty
		/// Offset: 0x4D
		/// Size: 0x01
		/// </summary>
		public bool bShowOutputs => (ReadByte(0x004D) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: MenuCategories
		/// Type: TArray<>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Outputs
		/// Type: TArray<FExpressionOutput>
		/// Offset: 0x60
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FExpressionOutput> Outputs => new TArray<FExpressionOutput>(BaseAddress+0x60);
		
	}


	/// <summary>
	/// UMaterialExpressionCustomOutput:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionCustomOutput:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionLandscapeGrassOutput:UMaterialExpressionCustomOutput
	/// Size: 0x80
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionLandscapeGrassOutput:UMaterialExpressionCustomOutput
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: GrassTypes
		/// Type: TArray<FGrassInput>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x48
		/// </summary>
		public TArray<FGrassInput> GrassTypes => new TArray<FGrassInput>(BaseAddress+0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionLandscapeLayerBlend:UMaterialExpression
	/// Size: 0x90
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionLandscapeLayerBlend:UMaterialExpression
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: Layers
		/// Type: TArray<FLayerBlendInput>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x98
		/// </summary>
		public TArray<FLayerBlendInput> Layers => new TArray<FLayerBlendInput>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: ExpressionGUID
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FGuid ExpressionGUID => ReadStruct<FGuid>(0x80);
		
	}


	/// <summary>
	/// UMaterialExpressionLandscapeLayerCoords:UMaterialExpression
	/// Size: 0x88
	/// Properties: 6
	/// </summary>
	public class UMaterialExpressionLandscapeLayerCoords:UMaterialExpression
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: MappingType
		/// Type: ByteProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public byte MappingType
		{
			get
			{
				return ReadByte(0x70);
			}
			set
			{
				WriteByte(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: CustomUVType
		/// Type: ByteProperty
		/// Offset: 0x71
		/// Size: 0x01
		/// </summary>
		public byte CustomUVType
		{
			get
			{
				return ReadByte(0x71);
			}
			set
			{
				WriteByte(0x71,value);
			}
		}
		
		/// <summary>
		/// Name: MappingScale
		/// Type: FloatProperty
		/// Offset: 0x74
		/// Size: 0x04
		/// </summary>
		public float MappingScale
		{
			get
			{
				return ReadSingle(0x74);
			}
			set
			{
				WriteSingle(0x74,value);
			}
		}
		
		/// <summary>
		/// Name: MappingRotation
		/// Type: FloatProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public float MappingRotation
		{
			get
			{
				return ReadSingle(0x78);
			}
			set
			{
				WriteSingle(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: MappingPanU
		/// Type: FloatProperty
		/// Offset: 0x7C
		/// Size: 0x04
		/// </summary>
		public float MappingPanU
		{
			get
			{
				return ReadSingle(0x7C);
			}
			set
			{
				WriteSingle(0x7C,value);
			}
		}
		
		/// <summary>
		/// Name: MappingPanV
		/// Type: FloatProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public float MappingPanV
		{
			get
			{
				return ReadSingle(0x80);
			}
			set
			{
				WriteSingle(0x80,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionLandscapeLayerSample:UMaterialExpression
	/// Size: 0x90
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionLandscapeLayerSample:UMaterialExpression
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PreviewWeight
		/// Type: FloatProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public float PreviewWeight
		{
			get
			{
				return ReadSingle(0x78);
			}
			set
			{
				WriteSingle(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: ExpressionGUID
		/// Type: StructProperty
		/// Offset: 0x7C
		/// Size: 0x10
		/// </summary>
		public FGuid ExpressionGUID => ReadStruct<FGuid>(0x7C);
		
	}


	/// <summary>
	/// UMaterialExpressionLandscapeLayerSwitch:UMaterialExpression
	/// Size: 0x100
	/// Properties: 5
	/// </summary>
	public class UMaterialExpressionLandscapeLayerSwitch:UMaterialExpression
	{
		public override int ObjectSize => 256;
		/// <summary>
		/// Name: LayerUsed
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput LayerUsed => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: LayerNotUsed
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput LayerNotUsed => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0xE0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PreviewUsed
		/// Type: BoolProperty
		/// Offset: 0xE8
		/// Size: 0x01
		/// </summary>
		public bool PreviewUsed => (ReadByte(0x00E8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ExpressionGUID
		/// Type: StructProperty
		/// Offset: 0xEC
		/// Size: 0x10
		/// </summary>
		public FGuid ExpressionGUID => ReadStruct<FGuid>(0xEC);
		
	}


	/// <summary>
	/// UMaterialExpressionLandscapeLayerWeight:UMaterialExpression
	/// Size: 0x108
	/// Properties: 6
	/// </summary>
	public class UMaterialExpressionLandscapeLayerWeight:UMaterialExpression
	{
		public override int ObjectSize => 264;
		/// <summary>
		/// Name: Base
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Base => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: Layer
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Layer => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0xE0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PreviewWeight
		/// Type: FloatProperty
		/// Offset: 0xE8
		/// Size: 0x04
		/// </summary>
		public float PreviewWeight
		{
			get
			{
				return ReadSingle(0xE8);
			}
			set
			{
				WriteSingle(0xE8,value);
			}
		}
		
		/// <summary>
		/// Name: ConstBase
		/// Type: StructProperty
		/// Offset: 0xEC
		/// Size: 0x0C
		/// </summary>
		public FVector ConstBase => ReadStruct<FVector>(0xEC);
		
		/// <summary>
		/// Name: ExpressionGUID
		/// Type: StructProperty
		/// Offset: 0xF8
		/// Size: 0x10
		/// </summary>
		public FGuid ExpressionGUID => ReadStruct<FGuid>(0xF8);
		
	}


	/// <summary>
	/// UMaterialExpressionLandscapeVisibilityMask:UMaterialExpression
	/// Size: 0x80
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionLandscapeVisibilityMask:UMaterialExpression
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: ExpressionGUID
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FGuid ExpressionGUID => ReadStruct<FGuid>(0x70);
		
	}


	/// <summary>
	/// UMovieScene:UObject
	/// Size: 0xA8
	/// Properties: 13
	/// </summary>
	public class UMovieScene:UObject
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Spawnables
		/// Type: TArray<FMovieSceneSpawnable>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FMovieSceneSpawnable> Spawnables => new TArray<FMovieSceneSpawnable>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: Possessables
		/// Type: TArray<FMovieScenePossessable>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FMovieScenePossessable> Possessables => new TArray<FMovieScenePossessable>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: ObjectBindings
		/// Type: TArray<FMovieSceneBinding>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FMovieSceneBinding> ObjectBindings => new TArray<FMovieSceneBinding>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: MasterTracks
		/// Type: TArray<UMovieSceneTrack>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UMovieSceneTrack> MasterTracks => new TArray<UMovieSceneTrack>(BaseAddress+0x58);
		
		/// <summary>
		/// Name: CameraCutTrack
		/// Type: ObjectProperty
		/// Offset: 0x68
		/// Size: 0x08
		/// </summary>
		public UMovieSceneTrack CameraCutTrack => ReadUObject<UMovieSceneTrack>(0x68);
		
		/// <summary>
		/// Name: SelectionRange
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FFloatRange SelectionRange => ReadStruct<FFloatRange>(0x70);
		
		/// <summary>
		/// Name: PlaybackRange
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FFloatRange PlaybackRange => ReadStruct<FFloatRange>(0x80);
		
		/// <summary>
		/// Name: bForceFixedFrameIntervalPlayback
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool bForceFixedFrameIntervalPlayback
		{
			get
			{
				return ReadBool(0x90);
			}
			set
			{
				WriteBool(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: FixedFrameInterval
		/// Type: FloatProperty
		/// Offset: 0x94
		/// Size: 0x04
		/// </summary>
		public float FixedFrameInterval
		{
			get
			{
				return ReadSingle(0x94);
			}
			set
			{
				WriteSingle(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: InTime
		/// Type: FloatProperty
		/// Offset: 0x98
		/// Size: 0x04
		/// </summary>
		public float InTime
		{
			get
			{
				return ReadSingle(0x98);
			}
			set
			{
				WriteSingle(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: OutTime
		/// Type: FloatProperty
		/// Offset: 0x9C
		/// Size: 0x04
		/// </summary>
		public float OutTime
		{
			get
			{
				return ReadSingle(0x9C);
			}
			set
			{
				WriteSingle(0x9C,value);
			}
		}
		
		/// <summary>
		/// Name: StartTime
		/// Type: FloatProperty
		/// Offset: 0xA0
		/// Size: 0x04
		/// </summary>
		public float StartTime
		{
			get
			{
				return ReadSingle(0xA0);
			}
			set
			{
				WriteSingle(0xA0,value);
			}
		}
		
		/// <summary>
		/// Name: EndTime
		/// Type: FloatProperty
		/// Offset: 0xA4
		/// Size: 0x04
		/// </summary>
		public float EndTime
		{
			get
			{
				return ReadSingle(0xA4);
			}
			set
			{
				WriteSingle(0xA4,value);
			}
		}
		
	}


	/// <summary>
	/// UMovieSceneFolder:UObject
	/// Size: 0x70
	/// Properties: 4
	/// </summary>
	public class UMovieSceneFolder:UObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: FolderName
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ChildFolders
		/// Type: TArray<UMovieSceneFolder>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x70
		/// </summary>
		public TArray<UMovieSceneFolder> ChildFolders => new TArray<UMovieSceneFolder>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: ChildMasterTracks
		/// Type: TArray<UMovieSceneTrack>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UMovieSceneTrack> ChildMasterTracks => new TArray<UMovieSceneTrack>(BaseAddress+0x40);
		
		/// <summary>
		/// Name: ChildObjectBindingStrings
		/// Type: TArray<>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// UMovieSceneSection:UObject
	/// Size: 0x40
	/// Properties: 7
	/// </summary>
	public class UMovieSceneSection:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: StartTime
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float StartTime
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: EndTime
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float EndTime
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: RowIndex
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int RowIndex
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: OverlapPriority
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int OverlapPriority
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: bIsActive
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bIsActive => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bIsLocked
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bIsLocked => (ReadByte(0x0038) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bIsInfinite
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bIsInfinite => (ReadByte(0x0038) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// UMovieSceneSequence:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UMovieSceneSequence:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UMovieSceneTrack:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UMovieSceneTrack:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UMovieSceneNameableTrack:UMovieSceneTrack
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UMovieSceneNameableTrack:UMovieSceneTrack
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UMovieScene3DConstraintSection:UMovieSceneSection
	/// Size: 0x50
	/// Properties: 1
	/// </summary>
	public class UMovieScene3DConstraintSection:UMovieSceneSection
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: ConstraintId
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FGuid ConstraintId => ReadStruct<FGuid>(0x40);
		
	}


	/// <summary>
	/// UMovieScene3DAttachSection:UMovieScene3DConstraintSection
	/// Size: 0x68
	/// Properties: 8
	/// </summary>
	public class UMovieScene3DAttachSection:UMovieScene3DConstraintSection
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: AttachSocketName
		/// Type: NameProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AttachComponentName
		/// Type: NameProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bConstrainTx
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bConstrainTx => (ReadByte(0x0060) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bConstrainTy
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bConstrainTy => (ReadByte(0x0060) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bConstrainTz
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bConstrainTz => (ReadByte(0x0060) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bConstrainRx
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bConstrainRx => (ReadByte(0x0060) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bConstrainRy
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bConstrainRy => (ReadByte(0x0060) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bConstrainRz
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bConstrainRz => (ReadByte(0x0060) & 0x20) == 0x20;
		
	}


	/// <summary>
	/// UMovieScene3DPathSection:UMovieScene3DConstraintSection
	/// Size: 0xD0
	/// Properties: 6
	/// </summary>
	public class UMovieScene3DPathSection:UMovieScene3DConstraintSection
	{
		public override int ObjectSize => 208;
		/// <summary>
		/// Name: TimingCurve
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x78
		/// </summary>
		public FRichCurve TimingCurve => ReadStruct<FRichCurve>(0x50);
		
		/// <summary>
		/// Name: FrontAxisEnum
		/// Type: ByteProperty
		/// Offset: 0xC8
		/// Size: 0x01
		/// </summary>
		public byte FrontAxisEnum
		{
			get
			{
				return ReadByte(0xC8);
			}
			set
			{
				WriteByte(0xC8,value);
			}
		}
		
		/// <summary>
		/// Name: UpAxisEnum
		/// Type: ByteProperty
		/// Offset: 0xC9
		/// Size: 0x01
		/// </summary>
		public byte UpAxisEnum
		{
			get
			{
				return ReadByte(0xC9);
			}
			set
			{
				WriteByte(0xC9,value);
			}
		}
		
		/// <summary>
		/// Name: bFollow
		/// Type: BoolProperty
		/// Offset: 0xCC
		/// Size: 0x01
		/// </summary>
		public bool bFollow => (ReadByte(0x00CC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bReverse
		/// Type: BoolProperty
		/// Offset: 0xCC
		/// Size: 0x01
		/// </summary>
		public bool bReverse => (ReadByte(0x00CC) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bForceUpright
		/// Type: BoolProperty
		/// Offset: 0xCC
		/// Size: 0x01
		/// </summary>
		public bool bForceUpright => (ReadByte(0x00CC) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// UMovieScene3DConstraintTrack:UMovieSceneTrack
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UMovieScene3DConstraintTrack:UMovieSceneTrack
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: ConstraintSections
		/// Type: TArray<UMovieSceneSection>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UMovieSceneSection> ConstraintSections => new TArray<UMovieSceneSection>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UMovieScene3DAttachTrack:UMovieScene3DConstraintTrack
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class UMovieScene3DAttachTrack:UMovieScene3DConstraintTrack
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UMovieScene3DPathTrack:UMovieScene3DConstraintTrack
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class UMovieScene3DPathTrack:UMovieScene3DConstraintTrack
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UMovieScene3DTransformSection:UMovieSceneSection
	/// Size: 0x480
	/// Properties: 3
	/// </summary>
	public class UMovieScene3DTransformSection:UMovieSceneSection
	{
		public override int ObjectSize => 1152;
		/// <summary>
		/// Name: Translation
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x78
		/// </summary>
		public FRichCurve Translation => ReadStruct<FRichCurve>(0x48);
		
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x1B0
		/// Size: 0x78
		/// </summary>
		public FRichCurve Rotation => ReadStruct<FRichCurve>(0x1B0);
		
		/// <summary>
		/// Name: Scale
		/// Type: StructProperty
		/// Offset: 0x318
		/// Size: 0x78
		/// </summary>
		public FRichCurve Scale => ReadStruct<FRichCurve>(0x318);
		
	}


	/// <summary>
	/// UMovieSceneActorReferenceSection:UMovieSceneSection
	/// Size: 0xD8
	/// Properties: 2
	/// </summary>
	public class UMovieSceneActorReferenceSection:UMovieSceneSection
	{
		public override int ObjectSize => 216;
		/// <summary>
		/// Name: ActorGuidIndexCurve
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x70
		/// </summary>
		public FIntegralCurve ActorGuidIndexCurve => ReadStruct<FIntegralCurve>(0x48);
		
		/// <summary>
		/// Name: ActorGuidStrings
		/// Type: TArray<>
		/// Offset: 0xC8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// UMovieSceneAudioSection:UMovieSceneSection
	/// Size: 0x58
	/// Properties: 4
	/// </summary>
	public class UMovieSceneAudioSection:UMovieSceneSection
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: Sound
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public USoundBase Sound => ReadUObject<USoundBase>(0x40);
		
		/// <summary>
		/// Name: AudioStartTime
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float AudioStartTime
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: AudioDilationFactor
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float AudioDilationFactor
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: AudioVolume
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float AudioVolume
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
	}


	/// <summary>
	/// UMovieSceneAudioTrack:UMovieSceneNameableTrack
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UMovieSceneAudioTrack:UMovieSceneNameableTrack
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: AudioSections
		/// Type: TArray<UMovieSceneSection>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UMovieSceneSection> AudioSections => new TArray<UMovieSceneSection>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UMovieSceneBoolSection:UMovieSceneSection
	/// Size: 0xC0
	/// Properties: 2
	/// </summary>
	public class UMovieSceneBoolSection:UMovieSceneSection
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: DefaultValue
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool DefaultValue
		{
			get
			{
				return ReadBool(0x48);
			}
			set
			{
				WriteBool(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: BoolCurve
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x70
		/// </summary>
		public FIntegralCurve BoolCurve => ReadStruct<FIntegralCurve>(0x50);
		
	}


	/// <summary>
	/// UMovieSceneVisibilitySection:UMovieSceneBoolSection
	/// Size: 0xC0
	/// Properties: 0
	/// </summary>
	public class UMovieSceneVisibilitySection:UMovieSceneBoolSection
	{
		public override int ObjectSize => 192;
	}


	/// <summary>
	/// UMovieSceneByteSection:UMovieSceneSection
	/// Size: 0xB8
	/// Properties: 1
	/// </summary>
	public class UMovieSceneByteSection:UMovieSceneSection
	{
		public override int ObjectSize => 184;
		/// <summary>
		/// Name: ByteCurve
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x70
		/// </summary>
		public FIntegralCurve ByteCurve => ReadStruct<FIntegralCurve>(0x48);
		
	}


	/// <summary>
	/// UMovieSceneCameraAnimSection:UMovieSceneSection
	/// Size: 0x68
	/// Properties: 8
	/// </summary>
	public class UMovieSceneCameraAnimSection:UMovieSceneSection
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: CameraAnim
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UCameraAnim CameraAnim => ReadUObject<UCameraAnim>(0x40);
		
		/// <summary>
		/// Name: PlayRate
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float PlayRate
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: PlayScale
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float PlayScale
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: BlendInTime
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float BlendInTime
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: BlendOutTime
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float BlendOutTime
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: bLooping
		/// Type: BoolProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public bool bLooping
		{
			get
			{
				return ReadBool(0x58);
			}
			set
			{
				WriteBool(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: PlaySpace
		/// Type: ByteProperty
		/// Offset: 0x5A
		/// Size: 0x01
		/// </summary>
		public byte PlaySpace
		{
			get
			{
				return ReadByte(0x5A);
			}
			set
			{
				WriteByte(0x5A,value);
			}
		}
		
		/// <summary>
		/// Name: UserDefinedPlaySpace
		/// Type: StructProperty
		/// Offset: 0x5C
		/// Size: 0x0C
		/// </summary>
		public FRotator UserDefinedPlaySpace => ReadStruct<FRotator>(0x5C);
		
	}


	/// <summary>
	/// UMovieSceneCameraAnimTrack:UMovieSceneNameableTrack
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UMovieSceneCameraAnimTrack:UMovieSceneNameableTrack
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: CameraAnimSections
		/// Type: TArray<UMovieSceneSection>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UMovieSceneSection> CameraAnimSections => new TArray<UMovieSceneSection>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UMovieSceneCameraCutSection:UMovieSceneSection
	/// Size: 0x50
	/// Properties: 1
	/// </summary>
	public class UMovieSceneCameraCutSection:UMovieSceneSection
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: CameraGuid
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FGuid CameraGuid => ReadStruct<FGuid>(0x40);
		
	}


	/// <summary>
	/// UMovieSceneCameraCutTrack:UMovieSceneNameableTrack
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UMovieSceneCameraCutTrack:UMovieSceneNameableTrack
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Sections
		/// Type: TArray<UMovieSceneSection>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UMovieSceneSection> Sections => new TArray<UMovieSceneSection>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UMovieSceneCameraShakeSection:UMovieSceneSection
	/// Size: 0x60
	/// Properties: 4
	/// </summary>
	public class UMovieSceneCameraShakeSection:UMovieSceneSection
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: ShakeClass
		/// Type: ClassProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PlayScale
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float PlayScale
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: PlaySpace
		/// Type: ByteProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public byte PlaySpace
		{
			get
			{
				return ReadByte(0x4C);
			}
			set
			{
				WriteByte(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: UserDefinedPlaySpace
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x0C
		/// </summary>
		public FRotator UserDefinedPlaySpace => ReadStruct<FRotator>(0x50);
		
	}


	/// <summary>
	/// UMovieSceneCameraShakeTrack:UMovieSceneNameableTrack
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UMovieSceneCameraShakeTrack:UMovieSceneNameableTrack
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: CameraShakeSections
		/// Type: TArray<UMovieSceneSection>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UMovieSceneSection> CameraShakeSections => new TArray<UMovieSceneSection>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UMovieSceneColorSection:UMovieSceneSection
	/// Size: 0x228
	/// Properties: 4
	/// </summary>
	public class UMovieSceneColorSection:UMovieSceneSection
	{
		public override int ObjectSize => 552;
		/// <summary>
		/// Name: RedCurve
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x78
		/// </summary>
		public FRichCurve RedCurve => ReadStruct<FRichCurve>(0x48);
		
		/// <summary>
		/// Name: GreenCurve
		/// Type: StructProperty
		/// Offset: 0xC0
		/// Size: 0x78
		/// </summary>
		public FRichCurve GreenCurve => ReadStruct<FRichCurve>(0xC0);
		
		/// <summary>
		/// Name: BlueCurve
		/// Type: StructProperty
		/// Offset: 0x138
		/// Size: 0x78
		/// </summary>
		public FRichCurve BlueCurve => ReadStruct<FRichCurve>(0x138);
		
		/// <summary>
		/// Name: AlphaCurve
		/// Type: StructProperty
		/// Offset: 0x1B0
		/// Size: 0x78
		/// </summary>
		public FRichCurve AlphaCurve => ReadStruct<FRichCurve>(0x1B0);
		
	}


	/// <summary>
	/// UMovieSceneEventSection:UMovieSceneSection
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMovieSceneEventSection:UMovieSceneSection
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Events
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x68
		/// </summary>
		public FNameCurve Events => ReadStruct<FNameCurve>(0x40);
		
	}


	/// <summary>
	/// UMovieSceneEventTrack:UMovieSceneNameableTrack
	/// Size: 0x40
	/// Properties: 3
	/// </summary>
	public class UMovieSceneEventTrack:UMovieSceneNameableTrack
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: bFireEventsWhenForwards
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bFireEventsWhenForwards => (ReadByte(0x0028) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bFireEventsWhenBackwards
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bFireEventsWhenBackwards => (ReadByte(0x0028) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: Sections
		/// Type: TArray<UMovieSceneSection>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UMovieSceneSection> Sections => new TArray<UMovieSceneSection>(BaseAddress+0x30);
		
	}


	/// <summary>
	/// UMovieSceneFloatSection:UMovieSceneSection
	/// Size: 0xC0
	/// Properties: 1
	/// </summary>
	public class UMovieSceneFloatSection:UMovieSceneSection
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: FloatCurve
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x78
		/// </summary>
		public FRichCurve FloatCurve => ReadStruct<FRichCurve>(0x48);
		
	}


	/// <summary>
	/// UMovieSceneFadeSection:UMovieSceneFloatSection
	/// Size: 0xD8
	/// Properties: 2
	/// </summary>
	public class UMovieSceneFadeSection:UMovieSceneFloatSection
	{
		public override int ObjectSize => 216;
		/// <summary>
		/// Name: FadeColor
		/// Type: StructProperty
		/// Offset: 0xC0
		/// Size: 0x10
		/// </summary>
		public FLinearColor FadeColor => ReadStruct<FLinearColor>(0xC0);
		
		/// <summary>
		/// Name: bFadeAudio
		/// Type: BoolProperty
		/// Offset: 0xD0
		/// Size: 0x01
		/// </summary>
		public bool bFadeAudio => (ReadByte(0x00D0) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UMovieSceneSlomoSection:UMovieSceneFloatSection
	/// Size: 0xC0
	/// Properties: 0
	/// </summary>
	public class UMovieSceneSlomoSection:UMovieSceneFloatSection
	{
		public override int ObjectSize => 192;
	}


	/// <summary>
	/// UMovieSceneLevelVisibilitySection:UMovieSceneSection
	/// Size: 0x58
	/// Properties: 2
	/// </summary>
	public class UMovieSceneLevelVisibilitySection:UMovieSceneSection
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: Visibility
		/// Type: ByteProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public byte Visibility
		{
			get
			{
				return ReadByte(0x40);
			}
			set
			{
				WriteByte(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: LevelNames
		/// Type: TArray<FName>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> LevelNames => new TArray<FName>(BaseAddress+0x48);
		
	}


	/// <summary>
	/// UMovieScenePropertyTrack:UMovieSceneNameableTrack
	/// Size: 0x50
	/// Properties: 3
	/// </summary>
	public class UMovieScenePropertyTrack:UMovieSceneNameableTrack
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: PropertyName
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PropertyPath
		/// Type: StrProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FString PropertyPath => new FString(BaseAddress+0x30);
		
		/// <summary>
		/// Name: Sections
		/// Type: TArray<UMovieSceneSection>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UMovieSceneSection> Sections => new TArray<UMovieSceneSection>(BaseAddress+0x40);
		
	}


	/// <summary>
	/// UMovieSceneLevelVisibilityTrack:UMovieSceneNameableTrack
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UMovieSceneLevelVisibilityTrack:UMovieSceneNameableTrack
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Sections
		/// Type: TArray<UMovieSceneSection>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UMovieSceneSection> Sections => new TArray<UMovieSceneSection>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UMovieSceneParameterSection:UMovieSceneSection
	/// Size: 0x70
	/// Properties: 3
	/// </summary>
	public class UMovieSceneParameterSection:UMovieSceneSection
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: ScalarParameterNamesAndCurves
		/// Type: TArray<FScalarParameterNameAndCurve>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x88
		/// </summary>
		public TArray<FScalarParameterNameAndCurve> ScalarParameterNamesAndCurves => new TArray<FScalarParameterNameAndCurve>(BaseAddress+0x40);
		
		/// <summary>
		/// Name: VectorParameterNamesAndCurves
		/// Type: TArray<FVectorParameterNameAndCurves>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x178
		/// </summary>
		public TArray<FVectorParameterNameAndCurves> VectorParameterNamesAndCurves => new TArray<FVectorParameterNameAndCurves>(BaseAddress+0x50);
		
		/// <summary>
		/// Name: ColorParameterNamesAndCurves
		/// Type: TArray<FColorParameterNameAndCurves>
		/// Offset: 0x60
		/// Size: 0x10
		/// SubElement Size: 0x1F0
		/// </summary>
		public TArray<FColorParameterNameAndCurves> ColorParameterNamesAndCurves => new TArray<FColorParameterNameAndCurves>(BaseAddress+0x60);
		
	}


	/// <summary>
	/// UMovieSceneMaterialTrack:UMovieSceneNameableTrack
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UMovieSceneMaterialTrack:UMovieSceneNameableTrack
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Sections
		/// Type: TArray<UMovieSceneSection>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UMovieSceneSection> Sections => new TArray<UMovieSceneSection>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UMovieSceneComponentMaterialTrack:UMovieSceneMaterialTrack
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class UMovieSceneComponentMaterialTrack:UMovieSceneMaterialTrack
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: MaterialIndex
		/// Type: IntProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public int MaterialIndex
		{
			get
			{
				return ReadInt32(0x38);
			}
			set
			{
				WriteInt32(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// UMovieSceneParticleParameterTrack:UMovieSceneNameableTrack
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UMovieSceneParticleParameterTrack:UMovieSceneNameableTrack
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Sections
		/// Type: TArray<UMovieSceneSection>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UMovieSceneSection> Sections => new TArray<UMovieSceneSection>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UMovieSceneParticleSection:UMovieSceneSection
	/// Size: 0xB0
	/// Properties: 1
	/// </summary>
	public class UMovieSceneParticleSection:UMovieSceneSection
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: ParticleKeys
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x70
		/// </summary>
		public FIntegralCurve ParticleKeys => ReadStruct<FIntegralCurve>(0x40);
		
	}


	/// <summary>
	/// UMovieSceneParticleTrack:UMovieSceneNameableTrack
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UMovieSceneParticleTrack:UMovieSceneNameableTrack
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: ParticleSections
		/// Type: TArray<UMovieSceneSection>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UMovieSceneSection> ParticleSections => new TArray<UMovieSceneSection>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UMovieScene3DTransformTrack:UMovieScenePropertyTrack
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UMovieScene3DTransformTrack:UMovieScenePropertyTrack
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UMovieSceneActorReferenceTrack:UMovieScenePropertyTrack
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UMovieSceneActorReferenceTrack:UMovieScenePropertyTrack
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UMovieSceneBoolTrack:UMovieScenePropertyTrack
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UMovieSceneBoolTrack:UMovieScenePropertyTrack
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UMovieSceneVisibilityTrack:UMovieSceneBoolTrack
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UMovieSceneVisibilityTrack:UMovieSceneBoolTrack
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UMovieSceneByteTrack:UMovieScenePropertyTrack
	/// Size: 0x58
	/// Properties: 1
	/// </summary>
	public class UMovieSceneByteTrack:UMovieScenePropertyTrack
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: Enum
		/// Type: ObjectProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public UEnum Enum => ReadUObject<UEnum>(0x50);
		
	}


	/// <summary>
	/// UMovieSceneColorTrack:UMovieScenePropertyTrack
	/// Size: 0x58
	/// Properties: 1
	/// </summary>
	public class UMovieSceneColorTrack:UMovieScenePropertyTrack
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: bIsSlateColor
		/// Type: BoolProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public bool bIsSlateColor
		{
			get
			{
				return ReadBool(0x50);
			}
			set
			{
				WriteBool(0x50,value);
			}
		}
		
	}


	/// <summary>
	/// UMovieSceneFloatTrack:UMovieScenePropertyTrack
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UMovieSceneFloatTrack:UMovieScenePropertyTrack
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UMovieSceneFadeTrack:UMovieSceneFloatTrack
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UMovieSceneFadeTrack:UMovieSceneFloatTrack
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UMovieSceneSlomoTrack:UMovieSceneFloatTrack
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UMovieSceneSlomoTrack:UMovieSceneFloatTrack
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UMovieSceneVectorTrack:UMovieScenePropertyTrack
	/// Size: 0x58
	/// Properties: 1
	/// </summary>
	public class UMovieSceneVectorTrack:UMovieScenePropertyTrack
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: NumChannelsUsed
		/// Type: IntProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public int NumChannelsUsed
		{
			get
			{
				return ReadInt32(0x50);
			}
			set
			{
				WriteInt32(0x50,value);
			}
		}
		
	}


	/// <summary>
	/// UMovieSceneSkeletalAnimationSection:UMovieSceneSection
	/// Size: 0x60
	/// Properties: 6
	/// </summary>
	public class UMovieSceneSkeletalAnimationSection:UMovieSceneSection
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: AnimSequence
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UAnimSequence AnimSequence => ReadUObject<UAnimSequence>(0x40);
		
		/// <summary>
		/// Name: StartOffset
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float StartOffset
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: EndOffset
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float EndOffset
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: PlayRate
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float PlayRate
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: bReverse
		/// Type: BoolProperty
		/// Offset: 0x54
		/// Size: 0x01
		/// </summary>
		public bool bReverse => (ReadByte(0x0054) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: SlotName
		/// Type: NameProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UMovieSceneSkeletalAnimationTrack:UMovieSceneNameableTrack
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UMovieSceneSkeletalAnimationTrack:UMovieSceneNameableTrack
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: AnimationSections
		/// Type: TArray<UMovieSceneSection>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UMovieSceneSection> AnimationSections => new TArray<UMovieSceneSection>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UMovieSceneSpawnTrack:UMovieSceneTrack
	/// Size: 0x48
	/// Properties: 2
	/// </summary>
	public class UMovieSceneSpawnTrack:UMovieSceneTrack
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: Sections
		/// Type: TArray<UMovieSceneSection>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UMovieSceneSection> Sections => new TArray<UMovieSceneSection>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: ObjectGuid
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FGuid ObjectGuid => ReadStruct<FGuid>(0x38);
		
	}


	/// <summary>
	/// UMovieSceneSubSection:UMovieSceneSection
	/// Size: 0x88
	/// Properties: 7
	/// </summary>
	public class UMovieSceneSubSection:UMovieSceneSection
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: StartOffset
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float StartOffset
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: TimeScale
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float TimeScale
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: PrerollTime
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float PrerollTime
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: SubSequence
		/// Type: ObjectProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public UMovieSceneSequence SubSequence => ReadUObject<UMovieSceneSequence>(0x50);
		
		/// <summary>
		/// Name: NameOfActorToRecord
		/// Type: StrProperty
		/// Offset: 0x58
		/// Size: 0x10
		/// </summary>
		public FString NameOfActorToRecord => new FString(BaseAddress+0x58);
		
		/// <summary>
		/// Name: TargetSequenceName
		/// Type: StrProperty
		/// Offset: 0x68
		/// Size: 0x10
		/// </summary>
		public FString TargetSequenceName => new FString(BaseAddress+0x68);
		
		/// <summary>
		/// Name: TargetPathToRecordTo
		/// Type: StructProperty
		/// Offset: 0x78
		/// Size: 0x10
		/// </summary>
		public FDirectoryPath TargetPathToRecordTo => ReadStruct<FDirectoryPath>(0x78);
		
	}


	/// <summary>
	/// UMovieSceneCinematicShotSection:UMovieSceneSubSection
	/// Size: 0xA0
	/// Properties: 1
	/// </summary>
	public class UMovieSceneCinematicShotSection:UMovieSceneSubSection
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: DisplayName
		/// Type: TextProperty
		/// Offset: 0x88
		/// Size: 0x18
		/// </summary>
		
	}


	/// <summary>
	/// UMovieSceneSubTrack:UMovieSceneNameableTrack
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UMovieSceneSubTrack:UMovieSceneNameableTrack
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Sections
		/// Type: TArray<UMovieSceneSection>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UMovieSceneSection> Sections => new TArray<UMovieSceneSection>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UMovieSceneCinematicShotTrack:UMovieSceneSubTrack
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class UMovieSceneCinematicShotTrack:UMovieSceneSubTrack
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UMovieSceneVectorSection:UMovieSceneSection
	/// Size: 0x230
	/// Properties: 2
	/// </summary>
	public class UMovieSceneVectorSection:UMovieSceneSection
	{
		public override int ObjectSize => 560;
		/// <summary>
		/// Name: Curves
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x78
		/// </summary>
		public FRichCurve Curves => ReadStruct<FRichCurve>(0x48);
		
		/// <summary>
		/// Name: ChannelsUsed
		/// Type: IntProperty
		/// Offset: 0x228
		/// Size: 0x04
		/// </summary>
		public int ChannelsUsed
		{
			get
			{
				return ReadInt32(0x228);
			}
			set
			{
				WriteInt32(0x228,value);
			}
		}
		
	}


	/// <summary>
	/// UAsyncTaskDownloadImage:UBlueprintAsyncActionBase
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class UAsyncTaskDownloadImage:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// UDragDropOperation:UObject
	/// Size: 0x88
	/// Properties: 5
	/// </summary>
	public class UDragDropOperation:UObject
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: Tag
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString Tag => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: Payload
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UObject Payload => ReadUObject<UObject>(0x38);
		
		/// <summary>
		/// Name: DefaultDragVisual
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UWidget DefaultDragVisual => ReadUObject<UWidget>(0x40);
		
		/// <summary>
		/// Name: Pivot
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte Pivot
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: Offset
		/// Type: StructProperty
		/// Offset: 0x4C
		/// Size: 0x08
		/// </summary>
		public FVector2D Offset => ReadStruct<FVector2D>(0x4C);
		
	}


	/// <summary>
	/// UMovieScene2DTransformSection:UMovieSceneSection
	/// Size: 0x390
	/// Properties: 4
	/// </summary>
	public class UMovieScene2DTransformSection:UMovieSceneSection
	{
		public override int ObjectSize => 912;
		/// <summary>
		/// Name: Translation
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x78
		/// </summary>
		public FRichCurve Translation => ReadStruct<FRichCurve>(0x48);
		
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x138
		/// Size: 0x78
		/// </summary>
		public FRichCurve Rotation => ReadStruct<FRichCurve>(0x138);
		
		/// <summary>
		/// Name: Scale
		/// Type: StructProperty
		/// Offset: 0x1B0
		/// Size: 0x78
		/// </summary>
		public FRichCurve Scale => ReadStruct<FRichCurve>(0x1B0);
		
		/// <summary>
		/// Name: Shear
		/// Type: StructProperty
		/// Offset: 0x2A0
		/// Size: 0x78
		/// </summary>
		public FRichCurve Shear => ReadStruct<FRichCurve>(0x2A0);
		
	}


	/// <summary>
	/// UMovieScene2DTransformTrack:UMovieScenePropertyTrack
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UMovieScene2DTransformTrack:UMovieScenePropertyTrack
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UMovieSceneMarginSection:UMovieSceneSection
	/// Size: 0x228
	/// Properties: 4
	/// </summary>
	public class UMovieSceneMarginSection:UMovieSceneSection
	{
		public override int ObjectSize => 552;
		/// <summary>
		/// Name: TopCurve
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x78
		/// </summary>
		public FRichCurve TopCurve => ReadStruct<FRichCurve>(0x48);
		
		/// <summary>
		/// Name: LeftCurve
		/// Type: StructProperty
		/// Offset: 0xC0
		/// Size: 0x78
		/// </summary>
		public FRichCurve LeftCurve => ReadStruct<FRichCurve>(0xC0);
		
		/// <summary>
		/// Name: RightCurve
		/// Type: StructProperty
		/// Offset: 0x138
		/// Size: 0x78
		/// </summary>
		public FRichCurve RightCurve => ReadStruct<FRichCurve>(0x138);
		
		/// <summary>
		/// Name: BottomCurve
		/// Type: StructProperty
		/// Offset: 0x1B0
		/// Size: 0x78
		/// </summary>
		public FRichCurve BottomCurve => ReadStruct<FRichCurve>(0x1B0);
		
	}


	/// <summary>
	/// UMovieSceneMarginTrack:UMovieScenePropertyTrack
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UMovieSceneMarginTrack:UMovieScenePropertyTrack
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UMovieSceneWidgetMaterialTrack:UMovieSceneMaterialTrack
	/// Size: 0x50
	/// Properties: 2
	/// </summary>
	public class UMovieSceneWidgetMaterialTrack:UMovieSceneMaterialTrack
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: BrushPropertyNamePath
		/// Type: TArray<FName>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> BrushPropertyNamePath => new TArray<FName>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: TrackName
		/// Type: NameProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UNamedSlotInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNamedSlotInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UPropertyBinding:UObject
	/// Size: 0x48
	/// Properties: 2
	/// </summary>
	public class UPropertyBinding:UObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: SourcePath
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FDynamicPropertyPath SourcePath => ReadStruct<FDynamicPropertyPath>(0x30);
		
		/// <summary>
		/// Name: DestinationProperty
		/// Type: NameProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UBoolBinding:UPropertyBinding
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class UBoolBinding:UPropertyBinding
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// UBrushBinding:UPropertyBinding
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UBrushBinding:UPropertyBinding
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UCheckedStateBinding:UPropertyBinding
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UCheckedStateBinding:UPropertyBinding
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UColorBinding:UPropertyBinding
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UColorBinding:UPropertyBinding
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UFloatBinding:UPropertyBinding
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class UFloatBinding:UPropertyBinding
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// UInt32Binding:UPropertyBinding
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class UInt32Binding:UPropertyBinding
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// UMouseCursorBinding:UPropertyBinding
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class UMouseCursorBinding:UPropertyBinding
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// UTextBinding:UPropertyBinding
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UTextBinding:UPropertyBinding
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UVisibilityBinding:UPropertyBinding
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class UVisibilityBinding:UPropertyBinding
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// UWidgetBinding:UPropertyBinding
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class UWidgetBinding:UPropertyBinding
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// URichTextBlockDecorator:UObject
	/// Size: 0x30
	/// Properties: 2
	/// </summary>
	public class URichTextBlockDecorator:UObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: bReveal
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bReveal
		{
			get
			{
				return ReadBool(0x28);
			}
			set
			{
				WriteBool(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: RevealedIndex
		/// Type: IntProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public int RevealedIndex
		{
			get
			{
				return ReadInt32(0x2C);
			}
			set
			{
				WriteInt32(0x2C,value);
			}
		}
		
	}


	/// <summary>
	/// USlateBlueprintLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class USlateBlueprintLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// USlateDataSheet:UObject
	/// Size: 0x430
	/// Properties: 1
	/// </summary>
	public class USlateDataSheet:UObject
	{
		public override int ObjectSize => 1072;
		/// <summary>
		/// Name: DataTexture
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UTexture2D DataTexture => ReadUObject<UTexture2D>(0x28);
		
	}


	/// <summary>
	/// USlateVectorArtData:UObject
	/// Size: 0x60
	/// Properties: 5
	/// </summary>
	public class USlateVectorArtData:UObject
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: VertexData
		/// Type: TArray<FSlateMeshVertex>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x3C
		/// </summary>
		public TArray<FSlateMeshVertex> VertexData => new TArray<FSlateMeshVertex>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: IndexData
		/// Type: TArray<>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Material
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface Material => ReadUObject<UMaterialInterface>(0x48);
		
		/// <summary>
		/// Name: ExtentMin
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public FVector2D ExtentMin => ReadStruct<FVector2D>(0x50);
		
		/// <summary>
		/// Name: ExtentMax
		/// Type: StructProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public FVector2D ExtentMax => ReadStruct<FVector2D>(0x58);
		
	}


	/// <summary>
	/// UUMGSequencePlayer:UObject
	/// Size: 0x190
	/// Properties: 1
	/// </summary>
	public class UUMGSequencePlayer:UObject
	{
		public override int ObjectSize => 400;
		/// <summary>
		/// Name: Animation
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public UWidgetAnimation Animation => ReadUObject<UWidgetAnimation>(0x48);
		
	}


	/// <summary>
	/// UPanelSlot:UVisual
	/// Size: 0x38
	/// Properties: 2
	/// </summary>
	public class UPanelSlot:UVisual
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Parent
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UPanelWidget Parent => ReadUObject<UPanelWidget>(0x28);
		
		/// <summary>
		/// Name: Content
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UWidget Content => ReadUObject<UWidget>(0x30);
		
	}


	/// <summary>
	/// UBorderSlot:UPanelSlot
	/// Size: 0x60
	/// Properties: 3
	/// </summary>
	public class UBorderSlot:UPanelSlot
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x38);
		
		/// <summary>
		/// Name: HorizontalAlignment
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte HorizontalAlignment
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: VerticalAlignment
		/// Type: ByteProperty
		/// Offset: 0x49
		/// Size: 0x01
		/// </summary>
		public byte VerticalAlignment
		{
			get
			{
				return ReadByte(0x49);
			}
			set
			{
				WriteByte(0x49,value);
			}
		}
		
	}


	/// <summary>
	/// UButtonSlot:UPanelSlot
	/// Size: 0x60
	/// Properties: 3
	/// </summary>
	public class UButtonSlot:UPanelSlot
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x38);
		
		/// <summary>
		/// Name: HorizontalAlignment
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte HorizontalAlignment
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: VerticalAlignment
		/// Type: ByteProperty
		/// Offset: 0x49
		/// Size: 0x01
		/// </summary>
		public byte VerticalAlignment
		{
			get
			{
				return ReadByte(0x49);
			}
			set
			{
				WriteByte(0x49,value);
			}
		}
		
	}


	/// <summary>
	/// UCanvasPanelSlot:UPanelSlot
	/// Size: 0x70
	/// Properties: 3
	/// </summary>
	public class UCanvasPanelSlot:UPanelSlot
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: LayoutData
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x28
		/// </summary>
		public FAnchorData LayoutData => ReadStruct<FAnchorData>(0x38);
		
		/// <summary>
		/// Name: bAutoSize
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bAutoSize
		{
			get
			{
				return ReadBool(0x60);
			}
			set
			{
				WriteBool(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: ZOrder
		/// Type: IntProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public int ZOrder
		{
			get
			{
				return ReadInt32(0x64);
			}
			set
			{
				WriteInt32(0x64,value);
			}
		}
		
	}


	/// <summary>
	/// UGridSlot:UPanelSlot
	/// Size: 0x60
	/// Properties: 8
	/// </summary>
	public class UGridSlot:UPanelSlot
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: HorizontalAlignment
		/// Type: ByteProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public byte HorizontalAlignment
		{
			get
			{
				return ReadByte(0x38);
			}
			set
			{
				WriteByte(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: VerticalAlignment
		/// Type: ByteProperty
		/// Offset: 0x39
		/// Size: 0x01
		/// </summary>
		public byte VerticalAlignment
		{
			get
			{
				return ReadByte(0x39);
			}
			set
			{
				WriteByte(0x39,value);
			}
		}
		
		/// <summary>
		/// Name: Row
		/// Type: IntProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public int Row
		{
			get
			{
				return ReadInt32(0x3C);
			}
			set
			{
				WriteInt32(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: RowSpan
		/// Type: IntProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public int RowSpan
		{
			get
			{
				return ReadInt32(0x40);
			}
			set
			{
				WriteInt32(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: Column
		/// Type: IntProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public int Column
		{
			get
			{
				return ReadInt32(0x44);
			}
			set
			{
				WriteInt32(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: ColumnSpan
		/// Type: IntProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public int ColumnSpan
		{
			get
			{
				return ReadInt32(0x48);
			}
			set
			{
				WriteInt32(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: Layer
		/// Type: IntProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public int Layer
		{
			get
			{
				return ReadInt32(0x4C);
			}
			set
			{
				WriteInt32(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: Nudge
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public FVector2D Nudge => ReadStruct<FVector2D>(0x50);
		
	}


	/// <summary>
	/// UHorizontalBoxSlot:UPanelSlot
	/// Size: 0x60
	/// Properties: 4
	/// </summary>
	public class UHorizontalBoxSlot:UPanelSlot
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x38);
		
		/// <summary>
		/// Name: Size
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public FSlateChildSize Size => ReadStruct<FSlateChildSize>(0x48);
		
		/// <summary>
		/// Name: HorizontalAlignment
		/// Type: ByteProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public byte HorizontalAlignment
		{
			get
			{
				return ReadByte(0x50);
			}
			set
			{
				WriteByte(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: VerticalAlignment
		/// Type: ByteProperty
		/// Offset: 0x51
		/// Size: 0x01
		/// </summary>
		public byte VerticalAlignment
		{
			get
			{
				return ReadByte(0x51);
			}
			set
			{
				WriteByte(0x51,value);
			}
		}
		
	}


	/// <summary>
	/// UOverlaySlot:UPanelSlot
	/// Size: 0x58
	/// Properties: 3
	/// </summary>
	public class UOverlaySlot:UPanelSlot
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x38);
		
		/// <summary>
		/// Name: HorizontalAlignment
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte HorizontalAlignment
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: VerticalAlignment
		/// Type: ByteProperty
		/// Offset: 0x49
		/// Size: 0x01
		/// </summary>
		public byte VerticalAlignment
		{
			get
			{
				return ReadByte(0x49);
			}
			set
			{
				WriteByte(0x49,value);
			}
		}
		
	}


	/// <summary>
	/// USafeZoneSlot:UPanelSlot
	/// Size: 0x50
	/// Properties: 4
	/// </summary>
	public class USafeZoneSlot:UPanelSlot
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: bIsTitleSafe
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bIsTitleSafe
		{
			get
			{
				return ReadBool(0x38);
			}
			set
			{
				WriteBool(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: HAlign
		/// Type: ByteProperty
		/// Offset: 0x39
		/// Size: 0x01
		/// </summary>
		public byte HAlign
		{
			get
			{
				return ReadByte(0x39);
			}
			set
			{
				WriteByte(0x39,value);
			}
		}
		
		/// <summary>
		/// Name: VAlign
		/// Type: ByteProperty
		/// Offset: 0x3A
		/// Size: 0x01
		/// </summary>
		public byte VAlign
		{
			get
			{
				return ReadByte(0x3A);
			}
			set
			{
				WriteByte(0x3A,value);
			}
		}
		
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x3C);
		
	}


	/// <summary>
	/// UScaleBoxSlot:UPanelSlot
	/// Size: 0x60
	/// Properties: 3
	/// </summary>
	public class UScaleBoxSlot:UPanelSlot
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x38);
		
		/// <summary>
		/// Name: HorizontalAlignment
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte HorizontalAlignment
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: VerticalAlignment
		/// Type: ByteProperty
		/// Offset: 0x49
		/// Size: 0x01
		/// </summary>
		public byte VerticalAlignment
		{
			get
			{
				return ReadByte(0x49);
			}
			set
			{
				WriteByte(0x49,value);
			}
		}
		
	}


	/// <summary>
	/// UScrollBoxSlot:UPanelSlot
	/// Size: 0x58
	/// Properties: 2
	/// </summary>
	public class UScrollBoxSlot:UPanelSlot
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x38);
		
		/// <summary>
		/// Name: HorizontalAlignment
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte HorizontalAlignment
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
	}


	/// <summary>
	/// USizeBoxSlot:UPanelSlot
	/// Size: 0x60
	/// Properties: 3
	/// </summary>
	public class USizeBoxSlot:UPanelSlot
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x38);
		
		/// <summary>
		/// Name: HorizontalAlignment
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte HorizontalAlignment
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: VerticalAlignment
		/// Type: ByteProperty
		/// Offset: 0x49
		/// Size: 0x01
		/// </summary>
		public byte VerticalAlignment
		{
			get
			{
				return ReadByte(0x49);
			}
			set
			{
				WriteByte(0x49,value);
			}
		}
		
	}


	/// <summary>
	/// UUniformGridSlot:UPanelSlot
	/// Size: 0x50
	/// Properties: 4
	/// </summary>
	public class UUniformGridSlot:UPanelSlot
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: HorizontalAlignment
		/// Type: ByteProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public byte HorizontalAlignment
		{
			get
			{
				return ReadByte(0x38);
			}
			set
			{
				WriteByte(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: VerticalAlignment
		/// Type: ByteProperty
		/// Offset: 0x39
		/// Size: 0x01
		/// </summary>
		public byte VerticalAlignment
		{
			get
			{
				return ReadByte(0x39);
			}
			set
			{
				WriteByte(0x39,value);
			}
		}
		
		/// <summary>
		/// Name: Row
		/// Type: IntProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public int Row
		{
			get
			{
				return ReadInt32(0x3C);
			}
			set
			{
				WriteInt32(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: Column
		/// Type: IntProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public int Column
		{
			get
			{
				return ReadInt32(0x40);
			}
			set
			{
				WriteInt32(0x40,value);
			}
		}
		
	}


	/// <summary>
	/// UVerticalBoxSlot:UPanelSlot
	/// Size: 0x60
	/// Properties: 4
	/// </summary>
	public class UVerticalBoxSlot:UPanelSlot
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x38);
		
		/// <summary>
		/// Name: Size
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public FSlateChildSize Size => ReadStruct<FSlateChildSize>(0x48);
		
		/// <summary>
		/// Name: HorizontalAlignment
		/// Type: ByteProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public byte HorizontalAlignment
		{
			get
			{
				return ReadByte(0x50);
			}
			set
			{
				WriteByte(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: VerticalAlignment
		/// Type: ByteProperty
		/// Offset: 0x51
		/// Size: 0x01
		/// </summary>
		public byte VerticalAlignment
		{
			get
			{
				return ReadByte(0x51);
			}
			set
			{
				WriteByte(0x51,value);
			}
		}
		
	}


	/// <summary>
	/// UWidgetSwitcherSlot:UPanelSlot
	/// Size: 0x58
	/// Properties: 3
	/// </summary>
	public class UWidgetSwitcherSlot:UPanelSlot
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x38);
		
		/// <summary>
		/// Name: HorizontalAlignment
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte HorizontalAlignment
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: VerticalAlignment
		/// Type: ByteProperty
		/// Offset: 0x49
		/// Size: 0x01
		/// </summary>
		public byte VerticalAlignment
		{
			get
			{
				return ReadByte(0x49);
			}
			set
			{
				WriteByte(0x49,value);
			}
		}
		
	}


	/// <summary>
	/// UWrapBoxSlot:UPanelSlot
	/// Size: 0x60
	/// Properties: 5
	/// </summary>
	public class UWrapBoxSlot:UPanelSlot
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x38);
		
		/// <summary>
		/// Name: bFillEmptySpace
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool bFillEmptySpace
		{
			get
			{
				return ReadBool(0x48);
			}
			set
			{
				WriteBool(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: FillSpanWhenLessThan
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float FillSpanWhenLessThan
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: HorizontalAlignment
		/// Type: ByteProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public byte HorizontalAlignment
		{
			get
			{
				return ReadByte(0x50);
			}
			set
			{
				WriteByte(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: VerticalAlignment
		/// Type: ByteProperty
		/// Offset: 0x51
		/// Size: 0x01
		/// </summary>
		public byte VerticalAlignment
		{
			get
			{
				return ReadByte(0x51);
			}
			set
			{
				WriteByte(0x51,value);
			}
		}
		
	}


	/// <summary>
	/// UCircularThrobber:UWidget
	/// Size: 0x1D8
	/// Properties: 6
	/// </summary>
	public class UCircularThrobber:UWidget
	{
		public override int ObjectSize => 472;
		/// <summary>
		/// Name: NumberOfPieces
		/// Type: IntProperty
		/// Offset: 0x118
		/// Size: 0x04
		/// </summary>
		public int NumberOfPieces
		{
			get
			{
				return ReadInt32(0x118);
			}
			set
			{
				WriteInt32(0x118,value);
			}
		}
		
		/// <summary>
		/// Name: Period
		/// Type: FloatProperty
		/// Offset: 0x11C
		/// Size: 0x04
		/// </summary>
		public float Period
		{
			get
			{
				return ReadSingle(0x11C);
			}
			set
			{
				WriteSingle(0x11C,value);
			}
		}
		
		/// <summary>
		/// Name: Radius
		/// Type: FloatProperty
		/// Offset: 0x120
		/// Size: 0x04
		/// </summary>
		public float Radius
		{
			get
			{
				return ReadSingle(0x120);
			}
			set
			{
				WriteSingle(0x120,value);
			}
		}
		
		/// <summary>
		/// Name: PieceImage
		/// Type: ObjectProperty
		/// Offset: 0x128
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset PieceImage => ReadUObject<USlateBrushAsset>(0x128);
		
		/// <summary>
		/// Name: Image
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x90
		/// </summary>
		public FSlateBrush Image => ReadStruct<FSlateBrush>(0x130);
		
		/// <summary>
		/// Name: bEnableRadius
		/// Type: BoolProperty
		/// Offset: 0x1C0
		/// Size: 0x01
		/// </summary>
		public bool bEnableRadius
		{
			get
			{
				return ReadBool(0x1C0);
			}
			set
			{
				WriteBool(0x1C0,value);
			}
		}
		
	}


	/// <summary>
	/// UComboBox:UWidget
	/// Size: 0x148
	/// Properties: 2
	/// </summary>
	public class UComboBox:UWidget
	{
		public override int ObjectSize => 328;
		/// <summary>
		/// Name: Items
		/// Type: TArray<UObject>
		/// Offset: 0x118
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UObject> Items => new TArray<UObject>(BaseAddress+0x118);
		
		/// <summary>
		/// Name: OnGenerateWidgetEvent
		/// Type: DelegateProperty
		/// Offset: 0x128
		/// Size: 0x10
		/// </summary>
		
	}


	/// <summary>
	/// UComboBoxString:UWidget
	/// Size: 0x610
	/// Properties: 7
	/// </summary>
	public class UComboBoxString:UWidget
	{
		public override int ObjectSize => 1552;
		/// <summary>
		/// Name: DefaultOptions
		/// Type: TArray<>
		/// Offset: 0x118
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: SelectedOption
		/// Type: StrProperty
		/// Offset: 0x128
		/// Size: 0x10
		/// </summary>
		public FString SelectedOption => new FString(BaseAddress+0x128);
		
		/// <summary>
		/// Name: WidgetStyle
		/// Type: StructProperty
		/// Offset: 0x138
		/// Size: 0x450
		/// </summary>
		public FComboBoxStyle WidgetStyle => ReadStruct<FComboBoxStyle>(0x138);
		
		/// <summary>
		/// Name: ContentPadding
		/// Type: StructProperty
		/// Offset: 0x588
		/// Size: 0x10
		/// </summary>
		public FMargin ContentPadding => ReadStruct<FMargin>(0x588);
		
		/// <summary>
		/// Name: MaxListHeight
		/// Type: FloatProperty
		/// Offset: 0x598
		/// Size: 0x04
		/// </summary>
		public float MaxListHeight
		{
			get
			{
				return ReadSingle(0x598);
			}
			set
			{
				WriteSingle(0x598,value);
			}
		}
		
		/// <summary>
		/// Name: HasDownArrow
		/// Type: BoolProperty
		/// Offset: 0x59C
		/// Size: 0x01
		/// </summary>
		public bool HasDownArrow
		{
			get
			{
				return ReadBool(0x59C);
			}
			set
			{
				WriteBool(0x59C,value);
			}
		}
		
		/// <summary>
		/// Name: OnGenerateWidgetEvent
		/// Type: DelegateProperty
		/// Offset: 0x5A0
		/// Size: 0x10
		/// </summary>
		
	}


	/// <summary>
	/// UEditableText:UWidget
	/// Size: 0x458
	/// Properties: 22
	/// </summary>
	public class UEditableText:UWidget
	{
		public override int ObjectSize => 1112;
		/// <summary>
		/// Name: Text
		/// Type: TextProperty
		/// Offset: 0x118
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: TextDelegate
		/// Type: DelegateProperty
		/// Offset: 0x130
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: HintText
		/// Type: TextProperty
		/// Offset: 0x140
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: HintTextDelegate
		/// Type: DelegateProperty
		/// Offset: 0x158
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: WidgetStyle
		/// Type: StructProperty
		/// Offset: 0x168
		/// Size: 0x220
		/// </summary>
		public FEditableTextStyle WidgetStyle => ReadStruct<FEditableTextStyle>(0x168);
		
		/// <summary>
		/// Name: Style
		/// Type: ObjectProperty
		/// Offset: 0x388
		/// Size: 0x08
		/// </summary>
		public USlateWidgetStyleAsset Style => ReadUObject<USlateWidgetStyleAsset>(0x388);
		
		/// <summary>
		/// Name: BackgroundImageSelected
		/// Type: ObjectProperty
		/// Offset: 0x390
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset BackgroundImageSelected => ReadUObject<USlateBrushAsset>(0x390);
		
		/// <summary>
		/// Name: BackgroundImageComposing
		/// Type: ObjectProperty
		/// Offset: 0x398
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset BackgroundImageComposing => ReadUObject<USlateBrushAsset>(0x398);
		
		/// <summary>
		/// Name: CaretImage
		/// Type: ObjectProperty
		/// Offset: 0x3A0
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset CaretImage => ReadUObject<USlateBrushAsset>(0x3A0);
		
		/// <summary>
		/// Name: Font
		/// Type: StructProperty
		/// Offset: 0x3A8
		/// Size: 0x40
		/// </summary>
		public FSlateFontInfo Font => ReadStruct<FSlateFontInfo>(0x3A8);
		
		/// <summary>
		/// Name: ColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x3E8
		/// Size: 0x28
		/// </summary>
		public FSlateColor ColorAndOpacity => ReadStruct<FSlateColor>(0x3E8);
		
		/// <summary>
		/// Name: IsReadOnly
		/// Type: BoolProperty
		/// Offset: 0x410
		/// Size: 0x01
		/// </summary>
		public bool IsReadOnly
		{
			get
			{
				return ReadBool(0x410);
			}
			set
			{
				WriteBool(0x410,value);
			}
		}
		
		/// <summary>
		/// Name: IsPassword
		/// Type: BoolProperty
		/// Offset: 0x411
		/// Size: 0x01
		/// </summary>
		public bool IsPassword
		{
			get
			{
				return ReadBool(0x411);
			}
			set
			{
				WriteBool(0x411,value);
			}
		}
		
		/// <summary>
		/// Name: MinimumDesiredWidth
		/// Type: FloatProperty
		/// Offset: 0x414
		/// Size: 0x04
		/// </summary>
		public float MinimumDesiredWidth
		{
			get
			{
				return ReadSingle(0x414);
			}
			set
			{
				WriteSingle(0x414,value);
			}
		}
		
		/// <summary>
		/// Name: IsCaretMovedWhenGainFocus
		/// Type: BoolProperty
		/// Offset: 0x418
		/// Size: 0x01
		/// </summary>
		public bool IsCaretMovedWhenGainFocus
		{
			get
			{
				return ReadBool(0x418);
			}
			set
			{
				WriteBool(0x418,value);
			}
		}
		
		/// <summary>
		/// Name: SelectAllTextWhenFocused
		/// Type: BoolProperty
		/// Offset: 0x419
		/// Size: 0x01
		/// </summary>
		public bool SelectAllTextWhenFocused
		{
			get
			{
				return ReadBool(0x419);
			}
			set
			{
				WriteBool(0x419,value);
			}
		}
		
		/// <summary>
		/// Name: RevertTextOnEscape
		/// Type: BoolProperty
		/// Offset: 0x41A
		/// Size: 0x01
		/// </summary>
		public bool RevertTextOnEscape
		{
			get
			{
				return ReadBool(0x41A);
			}
			set
			{
				WriteBool(0x41A,value);
			}
		}
		
		/// <summary>
		/// Name: ClearKeyboardFocusOnCommit
		/// Type: BoolProperty
		/// Offset: 0x41B
		/// Size: 0x01
		/// </summary>
		public bool ClearKeyboardFocusOnCommit
		{
			get
			{
				return ReadBool(0x41B);
			}
			set
			{
				WriteBool(0x41B,value);
			}
		}
		
		/// <summary>
		/// Name: SelectAllTextOnCommit
		/// Type: BoolProperty
		/// Offset: 0x41C
		/// Size: 0x01
		/// </summary>
		public bool SelectAllTextOnCommit
		{
			get
			{
				return ReadBool(0x41C);
			}
			set
			{
				WriteBool(0x41C,value);
			}
		}
		
		/// <summary>
		/// Name: AllowContextMenu
		/// Type: BoolProperty
		/// Offset: 0x41D
		/// Size: 0x01
		/// </summary>
		public bool AllowContextMenu
		{
			get
			{
				return ReadBool(0x41D);
			}
			set
			{
				WriteBool(0x41D,value);
			}
		}
		
		/// <summary>
		/// Name: KeyboardType
		/// Type: ByteProperty
		/// Offset: 0x41E
		/// Size: 0x01
		/// </summary>
		public byte KeyboardType
		{
			get
			{
				return ReadByte(0x41E);
			}
			set
			{
				WriteByte(0x41E,value);
			}
		}
		
		/// <summary>
		/// Name: ShapedTextOptions
		/// Type: StructProperty
		/// Offset: 0x420
		/// Size: 0x08
		/// </summary>
		public FShapedTextOptions ShapedTextOptions => ReadStruct<FShapedTextOptions>(0x420);
		
	}


	/// <summary>
	/// UEditableTextBox:UWidget
	/// Size: 0xA80
	/// Properties: 22
	/// </summary>
	public class UEditableTextBox:UWidget
	{
		public override int ObjectSize => 2688;
		/// <summary>
		/// Name: Text
		/// Type: TextProperty
		/// Offset: 0x118
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: TextDelegate
		/// Type: DelegateProperty
		/// Offset: 0x130
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: WidgetStyle
		/// Type: StructProperty
		/// Offset: 0x140
		/// Size: 0x848
		/// </summary>
		public FEditableTextBoxStyle WidgetStyle => ReadStruct<FEditableTextBoxStyle>(0x140);
		
		/// <summary>
		/// Name: Style
		/// Type: ObjectProperty
		/// Offset: 0x988
		/// Size: 0x08
		/// </summary>
		public USlateWidgetStyleAsset Style => ReadUObject<USlateWidgetStyleAsset>(0x988);
		
		/// <summary>
		/// Name: HintText
		/// Type: TextProperty
		/// Offset: 0x990
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: HintTextDelegate
		/// Type: DelegateProperty
		/// Offset: 0x9A8
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: Font
		/// Type: StructProperty
		/// Offset: 0x9B8
		/// Size: 0x40
		/// </summary>
		public FSlateFontInfo Font => ReadStruct<FSlateFontInfo>(0x9B8);
		
		/// <summary>
		/// Name: ForegroundColor
		/// Type: StructProperty
		/// Offset: 0x9F8
		/// Size: 0x10
		/// </summary>
		public FLinearColor ForegroundColor => ReadStruct<FLinearColor>(0x9F8);
		
		/// <summary>
		/// Name: BackgroundColor
		/// Type: StructProperty
		/// Offset: 0xA08
		/// Size: 0x10
		/// </summary>
		public FLinearColor BackgroundColor => ReadStruct<FLinearColor>(0xA08);
		
		/// <summary>
		/// Name: ReadOnlyForegroundColor
		/// Type: StructProperty
		/// Offset: 0xA18
		/// Size: 0x10
		/// </summary>
		public FLinearColor ReadOnlyForegroundColor => ReadStruct<FLinearColor>(0xA18);
		
		/// <summary>
		/// Name: IsReadOnly
		/// Type: BoolProperty
		/// Offset: 0xA28
		/// Size: 0x01
		/// </summary>
		public bool IsReadOnly
		{
			get
			{
				return ReadBool(0xA28);
			}
			set
			{
				WriteBool(0xA28,value);
			}
		}
		
		/// <summary>
		/// Name: IsPassword
		/// Type: BoolProperty
		/// Offset: 0xA29
		/// Size: 0x01
		/// </summary>
		public bool IsPassword
		{
			get
			{
				return ReadBool(0xA29);
			}
			set
			{
				WriteBool(0xA29,value);
			}
		}
		
		/// <summary>
		/// Name: MinimumDesiredWidth
		/// Type: FloatProperty
		/// Offset: 0xA2C
		/// Size: 0x04
		/// </summary>
		public float MinimumDesiredWidth
		{
			get
			{
				return ReadSingle(0xA2C);
			}
			set
			{
				WriteSingle(0xA2C,value);
			}
		}
		
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0xA30
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0xA30);
		
		/// <summary>
		/// Name: IsCaretMovedWhenGainFocus
		/// Type: BoolProperty
		/// Offset: 0xA40
		/// Size: 0x01
		/// </summary>
		public bool IsCaretMovedWhenGainFocus
		{
			get
			{
				return ReadBool(0xA40);
			}
			set
			{
				WriteBool(0xA40,value);
			}
		}
		
		/// <summary>
		/// Name: SelectAllTextWhenFocused
		/// Type: BoolProperty
		/// Offset: 0xA41
		/// Size: 0x01
		/// </summary>
		public bool SelectAllTextWhenFocused
		{
			get
			{
				return ReadBool(0xA41);
			}
			set
			{
				WriteBool(0xA41,value);
			}
		}
		
		/// <summary>
		/// Name: RevertTextOnEscape
		/// Type: BoolProperty
		/// Offset: 0xA42
		/// Size: 0x01
		/// </summary>
		public bool RevertTextOnEscape
		{
			get
			{
				return ReadBool(0xA42);
			}
			set
			{
				WriteBool(0xA42,value);
			}
		}
		
		/// <summary>
		/// Name: ClearKeyboardFocusOnCommit
		/// Type: BoolProperty
		/// Offset: 0xA43
		/// Size: 0x01
		/// </summary>
		public bool ClearKeyboardFocusOnCommit
		{
			get
			{
				return ReadBool(0xA43);
			}
			set
			{
				WriteBool(0xA43,value);
			}
		}
		
		/// <summary>
		/// Name: SelectAllTextOnCommit
		/// Type: BoolProperty
		/// Offset: 0xA44
		/// Size: 0x01
		/// </summary>
		public bool SelectAllTextOnCommit
		{
			get
			{
				return ReadBool(0xA44);
			}
			set
			{
				WriteBool(0xA44,value);
			}
		}
		
		/// <summary>
		/// Name: AllowContextMenu
		/// Type: BoolProperty
		/// Offset: 0xA45
		/// Size: 0x01
		/// </summary>
		public bool AllowContextMenu
		{
			get
			{
				return ReadBool(0xA45);
			}
			set
			{
				WriteBool(0xA45,value);
			}
		}
		
		/// <summary>
		/// Name: KeyboardType
		/// Type: ByteProperty
		/// Offset: 0xA46
		/// Size: 0x01
		/// </summary>
		public byte KeyboardType
		{
			get
			{
				return ReadByte(0xA46);
			}
			set
			{
				WriteByte(0xA46,value);
			}
		}
		
		/// <summary>
		/// Name: ShapedTextOptions
		/// Type: StructProperty
		/// Offset: 0xA48
		/// Size: 0x08
		/// </summary>
		public FShapedTextOptions ShapedTextOptions => ReadStruct<FShapedTextOptions>(0xA48);
		
	}


	/// <summary>
	/// UExpandableArea:UWidget
	/// Size: 0x358
	/// Properties: 9
	/// </summary>
	public class UExpandableArea:UWidget
	{
		public override int ObjectSize => 856;
		/// <summary>
		/// Name: Style
		/// Type: StructProperty
		/// Offset: 0x120
		/// Size: 0x128
		/// </summary>
		public FExpandableAreaStyle Style => ReadStruct<FExpandableAreaStyle>(0x120);
		
		/// <summary>
		/// Name: BorderBrush
		/// Type: StructProperty
		/// Offset: 0x248
		/// Size: 0x90
		/// </summary>
		public FSlateBrush BorderBrush => ReadStruct<FSlateBrush>(0x248);
		
		/// <summary>
		/// Name: BorderColor
		/// Type: StructProperty
		/// Offset: 0x2D8
		/// Size: 0x28
		/// </summary>
		public FSlateColor BorderColor => ReadStruct<FSlateColor>(0x2D8);
		
		/// <summary>
		/// Name: bIsExpanded
		/// Type: BoolProperty
		/// Offset: 0x300
		/// Size: 0x01
		/// </summary>
		public bool bIsExpanded
		{
			get
			{
				return ReadBool(0x300);
			}
			set
			{
				WriteBool(0x300,value);
			}
		}
		
		/// <summary>
		/// Name: MaxHeight
		/// Type: FloatProperty
		/// Offset: 0x304
		/// Size: 0x04
		/// </summary>
		public float MaxHeight
		{
			get
			{
				return ReadSingle(0x304);
			}
			set
			{
				WriteSingle(0x304,value);
			}
		}
		
		/// <summary>
		/// Name: HeaderPadding
		/// Type: StructProperty
		/// Offset: 0x308
		/// Size: 0x10
		/// </summary>
		public FMargin HeaderPadding => ReadStruct<FMargin>(0x308);
		
		/// <summary>
		/// Name: AreaPadding
		/// Type: StructProperty
		/// Offset: 0x318
		/// Size: 0x10
		/// </summary>
		public FMargin AreaPadding => ReadStruct<FMargin>(0x318);
		
		/// <summary>
		/// Name: HeaderContent
		/// Type: ObjectProperty
		/// Offset: 0x338
		/// Size: 0x08
		/// </summary>
		public UWidget HeaderContent => ReadUObject<UWidget>(0x338);
		
		/// <summary>
		/// Name: BodyContent
		/// Type: ObjectProperty
		/// Offset: 0x340
		/// Size: 0x08
		/// </summary>
		public UWidget BodyContent => ReadUObject<UWidget>(0x340);
		
	}


	/// <summary>
	/// UImage:UWidget
	/// Size: 0x200
	/// Properties: 6
	/// </summary>
	public class UImage:UWidget
	{
		public override int ObjectSize => 512;
		/// <summary>
		/// Name: Image
		/// Type: ObjectProperty
		/// Offset: 0x118
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset Image => ReadUObject<USlateBrushAsset>(0x118);
		
		/// <summary>
		/// Name: Brush
		/// Type: StructProperty
		/// Offset: 0x120
		/// Size: 0x90
		/// </summary>
		public FSlateBrush Brush => ReadStruct<FSlateBrush>(0x120);
		
		/// <summary>
		/// Name: BrushDelegate
		/// Type: DelegateProperty
		/// Offset: 0x1B0
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: ColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x1C0
		/// Size: 0x10
		/// </summary>
		public FLinearColor ColorAndOpacity => ReadStruct<FLinearColor>(0x1C0);
		
		/// <summary>
		/// Name: ColorAndOpacityDelegate
		/// Type: DelegateProperty
		/// Offset: 0x1D0
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: OnMouseButtonDownEvent
		/// Type: DelegateProperty
		/// Offset: 0x1E0
		/// Size: 0x10
		/// </summary>
		
	}


	/// <summary>
	/// UInputKeySelector:UWidget
	/// Size: 0x1F0
	/// Properties: 6
	/// </summary>
	public class UInputKeySelector:UWidget
	{
		public override int ObjectSize => 496;
		/// <summary>
		/// Name: SelectedKey
		/// Type: StructProperty
		/// Offset: 0x118
		/// Size: 0x20
		/// </summary>
		public FInputChord SelectedKey => ReadStruct<FInputChord>(0x118);
		
		/// <summary>
		/// Name: Font
		/// Type: StructProperty
		/// Offset: 0x138
		/// Size: 0x40
		/// </summary>
		public FSlateFontInfo Font => ReadStruct<FSlateFontInfo>(0x138);
		
		/// <summary>
		/// Name: Margin
		/// Type: StructProperty
		/// Offset: 0x178
		/// Size: 0x10
		/// </summary>
		public FMargin Margin => ReadStruct<FMargin>(0x178);
		
		/// <summary>
		/// Name: ColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x188
		/// Size: 0x10
		/// </summary>
		public FLinearColor ColorAndOpacity => ReadStruct<FLinearColor>(0x188);
		
		/// <summary>
		/// Name: KeySelectionText
		/// Type: TextProperty
		/// Offset: 0x198
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: bAllowModifierKeys
		/// Type: BoolProperty
		/// Offset: 0x1B0
		/// Size: 0x01
		/// </summary>
		public bool bAllowModifierKeys
		{
			get
			{
				return ReadBool(0x1B0);
			}
			set
			{
				WriteBool(0x1B0,value);
			}
		}
		
	}


	/// <summary>
	/// UNativeWidgetHost:UWidget
	/// Size: 0x128
	/// Properties: 0
	/// </summary>
	public class UNativeWidgetHost:UWidget
	{
		public override int ObjectSize => 296;
	}


	/// <summary>
	/// UPanelWidget:UWidget
	/// Size: 0x130
	/// Properties: 1
	/// </summary>
	public class UPanelWidget:UWidget
	{
		public override int ObjectSize => 304;
		/// <summary>
		/// Name: Slots
		/// Type: TArray<UPanelSlot>
		/// Offset: 0x118
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<UPanelSlot> Slots => new TArray<UPanelSlot>(BaseAddress+0x118);
		
	}


	/// <summary>
	/// UCanvasPanel:UPanelWidget
	/// Size: 0x140
	/// Properties: 0
	/// </summary>
	public class UCanvasPanel:UPanelWidget
	{
		public override int ObjectSize => 320;
	}


	/// <summary>
	/// UContentWidget:UPanelWidget
	/// Size: 0x130
	/// Properties: 0
	/// </summary>
	public class UContentWidget:UPanelWidget
	{
		public override int ObjectSize => 304;
	}


	/// <summary>
	/// UBorder:UContentWidget
	/// Size: 0x288
	/// Properties: 15
	/// </summary>
	public class UBorder:UContentWidget
	{
		public override int ObjectSize => 648;
		/// <summary>
		/// Name: ContentColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x10
		/// </summary>
		public FLinearColor ContentColorAndOpacity => ReadStruct<FLinearColor>(0x130);
		
		/// <summary>
		/// Name: ContentColorAndOpacityDelegate
		/// Type: DelegateProperty
		/// Offset: 0x140
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x150
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x150);
		
		/// <summary>
		/// Name: HorizontalAlignment
		/// Type: ByteProperty
		/// Offset: 0x160
		/// Size: 0x01
		/// </summary>
		public byte HorizontalAlignment
		{
			get
			{
				return ReadByte(0x160);
			}
			set
			{
				WriteByte(0x160,value);
			}
		}
		
		/// <summary>
		/// Name: VerticalAlignment
		/// Type: ByteProperty
		/// Offset: 0x161
		/// Size: 0x01
		/// </summary>
		public byte VerticalAlignment
		{
			get
			{
				return ReadByte(0x161);
			}
			set
			{
				WriteByte(0x161,value);
			}
		}
		
		/// <summary>
		/// Name: Background
		/// Type: StructProperty
		/// Offset: 0x168
		/// Size: 0x90
		/// </summary>
		public FSlateBrush Background => ReadStruct<FSlateBrush>(0x168);
		
		/// <summary>
		/// Name: BackgroundDelegate
		/// Type: DelegateProperty
		/// Offset: 0x1F8
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: BrushColor
		/// Type: StructProperty
		/// Offset: 0x208
		/// Size: 0x10
		/// </summary>
		public FLinearColor BrushColor => ReadStruct<FLinearColor>(0x208);
		
		/// <summary>
		/// Name: BrushColorDelegate
		/// Type: DelegateProperty
		/// Offset: 0x218
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: bShowEffectWhenDisabled
		/// Type: BoolProperty
		/// Offset: 0x228
		/// Size: 0x01
		/// </summary>
		public bool bShowEffectWhenDisabled
		{
			get
			{
				return ReadBool(0x228);
			}
			set
			{
				WriteBool(0x228,value);
			}
		}
		
		/// <summary>
		/// Name: OnMouseButtonDownEvent
		/// Type: DelegateProperty
		/// Offset: 0x230
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: OnMouseButtonUpEvent
		/// Type: DelegateProperty
		/// Offset: 0x240
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: OnMouseMoveEvent
		/// Type: DelegateProperty
		/// Offset: 0x250
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: OnMouseDoubleClickEvent
		/// Type: DelegateProperty
		/// Offset: 0x260
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: Brush
		/// Type: ObjectProperty
		/// Offset: 0x280
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset Brush => ReadUObject<USlateBrushAsset>(0x280);
		
	}


	/// <summary>
	/// UButton:UContentWidget
	/// Size: 0x468
	/// Properties: 7
	/// </summary>
	public class UButton:UContentWidget
	{
		public override int ObjectSize => 1128;
		/// <summary>
		/// Name: Style
		/// Type: ObjectProperty
		/// Offset: 0x130
		/// Size: 0x08
		/// </summary>
		public USlateWidgetStyleAsset Style => ReadUObject<USlateWidgetStyleAsset>(0x130);
		
		/// <summary>
		/// Name: WidgetStyle
		/// Type: StructProperty
		/// Offset: 0x138
		/// Size: 0x2A8
		/// </summary>
		public FButtonStyle WidgetStyle => ReadStruct<FButtonStyle>(0x138);
		
		/// <summary>
		/// Name: ColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x3E0
		/// Size: 0x10
		/// </summary>
		public FLinearColor ColorAndOpacity => ReadStruct<FLinearColor>(0x3E0);
		
		/// <summary>
		/// Name: BackgroundColor
		/// Type: StructProperty
		/// Offset: 0x3F0
		/// Size: 0x10
		/// </summary>
		public FLinearColor BackgroundColor => ReadStruct<FLinearColor>(0x3F0);
		
		/// <summary>
		/// Name: ClickMethod
		/// Type: ByteProperty
		/// Offset: 0x400
		/// Size: 0x01
		/// </summary>
		public byte ClickMethod
		{
			get
			{
				return ReadByte(0x400);
			}
			set
			{
				WriteByte(0x400,value);
			}
		}
		
		/// <summary>
		/// Name: TouchMethod
		/// Type: ByteProperty
		/// Offset: 0x401
		/// Size: 0x01
		/// </summary>
		public byte TouchMethod
		{
			get
			{
				return ReadByte(0x401);
			}
			set
			{
				WriteByte(0x401,value);
			}
		}
		
		/// <summary>
		/// Name: IsFocusable
		/// Type: BoolProperty
		/// Offset: 0x402
		/// Size: 0x01
		/// </summary>
		public bool IsFocusable
		{
			get
			{
				return ReadBool(0x402);
			}
			set
			{
				WriteBool(0x402,value);
			}
		}
		
	}


	/// <summary>
	/// UCheckBox:UContentWidget
	/// Size: 0x7E0
	/// Properties: 17
	/// </summary>
	public class UCheckBox:UContentWidget
	{
		public override int ObjectSize => 2016;
		/// <summary>
		/// Name: CheckedState
		/// Type: ByteProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public byte CheckedState
		{
			get
			{
				return ReadByte(0x130);
			}
			set
			{
				WriteByte(0x130,value);
			}
		}
		
		/// <summary>
		/// Name: CheckedStateDelegate
		/// Type: DelegateProperty
		/// Offset: 0x138
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: WidgetStyle
		/// Type: StructProperty
		/// Offset: 0x148
		/// Size: 0x5E0
		/// </summary>
		public FCheckBoxStyle WidgetStyle => ReadStruct<FCheckBoxStyle>(0x148);
		
		/// <summary>
		/// Name: Style
		/// Type: ObjectProperty
		/// Offset: 0x728
		/// Size: 0x08
		/// </summary>
		public USlateWidgetStyleAsset Style => ReadUObject<USlateWidgetStyleAsset>(0x728);
		
		/// <summary>
		/// Name: UnCheckedImage
		/// Type: ObjectProperty
		/// Offset: 0x730
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset UnCheckedImage => ReadUObject<USlateBrushAsset>(0x730);
		
		/// <summary>
		/// Name: UnCheckedHoveredImage
		/// Type: ObjectProperty
		/// Offset: 0x738
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset UnCheckedHoveredImage => ReadUObject<USlateBrushAsset>(0x738);
		
		/// <summary>
		/// Name: UnCheckedPressedImage
		/// Type: ObjectProperty
		/// Offset: 0x740
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset UnCheckedPressedImage => ReadUObject<USlateBrushAsset>(0x740);
		
		/// <summary>
		/// Name: CheckedImage
		/// Type: ObjectProperty
		/// Offset: 0x748
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset CheckedImage => ReadUObject<USlateBrushAsset>(0x748);
		
		/// <summary>
		/// Name: CheckedHoveredImage
		/// Type: ObjectProperty
		/// Offset: 0x750
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset CheckedHoveredImage => ReadUObject<USlateBrushAsset>(0x750);
		
		/// <summary>
		/// Name: CheckedPressedImage
		/// Type: ObjectProperty
		/// Offset: 0x758
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset CheckedPressedImage => ReadUObject<USlateBrushAsset>(0x758);
		
		/// <summary>
		/// Name: UndeterminedImage
		/// Type: ObjectProperty
		/// Offset: 0x760
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset UndeterminedImage => ReadUObject<USlateBrushAsset>(0x760);
		
		/// <summary>
		/// Name: UndeterminedHoveredImage
		/// Type: ObjectProperty
		/// Offset: 0x768
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset UndeterminedHoveredImage => ReadUObject<USlateBrushAsset>(0x768);
		
		/// <summary>
		/// Name: UndeterminedPressedImage
		/// Type: ObjectProperty
		/// Offset: 0x770
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset UndeterminedPressedImage => ReadUObject<USlateBrushAsset>(0x770);
		
		/// <summary>
		/// Name: HorizontalAlignment
		/// Type: ByteProperty
		/// Offset: 0x778
		/// Size: 0x01
		/// </summary>
		public byte HorizontalAlignment
		{
			get
			{
				return ReadByte(0x778);
			}
			set
			{
				WriteByte(0x778,value);
			}
		}
		
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x77C
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x77C);
		
		/// <summary>
		/// Name: BorderBackgroundColor
		/// Type: StructProperty
		/// Offset: 0x790
		/// Size: 0x28
		/// </summary>
		public FSlateColor BorderBackgroundColor => ReadStruct<FSlateColor>(0x790);
		
		/// <summary>
		/// Name: IsFocusable
		/// Type: BoolProperty
		/// Offset: 0x7B8
		/// Size: 0x01
		/// </summary>
		public bool IsFocusable
		{
			get
			{
				return ReadBool(0x7B8);
			}
			set
			{
				WriteBool(0x7B8,value);
			}
		}
		
	}


	/// <summary>
	/// UInvalidationBox:UContentWidget
	/// Size: 0x148
	/// Properties: 2
	/// </summary>
	public class UInvalidationBox:UContentWidget
	{
		public override int ObjectSize => 328;
		/// <summary>
		/// Name: bCanCache
		/// Type: BoolProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public bool bCanCache
		{
			get
			{
				return ReadBool(0x130);
			}
			set
			{
				WriteBool(0x130,value);
			}
		}
		
		/// <summary>
		/// Name: CacheRelativeTransforms
		/// Type: BoolProperty
		/// Offset: 0x131
		/// Size: 0x01
		/// </summary>
		public bool CacheRelativeTransforms
		{
			get
			{
				return ReadBool(0x131);
			}
			set
			{
				WriteBool(0x131,value);
			}
		}
		
	}


	/// <summary>
	/// UMenuAnchor:UContentWidget
	/// Size: 0x170
	/// Properties: 5
	/// </summary>
	public class UMenuAnchor:UContentWidget
	{
		public override int ObjectSize => 368;
		/// <summary>
		/// Name: MenuClass
		/// Type: ClassProperty
		/// Offset: 0x130
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: OnGetMenuContentEvent
		/// Type: DelegateProperty
		/// Offset: 0x138
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: Placement
		/// Type: ByteProperty
		/// Offset: 0x148
		/// Size: 0x01
		/// </summary>
		public byte Placement
		{
			get
			{
				return ReadByte(0x148);
			}
			set
			{
				WriteByte(0x148,value);
			}
		}
		
		/// <summary>
		/// Name: ShouldDeferPaintingAfterWindowContent
		/// Type: BoolProperty
		/// Offset: 0x149
		/// Size: 0x01
		/// </summary>
		public bool ShouldDeferPaintingAfterWindowContent
		{
			get
			{
				return ReadBool(0x149);
			}
			set
			{
				WriteBool(0x149,value);
			}
		}
		
		/// <summary>
		/// Name: UseApplicationMenuStack
		/// Type: BoolProperty
		/// Offset: 0x14A
		/// Size: 0x01
		/// </summary>
		public bool UseApplicationMenuStack
		{
			get
			{
				return ReadBool(0x14A);
			}
			set
			{
				WriteBool(0x14A,value);
			}
		}
		
	}


	/// <summary>
	/// UNamedSlot:UContentWidget
	/// Size: 0x140
	/// Properties: 0
	/// </summary>
	public class UNamedSlot:UContentWidget
	{
		public override int ObjectSize => 320;
	}


	/// <summary>
	/// URetainerBox:UContentWidget
	/// Size: 0x158
	/// Properties: 4
	/// </summary>
	public class URetainerBox:UContentWidget
	{
		public override int ObjectSize => 344;
		/// <summary>
		/// Name: Phase
		/// Type: IntProperty
		/// Offset: 0x130
		/// Size: 0x04
		/// </summary>
		public int Phase
		{
			get
			{
				return ReadInt32(0x130);
			}
			set
			{
				WriteInt32(0x130,value);
			}
		}
		
		/// <summary>
		/// Name: PhaseCount
		/// Type: IntProperty
		/// Offset: 0x134
		/// Size: 0x04
		/// </summary>
		public int PhaseCount
		{
			get
			{
				return ReadInt32(0x134);
			}
			set
			{
				WriteInt32(0x134,value);
			}
		}
		
		/// <summary>
		/// Name: EffectMaterial
		/// Type: ObjectProperty
		/// Offset: 0x138
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface EffectMaterial => ReadUObject<UMaterialInterface>(0x138);
		
		/// <summary>
		/// Name: TextureParameter
		/// Type: NameProperty
		/// Offset: 0x140
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// USafeZone:UContentWidget
	/// Size: 0x140
	/// Properties: 0
	/// </summary>
	public class USafeZone:UContentWidget
	{
		public override int ObjectSize => 320;
	}


	/// <summary>
	/// UScaleBox:UContentWidget
	/// Size: 0x150
	/// Properties: 4
	/// </summary>
	public class UScaleBox:UContentWidget
	{
		public override int ObjectSize => 336;
		/// <summary>
		/// Name: StretchDirection
		/// Type: ByteProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public byte StretchDirection
		{
			get
			{
				return ReadByte(0x130);
			}
			set
			{
				WriteByte(0x130,value);
			}
		}
		
		/// <summary>
		/// Name: Stretch
		/// Type: ByteProperty
		/// Offset: 0x131
		/// Size: 0x01
		/// </summary>
		public byte Stretch
		{
			get
			{
				return ReadByte(0x131);
			}
			set
			{
				WriteByte(0x131,value);
			}
		}
		
		/// <summary>
		/// Name: UserSpecifiedScale
		/// Type: FloatProperty
		/// Offset: 0x134
		/// Size: 0x04
		/// </summary>
		public float UserSpecifiedScale
		{
			get
			{
				return ReadSingle(0x134);
			}
			set
			{
				WriteSingle(0x134,value);
			}
		}
		
		/// <summary>
		/// Name: IgnoreInheritedScale
		/// Type: BoolProperty
		/// Offset: 0x138
		/// Size: 0x01
		/// </summary>
		public bool IgnoreInheritedScale
		{
			get
			{
				return ReadBool(0x138);
			}
			set
			{
				WriteBool(0x138,value);
			}
		}
		
	}


	/// <summary>
	/// USizeBox:UContentWidget
	/// Size: 0x160
	/// Properties: 12
	/// </summary>
	public class USizeBox:UContentWidget
	{
		public override int ObjectSize => 352;
		/// <summary>
		/// Name: bOverride_WidthOverride
		/// Type: BoolProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public bool bOverride_WidthOverride => (ReadByte(0x0130) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_HeightOverride
		/// Type: BoolProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public bool bOverride_HeightOverride => (ReadByte(0x0130) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_MinDesiredWidth
		/// Type: BoolProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public bool bOverride_MinDesiredWidth => (ReadByte(0x0130) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_MinDesiredHeight
		/// Type: BoolProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public bool bOverride_MinDesiredHeight => (ReadByte(0x0130) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_MaxDesiredWidth
		/// Type: BoolProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public bool bOverride_MaxDesiredWidth => (ReadByte(0x0130) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_MaxDesiredHeight
		/// Type: BoolProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public bool bOverride_MaxDesiredHeight => (ReadByte(0x0130) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: WidthOverride
		/// Type: FloatProperty
		/// Offset: 0x134
		/// Size: 0x04
		/// </summary>
		public float WidthOverride
		{
			get
			{
				return ReadSingle(0x134);
			}
			set
			{
				WriteSingle(0x134,value);
			}
		}
		
		/// <summary>
		/// Name: HeightOverride
		/// Type: FloatProperty
		/// Offset: 0x138
		/// Size: 0x04
		/// </summary>
		public float HeightOverride
		{
			get
			{
				return ReadSingle(0x138);
			}
			set
			{
				WriteSingle(0x138,value);
			}
		}
		
		/// <summary>
		/// Name: MinDesiredWidth
		/// Type: FloatProperty
		/// Offset: 0x13C
		/// Size: 0x04
		/// </summary>
		public float MinDesiredWidth
		{
			get
			{
				return ReadSingle(0x13C);
			}
			set
			{
				WriteSingle(0x13C,value);
			}
		}
		
		/// <summary>
		/// Name: MinDesiredHeight
		/// Type: FloatProperty
		/// Offset: 0x140
		/// Size: 0x04
		/// </summary>
		public float MinDesiredHeight
		{
			get
			{
				return ReadSingle(0x140);
			}
			set
			{
				WriteSingle(0x140,value);
			}
		}
		
		/// <summary>
		/// Name: MaxDesiredWidth
		/// Type: FloatProperty
		/// Offset: 0x144
		/// Size: 0x04
		/// </summary>
		public float MaxDesiredWidth
		{
			get
			{
				return ReadSingle(0x144);
			}
			set
			{
				WriteSingle(0x144,value);
			}
		}
		
		/// <summary>
		/// Name: MaxDesiredHeight
		/// Type: FloatProperty
		/// Offset: 0x148
		/// Size: 0x04
		/// </summary>
		public float MaxDesiredHeight
		{
			get
			{
				return ReadSingle(0x148);
			}
			set
			{
				WriteSingle(0x148,value);
			}
		}
		
	}


	/// <summary>
	/// UViewport:UContentWidget
	/// Size: 0x158
	/// Properties: 1
	/// </summary>
	public class UViewport:UContentWidget
	{
		public override int ObjectSize => 344;
		/// <summary>
		/// Name: BackgroundColor
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x10
		/// </summary>
		public FLinearColor BackgroundColor => ReadStruct<FLinearColor>(0x130);
		
	}


	/// <summary>
	/// UGridPanel:UPanelWidget
	/// Size: 0x160
	/// Properties: 2
	/// </summary>
	public class UGridPanel:UPanelWidget
	{
		public override int ObjectSize => 352;
		/// <summary>
		/// Name: ColumnFill
		/// Type: TArray<>
		/// Offset: 0x130
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: RowFill
		/// Type: TArray<>
		/// Offset: 0x140
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// UHorizontalBox:UPanelWidget
	/// Size: 0x140
	/// Properties: 0
	/// </summary>
	public class UHorizontalBox:UPanelWidget
	{
		public override int ObjectSize => 320;
	}


	/// <summary>
	/// UOverlay:UPanelWidget
	/// Size: 0x140
	/// Properties: 0
	/// </summary>
	public class UOverlay:UPanelWidget
	{
		public override int ObjectSize => 320;
	}


	/// <summary>
	/// UScrollBox:UPanelWidget
	/// Size: 0x8C8
	/// Properties: 9
	/// </summary>
	public class UScrollBox:UPanelWidget
	{
		public override int ObjectSize => 2248;
		/// <summary>
		/// Name: WidgetStyle
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x248
		/// </summary>
		public FScrollBoxStyle WidgetStyle => ReadStruct<FScrollBoxStyle>(0x130);
		
		/// <summary>
		/// Name: WidgetBarStyle
		/// Type: StructProperty
		/// Offset: 0x378
		/// Size: 0x518
		/// </summary>
		public FScrollBarStyle WidgetBarStyle => ReadStruct<FScrollBarStyle>(0x378);
		
		/// <summary>
		/// Name: Style
		/// Type: ObjectProperty
		/// Offset: 0x890
		/// Size: 0x08
		/// </summary>
		public USlateWidgetStyleAsset Style => ReadUObject<USlateWidgetStyleAsset>(0x890);
		
		/// <summary>
		/// Name: BarStyle
		/// Type: ObjectProperty
		/// Offset: 0x898
		/// Size: 0x08
		/// </summary>
		public USlateWidgetStyleAsset BarStyle => ReadUObject<USlateWidgetStyleAsset>(0x898);
		
		/// <summary>
		/// Name: Orientation
		/// Type: ByteProperty
		/// Offset: 0x8A0
		/// Size: 0x01
		/// </summary>
		public byte Orientation
		{
			get
			{
				return ReadByte(0x8A0);
			}
			set
			{
				WriteByte(0x8A0,value);
			}
		}
		
		/// <summary>
		/// Name: ScrollBarVisibility
		/// Type: ByteProperty
		/// Offset: 0x8A1
		/// Size: 0x01
		/// </summary>
		public byte ScrollBarVisibility
		{
			get
			{
				return ReadByte(0x8A1);
			}
			set
			{
				WriteByte(0x8A1,value);
			}
		}
		
		/// <summary>
		/// Name: ConsumeMouseWheel
		/// Type: ByteProperty
		/// Offset: 0x8A2
		/// Size: 0x01
		/// </summary>
		public byte ConsumeMouseWheel
		{
			get
			{
				return ReadByte(0x8A2);
			}
			set
			{
				WriteByte(0x8A2,value);
			}
		}
		
		/// <summary>
		/// Name: ScrollbarThickness
		/// Type: StructProperty
		/// Offset: 0x8A4
		/// Size: 0x08
		/// </summary>
		public FVector2D ScrollbarThickness => ReadStruct<FVector2D>(0x8A4);
		
		/// <summary>
		/// Name: AlwaysShowScrollbar
		/// Type: BoolProperty
		/// Offset: 0x8AC
		/// Size: 0x01
		/// </summary>
		public bool AlwaysShowScrollbar
		{
			get
			{
				return ReadBool(0x8AC);
			}
			set
			{
				WriteBool(0x8AC,value);
			}
		}
		
	}


	/// <summary>
	/// UUniformGridPanel:UPanelWidget
	/// Size: 0x158
	/// Properties: 3
	/// </summary>
	public class UUniformGridPanel:UPanelWidget
	{
		public override int ObjectSize => 344;
		/// <summary>
		/// Name: SlotPadding
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x10
		/// </summary>
		public FMargin SlotPadding => ReadStruct<FMargin>(0x130);
		
		/// <summary>
		/// Name: MinDesiredSlotWidth
		/// Type: FloatProperty
		/// Offset: 0x140
		/// Size: 0x04
		/// </summary>
		public float MinDesiredSlotWidth
		{
			get
			{
				return ReadSingle(0x140);
			}
			set
			{
				WriteSingle(0x140,value);
			}
		}
		
		/// <summary>
		/// Name: MinDesiredSlotHeight
		/// Type: FloatProperty
		/// Offset: 0x144
		/// Size: 0x04
		/// </summary>
		public float MinDesiredSlotHeight
		{
			get
			{
				return ReadSingle(0x144);
			}
			set
			{
				WriteSingle(0x144,value);
			}
		}
		
	}


	/// <summary>
	/// UVerticalBox:UPanelWidget
	/// Size: 0x140
	/// Properties: 0
	/// </summary>
	public class UVerticalBox:UPanelWidget
	{
		public override int ObjectSize => 320;
	}


	/// <summary>
	/// UWidgetSwitcher:UPanelWidget
	/// Size: 0x148
	/// Properties: 1
	/// </summary>
	public class UWidgetSwitcher:UPanelWidget
	{
		public override int ObjectSize => 328;
		/// <summary>
		/// Name: ActiveWidgetIndex
		/// Type: IntProperty
		/// Offset: 0x130
		/// Size: 0x04
		/// </summary>
		public int ActiveWidgetIndex
		{
			get
			{
				return ReadInt32(0x130);
			}
			set
			{
				WriteInt32(0x130,value);
			}
		}
		
	}


	/// <summary>
	/// UWrapBox:UPanelWidget
	/// Size: 0x148
	/// Properties: 1
	/// </summary>
	public class UWrapBox:UPanelWidget
	{
		public override int ObjectSize => 328;
		/// <summary>
		/// Name: InnerSlotPadding
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x08
		/// </summary>
		public FVector2D InnerSlotPadding => ReadStruct<FVector2D>(0x130);
		
	}


	/// <summary>
	/// UProgressBar:UWidget
	/// Size: 0x338
	/// Properties: 11
	/// </summary>
	public class UProgressBar:UWidget
	{
		public override int ObjectSize => 824;
		/// <summary>
		/// Name: WidgetStyle
		/// Type: StructProperty
		/// Offset: 0x118
		/// Size: 0x1B8
		/// </summary>
		public FProgressBarStyle WidgetStyle => ReadStruct<FProgressBarStyle>(0x118);
		
		/// <summary>
		/// Name: Style
		/// Type: ObjectProperty
		/// Offset: 0x2D0
		/// Size: 0x08
		/// </summary>
		public USlateWidgetStyleAsset Style => ReadUObject<USlateWidgetStyleAsset>(0x2D0);
		
		/// <summary>
		/// Name: BackgroundImage
		/// Type: ObjectProperty
		/// Offset: 0x2D8
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset BackgroundImage => ReadUObject<USlateBrushAsset>(0x2D8);
		
		/// <summary>
		/// Name: FillImage
		/// Type: ObjectProperty
		/// Offset: 0x2E0
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset FillImage => ReadUObject<USlateBrushAsset>(0x2E0);
		
		/// <summary>
		/// Name: MarqueeImage
		/// Type: ObjectProperty
		/// Offset: 0x2E8
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset MarqueeImage => ReadUObject<USlateBrushAsset>(0x2E8);
		
		/// <summary>
		/// Name: Percent
		/// Type: FloatProperty
		/// Offset: 0x2F0
		/// Size: 0x04
		/// </summary>
		public float Percent
		{
			get
			{
				return ReadSingle(0x2F0);
			}
			set
			{
				WriteSingle(0x2F0,value);
			}
		}
		
		/// <summary>
		/// Name: BarFillType
		/// Type: ByteProperty
		/// Offset: 0x2F4
		/// Size: 0x01
		/// </summary>
		public byte BarFillType
		{
			get
			{
				return ReadByte(0x2F4);
			}
			set
			{
				WriteByte(0x2F4,value);
			}
		}
		
		/// <summary>
		/// Name: bIsMarquee
		/// Type: BoolProperty
		/// Offset: 0x2F5
		/// Size: 0x01
		/// </summary>
		public bool bIsMarquee
		{
			get
			{
				return ReadBool(0x2F5);
			}
			set
			{
				WriteBool(0x2F5,value);
			}
		}
		
		/// <summary>
		/// Name: PercentDelegate
		/// Type: DelegateProperty
		/// Offset: 0x2F8
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: FillColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x308
		/// Size: 0x10
		/// </summary>
		public FLinearColor FillColorAndOpacity => ReadStruct<FLinearColor>(0x308);
		
		/// <summary>
		/// Name: FillColorAndOpacityDelegate
		/// Type: DelegateProperty
		/// Offset: 0x318
		/// Size: 0x10
		/// </summary>
		
	}


	/// <summary>
	/// UScrollBar:UWidget
	/// Size: 0x658
	/// Properties: 5
	/// </summary>
	public class UScrollBar:UWidget
	{
		public override int ObjectSize => 1624;
		/// <summary>
		/// Name: WidgetStyle
		/// Type: StructProperty
		/// Offset: 0x118
		/// Size: 0x518
		/// </summary>
		public FScrollBarStyle WidgetStyle => ReadStruct<FScrollBarStyle>(0x118);
		
		/// <summary>
		/// Name: Style
		/// Type: ObjectProperty
		/// Offset: 0x630
		/// Size: 0x08
		/// </summary>
		public USlateWidgetStyleAsset Style => ReadUObject<USlateWidgetStyleAsset>(0x630);
		
		/// <summary>
		/// Name: bAlwaysShowScrollbar
		/// Type: BoolProperty
		/// Offset: 0x638
		/// Size: 0x01
		/// </summary>
		public bool bAlwaysShowScrollbar
		{
			get
			{
				return ReadBool(0x638);
			}
			set
			{
				WriteBool(0x638,value);
			}
		}
		
		/// <summary>
		/// Name: Orientation
		/// Type: ByteProperty
		/// Offset: 0x639
		/// Size: 0x01
		/// </summary>
		public byte Orientation
		{
			get
			{
				return ReadByte(0x639);
			}
			set
			{
				WriteByte(0x639,value);
			}
		}
		
		/// <summary>
		/// Name: Thickness
		/// Type: StructProperty
		/// Offset: 0x63C
		/// Size: 0x08
		/// </summary>
		public FVector2D Thickness => ReadStruct<FVector2D>(0x63C);
		
	}


	/// <summary>
	/// USlider:UWidget
	/// Size: 0x410
	/// Properties: 9
	/// </summary>
	public class USlider:UWidget
	{
		public override int ObjectSize => 1040;
		/// <summary>
		/// Name: Value
		/// Type: FloatProperty
		/// Offset: 0x118
		/// Size: 0x04
		/// </summary>
		public float Value
		{
			get
			{
				return ReadSingle(0x118);
			}
			set
			{
				WriteSingle(0x118,value);
			}
		}
		
		/// <summary>
		/// Name: ValueDelegate
		/// Type: DelegateProperty
		/// Offset: 0x120
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: WidgetStyle
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x250
		/// </summary>
		public FSliderStyle WidgetStyle => ReadStruct<FSliderStyle>(0x130);
		
		/// <summary>
		/// Name: Orientation
		/// Type: ByteProperty
		/// Offset: 0x380
		/// Size: 0x01
		/// </summary>
		public byte Orientation
		{
			get
			{
				return ReadByte(0x380);
			}
			set
			{
				WriteByte(0x380,value);
			}
		}
		
		/// <summary>
		/// Name: SliderBarColor
		/// Type: StructProperty
		/// Offset: 0x384
		/// Size: 0x10
		/// </summary>
		public FLinearColor SliderBarColor => ReadStruct<FLinearColor>(0x384);
		
		/// <summary>
		/// Name: SliderHandleColor
		/// Type: StructProperty
		/// Offset: 0x394
		/// Size: 0x10
		/// </summary>
		public FLinearColor SliderHandleColor => ReadStruct<FLinearColor>(0x394);
		
		/// <summary>
		/// Name: IndentHandle
		/// Type: BoolProperty
		/// Offset: 0x3A4
		/// Size: 0x01
		/// </summary>
		public bool IndentHandle
		{
			get
			{
				return ReadBool(0x3A4);
			}
			set
			{
				WriteBool(0x3A4,value);
			}
		}
		
		/// <summary>
		/// Name: Locked
		/// Type: BoolProperty
		/// Offset: 0x3A5
		/// Size: 0x01
		/// </summary>
		public bool Locked
		{
			get
			{
				return ReadBool(0x3A5);
			}
			set
			{
				WriteBool(0x3A5,value);
			}
		}
		
		/// <summary>
		/// Name: StepSize
		/// Type: FloatProperty
		/// Offset: 0x3A8
		/// Size: 0x04
		/// </summary>
		public float StepSize
		{
			get
			{
				return ReadSingle(0x3A8);
			}
			set
			{
				WriteSingle(0x3A8,value);
			}
		}
		
	}


	/// <summary>
	/// USpacer:UWidget
	/// Size: 0x130
	/// Properties: 1
	/// </summary>
	public class USpacer:UWidget
	{
		public override int ObjectSize => 304;
		/// <summary>
		/// Name: Size
		/// Type: StructProperty
		/// Offset: 0x118
		/// Size: 0x08
		/// </summary>
		public FVector2D Size => ReadStruct<FVector2D>(0x118);
		
	}


	/// <summary>
	/// USpinBox:UWidget
	/// Size: 0x528
	/// Properties: 19
	/// </summary>
	public class USpinBox:UWidget
	{
		public override int ObjectSize => 1320;
		/// <summary>
		/// Name: Value
		/// Type: FloatProperty
		/// Offset: 0x118
		/// Size: 0x04
		/// </summary>
		public float Value
		{
			get
			{
				return ReadSingle(0x118);
			}
			set
			{
				WriteSingle(0x118,value);
			}
		}
		
		/// <summary>
		/// Name: ValueDelegate
		/// Type: DelegateProperty
		/// Offset: 0x120
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: WidgetStyle
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x310
		/// </summary>
		public FSpinBoxStyle WidgetStyle => ReadStruct<FSpinBoxStyle>(0x130);
		
		/// <summary>
		/// Name: Style
		/// Type: ObjectProperty
		/// Offset: 0x440
		/// Size: 0x08
		/// </summary>
		public USlateWidgetStyleAsset Style => ReadUObject<USlateWidgetStyleAsset>(0x440);
		
		/// <summary>
		/// Name: Delta
		/// Type: FloatProperty
		/// Offset: 0x448
		/// Size: 0x04
		/// </summary>
		public float Delta
		{
			get
			{
				return ReadSingle(0x448);
			}
			set
			{
				WriteSingle(0x448,value);
			}
		}
		
		/// <summary>
		/// Name: SliderExponent
		/// Type: FloatProperty
		/// Offset: 0x44C
		/// Size: 0x04
		/// </summary>
		public float SliderExponent
		{
			get
			{
				return ReadSingle(0x44C);
			}
			set
			{
				WriteSingle(0x44C,value);
			}
		}
		
		/// <summary>
		/// Name: Font
		/// Type: StructProperty
		/// Offset: 0x450
		/// Size: 0x40
		/// </summary>
		public FSlateFontInfo Font => ReadStruct<FSlateFontInfo>(0x450);
		
		/// <summary>
		/// Name: MinDesiredWidth
		/// Type: FloatProperty
		/// Offset: 0x490
		/// Size: 0x04
		/// </summary>
		public float MinDesiredWidth
		{
			get
			{
				return ReadSingle(0x490);
			}
			set
			{
				WriteSingle(0x490,value);
			}
		}
		
		/// <summary>
		/// Name: ClearKeyboardFocusOnCommit
		/// Type: BoolProperty
		/// Offset: 0x494
		/// Size: 0x01
		/// </summary>
		public bool ClearKeyboardFocusOnCommit
		{
			get
			{
				return ReadBool(0x494);
			}
			set
			{
				WriteBool(0x494,value);
			}
		}
		
		/// <summary>
		/// Name: SelectAllTextOnCommit
		/// Type: BoolProperty
		/// Offset: 0x495
		/// Size: 0x01
		/// </summary>
		public bool SelectAllTextOnCommit
		{
			get
			{
				return ReadBool(0x495);
			}
			set
			{
				WriteBool(0x495,value);
			}
		}
		
		/// <summary>
		/// Name: ForegroundColor
		/// Type: StructProperty
		/// Offset: 0x498
		/// Size: 0x28
		/// </summary>
		public FSlateColor ForegroundColor => ReadStruct<FSlateColor>(0x498);
		
		/// <summary>
		/// Name: bOverride_MinValue
		/// Type: BoolProperty
		/// Offset: 0x500
		/// Size: 0x01
		/// </summary>
		public bool bOverride_MinValue => (ReadByte(0x0500) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_MaxValue
		/// Type: BoolProperty
		/// Offset: 0x500
		/// Size: 0x01
		/// </summary>
		public bool bOverride_MaxValue => (ReadByte(0x0500) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_MinSliderValue
		/// Type: BoolProperty
		/// Offset: 0x500
		/// Size: 0x01
		/// </summary>
		public bool bOverride_MinSliderValue => (ReadByte(0x0500) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_MaxSliderValue
		/// Type: BoolProperty
		/// Offset: 0x500
		/// Size: 0x01
		/// </summary>
		public bool bOverride_MaxSliderValue => (ReadByte(0x0500) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: MinValue
		/// Type: FloatProperty
		/// Offset: 0x504
		/// Size: 0x04
		/// </summary>
		public float MinValue
		{
			get
			{
				return ReadSingle(0x504);
			}
			set
			{
				WriteSingle(0x504,value);
			}
		}
		
		/// <summary>
		/// Name: MaxValue
		/// Type: FloatProperty
		/// Offset: 0x508
		/// Size: 0x04
		/// </summary>
		public float MaxValue
		{
			get
			{
				return ReadSingle(0x508);
			}
			set
			{
				WriteSingle(0x508,value);
			}
		}
		
		/// <summary>
		/// Name: MinSliderValue
		/// Type: FloatProperty
		/// Offset: 0x50C
		/// Size: 0x04
		/// </summary>
		public float MinSliderValue
		{
			get
			{
				return ReadSingle(0x50C);
			}
			set
			{
				WriteSingle(0x50C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxSliderValue
		/// Type: FloatProperty
		/// Offset: 0x510
		/// Size: 0x04
		/// </summary>
		public float MaxSliderValue
		{
			get
			{
				return ReadSingle(0x510);
			}
			set
			{
				WriteSingle(0x510,value);
			}
		}
		
	}


	/// <summary>
	/// UTableViewBase:UWidget
	/// Size: 0x118
	/// Properties: 0
	/// </summary>
	public class UTableViewBase:UWidget
	{
		public override int ObjectSize => 280;
	}


	/// <summary>
	/// UListView:UTableViewBase
	/// Size: 0x158
	/// Properties: 4
	/// </summary>
	public class UListView:UTableViewBase
	{
		public override int ObjectSize => 344;
		/// <summary>
		/// Name: ItemHeight
		/// Type: FloatProperty
		/// Offset: 0x118
		/// Size: 0x04
		/// </summary>
		public float ItemHeight
		{
			get
			{
				return ReadSingle(0x118);
			}
			set
			{
				WriteSingle(0x118,value);
			}
		}
		
		/// <summary>
		/// Name: Items
		/// Type: TArray<UObject>
		/// Offset: 0x120
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UObject> Items => new TArray<UObject>(BaseAddress+0x120);
		
		/// <summary>
		/// Name: SelectionMode
		/// Type: ByteProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public byte SelectionMode
		{
			get
			{
				return ReadByte(0x130);
			}
			set
			{
				WriteByte(0x130,value);
			}
		}
		
		/// <summary>
		/// Name: OnGenerateRowEvent
		/// Type: DelegateProperty
		/// Offset: 0x138
		/// Size: 0x10
		/// </summary>
		
	}


	/// <summary>
	/// UTileView:UTableViewBase
	/// Size: 0x158
	/// Properties: 5
	/// </summary>
	public class UTileView:UTableViewBase
	{
		public override int ObjectSize => 344;
		/// <summary>
		/// Name: ItemWidth
		/// Type: FloatProperty
		/// Offset: 0x118
		/// Size: 0x04
		/// </summary>
		public float ItemWidth
		{
			get
			{
				return ReadSingle(0x118);
			}
			set
			{
				WriteSingle(0x118,value);
			}
		}
		
		/// <summary>
		/// Name: ItemHeight
		/// Type: FloatProperty
		/// Offset: 0x11C
		/// Size: 0x04
		/// </summary>
		public float ItemHeight
		{
			get
			{
				return ReadSingle(0x11C);
			}
			set
			{
				WriteSingle(0x11C,value);
			}
		}
		
		/// <summary>
		/// Name: Items
		/// Type: TArray<UObject>
		/// Offset: 0x120
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UObject> Items => new TArray<UObject>(BaseAddress+0x120);
		
		/// <summary>
		/// Name: SelectionMode
		/// Type: ByteProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public byte SelectionMode
		{
			get
			{
				return ReadByte(0x130);
			}
			set
			{
				WriteByte(0x130,value);
			}
		}
		
		/// <summary>
		/// Name: OnGenerateTileEvent
		/// Type: DelegateProperty
		/// Offset: 0x138
		/// Size: 0x10
		/// </summary>
		
	}


	/// <summary>
	/// UMultiLineEditableText:UTextLayoutWidget
	/// Size: 0x348
	/// Properties: 6
	/// </summary>
	public class UMultiLineEditableText:UTextLayoutWidget
	{
		public override int ObjectSize => 840;
		/// <summary>
		/// Name: Text
		/// Type: TextProperty
		/// Offset: 0x140
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: HintText
		/// Type: TextProperty
		/// Offset: 0x158
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: HintTextDelegate
		/// Type: DelegateProperty
		/// Offset: 0x170
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: WidgetStyle
		/// Type: StructProperty
		/// Offset: 0x180
		/// Size: 0x150
		/// </summary>
		public FTextBlockStyle WidgetStyle => ReadStruct<FTextBlockStyle>(0x180);
		
		/// <summary>
		/// Name: Font
		/// Type: StructProperty
		/// Offset: 0x2D0
		/// Size: 0x40
		/// </summary>
		public FSlateFontInfo Font => ReadStruct<FSlateFontInfo>(0x2D0);
		
		/// <summary>
		/// Name: AllowContextMenu
		/// Type: BoolProperty
		/// Offset: 0x310
		/// Size: 0x01
		/// </summary>
		public bool AllowContextMenu
		{
			get
			{
				return ReadBool(0x310);
			}
			set
			{
				WriteBool(0x310,value);
			}
		}
		
	}


	/// <summary>
	/// UMultiLineEditableTextBox:UTextLayoutWidget
	/// Size: 0xBC8
	/// Properties: 11
	/// </summary>
	public class UMultiLineEditableTextBox:UTextLayoutWidget
	{
		public override int ObjectSize => 3016;
		/// <summary>
		/// Name: Text
		/// Type: TextProperty
		/// Offset: 0x140
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: HintText
		/// Type: TextProperty
		/// Offset: 0x158
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: HintTextDelegate
		/// Type: DelegateProperty
		/// Offset: 0x170
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: WidgetStyle
		/// Type: StructProperty
		/// Offset: 0x180
		/// Size: 0x848
		/// </summary>
		public FEditableTextBoxStyle WidgetStyle => ReadStruct<FEditableTextBoxStyle>(0x180);
		
		/// <summary>
		/// Name: TextStyle
		/// Type: StructProperty
		/// Offset: 0x9C8
		/// Size: 0x150
		/// </summary>
		public FTextBlockStyle TextStyle => ReadStruct<FTextBlockStyle>(0x9C8);
		
		/// <summary>
		/// Name: AllowContextMenu
		/// Type: BoolProperty
		/// Offset: 0xB18
		/// Size: 0x01
		/// </summary>
		public bool AllowContextMenu
		{
			get
			{
				return ReadBool(0xB18);
			}
			set
			{
				WriteBool(0xB18,value);
			}
		}
		
		/// <summary>
		/// Name: Style
		/// Type: ObjectProperty
		/// Offset: 0xB20
		/// Size: 0x08
		/// </summary>
		public USlateWidgetStyleAsset Style => ReadUObject<USlateWidgetStyleAsset>(0xB20);
		
		/// <summary>
		/// Name: Font
		/// Type: StructProperty
		/// Offset: 0xB28
		/// Size: 0x40
		/// </summary>
		public FSlateFontInfo Font => ReadStruct<FSlateFontInfo>(0xB28);
		
		/// <summary>
		/// Name: ForegroundColor
		/// Type: StructProperty
		/// Offset: 0xB68
		/// Size: 0x10
		/// </summary>
		public FLinearColor ForegroundColor => ReadStruct<FLinearColor>(0xB68);
		
		/// <summary>
		/// Name: BackgroundColor
		/// Type: StructProperty
		/// Offset: 0xB78
		/// Size: 0x10
		/// </summary>
		public FLinearColor BackgroundColor => ReadStruct<FLinearColor>(0xB78);
		
		/// <summary>
		/// Name: ReadOnlyForegroundColor
		/// Type: StructProperty
		/// Offset: 0xB88
		/// Size: 0x10
		/// </summary>
		public FLinearColor ReadOnlyForegroundColor => ReadStruct<FLinearColor>(0xB88);
		
	}


	/// <summary>
	/// UTextBlock:UTextLayoutWidget
	/// Size: 0x220
	/// Properties: 10
	/// </summary>
	public class UTextBlock:UTextLayoutWidget
	{
		public override int ObjectSize => 544;
		/// <summary>
		/// Name: Text
		/// Type: TextProperty
		/// Offset: 0x140
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: TextDelegate
		/// Type: DelegateProperty
		/// Offset: 0x158
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: ColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x168
		/// Size: 0x28
		/// </summary>
		public FSlateColor ColorAndOpacity => ReadStruct<FSlateColor>(0x168);
		
		/// <summary>
		/// Name: ColorAndOpacityDelegate
		/// Type: DelegateProperty
		/// Offset: 0x190
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: Font
		/// Type: StructProperty
		/// Offset: 0x1A0
		/// Size: 0x40
		/// </summary>
		public FSlateFontInfo Font => ReadStruct<FSlateFontInfo>(0x1A0);
		
		/// <summary>
		/// Name: ShadowOffset
		/// Type: StructProperty
		/// Offset: 0x1E0
		/// Size: 0x08
		/// </summary>
		public FVector2D ShadowOffset => ReadStruct<FVector2D>(0x1E0);
		
		/// <summary>
		/// Name: ShadowColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x1E8
		/// Size: 0x10
		/// </summary>
		public FLinearColor ShadowColorAndOpacity => ReadStruct<FLinearColor>(0x1E8);
		
		/// <summary>
		/// Name: ShadowColorAndOpacityDelegate
		/// Type: DelegateProperty
		/// Offset: 0x1F8
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: MinDesiredWidth
		/// Type: FloatProperty
		/// Offset: 0x208
		/// Size: 0x04
		/// </summary>
		public float MinDesiredWidth
		{
			get
			{
				return ReadSingle(0x208);
			}
			set
			{
				WriteSingle(0x208,value);
			}
		}
		
		/// <summary>
		/// Name: bWrapWithInvalidationPanel
		/// Type: BoolProperty
		/// Offset: 0x20C
		/// Size: 0x01
		/// </summary>
		public bool bWrapWithInvalidationPanel
		{
			get
			{
				return ReadBool(0x20C);
			}
			set
			{
				WriteBool(0x20C,value);
			}
		}
		
	}


	/// <summary>
	/// UThrobber:UWidget
	/// Size: 0x1C8
	/// Properties: 6
	/// </summary>
	public class UThrobber:UWidget
	{
		public override int ObjectSize => 456;
		/// <summary>
		/// Name: NumberOfPieces
		/// Type: IntProperty
		/// Offset: 0x118
		/// Size: 0x04
		/// </summary>
		public int NumberOfPieces
		{
			get
			{
				return ReadInt32(0x118);
			}
			set
			{
				WriteInt32(0x118,value);
			}
		}
		
		/// <summary>
		/// Name: bAnimateHorizontally
		/// Type: BoolProperty
		/// Offset: 0x11C
		/// Size: 0x01
		/// </summary>
		public bool bAnimateHorizontally
		{
			get
			{
				return ReadBool(0x11C);
			}
			set
			{
				WriteBool(0x11C,value);
			}
		}
		
		/// <summary>
		/// Name: bAnimateVertically
		/// Type: BoolProperty
		/// Offset: 0x11D
		/// Size: 0x01
		/// </summary>
		public bool bAnimateVertically
		{
			get
			{
				return ReadBool(0x11D);
			}
			set
			{
				WriteBool(0x11D,value);
			}
		}
		
		/// <summary>
		/// Name: bAnimateOpacity
		/// Type: BoolProperty
		/// Offset: 0x11E
		/// Size: 0x01
		/// </summary>
		public bool bAnimateOpacity
		{
			get
			{
				return ReadBool(0x11E);
			}
			set
			{
				WriteBool(0x11E,value);
			}
		}
		
		/// <summary>
		/// Name: PieceImage
		/// Type: ObjectProperty
		/// Offset: 0x120
		/// Size: 0x08
		/// </summary>
		public USlateBrushAsset PieceImage => ReadUObject<USlateBrushAsset>(0x120);
		
		/// <summary>
		/// Name: Image
		/// Type: StructProperty
		/// Offset: 0x128
		/// Size: 0x90
		/// </summary>
		public FSlateBrush Image => ReadStruct<FSlateBrush>(0x128);
		
	}


	/// <summary>
	/// UWidgetTree:UObject
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class UWidgetTree:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: RootWidget
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UWidget RootWidget => ReadUObject<UWidget>(0x28);
		
		/// <summary>
		/// Name: AllWidgets
		/// Type: TArray<UWidget>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x118
		/// </summary>
		public TArray<UWidget> AllWidgets => new TArray<UWidget>(BaseAddress+0x30);
		
	}


	/// <summary>
	/// UWidgetAnimation:UMovieSceneSequence
	/// Size: 0x1A8
	/// Properties: 2
	/// </summary>
	public class UWidgetAnimation:UMovieSceneSequence
	{
		public override int ObjectSize => 424;
		/// <summary>
		/// Name: MovieScene
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public UMovieScene MovieScene => ReadUObject<UMovieScene>(0x48);
		
		/// <summary>
		/// Name: AnimationBindings
		/// Type: TArray<FWidgetAnimationBinding>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FWidgetAnimationBinding> AnimationBindings => new TArray<FWidgetAnimationBinding>(BaseAddress+0x50);
		
	}


	/// <summary>
	/// UBlueprintGeneratedClass:UClass
	/// Size: 0x2E8
	/// Properties: 11
	/// </summary>
	public class UBlueprintGeneratedClass:UClass
	{
		public override int ObjectSize => 744;
		/// <summary>
		/// Name: NumReplicatedProperties
		/// Type: IntProperty
		/// Offset: 0x218
		/// Size: 0x04
		/// </summary>
		public int NumReplicatedProperties
		{
			get
			{
				return ReadInt32(0x218);
			}
			set
			{
				WriteInt32(0x218,value);
			}
		}
		
		/// <summary>
		/// Name: DynamicBindingObjects
		/// Type: TArray<UDynamicBlueprintBinding>
		/// Offset: 0x220
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UDynamicBlueprintBinding> DynamicBindingObjects => new TArray<UDynamicBlueprintBinding>(BaseAddress+0x220);
		
		/// <summary>
		/// Name: ComponentTemplates
		/// Type: TArray<UActorComponent>
		/// Offset: 0x230
		/// Size: 0x10
		/// SubElement Size: 0xD8
		/// </summary>
		public TArray<UActorComponent> ComponentTemplates => new TArray<UActorComponent>(BaseAddress+0x230);
		
		/// <summary>
		/// Name: Timelines
		/// Type: TArray<UTimelineTemplate>
		/// Offset: 0x240
		/// Size: 0x10
		/// SubElement Size: 0x98
		/// </summary>
		public TArray<UTimelineTemplate> Timelines => new TArray<UTimelineTemplate>(BaseAddress+0x240);
		
		/// <summary>
		/// Name: SimpleConstructionScript
		/// Type: ObjectProperty
		/// Offset: 0x250
		/// Size: 0x08
		/// </summary>
		public USimpleConstructionScript SimpleConstructionScript => ReadUObject<USimpleConstructionScript>(0x250);
		
		/// <summary>
		/// Name: InheritableComponentHandler
		/// Type: ObjectProperty
		/// Offset: 0x258
		/// Size: 0x08
		/// </summary>
		public UInheritableComponentHandler InheritableComponentHandler => ReadUObject<UInheritableComponentHandler>(0x258);
		
		/// <summary>
		/// Name: UberGraphFramePointerProperty
		/// Type: ObjectProperty
		/// Offset: 0x260
		/// Size: 0x08
		/// </summary>
		public UStructProperty UberGraphFramePointerProperty => ReadUObject<UStructProperty>(0x260);
		
		/// <summary>
		/// Name: UberGraphFunction
		/// Type: ObjectProperty
		/// Offset: 0x268
		/// Size: 0x08
		/// </summary>
		public UFunction UberGraphFunction => ReadUObject<UFunction>(0x268);
		
		/// <summary>
		/// Name: FastCallPairs
		/// Type: TArray<FEventGraphFastCallPair>
		/// Offset: 0x270
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FEventGraphFastCallPair> FastCallPairs => new TArray<FEventGraphFastCallPair>(BaseAddress+0x270);
		
		/// <summary>
		/// Name: bHasInstrumentation
		/// Type: BoolProperty
		/// Offset: 0x280
		/// Size: 0x01
		/// </summary>
		public bool bHasInstrumentation
		{
			get
			{
				return ReadBool(0x280);
			}
			set
			{
				WriteBool(0x280,value);
			}
		}
		
		/// <summary>
		/// Name: CookedComponentInstancingData
		/// Type: MapProperty
		/// Offset: 0x288
		/// Size: 0x50
		/// </summary>
		
	}


	/// <summary>
	/// UWidgetBlueprintGeneratedClass:UBlueprintGeneratedClass
	/// Size: 0x328
	/// Properties: 6
	/// </summary>
	public class UWidgetBlueprintGeneratedClass:UBlueprintGeneratedClass
	{
		public override int ObjectSize => 808;
		/// <summary>
		/// Name: WidgetTree
		/// Type: ObjectProperty
		/// Offset: 0x2E8
		/// Size: 0x08
		/// </summary>
		public UWidgetTree WidgetTree => ReadUObject<UWidgetTree>(0x2E8);
		
		/// <summary>
		/// Name: Bindings
		/// Type: TArray<FDelegateRuntimeBinding>
		/// Offset: 0x2F0
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FDelegateRuntimeBinding> Bindings => new TArray<FDelegateRuntimeBinding>(BaseAddress+0x2F0);
		
		/// <summary>
		/// Name: Animations
		/// Type: TArray<UWidgetAnimation>
		/// Offset: 0x300
		/// Size: 0x10
		/// SubElement Size: 0x1A8
		/// </summary>
		public TArray<UWidgetAnimation> Animations => new TArray<UWidgetAnimation>(BaseAddress+0x300);
		
		/// <summary>
		/// Name: NamedSlots
		/// Type: TArray<FName>
		/// Offset: 0x310
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> NamedSlots => new TArray<FName>(BaseAddress+0x310);
		
		/// <summary>
		/// Name: bCanEverTick
		/// Type: BoolProperty
		/// Offset: 0x320
		/// Size: 0x01
		/// </summary>
		public bool bCanEverTick => (ReadByte(0x0320) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bCanEverPaint
		/// Type: BoolProperty
		/// Offset: 0x320
		/// Size: 0x01
		/// </summary>
		public bool bCanEverPaint => (ReadByte(0x0320) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// UWidgetBlueprintLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UWidgetBlueprintLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UWidgetComponent:UPrimitiveComponent
	/// Size: 0x6B0
	/// Properties: 27
	/// </summary>
	public class UWidgetComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1712;
		/// <summary>
		/// Name: Space
		/// Type: ByteProperty
		/// Offset: 0x5A0
		/// Size: 0x01
		/// </summary>
		public byte Space
		{
			get
			{
				return ReadByte(0x5A0);
			}
			set
			{
				WriteByte(0x5A0,value);
			}
		}
		
		/// <summary>
		/// Name: WidgetClass
		/// Type: ClassProperty
		/// Offset: 0x5A8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: DrawSize
		/// Type: StructProperty
		/// Offset: 0x5B0
		/// Size: 0x08
		/// </summary>
		public FIntPoint DrawSize => ReadStruct<FIntPoint>(0x5B0);
		
		/// <summary>
		/// Name: Pivot
		/// Type: StructProperty
		/// Offset: 0x5B8
		/// Size: 0x08
		/// </summary>
		public FVector2D Pivot => ReadStruct<FVector2D>(0x5B8);
		
		/// <summary>
		/// Name: MaxInteractionDistance
		/// Type: FloatProperty
		/// Offset: 0x5C0
		/// Size: 0x04
		/// </summary>
		public float MaxInteractionDistance
		{
			get
			{
				return ReadSingle(0x5C0);
			}
			set
			{
				WriteSingle(0x5C0,value);
			}
		}
		
		/// <summary>
		/// Name: OwnerPlayer
		/// Type: ObjectProperty
		/// Offset: 0x5C8
		/// Size: 0x08
		/// </summary>
		public ULocalPlayer OwnerPlayer => ReadUObject<ULocalPlayer>(0x5C8);
		
		/// <summary>
		/// Name: BackgroundColor
		/// Type: StructProperty
		/// Offset: 0x5D0
		/// Size: 0x10
		/// </summary>
		public FLinearColor BackgroundColor => ReadStruct<FLinearColor>(0x5D0);
		
		/// <summary>
		/// Name: TintColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x5E0
		/// Size: 0x10
		/// </summary>
		public FLinearColor TintColorAndOpacity => ReadStruct<FLinearColor>(0x5E0);
		
		/// <summary>
		/// Name: OpacityFromTexture
		/// Type: FloatProperty
		/// Offset: 0x5F0
		/// Size: 0x04
		/// </summary>
		public float OpacityFromTexture
		{
			get
			{
				return ReadSingle(0x5F0);
			}
			set
			{
				WriteSingle(0x5F0,value);
			}
		}
		
		/// <summary>
		/// Name: BlendMode
		/// Type: ByteProperty
		/// Offset: 0x5F4
		/// Size: 0x01
		/// </summary>
		public byte BlendMode
		{
			get
			{
				return ReadByte(0x5F4);
			}
			set
			{
				WriteByte(0x5F4,value);
			}
		}
		
		/// <summary>
		/// Name: bIsOpaque
		/// Type: BoolProperty
		/// Offset: 0x5F5
		/// Size: 0x01
		/// </summary>
		public bool bIsOpaque
		{
			get
			{
				return ReadBool(0x5F5);
			}
			set
			{
				WriteBool(0x5F5,value);
			}
		}
		
		/// <summary>
		/// Name: bIsTwoSided
		/// Type: BoolProperty
		/// Offset: 0x5F6
		/// Size: 0x01
		/// </summary>
		public bool bIsTwoSided
		{
			get
			{
				return ReadBool(0x5F6);
			}
			set
			{
				WriteBool(0x5F6,value);
			}
		}
		
		/// <summary>
		/// Name: ParabolaDistortion
		/// Type: FloatProperty
		/// Offset: 0x5F8
		/// Size: 0x04
		/// </summary>
		public float ParabolaDistortion
		{
			get
			{
				return ReadSingle(0x5F8);
			}
			set
			{
				WriteSingle(0x5F8,value);
			}
		}
		
		/// <summary>
		/// Name: TickWhenOffscreen
		/// Type: BoolProperty
		/// Offset: 0x5FC
		/// Size: 0x01
		/// </summary>
		public bool TickWhenOffscreen
		{
			get
			{
				return ReadBool(0x5FC);
			}
			set
			{
				WriteBool(0x5FC,value);
			}
		}
		
		/// <summary>
		/// Name: Widget
		/// Type: ObjectProperty
		/// Offset: 0x600
		/// Size: 0x08
		/// </summary>
		public UUserWidget Widget => ReadUObject<UUserWidget>(0x600);
		
		/// <summary>
		/// Name: BodySetup
		/// Type: ObjectProperty
		/// Offset: 0x628
		/// Size: 0x08
		/// </summary>
		public UBodySetup BodySetup => ReadUObject<UBodySetup>(0x628);
		
		/// <summary>
		/// Name: TranslucentMaterial
		/// Type: ObjectProperty
		/// Offset: 0x630
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface TranslucentMaterial => ReadUObject<UMaterialInterface>(0x630);
		
		/// <summary>
		/// Name: TranslucentMaterial_OneSided
		/// Type: ObjectProperty
		/// Offset: 0x638
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface TranslucentMaterial_OneSided => ReadUObject<UMaterialInterface>(0x638);
		
		/// <summary>
		/// Name: OpaqueMaterial
		/// Type: ObjectProperty
		/// Offset: 0x640
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface OpaqueMaterial => ReadUObject<UMaterialInterface>(0x640);
		
		/// <summary>
		/// Name: OpaqueMaterial_OneSided
		/// Type: ObjectProperty
		/// Offset: 0x648
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface OpaqueMaterial_OneSided => ReadUObject<UMaterialInterface>(0x648);
		
		/// <summary>
		/// Name: MaskedMaterial
		/// Type: ObjectProperty
		/// Offset: 0x650
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface MaskedMaterial => ReadUObject<UMaterialInterface>(0x650);
		
		/// <summary>
		/// Name: MaskedMaterial_OneSided
		/// Type: ObjectProperty
		/// Offset: 0x658
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface MaskedMaterial_OneSided => ReadUObject<UMaterialInterface>(0x658);
		
		/// <summary>
		/// Name: RenderTarget
		/// Type: ObjectProperty
		/// Offset: 0x660
		/// Size: 0x08
		/// </summary>
		public UTextureRenderTarget2D RenderTarget => ReadUObject<UTextureRenderTarget2D>(0x660);
		
		/// <summary>
		/// Name: MaterialInstance
		/// Type: ObjectProperty
		/// Offset: 0x668
		/// Size: 0x08
		/// </summary>
		public UMaterialInstanceDynamic MaterialInstance => ReadUObject<UMaterialInstanceDynamic>(0x668);
		
		/// <summary>
		/// Name: bUseLegacyRotation
		/// Type: BoolProperty
		/// Offset: 0x670
		/// Size: 0x01
		/// </summary>
		public bool bUseLegacyRotation
		{
			get
			{
				return ReadBool(0x670);
			}
			set
			{
				WriteBool(0x670,value);
			}
		}
		
		/// <summary>
		/// Name: bAddedToScreen
		/// Type: BoolProperty
		/// Offset: 0x671
		/// Size: 0x01
		/// </summary>
		public bool bAddedToScreen
		{
			get
			{
				return ReadBool(0x671);
			}
			set
			{
				WriteBool(0x671,value);
			}
		}
		
		/// <summary>
		/// Name: bEditTimeUsable
		/// Type: BoolProperty
		/// Offset: 0x672
		/// Size: 0x01
		/// </summary>
		public bool bEditTimeUsable
		{
			get
			{
				return ReadBool(0x672);
			}
			set
			{
				WriteBool(0x672,value);
			}
		}
		
	}


	/// <summary>
	/// UWidgetLayoutLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UWidgetLayoutLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UWidgetNavigation:UObject
	/// Size: 0xB8
	/// Properties: 6
	/// </summary>
	public class UWidgetNavigation:UObject
	{
		public override int ObjectSize => 184;
		/// <summary>
		/// Name: Up
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x18
		/// </summary>
		public FWidgetNavigationData Up => ReadStruct<FWidgetNavigationData>(0x28);
		
		/// <summary>
		/// Name: Down
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x18
		/// </summary>
		public FWidgetNavigationData Down => ReadStruct<FWidgetNavigationData>(0x40);
		
		/// <summary>
		/// Name: Left
		/// Type: StructProperty
		/// Offset: 0x58
		/// Size: 0x18
		/// </summary>
		public FWidgetNavigationData Left => ReadStruct<FWidgetNavigationData>(0x58);
		
		/// <summary>
		/// Name: Right
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x18
		/// </summary>
		public FWidgetNavigationData Right => ReadStruct<FWidgetNavigationData>(0x70);
		
		/// <summary>
		/// Name: Next
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0x18
		/// </summary>
		public FWidgetNavigationData Next => ReadStruct<FWidgetNavigationData>(0x88);
		
		/// <summary>
		/// Name: Previous
		/// Type: StructProperty
		/// Offset: 0xA0
		/// Size: 0x18
		/// </summary>
		public FWidgetNavigationData Previous => ReadStruct<FWidgetNavigationData>(0xA0);
		
	}


	/// <summary>
	/// UNiagaraDataObject:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNiagaraDataObject:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UNiagaraCurveDataObject:UNiagaraDataObject
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class UNiagaraCurveDataObject:UNiagaraDataObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: CurveObj
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UCurveVector CurveObj => ReadUObject<UCurveVector>(0x28);
		
	}


	/// <summary>
	/// UNiagaraSparseVolumeDataObject:UNiagaraDataObject
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class UNiagaraSparseVolumeDataObject:UNiagaraDataObject
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// ANiagaraActor:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class ANiagaraActor:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: NiagaraComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UNiagaraComponent NiagaraComponent => ReadUObject<UNiagaraComponent>(0x3D0);
		
	}


	/// <summary>
	/// UNiagaraComponent:UPrimitiveComponent
	/// Size: 0x5C0
	/// Properties: 1
	/// </summary>
	public class UNiagaraComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1472;
		/// <summary>
		/// Name: Asset
		/// Type: ObjectProperty
		/// Offset: 0x5A0
		/// Size: 0x08
		/// </summary>
		public UNiagaraEffect Asset => ReadUObject<UNiagaraEffect>(0x5A0);
		
	}


	/// <summary>
	/// UNiagaraScript:UObject
	/// Size: 0x1F0
	/// Properties: 6
	/// </summary>
	public class UNiagaraScript:UObject
	{
		public override int ObjectSize => 496;
		/// <summary>
		/// Name: ByteCode
		/// Type: TArray<>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: ConstantData
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x180
		/// </summary>
		public FNiagaraScriptConstantData ConstantData => ReadStruct<FNiagaraScriptConstantData>(0x38);
		
		/// <summary>
		/// Name: Attributes
		/// Type: TArray<FNiagaraVariableInfo>
		/// Offset: 0x1B8
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FNiagaraVariableInfo> Attributes => new TArray<FNiagaraVariableInfo>(BaseAddress+0x1B8);
		
		/// <summary>
		/// Name: EventReceivers
		/// Type: TArray<FNiagaraDataSetProperties>
		/// Offset: 0x1C8
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FNiagaraDataSetProperties> EventReceivers => new TArray<FNiagaraDataSetProperties>(BaseAddress+0x1C8);
		
		/// <summary>
		/// Name: EventGenerators
		/// Type: TArray<FNiagaraDataSetProperties>
		/// Offset: 0x1D8
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FNiagaraDataSetProperties> EventGenerators => new TArray<FNiagaraDataSetProperties>(BaseAddress+0x1D8);
		
		/// <summary>
		/// Name: Usage
		/// Type: StructProperty
		/// Offset: 0x1E8
		/// Size: 0x01
		/// </summary>
		public FNiagaraScriptUsageInfo Usage => ReadStruct<FNiagaraScriptUsageInfo>(0x1E8);
		
	}


	/// <summary>
	/// UNiagaraEmitterProperties:UObject
	/// Size: 0x138
	/// Properties: 11
	/// </summary>
	public class UNiagaraEmitterProperties:UObject
	{
		public override int ObjectSize => 312;
		/// <summary>
		/// Name: EmitterName
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString EmitterName => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: bIsEnabled
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bIsEnabled
		{
			get
			{
				return ReadBool(0x38);
			}
			set
			{
				WriteBool(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: SpawnRate
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float SpawnRate
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: Material
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UMaterial Material => ReadUObject<UMaterial>(0x40);
		
		/// <summary>
		/// Name: RenderModuleType
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte RenderModuleType
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: StartTime
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float StartTime
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: EndTime
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float EndTime
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: RendererProperties
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UNiagaraEffectRendererProperties RendererProperties => ReadUObject<UNiagaraEffectRendererProperties>(0x58);
		
		/// <summary>
		/// Name: NumLoops
		/// Type: IntProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public int NumLoops
		{
			get
			{
				return ReadInt32(0x60);
			}
			set
			{
				WriteInt32(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: UpdateScriptProps
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x68
		/// </summary>
		public FNiagaraEmitterScriptProperties UpdateScriptProps => ReadStruct<FNiagaraEmitterScriptProperties>(0x68);
		
		/// <summary>
		/// Name: SpawnScriptProps
		/// Type: StructProperty
		/// Offset: 0xD0
		/// Size: 0x68
		/// </summary>
		public FNiagaraEmitterScriptProperties SpawnScriptProps => ReadStruct<FNiagaraEmitterScriptProperties>(0xD0);
		
	}


	/// <summary>
	/// UNiagaraEffect:UObject
	/// Size: 0x48
	/// Properties: 2
	/// </summary>
	public class UNiagaraEffect:UObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: EmitterPropsSerialized
		/// Type: TArray<FDeprecatedNiagaraEmitterProperties>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x2E0
		/// </summary>
		public TArray<FDeprecatedNiagaraEmitterProperties> EmitterPropsSerialized => new TArray<FDeprecatedNiagaraEmitterProperties>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: EmitterProps
		/// Type: TArray<UNiagaraEmitterProperties>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x138
		/// </summary>
		public TArray<UNiagaraEmitterProperties> EmitterProps => new TArray<UNiagaraEmitterProperties>(BaseAddress+0x38);
		
	}


	/// <summary>
	/// UNiagaraEventReceiverEmitterAction:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNiagaraEventReceiverEmitterAction:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UNiagaraEventReceiverEmitterAction_SpawnParticles:UNiagaraEventReceiverEmitterAction
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class UNiagaraEventReceiverEmitterAction_SpawnParticles:UNiagaraEventReceiverEmitterAction
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: NumParticles
		/// Type: UInt32Property
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		
	}


	/// <summary>
	/// UNiagaraFunctionLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNiagaraFunctionLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UNiagaraScriptSourceBase:UObject
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class UNiagaraScriptSourceBase:UObject
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// UNiagaraSequence:UMovieSceneSequence
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class UNiagaraSequence:UMovieSceneSequence
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: MovieScene
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UMovieScene MovieScene => ReadUObject<UMovieScene>(0x28);
		
	}


	/// <summary>
	/// ACameraRig_Crane:AActor
	/// Size: 0x420
	/// Properties: 11
	/// </summary>
	public class ACameraRig_Crane:AActor
	{
		public override int ObjectSize => 1056;
		/// <summary>
		/// Name: CranePitch
		/// Type: FloatProperty
		/// Offset: 0x3D0
		/// Size: 0x04
		/// </summary>
		public float CranePitch
		{
			get
			{
				return ReadSingle(0x3D0);
			}
			set
			{
				WriteSingle(0x3D0,value);
			}
		}
		
		/// <summary>
		/// Name: CraneYaw
		/// Type: FloatProperty
		/// Offset: 0x3D4
		/// Size: 0x04
		/// </summary>
		public float CraneYaw
		{
			get
			{
				return ReadSingle(0x3D4);
			}
			set
			{
				WriteSingle(0x3D4,value);
			}
		}
		
		/// <summary>
		/// Name: CraneArmLength
		/// Type: FloatProperty
		/// Offset: 0x3D8
		/// Size: 0x04
		/// </summary>
		public float CraneArmLength
		{
			get
			{
				return ReadSingle(0x3D8);
			}
			set
			{
				WriteSingle(0x3D8,value);
			}
		}
		
		/// <summary>
		/// Name: TransformComponent
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public USceneComponent TransformComponent => ReadUObject<USceneComponent>(0x3E0);
		
		/// <summary>
		/// Name: CraneYawControl
		/// Type: ObjectProperty
		/// Offset: 0x3E8
		/// Size: 0x08
		/// </summary>
		public USceneComponent CraneYawControl => ReadUObject<USceneComponent>(0x3E8);
		
		/// <summary>
		/// Name: CranePitchControl
		/// Type: ObjectProperty
		/// Offset: 0x3F0
		/// Size: 0x08
		/// </summary>
		public USceneComponent CranePitchControl => ReadUObject<USceneComponent>(0x3F0);
		
		/// <summary>
		/// Name: CraneCameraMount
		/// Type: ObjectProperty
		/// Offset: 0x3F8
		/// Size: 0x08
		/// </summary>
		public USceneComponent CraneCameraMount => ReadUObject<USceneComponent>(0x3F8);
		
		/// <summary>
		/// Name: PreviewMesh_CraneArm
		/// Type: ObjectProperty
		/// Offset: 0x400
		/// Size: 0x08
		/// </summary>
		public UStaticMeshComponent PreviewMesh_CraneArm => ReadUObject<UStaticMeshComponent>(0x400);
		
		/// <summary>
		/// Name: PreviewMesh_CraneBase
		/// Type: ObjectProperty
		/// Offset: 0x408
		/// Size: 0x08
		/// </summary>
		public UStaticMeshComponent PreviewMesh_CraneBase => ReadUObject<UStaticMeshComponent>(0x408);
		
		/// <summary>
		/// Name: PreviewMesh_CraneMount
		/// Type: ObjectProperty
		/// Offset: 0x410
		/// Size: 0x08
		/// </summary>
		public UStaticMeshComponent PreviewMesh_CraneMount => ReadUObject<UStaticMeshComponent>(0x410);
		
		/// <summary>
		/// Name: PreviewMesh_CraneCounterWeight
		/// Type: ObjectProperty
		/// Offset: 0x418
		/// Size: 0x08
		/// </summary>
		public UStaticMeshComponent PreviewMesh_CraneCounterWeight => ReadUObject<UStaticMeshComponent>(0x418);
		
	}


	/// <summary>
	/// ACameraRig_Rail:AActor
	/// Size: 0x418
	/// Properties: 8
	/// </summary>
	public class ACameraRig_Rail:AActor
	{
		public override int ObjectSize => 1048;
		/// <summary>
		/// Name: CurrentPositionOnRail
		/// Type: FloatProperty
		/// Offset: 0x3D0
		/// Size: 0x04
		/// </summary>
		public float CurrentPositionOnRail
		{
			get
			{
				return ReadSingle(0x3D0);
			}
			set
			{
				WriteSingle(0x3D0,value);
			}
		}
		
		/// <summary>
		/// Name: TransformComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public USceneComponent TransformComponent => ReadUObject<USceneComponent>(0x3D8);
		
		/// <summary>
		/// Name: RailSplineComponent
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public USplineComponent RailSplineComponent => ReadUObject<USplineComponent>(0x3E0);
		
		/// <summary>
		/// Name: RailCameraMount
		/// Type: ObjectProperty
		/// Offset: 0x3E8
		/// Size: 0x08
		/// </summary>
		public USceneComponent RailCameraMount => ReadUObject<USceneComponent>(0x3E8);
		
		/// <summary>
		/// Name: PreviewMesh_Rail
		/// Type: ObjectProperty
		/// Offset: 0x3F0
		/// Size: 0x08
		/// </summary>
		public USplineMeshComponent PreviewMesh_Rail => ReadUObject<USplineMeshComponent>(0x3F0);
		
		/// <summary>
		/// Name: PreviewRailMeshSegments
		/// Type: TArray<USplineMeshComponent>
		/// Offset: 0x3F8
		/// Size: 0x10
		/// SubElement Size: 0x780
		/// </summary>
		public TArray<USplineMeshComponent> PreviewRailMeshSegments => new TArray<USplineMeshComponent>(BaseAddress+0x3F8);
		
		/// <summary>
		/// Name: PreviewRailStaticMesh
		/// Type: ObjectProperty
		/// Offset: 0x408
		/// Size: 0x08
		/// </summary>
		public UStaticMesh PreviewRailStaticMesh => ReadUObject<UStaticMesh>(0x408);
		
		/// <summary>
		/// Name: PreviewMesh_Mount
		/// Type: ObjectProperty
		/// Offset: 0x410
		/// Size: 0x08
		/// </summary>
		public UStaticMeshComponent PreviewMesh_Mount => ReadUObject<UStaticMeshComponent>(0x410);
		
	}


	/// <summary>
	/// ACameraActor:AActor
	/// Size: 0x7A0
	/// Properties: 8
	/// </summary>
	public class ACameraActor:AActor
	{
		public override int ObjectSize => 1952;
		/// <summary>
		/// Name: AutoActivateForPlayer
		/// Type: ByteProperty
		/// Offset: 0x3D0
		/// Size: 0x01
		/// </summary>
		public byte AutoActivateForPlayer
		{
			get
			{
				return ReadByte(0x3D0);
			}
			set
			{
				WriteByte(0x3D0,value);
			}
		}
		
		/// <summary>
		/// Name: CameraComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public UCameraComponent CameraComponent => ReadUObject<UCameraComponent>(0x3D8);
		
		/// <summary>
		/// Name: SceneComponent
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public USceneComponent SceneComponent => ReadUObject<USceneComponent>(0x3E0);
		
		/// <summary>
		/// Name: bConstrainAspectRatio
		/// Type: BoolProperty
		/// Offset: 0x3F0
		/// Size: 0x01
		/// </summary>
		public bool bConstrainAspectRatio => (ReadByte(0x03F0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: AspectRatio
		/// Type: FloatProperty
		/// Offset: 0x3F4
		/// Size: 0x04
		/// </summary>
		public float AspectRatio
		{
			get
			{
				return ReadSingle(0x3F4);
			}
			set
			{
				WriteSingle(0x3F4,value);
			}
		}
		
		/// <summary>
		/// Name: FOVAngle
		/// Type: FloatProperty
		/// Offset: 0x3F8
		/// Size: 0x04
		/// </summary>
		public float FOVAngle
		{
			get
			{
				return ReadSingle(0x3F8);
			}
			set
			{
				WriteSingle(0x3F8,value);
			}
		}
		
		/// <summary>
		/// Name: PostProcessBlendWeight
		/// Type: FloatProperty
		/// Offset: 0x3FC
		/// Size: 0x04
		/// </summary>
		public float PostProcessBlendWeight
		{
			get
			{
				return ReadSingle(0x3FC);
			}
			set
			{
				WriteSingle(0x3FC,value);
			}
		}
		
		/// <summary>
		/// Name: PostProcessSettings
		/// Type: StructProperty
		/// Offset: 0x400
		/// Size: 0x3A0
		/// </summary>
		public FPostProcessSettings PostProcessSettings => ReadStruct<FPostProcessSettings>(0x400);
		
	}


	/// <summary>
	/// ACineCameraActor:ACameraActor
	/// Size: 0x7D8
	/// Properties: 1
	/// </summary>
	public class ACineCameraActor:ACameraActor
	{
		public override int ObjectSize => 2008;
		/// <summary>
		/// Name: LookatTrackingSettings
		/// Type: StructProperty
		/// Offset: 0x7A0
		/// Size: 0x30
		/// </summary>
		public FCameraLookatTrackingSettings LookatTrackingSettings => ReadStruct<FCameraLookatTrackingSettings>(0x7A0);
		
	}


	/// <summary>
	/// UCineCameraComponent:UCameraComponent
	/// Size: 0x6F0
	/// Properties: 12
	/// </summary>
	public class UCineCameraComponent:UCameraComponent
	{
		public override int ObjectSize => 1776;
		/// <summary>
		/// Name: FilmbackSettings
		/// Type: StructProperty
		/// Offset: 0x640
		/// Size: 0x0C
		/// </summary>
		public FCameraFilmbackSettings FilmbackSettings => ReadStruct<FCameraFilmbackSettings>(0x640);
		
		/// <summary>
		/// Name: LensSettings
		/// Type: StructProperty
		/// Offset: 0x64C
		/// Size: 0x14
		/// </summary>
		public FCameraLensSettings LensSettings => ReadStruct<FCameraLensSettings>(0x64C);
		
		/// <summary>
		/// Name: FocusSettings
		/// Type: StructProperty
		/// Offset: 0x660
		/// Size: 0x30
		/// </summary>
		public FCameraFocusSettings FocusSettings => ReadStruct<FCameraFocusSettings>(0x660);
		
		/// <summary>
		/// Name: CurrentFocalLength
		/// Type: FloatProperty
		/// Offset: 0x690
		/// Size: 0x04
		/// </summary>
		public float CurrentFocalLength
		{
			get
			{
				return ReadSingle(0x690);
			}
			set
			{
				WriteSingle(0x690,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentAperture
		/// Type: FloatProperty
		/// Offset: 0x694
		/// Size: 0x04
		/// </summary>
		public float CurrentAperture
		{
			get
			{
				return ReadSingle(0x694);
			}
			set
			{
				WriteSingle(0x694,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentFocusDistance
		/// Type: FloatProperty
		/// Offset: 0x698
		/// Size: 0x04
		/// </summary>
		public float CurrentFocusDistance
		{
			get
			{
				return ReadSingle(0x698);
			}
			set
			{
				WriteSingle(0x698,value);
			}
		}
		
		/// <summary>
		/// Name: FilmbackPresets
		/// Type: TArray<FNamedFilmbackPreset>
		/// Offset: 0x6A8
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FNamedFilmbackPreset> FilmbackPresets => new TArray<FNamedFilmbackPreset>(BaseAddress+0x6A8);
		
		/// <summary>
		/// Name: LensPresets
		/// Type: TArray<FNamedLensPreset>
		/// Offset: 0x6B8
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FNamedLensPreset> LensPresets => new TArray<FNamedLensPreset>(BaseAddress+0x6B8);
		
		/// <summary>
		/// Name: DefaultFilmbackPresetName
		/// Type: StrProperty
		/// Offset: 0x6C8
		/// Size: 0x10
		/// </summary>
		public FString DefaultFilmbackPresetName => new FString(BaseAddress+0x6C8);
		
		/// <summary>
		/// Name: DefaultLensPresetName
		/// Type: StrProperty
		/// Offset: 0x6D8
		/// Size: 0x10
		/// </summary>
		public FString DefaultLensPresetName => new FString(BaseAddress+0x6D8);
		
		/// <summary>
		/// Name: DefaultLensFocalLength
		/// Type: FloatProperty
		/// Offset: 0x6E8
		/// Size: 0x04
		/// </summary>
		public float DefaultLensFocalLength
		{
			get
			{
				return ReadSingle(0x6E8);
			}
			set
			{
				WriteSingle(0x6E8,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultLensFStop
		/// Type: FloatProperty
		/// Offset: 0x6EC
		/// Size: 0x04
		/// </summary>
		public float DefaultLensFStop
		{
			get
			{
				return ReadSingle(0x6EC);
			}
			set
			{
				WriteSingle(0x6EC,value);
			}
		}
		
	}


	/// <summary>
	/// UConsoleSettings:UObject
	/// Size: 0x70
	/// Properties: 10
	/// </summary>
	public class UConsoleSettings:UObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: MaxScrollbackSize
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int MaxScrollbackSize
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: ManualAutoCompleteList
		/// Type: TArray<FAutoCompleteCommand>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FAutoCompleteCommand> ManualAutoCompleteList => new TArray<FAutoCompleteCommand>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: AutoCompleteMapPaths
		/// Type: TArray<>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: BackgroundOpacityPercentage
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float BackgroundOpacityPercentage
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: bOrderTopToBottom
		/// Type: BoolProperty
		/// Offset: 0x54
		/// Size: 0x01
		/// </summary>
		public bool bOrderTopToBottom
		{
			get
			{
				return ReadBool(0x54);
			}
			set
			{
				WriteBool(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: InputColor
		/// Type: StructProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public FColor InputColor => ReadStruct<FColor>(0x58);
		
		/// <summary>
		/// Name: HistoryColor
		/// Type: StructProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public FColor HistoryColor => ReadStruct<FColor>(0x5C);
		
		/// <summary>
		/// Name: AutoCompleteCommandColor
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public FColor AutoCompleteCommandColor => ReadStruct<FColor>(0x60);
		
		/// <summary>
		/// Name: AutoCompleteCVarColor
		/// Type: StructProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public FColor AutoCompleteCVarColor => ReadStruct<FColor>(0x64);
		
		/// <summary>
		/// Name: AutoCompleteFadedColor
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public FColor AutoCompleteFadedColor => ReadStruct<FColor>(0x68);
		
	}


	/// <summary>
	/// UGameMapsSettings:UObject
	/// Size: 0xB0
	/// Properties: 11
	/// </summary>
	public class UGameMapsSettings:UObject
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: EditorStartupMap
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference EditorStartupMap => ReadStruct<FStringAssetReference>(0x28);
		
		/// <summary>
		/// Name: LocalMapOptions
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString LocalMapOptions => new FString(BaseAddress+0x38);
		
		/// <summary>
		/// Name: TransitionMap
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference TransitionMap => ReadStruct<FStringAssetReference>(0x48);
		
		/// <summary>
		/// Name: bUseSplitscreen
		/// Type: BoolProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public bool bUseSplitscreen
		{
			get
			{
				return ReadBool(0x58);
			}
			set
			{
				WriteBool(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: TwoPlayerSplitscreenLayout
		/// Type: ByteProperty
		/// Offset: 0x59
		/// Size: 0x01
		/// </summary>
		public byte TwoPlayerSplitscreenLayout
		{
			get
			{
				return ReadByte(0x59);
			}
			set
			{
				WriteByte(0x59,value);
			}
		}
		
		/// <summary>
		/// Name: ThreePlayerSplitscreenLayout
		/// Type: ByteProperty
		/// Offset: 0x5A
		/// Size: 0x01
		/// </summary>
		public byte ThreePlayerSplitscreenLayout
		{
			get
			{
				return ReadByte(0x5A);
			}
			set
			{
				WriteByte(0x5A,value);
			}
		}
		
		/// <summary>
		/// Name: GameInstanceClass
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x10
		/// </summary>
		public FStringClassReference GameInstanceClass => ReadStruct<FStringClassReference>(0x60);
		
		/// <summary>
		/// Name: GameDefaultMap
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference GameDefaultMap => ReadStruct<FStringAssetReference>(0x70);
		
		/// <summary>
		/// Name: ServerDefaultMap
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference ServerDefaultMap => ReadStruct<FStringAssetReference>(0x80);
		
		/// <summary>
		/// Name: GlobalDefaultGameMode
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x10
		/// </summary>
		public FStringClassReference GlobalDefaultGameMode => ReadStruct<FStringClassReference>(0x90);
		
		/// <summary>
		/// Name: GlobalDefaultServerGameMode
		/// Type: StructProperty
		/// Offset: 0xA0
		/// Size: 0x10
		/// </summary>
		public FStringClassReference GlobalDefaultServerGameMode => ReadStruct<FStringClassReference>(0xA0);
		
	}


	/// <summary>
	/// UGameNetworkManagerSettings:UObject
	/// Size: 0x58
	/// Properties: 11
	/// </summary>
	public class UGameNetworkManagerSettings:UObject
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: MinDynamicBandwidth
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int MinDynamicBandwidth
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: MaxDynamicBandwidth
		/// Type: IntProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public int MaxDynamicBandwidth
		{
			get
			{
				return ReadInt32(0x2C);
			}
			set
			{
				WriteInt32(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: TotalNetBandwidth
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int TotalNetBandwidth
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: BadPingThreshold
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int BadPingThreshold
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: bIsStandbyCheckingEnabled
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bIsStandbyCheckingEnabled => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: StandbyRxCheatTime
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float StandbyRxCheatTime
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: StandbyTxCheatTime
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float StandbyTxCheatTime
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: PercentMissingForRxStandby
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float PercentMissingForRxStandby
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: PercentMissingForTxStandby
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float PercentMissingForTxStandby
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: PercentForBadPing
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float PercentForBadPing
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: JoinInProgressStandbyWaitTime
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float JoinInProgressStandbyWaitTime
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
	}


	/// <summary>
	/// UGameSessionSettings:UObject
	/// Size: 0x38
	/// Properties: 3
	/// </summary>
	public class UGameSessionSettings:UObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: MaxSpectators
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int MaxSpectators
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: MaxPlayers
		/// Type: IntProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public int MaxPlayers
		{
			get
			{
				return ReadInt32(0x2C);
			}
			set
			{
				WriteInt32(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: bRequiresPushToTalk
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bRequiresPushToTalk => (ReadByte(0x0030) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UGeneralEngineSettings:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UGeneralEngineSettings:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UGeneralProjectSettings:UObject
	/// Size: 0xF0
	/// Properties: 12
	/// </summary>
	public class UGeneralProjectSettings:UObject
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: CompanyName
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString CompanyName => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: CompanyDistinguishedName
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString CompanyDistinguishedName => new FString(BaseAddress+0x38);
		
		/// <summary>
		/// Name: CopyrightNotice
		/// Type: StrProperty
		/// Offset: 0x48
		/// Size: 0x10
		/// </summary>
		public FString CopyrightNotice => new FString(BaseAddress+0x48);
		
		/// <summary>
		/// Name: Description
		/// Type: StrProperty
		/// Offset: 0x58
		/// Size: 0x10
		/// </summary>
		public FString Description => new FString(BaseAddress+0x58);
		
		/// <summary>
		/// Name: Homepage
		/// Type: StrProperty
		/// Offset: 0x68
		/// Size: 0x10
		/// </summary>
		public FString Homepage => new FString(BaseAddress+0x68);
		
		/// <summary>
		/// Name: LicensingTerms
		/// Type: StrProperty
		/// Offset: 0x78
		/// Size: 0x10
		/// </summary>
		public FString LicensingTerms => new FString(BaseAddress+0x78);
		
		/// <summary>
		/// Name: PrivacyPolicy
		/// Type: StrProperty
		/// Offset: 0x88
		/// Size: 0x10
		/// </summary>
		public FString PrivacyPolicy => new FString(BaseAddress+0x88);
		
		/// <summary>
		/// Name: ProjectID
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x10
		/// </summary>
		public FGuid ProjectID => ReadStruct<FGuid>(0x98);
		
		/// <summary>
		/// Name: ProjectName
		/// Type: StrProperty
		/// Offset: 0xA8
		/// Size: 0x10
		/// </summary>
		public FString ProjectName => new FString(BaseAddress+0xA8);
		
		/// <summary>
		/// Name: ProjectVersion
		/// Type: StrProperty
		/// Offset: 0xB8
		/// Size: 0x10
		/// </summary>
		public FString ProjectVersion => new FString(BaseAddress+0xB8);
		
		/// <summary>
		/// Name: SupportContact
		/// Type: StrProperty
		/// Offset: 0xC8
		/// Size: 0x10
		/// </summary>
		public FString SupportContact => new FString(BaseAddress+0xC8);
		
		/// <summary>
		/// Name: ProjectDisplayedTitle
		/// Type: TextProperty
		/// Offset: 0xD8
		/// Size: 0x18
		/// </summary>
		
	}


	/// <summary>
	/// UHudSettings:UObject
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class UHudSettings:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: bShowHUD
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bShowHUD => (ReadByte(0x0028) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: DebugDisplay
		/// Type: TArray<FName>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> DebugDisplay => new TArray<FName>(BaseAddress+0x30);
		
	}


	/// <summary>
	/// UEditableGameplayTagQuery:UObject
	/// Size: 0x98
	/// Properties: 3
	/// </summary>
	public class UEditableGameplayTagQuery:UObject
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: UserDescription
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString UserDescription => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: RootExpression
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public UEditableGameplayTagQueryExpression RootExpression => ReadUObject<UEditableGameplayTagQueryExpression>(0x48);
		
		/// <summary>
		/// Name: TagQueryExportText_Helper
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x48
		/// </summary>
		public FGameplayTagQuery TagQueryExportText_Helper => ReadStruct<FGameplayTagQuery>(0x50);
		
	}


	/// <summary>
	/// UEditableGameplayTagQueryExpression:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UEditableGameplayTagQueryExpression:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UEditableGameplayTagQueryExpression_AnyTagsMatch:UEditableGameplayTagQueryExpression
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class UEditableGameplayTagQueryExpression_AnyTagsMatch:UEditableGameplayTagQueryExpression
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: Tags
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x20
		/// </summary>
		public FGameplayTagContainer Tags => ReadStruct<FGameplayTagContainer>(0x28);
		
	}


	/// <summary>
	/// UEditableGameplayTagQueryExpression_AllTagsMatch:UEditableGameplayTagQueryExpression
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class UEditableGameplayTagQueryExpression_AllTagsMatch:UEditableGameplayTagQueryExpression
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: Tags
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x20
		/// </summary>
		public FGameplayTagContainer Tags => ReadStruct<FGameplayTagContainer>(0x28);
		
	}


	/// <summary>
	/// UEditableGameplayTagQueryExpression_NoTagsMatch:UEditableGameplayTagQueryExpression
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class UEditableGameplayTagQueryExpression_NoTagsMatch:UEditableGameplayTagQueryExpression
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: Tags
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x20
		/// </summary>
		public FGameplayTagContainer Tags => ReadStruct<FGameplayTagContainer>(0x28);
		
	}


	/// <summary>
	/// UEditableGameplayTagQueryExpression_AnyExprMatch:UEditableGameplayTagQueryExpression
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UEditableGameplayTagQueryExpression_AnyExprMatch:UEditableGameplayTagQueryExpression
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Expressions
		/// Type: TArray<UEditableGameplayTagQueryExpression>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UEditableGameplayTagQueryExpression> Expressions => new TArray<UEditableGameplayTagQueryExpression>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UEditableGameplayTagQueryExpression_AllExprMatch:UEditableGameplayTagQueryExpression
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UEditableGameplayTagQueryExpression_AllExprMatch:UEditableGameplayTagQueryExpression
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Expressions
		/// Type: TArray<UEditableGameplayTagQueryExpression>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UEditableGameplayTagQueryExpression> Expressions => new TArray<UEditableGameplayTagQueryExpression>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UEditableGameplayTagQueryExpression_NoExprMatch:UEditableGameplayTagQueryExpression
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UEditableGameplayTagQueryExpression_NoExprMatch:UEditableGameplayTagQueryExpression
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Expressions
		/// Type: TArray<UEditableGameplayTagQueryExpression>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UEditableGameplayTagQueryExpression> Expressions => new TArray<UEditableGameplayTagQueryExpression>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UGameplayTagAssetInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UGameplayTagAssetInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UBlueprintGameplayTagLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UBlueprintGameplayTagLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UGameplayTagsManager:UObject
	/// Size: 0x1D0
	/// Properties: 1
	/// </summary>
	public class UGameplayTagsManager:UObject
	{
		public override int ObjectSize => 464;
		/// <summary>
		/// Name: GameplayTagTables
		/// Type: TArray<UDataTable>
		/// Offset: 0x100
		/// Size: 0x10
		/// SubElement Size: 0x80
		/// </summary>
		public TArray<UDataTable> GameplayTagTables => new TArray<UDataTable>(BaseAddress+0x100);
		
	}


	/// <summary>
	/// UGameplayTagsSettings:UObject
	/// Size: 0x50
	/// Properties: 3
	/// </summary>
	public class UGameplayTagsSettings:UObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: GameplayTags
		/// Type: TArray<>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: CommonlyReplicatedTags
		/// Type: TArray<>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: NetIndexFirstBitSegment
		/// Type: IntProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public int NetIndexFirstBitSegment
		{
			get
			{
				return ReadInt32(0x48);
			}
			set
			{
				WriteInt32(0x48,value);
			}
		}
		
	}


	/// <summary>
	/// UGameplayTaskOwnerInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UGameplayTaskOwnerInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UGameplayTask:UObject
	/// Size: 0x68
	/// Properties: 2
	/// </summary>
	public class UGameplayTask:UObject
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: InstanceName
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ChildTask
		/// Type: ObjectProperty
		/// Offset: 0x60
		/// Size: 0x08
		/// </summary>
		public UGameplayTask ChildTask => ReadUObject<UGameplayTask>(0x60);
		
	}


	/// <summary>
	/// UGameplayTask_SpawnActor:UGameplayTask
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UGameplayTask_SpawnActor:UGameplayTask
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: ClassToSpawn
		/// Type: ClassProperty
		/// Offset: 0xA0
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UGameplayTask_WaitDelay:UGameplayTask
	/// Size: 0x80
	/// Properties: 0
	/// </summary>
	public class UGameplayTask_WaitDelay:UGameplayTask
	{
		public override int ObjectSize => 128;
	}


	/// <summary>
	/// UGameplayTaskResource:UObject
	/// Size: 0x38
	/// Properties: 3
	/// </summary>
	public class UGameplayTaskResource:UObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: ManualResourceID
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int ManualResourceID
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: AutoResourceID
		/// Type: Int8Property
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		
		/// <summary>
		/// Name: bManuallySetID
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bManuallySetID => (ReadByte(0x0030) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UGameplayTasksComponent:UActorComponent
	/// Size: 0x140
	/// Properties: 3
	/// </summary>
	public class UGameplayTasksComponent:UActorComponent
	{
		public override int ObjectSize => 320;
		/// <summary>
		/// Name: SimulatedTasks
		/// Type: TArray<UGameplayTask>
		/// Offset: 0xE0
		/// Size: 0x10
		/// SubElement Size: 0x68
		/// </summary>
		public TArray<UGameplayTask> SimulatedTasks => new TArray<UGameplayTask>(BaseAddress+0xE0);
		
		/// <summary>
		/// Name: TaskPriorityQueue
		/// Type: TArray<UGameplayTask>
		/// Offset: 0xF0
		/// Size: 0x10
		/// SubElement Size: 0x68
		/// </summary>
		public TArray<UGameplayTask> TaskPriorityQueue => new TArray<UGameplayTask>(BaseAddress+0xF0);
		
		/// <summary>
		/// Name: TickingTasks
		/// Type: TArray<UGameplayTask>
		/// Offset: 0x110
		/// Size: 0x10
		/// SubElement Size: 0x68
		/// </summary>
		public TArray<UGameplayTask> TickingTasks => new TArray<UGameplayTask>(BaseAddress+0x110);
		
	}


	/// <summary>
	/// UAIResourceInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UAIResourceInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAIAsyncTaskBlueprintProxy:UObject
	/// Size: 0x68
	/// Properties: 0
	/// </summary>
	public class UAIAsyncTaskBlueprintProxy:UObject
	{
		public override int ObjectSize => 104;
	}


	/// <summary>
	/// UAIBlueprintHelperLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UAIBlueprintHelperLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UPawnActionsComponent:UActorComponent
	/// Size: 0x110
	/// Properties: 4
	/// </summary>
	public class UPawnActionsComponent:UActorComponent
	{
		public override int ObjectSize => 272;
		/// <summary>
		/// Name: ControlledPawn
		/// Type: ObjectProperty
		/// Offset: 0xD8
		/// Size: 0x08
		/// </summary>
		public APawn ControlledPawn => ReadUObject<APawn>(0xD8);
		
		/// <summary>
		/// Name: ActionStacks
		/// Type: TArray<FPawnActionStack>
		/// Offset: 0xE0
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FPawnActionStack> ActionStacks => new TArray<FPawnActionStack>(BaseAddress+0xE0);
		
		/// <summary>
		/// Name: ActionEvents
		/// Type: TArray<FPawnActionEvent>
		/// Offset: 0xF0
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FPawnActionEvent> ActionEvents => new TArray<FPawnActionEvent>(BaseAddress+0xF0);
		
		/// <summary>
		/// Name: CurrentAction
		/// Type: ObjectProperty
		/// Offset: 0x100
		/// Size: 0x08
		/// </summary>
		public UPawnAction CurrentAction => ReadUObject<UPawnAction>(0x100);
		
	}


	/// <summary>
	/// UAIPerceptionListenerInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UAIPerceptionListenerInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UBehaviorTreeTypes:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UBehaviorTreeTypes:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UGenericTeamAgentInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UGenericTeamAgentInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// ADetourCrowdAIController:AAIController
	/// Size: 0x4B8
	/// Properties: 0
	/// </summary>
	public class ADetourCrowdAIController:AAIController
	{
		public override int ObjectSize => 1208;
	}


	/// <summary>
	/// UAIDataProvider:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UAIDataProvider:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAIDataProvider_QueryParams:UAIDataProvider
	/// Size: 0x40
	/// Properties: 4
	/// </summary>
	public class UAIDataProvider_QueryParams:UAIDataProvider
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: ParamName
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: FloatValue
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float FloatValue
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: IntValue
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int IntValue
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: BoolValue
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool BoolValue
		{
			get
			{
				return ReadBool(0x38);
			}
			set
			{
				WriteBool(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// UAIHotSpotManager:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UAIHotSpotManager:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAISystemBase:UObject
	/// Size: 0x48
	/// Properties: 3
	/// </summary>
	public class UAISystemBase:UObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: AISystemClassName
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FStringClassReference AISystemClassName => ReadStruct<FStringClassReference>(0x28);
		
		/// <summary>
		/// Name: AISystemModuleName
		/// Type: NameProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bInstantiateAISystemOnClient
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bInstantiateAISystemOnClient
		{
			get
			{
				return ReadBool(0x40);
			}
			set
			{
				WriteBool(0x40,value);
			}
		}
		
	}


	/// <summary>
	/// UAISystem:UAISystemBase
	/// Size: 0x108
	/// Properties: 16
	/// </summary>
	public class UAISystem:UAISystemBase
	{
		public override int ObjectSize => 264;
		/// <summary>
		/// Name: PerceptionSystemClassName
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x10
		/// </summary>
		public FStringClassReference PerceptionSystemClassName => ReadStruct<FStringClassReference>(0x48);
		
		/// <summary>
		/// Name: HotSpotManagerClassName
		/// Type: StructProperty
		/// Offset: 0x58
		/// Size: 0x10
		/// </summary>
		public FStringClassReference HotSpotManagerClassName => ReadStruct<FStringClassReference>(0x58);
		
		/// <summary>
		/// Name: AcceptanceRadius
		/// Type: FloatProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public float AcceptanceRadius
		{
			get
			{
				return ReadSingle(0x68);
			}
			set
			{
				WriteSingle(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: PathfollowingRegularPathPointAcceptanceRadius
		/// Type: FloatProperty
		/// Offset: 0x6C
		/// Size: 0x04
		/// </summary>
		public float PathfollowingRegularPathPointAcceptanceRadius
		{
			get
			{
				return ReadSingle(0x6C);
			}
			set
			{
				WriteSingle(0x6C,value);
			}
		}
		
		/// <summary>
		/// Name: PathfollowingNavLinkAcceptanceRadius
		/// Type: FloatProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public float PathfollowingNavLinkAcceptanceRadius
		{
			get
			{
				return ReadSingle(0x70);
			}
			set
			{
				WriteSingle(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: bFinishMoveOnGoalOverlap
		/// Type: BoolProperty
		/// Offset: 0x74
		/// Size: 0x01
		/// </summary>
		public bool bFinishMoveOnGoalOverlap
		{
			get
			{
				return ReadBool(0x74);
			}
			set
			{
				WriteBool(0x74,value);
			}
		}
		
		/// <summary>
		/// Name: bAcceptPartialPaths
		/// Type: BoolProperty
		/// Offset: 0x75
		/// Size: 0x01
		/// </summary>
		public bool bAcceptPartialPaths
		{
			get
			{
				return ReadBool(0x75);
			}
			set
			{
				WriteBool(0x75,value);
			}
		}
		
		/// <summary>
		/// Name: bAllowStrafing
		/// Type: BoolProperty
		/// Offset: 0x76
		/// Size: 0x01
		/// </summary>
		public bool bAllowStrafing
		{
			get
			{
				return ReadBool(0x76);
			}
			set
			{
				WriteBool(0x76,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableBTAITasks
		/// Type: BoolProperty
		/// Offset: 0x77
		/// Size: 0x01
		/// </summary>
		public bool bEnableBTAITasks
		{
			get
			{
				return ReadBool(0x77);
			}
			set
			{
				WriteBool(0x77,value);
			}
		}
		
		/// <summary>
		/// Name: bAllowControllersAsEQSQuerier
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bAllowControllersAsEQSQuerier
		{
			get
			{
				return ReadBool(0x78);
			}
			set
			{
				WriteBool(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableDebuggerPlugin
		/// Type: BoolProperty
		/// Offset: 0x79
		/// Size: 0x01
		/// </summary>
		public bool bEnableDebuggerPlugin
		{
			get
			{
				return ReadBool(0x79);
			}
			set
			{
				WriteBool(0x79,value);
			}
		}
		
		/// <summary>
		/// Name: BehaviorTreeManager
		/// Type: ObjectProperty
		/// Offset: 0x80
		/// Size: 0x08
		/// </summary>
		public UBehaviorTreeManager BehaviorTreeManager => ReadUObject<UBehaviorTreeManager>(0x80);
		
		/// <summary>
		/// Name: EnvironmentQueryManager
		/// Type: ObjectProperty
		/// Offset: 0x88
		/// Size: 0x08
		/// </summary>
		public UEnvQueryManager EnvironmentQueryManager => ReadUObject<UEnvQueryManager>(0x88);
		
		/// <summary>
		/// Name: PerceptionSystem
		/// Type: ObjectProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		public UAIPerceptionSystem PerceptionSystem => ReadUObject<UAIPerceptionSystem>(0x90);
		
		/// <summary>
		/// Name: AllProxyObjects
		/// Type: TArray<UAIAsyncTaskBlueprintProxy>
		/// Offset: 0x98
		/// Size: 0x10
		/// SubElement Size: 0x68
		/// </summary>
		public TArray<UAIAsyncTaskBlueprintProxy> AllProxyObjects => new TArray<UAIAsyncTaskBlueprintProxy>(BaseAddress+0x98);
		
		/// <summary>
		/// Name: HotSpotManager
		/// Type: ObjectProperty
		/// Offset: 0xA8
		/// Size: 0x08
		/// </summary>
		public UAIHotSpotManager HotSpotManager => ReadUObject<UAIHotSpotManager>(0xA8);
		
	}


	/// <summary>
	/// UAIPerceptionSystem:UObject
	/// Size: 0x130
	/// Properties: 2
	/// </summary>
	public class UAIPerceptionSystem:UObject
	{
		public override int ObjectSize => 304;
		/// <summary>
		/// Name: Senses
		/// Type: TArray<UAISense>
		/// Offset: 0x80
		/// Size: 0x10
		/// SubElement Size: 0x120
		/// </summary>
		public TArray<UAISense> Senses => new TArray<UAISense>(BaseAddress+0x80);
		
		/// <summary>
		/// Name: PerceptionAgingRate
		/// Type: FloatProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public float PerceptionAgingRate
		{
			get
			{
				return ReadSingle(0x90);
			}
			set
			{
				WriteSingle(0x90,value);
			}
		}
		
	}


	/// <summary>
	/// UAIPerceptionComponent:UActorComponent
	/// Size: 0x1C8
	/// Properties: 8
	/// </summary>
	public class UAIPerceptionComponent:UActorComponent
	{
		public override int ObjectSize => 456;
		/// <summary>
		/// Name: HearingRange
		/// Type: FloatProperty
		/// Offset: 0xD8
		/// Size: 0x04
		/// </summary>
		public float HearingRange
		{
			get
			{
				return ReadSingle(0xD8);
			}
			set
			{
				WriteSingle(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: LoSHearingRange
		/// Type: FloatProperty
		/// Offset: 0xDC
		/// Size: 0x04
		/// </summary>
		public float LoSHearingRange
		{
			get
			{
				return ReadSingle(0xDC);
			}
			set
			{
				WriteSingle(0xDC,value);
			}
		}
		
		/// <summary>
		/// Name: SightRadius
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float SightRadius
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: LoseSightRadius
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float LoseSightRadius
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
		/// <summary>
		/// Name: PeripheralVisionAngle
		/// Type: FloatProperty
		/// Offset: 0xE8
		/// Size: 0x04
		/// </summary>
		public float PeripheralVisionAngle
		{
			get
			{
				return ReadSingle(0xE8);
			}
			set
			{
				WriteSingle(0xE8,value);
			}
		}
		
		/// <summary>
		/// Name: SensesConfig
		/// Type: TArray<UAISenseConfig>
		/// Offset: 0xF0
		/// Size: 0x10
		/// SubElement Size: 0x48
		/// </summary>
		public TArray<UAISenseConfig> SensesConfig => new TArray<UAISenseConfig>(BaseAddress+0xF0);
		
		/// <summary>
		/// Name: DominantSense
		/// Type: ClassProperty
		/// Offset: 0x100
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AIOwner
		/// Type: ObjectProperty
		/// Offset: 0x118
		/// Size: 0x08
		/// </summary>
		public AAIController AIOwner => ReadUObject<AAIController>(0x118);
		
	}


	/// <summary>
	/// UAIPerceptionStimuliSourceComponent:UActorComponent
	/// Size: 0xF0
	/// Properties: 2
	/// </summary>
	public class UAIPerceptionStimuliSourceComponent:UActorComponent
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: bAutoRegisterAsSource
		/// Type: BoolProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public bool bAutoRegisterAsSource => (ReadByte(0x00D8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: RegisterAsSourceForSenses
		/// Type: TArray<>
		/// Offset: 0xE0
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// UAIResource_Movement:UGameplayTaskResource
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class UAIResource_Movement:UGameplayTaskResource
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UAIResource_Logic:UGameplayTaskResource
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class UAIResource_Logic:UGameplayTaskResource
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UAISense_Blueprint:UAISense
	/// Size: 0x150
	/// Properties: 3
	/// </summary>
	public class UAISense_Blueprint:UAISense
	{
		public override int ObjectSize => 336;
		/// <summary>
		/// Name: ListenerDataType
		/// Type: ClassProperty
		/// Offset: 0x120
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ListenerContainer
		/// Type: TArray<UAIPerceptionComponent>
		/// Offset: 0x128
		/// Size: 0x10
		/// SubElement Size: 0x1C8
		/// </summary>
		public TArray<UAIPerceptionComponent> ListenerContainer => new TArray<UAIPerceptionComponent>(BaseAddress+0x128);
		
		/// <summary>
		/// Name: UnprocessedEvents
		/// Type: TArray<UAISenseEvent>
		/// Offset: 0x138
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UAISenseEvent> UnprocessedEvents => new TArray<UAISenseEvent>(BaseAddress+0x138);
		
	}


	/// <summary>
	/// UAISense_Damage:UAISense
	/// Size: 0x130
	/// Properties: 1
	/// </summary>
	public class UAISense_Damage:UAISense
	{
		public override int ObjectSize => 304;
		/// <summary>
		/// Name: RegisteredEvents
		/// Type: TArray<FAIDamageEvent>
		/// Offset: 0x120
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FAIDamageEvent> RegisteredEvents => new TArray<FAIDamageEvent>(BaseAddress+0x120);
		
	}


	/// <summary>
	/// UAISense_Hearing:UAISense
	/// Size: 0x190
	/// Properties: 2
	/// </summary>
	public class UAISense_Hearing:UAISense
	{
		public override int ObjectSize => 400;
		/// <summary>
		/// Name: NoiseEvents
		/// Type: TArray<FAINoiseEvent>
		/// Offset: 0x120
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FAINoiseEvent> NoiseEvents => new TArray<FAINoiseEvent>(BaseAddress+0x120);
		
		/// <summary>
		/// Name: SpeedOfSoundSq
		/// Type: FloatProperty
		/// Offset: 0x130
		/// Size: 0x04
		/// </summary>
		public float SpeedOfSoundSq
		{
			get
			{
				return ReadSingle(0x130);
			}
			set
			{
				WriteSingle(0x130,value);
			}
		}
		
	}


	/// <summary>
	/// UAISense_Prediction:UAISense
	/// Size: 0x130
	/// Properties: 1
	/// </summary>
	public class UAISense_Prediction:UAISense
	{
		public override int ObjectSize => 304;
		/// <summary>
		/// Name: RegisteredEvents
		/// Type: TArray<FAIPredictionEvent>
		/// Offset: 0x120
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FAIPredictionEvent> RegisteredEvents => new TArray<FAIPredictionEvent>(BaseAddress+0x120);
		
	}


	/// <summary>
	/// UAISense_Sight:UAISense
	/// Size: 0x1F0
	/// Properties: 6
	/// </summary>
	public class UAISense_Sight:UAISense
	{
		public override int ObjectSize => 496;
		/// <summary>
		/// Name: MaxTracesPerTick
		/// Type: IntProperty
		/// Offset: 0x1D0
		/// Size: 0x04
		/// </summary>
		public int MaxTracesPerTick
		{
			get
			{
				return ReadInt32(0x1D0);
			}
			set
			{
				WriteInt32(0x1D0,value);
			}
		}
		
		/// <summary>
		/// Name: MinQueriesPerTimeSliceCheck
		/// Type: IntProperty
		/// Offset: 0x1D4
		/// Size: 0x04
		/// </summary>
		public int MinQueriesPerTimeSliceCheck
		{
			get
			{
				return ReadInt32(0x1D4);
			}
			set
			{
				WriteInt32(0x1D4,value);
			}
		}
		
		/// <summary>
		/// Name: MaxTimeSlicePerTick
		/// Type: DoubleProperty
		/// Offset: 0x1D8
		/// Size: 0x08
		/// </summary>
		public double MaxTimeSlicePerTick
		{
			get
			{
				return ReadDouble(0x1D8);
			}
			set
			{
				WriteDouble(0x1D8,value);
			}
		}
		
		/// <summary>
		/// Name: HighImportanceQueryDistanceThreshold
		/// Type: FloatProperty
		/// Offset: 0x1E0
		/// Size: 0x04
		/// </summary>
		public float HighImportanceQueryDistanceThreshold
		{
			get
			{
				return ReadSingle(0x1E0);
			}
			set
			{
				WriteSingle(0x1E0,value);
			}
		}
		
		/// <summary>
		/// Name: MaxQueryImportance
		/// Type: FloatProperty
		/// Offset: 0x1E8
		/// Size: 0x04
		/// </summary>
		public float MaxQueryImportance
		{
			get
			{
				return ReadSingle(0x1E8);
			}
			set
			{
				WriteSingle(0x1E8,value);
			}
		}
		
		/// <summary>
		/// Name: SightLimitQueryImportance
		/// Type: FloatProperty
		/// Offset: 0x1EC
		/// Size: 0x04
		/// </summary>
		public float SightLimitQueryImportance
		{
			get
			{
				return ReadSingle(0x1EC);
			}
			set
			{
				WriteSingle(0x1EC,value);
			}
		}
		
	}


	/// <summary>
	/// UAISense_Team:UAISense
	/// Size: 0x130
	/// Properties: 1
	/// </summary>
	public class UAISense_Team:UAISense
	{
		public override int ObjectSize => 304;
		/// <summary>
		/// Name: RegisteredEvents
		/// Type: TArray<FAITeamStimulusEvent>
		/// Offset: 0x120
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FAITeamStimulusEvent> RegisteredEvents => new TArray<FAITeamStimulusEvent>(BaseAddress+0x120);
		
	}


	/// <summary>
	/// UAISense_Touch:UAISense
	/// Size: 0x130
	/// Properties: 1
	/// </summary>
	public class UAISense_Touch:UAISense
	{
		public override int ObjectSize => 304;
		/// <summary>
		/// Name: RegisteredEvents
		/// Type: TArray<FAITouchEvent>
		/// Offset: 0x120
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FAITouchEvent> RegisteredEvents => new TArray<FAITouchEvent>(BaseAddress+0x120);
		
	}


	/// <summary>
	/// UUserDefinedStruct:UScriptStruct
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UUserDefinedStruct:UScriptStruct
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Guid
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x10
		/// </summary>
		public FGuid Guid => ReadStruct<FGuid>(0x98);
		
	}


	/// <summary>
	/// UAISenseBlueprintListener:UUserDefinedStruct
	/// Size: 0xA8
	/// Properties: 0
	/// </summary>
	public class UAISenseBlueprintListener:UUserDefinedStruct
	{
		public override int ObjectSize => 168;
	}


	/// <summary>
	/// UAISenseConfig_Blueprint:UAISenseConfig
	/// Size: 0x50
	/// Properties: 1
	/// </summary>
	public class UAISenseConfig_Blueprint:UAISenseConfig
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: Implementation
		/// Type: ClassProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UAISenseConfig_Damage:UAISenseConfig
	/// Size: 0x50
	/// Properties: 1
	/// </summary>
	public class UAISenseConfig_Damage:UAISenseConfig
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: Implementation
		/// Type: ClassProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UAISenseConfig_Hearing:UAISenseConfig
	/// Size: 0x60
	/// Properties: 5
	/// </summary>
	public class UAISenseConfig_Hearing:UAISenseConfig
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: Implementation
		/// Type: ClassProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: HearingRange
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float HearingRange
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: LoSHearingRange
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float LoSHearingRange
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: bUseLoSHearing
		/// Type: BoolProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public bool bUseLoSHearing => (ReadByte(0x0058) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: DetectionByAffiliation
		/// Type: StructProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public FAISenseAffiliationFilter DetectionByAffiliation => ReadStruct<FAISenseAffiliationFilter>(0x5C);
		
	}


	/// <summary>
	/// UAISenseConfig_Prediction:UAISenseConfig
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class UAISenseConfig_Prediction:UAISenseConfig
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// UAISenseConfig_Sight:UAISenseConfig
	/// Size: 0x68
	/// Properties: 6
	/// </summary>
	public class UAISenseConfig_Sight:UAISenseConfig
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: Implementation
		/// Type: ClassProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SightRadius
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float SightRadius
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: LoseSightRadius
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float LoseSightRadius
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: PeripheralVisionAngleDegrees
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float PeripheralVisionAngleDegrees
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: DetectionByAffiliation
		/// Type: StructProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public FAISenseAffiliationFilter DetectionByAffiliation => ReadStruct<FAISenseAffiliationFilter>(0x5C);
		
		/// <summary>
		/// Name: AutoSuccessRangeFromLastSeenLocation
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float AutoSuccessRangeFromLastSeenLocation
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
	}


	/// <summary>
	/// UAISenseConfig_Team:UAISenseConfig
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class UAISenseConfig_Team:UAISenseConfig
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// UAISenseConfig_Touch:UAISenseConfig
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class UAISenseConfig_Touch:UAISenseConfig
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// UAISenseEvent:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UAISenseEvent:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAISenseEvent_Damage:UAISenseEvent
	/// Size: 0x58
	/// Properties: 1
	/// </summary>
	public class UAISenseEvent_Damage:UAISenseEvent
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: Event
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x30
		/// </summary>
		public FAIDamageEvent Event => ReadStruct<FAIDamageEvent>(0x28);
		
	}


	/// <summary>
	/// UAISenseEvent_Hearing:UAISenseEvent
	/// Size: 0x58
	/// Properties: 1
	/// </summary>
	public class UAISenseEvent_Hearing:UAISenseEvent
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: Event
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x30
		/// </summary>
		public FAINoiseEvent Event => ReadStruct<FAINoiseEvent>(0x28);
		
	}


	/// <summary>
	/// UAISightTargetInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UAISightTargetInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAITask:UGameplayTask
	/// Size: 0x70
	/// Properties: 1
	/// </summary>
	public class UAITask:UGameplayTask
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: OwnerController
		/// Type: ObjectProperty
		/// Offset: 0x68
		/// Size: 0x08
		/// </summary>
		public AAIController OwnerController => ReadUObject<AAIController>(0x68);
		
	}


	/// <summary>
	/// UAITask_LockLogic:UAITask
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UAITask_LockLogic:UAITask
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UAITask_MoveTo:UAITask
	/// Size: 0x108
	/// Properties: 1
	/// </summary>
	public class UAITask_MoveTo:UAITask
	{
		public override int ObjectSize => 264;
		/// <summary>
		/// Name: MoveRequest
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x38
		/// </summary>
		public FAIMoveRequest MoveRequest => ReadStruct<FAIMoveRequest>(0x90);
		
	}


	/// <summary>
	/// UBTNode:UObject
	/// Size: 0x58
	/// Properties: 3
	/// </summary>
	public class UBTNode:UObject
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: NodeName
		/// Type: StrProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FString NodeName => new FString(BaseAddress+0x30);
		
		/// <summary>
		/// Name: TreeAsset
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UBehaviorTree TreeAsset => ReadUObject<UBehaviorTree>(0x40);
		
		/// <summary>
		/// Name: ParentNode
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public UBTCompositeNode ParentNode => ReadUObject<UBTCompositeNode>(0x48);
		
	}


	/// <summary>
	/// UBTCompositeNode:UBTNode
	/// Size: 0xD0
	/// Properties: 2
	/// </summary>
	public class UBTCompositeNode:UBTNode
	{
		public override int ObjectSize => 208;
		/// <summary>
		/// Name: Children
		/// Type: TArray<FBTCompositeChild>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FBTCompositeChild> Children => new TArray<FBTCompositeChild>(BaseAddress+0x58);
		
		/// <summary>
		/// Name: Services
		/// Type: TArray<UBTService>
		/// Offset: 0x68
		/// Size: 0x10
		/// SubElement Size: 0x70
		/// </summary>
		public TArray<UBTService> Services => new TArray<UBTService>(BaseAddress+0x68);
		
	}


	/// <summary>
	/// UBTTaskNode:UBTNode
	/// Size: 0x70
	/// Properties: 2
	/// </summary>
	public class UBTTaskNode:UBTNode
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: Services
		/// Type: TArray<UBTService>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x70
		/// </summary>
		public TArray<UBTService> Services => new TArray<UBTService>(BaseAddress+0x58);
		
		/// <summary>
		/// Name: bIgnoreRestartSelf
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreRestartSelf => (ReadByte(0x0068) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UBehaviorTree:UObject
	/// Size: 0x60
	/// Properties: 4
	/// </summary>
	public class UBehaviorTree:UObject
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: RootNode
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UBTCompositeNode RootNode => ReadUObject<UBTCompositeNode>(0x28);
		
		/// <summary>
		/// Name: BlackboardAsset
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UBlackboardData BlackboardAsset => ReadUObject<UBlackboardData>(0x30);
		
		/// <summary>
		/// Name: RootDecorators
		/// Type: TArray<UBTDecorator>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x68
		/// </summary>
		public TArray<UBTDecorator> RootDecorators => new TArray<UBTDecorator>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: RootDecoratorOps
		/// Type: TArray<FBTDecoratorLogic>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x04
		/// </summary>
		public TArray<FBTDecoratorLogic> RootDecoratorOps => new TArray<FBTDecoratorLogic>(BaseAddress+0x48);
		
	}


	/// <summary>
	/// UBehaviorTreeManager:UObject
	/// Size: 0x50
	/// Properties: 3
	/// </summary>
	public class UBehaviorTreeManager:UObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: MaxDebuggerSteps
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int MaxDebuggerSteps
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: LoadedTemplates
		/// Type: TArray<FBehaviorTreeTemplateInfo>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FBehaviorTreeTemplateInfo> LoadedTemplates => new TArray<FBehaviorTreeTemplateInfo>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: ActiveComponents
		/// Type: TArray<UBehaviorTreeComponent>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x270
		/// </summary>
		public TArray<UBehaviorTreeComponent> ActiveComponents => new TArray<UBehaviorTreeComponent>(BaseAddress+0x40);
		
	}


	/// <summary>
	/// UBlackboardKeyType:UObject
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UBlackboardKeyType:UObject
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UBlackboardKeyType_Enum:UBlackboardKeyType
	/// Size: 0x50
	/// Properties: 3
	/// </summary>
	public class UBlackboardKeyType_Enum:UBlackboardKeyType
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: EnumType
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UEnum EnumType => ReadUObject<UEnum>(0x30);
		
		/// <summary>
		/// Name: EnumName
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString EnumName => new FString(BaseAddress+0x38);
		
		/// <summary>
		/// Name: bIsEnumNameValid
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool bIsEnumNameValid => (ReadByte(0x0048) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UBlackboardKeyType_NativeEnum:UBlackboardKeyType
	/// Size: 0x48
	/// Properties: 2
	/// </summary>
	public class UBlackboardKeyType_NativeEnum:UBlackboardKeyType
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: EnumName
		/// Type: StrProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FString EnumName => new FString(BaseAddress+0x30);
		
		/// <summary>
		/// Name: EnumType
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UEnum EnumType => ReadUObject<UEnum>(0x40);
		
	}


	/// <summary>
	/// UDataAsset:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UDataAsset:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UBlackboardData:UDataAsset
	/// Size: 0x48
	/// Properties: 3
	/// </summary>
	public class UBlackboardData:UDataAsset
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: Parent
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UBlackboardData Parent => ReadUObject<UBlackboardData>(0x28);
		
		/// <summary>
		/// Name: Keys
		/// Type: TArray<FBlackboardEntry>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FBlackboardEntry> Keys => new TArray<FBlackboardEntry>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: bHasSynchronizedKeys
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bHasSynchronizedKeys => (ReadByte(0x0040) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UBlackboardComponent:UActorComponent
	/// Size: 0x1D0
	/// Properties: 3
	/// </summary>
	public class UBlackboardComponent:UActorComponent
	{
		public override int ObjectSize => 464;
		/// <summary>
		/// Name: BrainComp
		/// Type: ObjectProperty
		/// Offset: 0xD8
		/// Size: 0x08
		/// </summary>
		public UBrainComponent BrainComp => ReadUObject<UBrainComponent>(0xD8);
		
		/// <summary>
		/// Name: BlackboardAsset
		/// Type: ObjectProperty
		/// Offset: 0xE0
		/// Size: 0x08
		/// </summary>
		public UBlackboardData BlackboardAsset => ReadUObject<UBlackboardData>(0xE0);
		
		/// <summary>
		/// Name: KeyInstances
		/// Type: TArray<UBlackboardKeyType>
		/// Offset: 0x108
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<UBlackboardKeyType> KeyInstances => new TArray<UBlackboardKeyType>(BaseAddress+0x108);
		
	}


	/// <summary>
	/// UBlackboardKeyType_Bool:UBlackboardKeyType
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UBlackboardKeyType_Bool:UBlackboardKeyType
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UBlackboardKeyType_Class:UBlackboardKeyType
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UBlackboardKeyType_Class:UBlackboardKeyType
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: BaseClass
		/// Type: ClassProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UBlackboardKeyType_Float:UBlackboardKeyType
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UBlackboardKeyType_Float:UBlackboardKeyType
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UBlackboardKeyType_Int:UBlackboardKeyType
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UBlackboardKeyType_Int:UBlackboardKeyType
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UBlackboardKeyType_Name:UBlackboardKeyType
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UBlackboardKeyType_Name:UBlackboardKeyType
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UBlackboardKeyType_Object:UBlackboardKeyType
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UBlackboardKeyType_Object:UBlackboardKeyType
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: BaseClass
		/// Type: ClassProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UBlackboardKeyType_Rotator:UBlackboardKeyType
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UBlackboardKeyType_Rotator:UBlackboardKeyType
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UBlackboardKeyType_String:UBlackboardKeyType
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class UBlackboardKeyType_String:UBlackboardKeyType
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: StringValue
		/// Type: StrProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FString StringValue => new FString(BaseAddress+0x30);
		
	}


	/// <summary>
	/// UBlackboardKeyType_Vector:UBlackboardKeyType
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UBlackboardKeyType_Vector:UBlackboardKeyType
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UBTFunctionLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UBTFunctionLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UBTAuxiliaryNode:UBTNode
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class UBTAuxiliaryNode:UBTNode
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// UBTDecorator:UBTAuxiliaryNode
	/// Size: 0x68
	/// Properties: 2
	/// </summary>
	public class UBTDecorator:UBTAuxiliaryNode
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: bInverseCondition
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bInverseCondition => (ReadByte(0x0060) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: FlowAbortMode
		/// Type: ByteProperty
		/// Offset: 0x64
		/// Size: 0x01
		/// </summary>
		public byte FlowAbortMode
		{
			get
			{
				return ReadByte(0x64);
			}
			set
			{
				WriteByte(0x64,value);
			}
		}
		
	}


	/// <summary>
	/// UBTDecorator_BlackboardBase:UBTDecorator
	/// Size: 0x90
	/// Properties: 1
	/// </summary>
	public class UBTDecorator_BlackboardBase:UBTDecorator
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: BlackboardKey
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector BlackboardKey => ReadStruct<FBlackboardKeySelector>(0x68);
		
	}


	/// <summary>
	/// UBTDecorator_Blackboard:UBTDecorator_BlackboardBase
	/// Size: 0xC0
	/// Properties: 6
	/// </summary>
	public class UBTDecorator_Blackboard:UBTDecorator_BlackboardBase
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: IntValue
		/// Type: IntProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public int IntValue
		{
			get
			{
				return ReadInt32(0x90);
			}
			set
			{
				WriteInt32(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: FloatValue
		/// Type: FloatProperty
		/// Offset: 0x94
		/// Size: 0x04
		/// </summary>
		public float FloatValue
		{
			get
			{
				return ReadSingle(0x94);
			}
			set
			{
				WriteSingle(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: StringValue
		/// Type: StrProperty
		/// Offset: 0x98
		/// Size: 0x10
		/// </summary>
		public FString StringValue => new FString(BaseAddress+0x98);
		
		/// <summary>
		/// Name: CachedDescription
		/// Type: StrProperty
		/// Offset: 0xA8
		/// Size: 0x10
		/// </summary>
		public FString CachedDescription => new FString(BaseAddress+0xA8);
		
		/// <summary>
		/// Name: OperationType
		/// Type: ByteProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public byte OperationType
		{
			get
			{
				return ReadByte(0xB8);
			}
			set
			{
				WriteByte(0xB8,value);
			}
		}
		
		/// <summary>
		/// Name: NotifyObserver
		/// Type: ByteProperty
		/// Offset: 0xB9
		/// Size: 0x01
		/// </summary>
		public byte NotifyObserver
		{
			get
			{
				return ReadByte(0xB9);
			}
			set
			{
				WriteByte(0xB9,value);
			}
		}
		
	}


	/// <summary>
	/// UBTDecorator_ConditionalLoop:UBTDecorator_Blackboard
	/// Size: 0xC0
	/// Properties: 0
	/// </summary>
	public class UBTDecorator_ConditionalLoop:UBTDecorator_Blackboard
	{
		public override int ObjectSize => 192;
	}


	/// <summary>
	/// UBTDecorator_IsAtLocation:UBTDecorator_BlackboardBase
	/// Size: 0x98
	/// Properties: 2
	/// </summary>
	public class UBTDecorator_IsAtLocation:UBTDecorator_BlackboardBase
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: AcceptableRadius
		/// Type: FloatProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public float AcceptableRadius
		{
			get
			{
				return ReadSingle(0x90);
			}
			set
			{
				WriteSingle(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: bUseNavAgentGoalLocation
		/// Type: BoolProperty
		/// Offset: 0x94
		/// Size: 0x01
		/// </summary>
		public bool bUseNavAgentGoalLocation
		{
			get
			{
				return ReadBool(0x94);
			}
			set
			{
				WriteBool(0x94,value);
			}
		}
		
	}


	/// <summary>
	/// UBTDecorator_IsBBEntryOfClass:UBTDecorator_BlackboardBase
	/// Size: 0x98
	/// Properties: 1
	/// </summary>
	public class UBTDecorator_IsBBEntryOfClass:UBTDecorator_BlackboardBase
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: TestClass
		/// Type: ClassProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UBTDecorator_BlueprintBase:UBTDecorator
	/// Size: 0xA0
	/// Properties: 6
	/// </summary>
	public class UBTDecorator_BlueprintBase:UBTDecorator
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: AIOwner
		/// Type: ObjectProperty
		/// Offset: 0x68
		/// Size: 0x08
		/// </summary>
		public AAIController AIOwner => ReadUObject<AAIController>(0x68);
		
		/// <summary>
		/// Name: ActorOwner
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public AActor ActorOwner => ReadUObject<AActor>(0x70);
		
		/// <summary>
		/// Name: ObservedKeyNames
		/// Type: TArray<FName>
		/// Offset: 0x78
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> ObservedKeyNames => new TArray<FName>(BaseAddress+0x78);
		
		/// <summary>
		/// Name: bShowPropertyDetails
		/// Type: BoolProperty
		/// Offset: 0x98
		/// Size: 0x01
		/// </summary>
		public bool bShowPropertyDetails => (ReadByte(0x0098) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bCheckConditionOnlyBlackBoardChanges
		/// Type: BoolProperty
		/// Offset: 0x98
		/// Size: 0x01
		/// </summary>
		public bool bCheckConditionOnlyBlackBoardChanges => (ReadByte(0x0098) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bIsObservingBB
		/// Type: BoolProperty
		/// Offset: 0x98
		/// Size: 0x01
		/// </summary>
		public bool bIsObservingBB => (ReadByte(0x0098) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// UBTDecorator_CheckGameplayTagsOnActor:UBTDecorator
	/// Size: 0xC8
	/// Properties: 4
	/// </summary>
	public class UBTDecorator_CheckGameplayTagsOnActor:UBTDecorator
	{
		public override int ObjectSize => 200;
		/// <summary>
		/// Name: ActorToCheck
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector ActorToCheck => ReadStruct<FBlackboardKeySelector>(0x68);
		
		/// <summary>
		/// Name: TagsToMatch
		/// Type: ByteProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public byte TagsToMatch
		{
			get
			{
				return ReadByte(0x90);
			}
			set
			{
				WriteByte(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: GameplayTags
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x20
		/// </summary>
		public FGameplayTagContainer GameplayTags => ReadStruct<FGameplayTagContainer>(0x98);
		
		/// <summary>
		/// Name: CachedDescription
		/// Type: StrProperty
		/// Offset: 0xB8
		/// Size: 0x10
		/// </summary>
		public FString CachedDescription => new FString(BaseAddress+0xB8);
		
	}


	/// <summary>
	/// UBTDecorator_CompareBBEntries:UBTDecorator
	/// Size: 0xC0
	/// Properties: 3
	/// </summary>
	public class UBTDecorator_CompareBBEntries:UBTDecorator
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: Operator
		/// Type: ByteProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public byte Operator
		{
			get
			{
				return ReadByte(0x68);
			}
			set
			{
				WriteByte(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: BlackboardKeyA
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector BlackboardKeyA => ReadStruct<FBlackboardKeySelector>(0x70);
		
		/// <summary>
		/// Name: BlackboardKeyB
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector BlackboardKeyB => ReadStruct<FBlackboardKeySelector>(0x98);
		
	}


	/// <summary>
	/// UBTDecorator_ConeCheck:UBTDecorator
	/// Size: 0xF0
	/// Properties: 4
	/// </summary>
	public class UBTDecorator_ConeCheck:UBTDecorator
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: ConeHalfAngle
		/// Type: FloatProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public float ConeHalfAngle
		{
			get
			{
				return ReadSingle(0x68);
			}
			set
			{
				WriteSingle(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: ConeOrigin
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector ConeOrigin => ReadStruct<FBlackboardKeySelector>(0x70);
		
		/// <summary>
		/// Name: ConeDirection
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector ConeDirection => ReadStruct<FBlackboardKeySelector>(0x98);
		
		/// <summary>
		/// Name: Observed
		/// Type: StructProperty
		/// Offset: 0xC0
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector Observed => ReadStruct<FBlackboardKeySelector>(0xC0);
		
	}


	/// <summary>
	/// UBTDecorator_Cooldown:UBTDecorator
	/// Size: 0x70
	/// Properties: 1
	/// </summary>
	public class UBTDecorator_Cooldown:UBTDecorator
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: CoolDownTime
		/// Type: FloatProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public float CoolDownTime
		{
			get
			{
				return ReadSingle(0x68);
			}
			set
			{
				WriteSingle(0x68,value);
			}
		}
		
	}


	/// <summary>
	/// UBTDecorator_DoesPathExist:UBTDecorator
	/// Size: 0xC8
	/// Properties: 5
	/// </summary>
	public class UBTDecorator_DoesPathExist:UBTDecorator
	{
		public override int ObjectSize => 200;
		/// <summary>
		/// Name: BlackboardKeyA
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector BlackboardKeyA => ReadStruct<FBlackboardKeySelector>(0x68);
		
		/// <summary>
		/// Name: BlackboardKeyB
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector BlackboardKeyB => ReadStruct<FBlackboardKeySelector>(0x90);
		
		/// <summary>
		/// Name: bUseSelf
		/// Type: BoolProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public bool bUseSelf => (ReadByte(0x00B8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: PathQueryType
		/// Type: ByteProperty
		/// Offset: 0xBC
		/// Size: 0x01
		/// </summary>
		public byte PathQueryType
		{
			get
			{
				return ReadByte(0xBC);
			}
			set
			{
				WriteByte(0xBC,value);
			}
		}
		
		/// <summary>
		/// Name: FilterClass
		/// Type: ClassProperty
		/// Offset: 0xC0
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UBTDecorator_ForceSuccess:UBTDecorator
	/// Size: 0x68
	/// Properties: 0
	/// </summary>
	public class UBTDecorator_ForceSuccess:UBTDecorator
	{
		public override int ObjectSize => 104;
	}


	/// <summary>
	/// UBTDecorator_KeepInCone:UBTDecorator
	/// Size: 0xC8
	/// Properties: 5
	/// </summary>
	public class UBTDecorator_KeepInCone:UBTDecorator
	{
		public override int ObjectSize => 200;
		/// <summary>
		/// Name: ConeHalfAngle
		/// Type: FloatProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public float ConeHalfAngle
		{
			get
			{
				return ReadSingle(0x68);
			}
			set
			{
				WriteSingle(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: ConeOrigin
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector ConeOrigin => ReadStruct<FBlackboardKeySelector>(0x70);
		
		/// <summary>
		/// Name: Observed
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector Observed => ReadStruct<FBlackboardKeySelector>(0x98);
		
		/// <summary>
		/// Name: bUseSelfAsOrigin
		/// Type: BoolProperty
		/// Offset: 0xC0
		/// Size: 0x01
		/// </summary>
		public bool bUseSelfAsOrigin => (ReadByte(0x00C0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUseSelfAsObserved
		/// Type: BoolProperty
		/// Offset: 0xC0
		/// Size: 0x01
		/// </summary>
		public bool bUseSelfAsObserved => (ReadByte(0x00C0) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// UBTDecorator_Loop:UBTDecorator
	/// Size: 0x78
	/// Properties: 3
	/// </summary>
	public class UBTDecorator_Loop:UBTDecorator
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: NumLoops
		/// Type: IntProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public int NumLoops
		{
			get
			{
				return ReadInt32(0x68);
			}
			set
			{
				WriteInt32(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: bInfiniteLoop
		/// Type: BoolProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public bool bInfiniteLoop
		{
			get
			{
				return ReadBool(0x6C);
			}
			set
			{
				WriteBool(0x6C,value);
			}
		}
		
		/// <summary>
		/// Name: InfiniteLoopTimeoutTime
		/// Type: FloatProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public float InfiniteLoopTimeoutTime
		{
			get
			{
				return ReadSingle(0x70);
			}
			set
			{
				WriteSingle(0x70,value);
			}
		}
		
	}


	/// <summary>
	/// UBTDecorator_ReachedMoveGoal:UBTDecorator
	/// Size: 0x68
	/// Properties: 0
	/// </summary>
	public class UBTDecorator_ReachedMoveGoal:UBTDecorator
	{
		public override int ObjectSize => 104;
	}


	/// <summary>
	/// UBTDecorator_SetTagCooldown:UBTDecorator
	/// Size: 0x78
	/// Properties: 3
	/// </summary>
	public class UBTDecorator_SetTagCooldown:UBTDecorator
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: CooldownTag
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x08
		/// </summary>
		public FGameplayTag CooldownTag => ReadStruct<FGameplayTag>(0x68);
		
		/// <summary>
		/// Name: CooldownDuration
		/// Type: FloatProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public float CooldownDuration
		{
			get
			{
				return ReadSingle(0x70);
			}
			set
			{
				WriteSingle(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: bAddToExistingDuration
		/// Type: BoolProperty
		/// Offset: 0x74
		/// Size: 0x01
		/// </summary>
		public bool bAddToExistingDuration
		{
			get
			{
				return ReadBool(0x74);
			}
			set
			{
				WriteBool(0x74,value);
			}
		}
		
	}


	/// <summary>
	/// UBTDecorator_TagCooldown:UBTDecorator
	/// Size: 0x78
	/// Properties: 4
	/// </summary>
	public class UBTDecorator_TagCooldown:UBTDecorator
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: CooldownTag
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x08
		/// </summary>
		public FGameplayTag CooldownTag => ReadStruct<FGameplayTag>(0x68);
		
		/// <summary>
		/// Name: CooldownDuration
		/// Type: FloatProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public float CooldownDuration
		{
			get
			{
				return ReadSingle(0x70);
			}
			set
			{
				WriteSingle(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: bAddToExistingDuration
		/// Type: BoolProperty
		/// Offset: 0x74
		/// Size: 0x01
		/// </summary>
		public bool bAddToExistingDuration
		{
			get
			{
				return ReadBool(0x74);
			}
			set
			{
				WriteBool(0x74,value);
			}
		}
		
		/// <summary>
		/// Name: bActivatesCooldown
		/// Type: BoolProperty
		/// Offset: 0x75
		/// Size: 0x01
		/// </summary>
		public bool bActivatesCooldown
		{
			get
			{
				return ReadBool(0x75);
			}
			set
			{
				WriteBool(0x75,value);
			}
		}
		
	}


	/// <summary>
	/// UBTDecorator_TimeLimit:UBTDecorator
	/// Size: 0x70
	/// Properties: 1
	/// </summary>
	public class UBTDecorator_TimeLimit:UBTDecorator
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: TimeLimit
		/// Type: FloatProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public float TimeLimit
		{
			get
			{
				return ReadSingle(0x68);
			}
			set
			{
				WriteSingle(0x68,value);
			}
		}
		
	}


	/// <summary>
	/// UBTService:UBTAuxiliaryNode
	/// Size: 0x70
	/// Properties: 4
	/// </summary>
	public class UBTService:UBTAuxiliaryNode
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: Interval
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float Interval
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: RandomDeviation
		/// Type: FloatProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public float RandomDeviation
		{
			get
			{
				return ReadSingle(0x64);
			}
			set
			{
				WriteSingle(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: bCallTickOnSearchStart
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bCallTickOnSearchStart => (ReadByte(0x0068) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bRestartTimerOnEachActivation
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bRestartTimerOnEachActivation => (ReadByte(0x0068) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// UBTService_BlackboardBase:UBTService
	/// Size: 0x98
	/// Properties: 1
	/// </summary>
	public class UBTService_BlackboardBase:UBTService
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: BlackboardKey
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector BlackboardKey => ReadStruct<FBlackboardKeySelector>(0x70);
		
	}


	/// <summary>
	/// UBTService_DefaultFocus:UBTService_BlackboardBase
	/// Size: 0xA0
	/// Properties: 1
	/// </summary>
	public class UBTService_DefaultFocus:UBTService_BlackboardBase
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: FocusPriority
		/// Type: ByteProperty
		/// Offset: 0x98
		/// Size: 0x01
		/// </summary>
		public byte FocusPriority
		{
			get
			{
				return ReadByte(0x98);
			}
			set
			{
				WriteByte(0x98,value);
			}
		}
		
	}


	/// <summary>
	/// UEnvQueryItemType:UObject
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UEnvQueryItemType:UObject
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UEnvQueryContext:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UEnvQueryContext:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UEnvQueryTypes:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UEnvQueryTypes:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UBTService_RunEQS:UBTService_BlackboardBase
	/// Size: 0x120
	/// Properties: 1
	/// </summary>
	public class UBTService_RunEQS:UBTService_BlackboardBase
	{
		public override int ObjectSize => 288;
		/// <summary>
		/// Name: EQSRequest
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x48
		/// </summary>
		public FEQSParametrizedQueryExecutionRequest EQSRequest => ReadStruct<FEQSParametrizedQueryExecutionRequest>(0x98);
		
	}


	/// <summary>
	/// UBTService_BlueprintBase:UBTService
	/// Size: 0x98
	/// Properties: 4
	/// </summary>
	public class UBTService_BlueprintBase:UBTService
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: AIOwner
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public AAIController AIOwner => ReadUObject<AAIController>(0x70);
		
		/// <summary>
		/// Name: ActorOwner
		/// Type: ObjectProperty
		/// Offset: 0x78
		/// Size: 0x08
		/// </summary>
		public AActor ActorOwner => ReadUObject<AActor>(0x78);
		
		/// <summary>
		/// Name: bShowPropertyDetails
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool bShowPropertyDetails => (ReadByte(0x0090) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bShowEventDetails
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool bShowEventDetails => (ReadByte(0x0090) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// UBTComposite_Selector:UBTCompositeNode
	/// Size: 0xD0
	/// Properties: 0
	/// </summary>
	public class UBTComposite_Selector:UBTCompositeNode
	{
		public override int ObjectSize => 208;
	}


	/// <summary>
	/// UBTComposite_Sequence:UBTCompositeNode
	/// Size: 0xD0
	/// Properties: 0
	/// </summary>
	public class UBTComposite_Sequence:UBTCompositeNode
	{
		public override int ObjectSize => 208;
	}


	/// <summary>
	/// UBTComposite_SimpleParallel:UBTCompositeNode
	/// Size: 0xD0
	/// Properties: 1
	/// </summary>
	public class UBTComposite_SimpleParallel:UBTCompositeNode
	{
		public override int ObjectSize => 208;
		/// <summary>
		/// Name: FinishMode
		/// Type: ByteProperty
		/// Offset: 0xC8
		/// Size: 0x01
		/// </summary>
		public byte FinishMode
		{
			get
			{
				return ReadByte(0xC8);
			}
			set
			{
				WriteByte(0xC8,value);
			}
		}
		
	}


	/// <summary>
	/// UBTTask_BlackboardBase:UBTTaskNode
	/// Size: 0x98
	/// Properties: 1
	/// </summary>
	public class UBTTask_BlackboardBase:UBTTaskNode
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: BlackboardKey
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector BlackboardKey => ReadStruct<FBlackboardKeySelector>(0x70);
		
	}


	/// <summary>
	/// UBTTask_MoveTo:UBTTask_BlackboardBase
	/// Size: 0xB0
	/// Properties: 9
	/// </summary>
	public class UBTTask_MoveTo:UBTTask_BlackboardBase
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: AcceptableRadius
		/// Type: FloatProperty
		/// Offset: 0x98
		/// Size: 0x04
		/// </summary>
		public float AcceptableRadius
		{
			get
			{
				return ReadSingle(0x98);
			}
			set
			{
				WriteSingle(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: FilterClass
		/// Type: ClassProperty
		/// Offset: 0xA0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ObservedBlackboardValueTolerance
		/// Type: FloatProperty
		/// Offset: 0xA8
		/// Size: 0x04
		/// </summary>
		public float ObservedBlackboardValueTolerance
		{
			get
			{
				return ReadSingle(0xA8);
			}
			set
			{
				WriteSingle(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: bObserveBlackboardValue
		/// Type: BoolProperty
		/// Offset: 0xAC
		/// Size: 0x01
		/// </summary>
		public bool bObserveBlackboardValue => (ReadByte(0x00AC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bAllowStrafe
		/// Type: BoolProperty
		/// Offset: 0xAC
		/// Size: 0x01
		/// </summary>
		public bool bAllowStrafe => (ReadByte(0x00AC) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bAllowPartialPath
		/// Type: BoolProperty
		/// Offset: 0xAC
		/// Size: 0x01
		/// </summary>
		public bool bAllowPartialPath => (ReadByte(0x00AC) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bTrackMovingGoal
		/// Type: BoolProperty
		/// Offset: 0xAC
		/// Size: 0x01
		/// </summary>
		public bool bTrackMovingGoal => (ReadByte(0x00AC) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bProjectGoalLocation
		/// Type: BoolProperty
		/// Offset: 0xAC
		/// Size: 0x01
		/// </summary>
		public bool bProjectGoalLocation => (ReadByte(0x00AC) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bStopOnOverlap
		/// Type: BoolProperty
		/// Offset: 0xAC
		/// Size: 0x01
		/// </summary>
		public bool bStopOnOverlap => (ReadByte(0x00AC) & 0x20) == 0x20;
		
	}


	/// <summary>
	/// UBTTask_MoveDirectlyToward:UBTTask_MoveTo
	/// Size: 0xB8
	/// Properties: 3
	/// </summary>
	public class UBTTask_MoveDirectlyToward:UBTTask_MoveTo
	{
		public override int ObjectSize => 184;
		/// <summary>
		/// Name: bDisablePathUpdateOnGoalLocationChange
		/// Type: BoolProperty
		/// Offset: 0xB0
		/// Size: 0x01
		/// </summary>
		public bool bDisablePathUpdateOnGoalLocationChange => (ReadByte(0x00B0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bProjectVectorGoalToNavigation
		/// Type: BoolProperty
		/// Offset: 0xB0
		/// Size: 0x01
		/// </summary>
		public bool bProjectVectorGoalToNavigation => (ReadByte(0x00B0) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bUpdatedDeprecatedProperties
		/// Type: BoolProperty
		/// Offset: 0xB0
		/// Size: 0x01
		/// </summary>
		public bool bUpdatedDeprecatedProperties => (ReadByte(0x00B0) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// UBTTask_RotateToFaceBBEntry:UBTTask_BlackboardBase
	/// Size: 0xA0
	/// Properties: 1
	/// </summary>
	public class UBTTask_RotateToFaceBBEntry:UBTTask_BlackboardBase
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: Precision
		/// Type: FloatProperty
		/// Offset: 0x98
		/// Size: 0x04
		/// </summary>
		public float Precision
		{
			get
			{
				return ReadSingle(0x98);
			}
			set
			{
				WriteSingle(0x98,value);
			}
		}
		
	}


	/// <summary>
	/// UBTTask_RunEQSQuery:UBTTask_BlackboardBase
	/// Size: 0x180
	/// Properties: 7
	/// </summary>
	public class UBTTask_RunEQSQuery:UBTTask_BlackboardBase
	{
		public override int ObjectSize => 384;
		/// <summary>
		/// Name: QueryTemplate
		/// Type: ObjectProperty
		/// Offset: 0x98
		/// Size: 0x08
		/// </summary>
		public UEnvQuery QueryTemplate => ReadUObject<UEnvQuery>(0x98);
		
		/// <summary>
		/// Name: QueryParams
		/// Type: TArray<FEnvNamedValue>
		/// Offset: 0xA0
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FEnvNamedValue> QueryParams => new TArray<FEnvNamedValue>(BaseAddress+0xA0);
		
		/// <summary>
		/// Name: QueryConfig
		/// Type: TArray<FAIDynamicParam>
		/// Offset: 0xB0
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FAIDynamicParam> QueryConfig => new TArray<FAIDynamicParam>(BaseAddress+0xB0);
		
		/// <summary>
		/// Name: RunMode
		/// Type: ByteProperty
		/// Offset: 0xC0
		/// Size: 0x01
		/// </summary>
		public byte RunMode
		{
			get
			{
				return ReadByte(0xC0);
			}
			set
			{
				WriteByte(0xC0,value);
			}
		}
		
		/// <summary>
		/// Name: EQSQueryBlackboardKey
		/// Type: StructProperty
		/// Offset: 0xC8
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector EQSQueryBlackboardKey => ReadStruct<FBlackboardKeySelector>(0xC8);
		
		/// <summary>
		/// Name: bUseBBKey
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool bUseBBKey
		{
			get
			{
				return ReadBool(0xF0);
			}
			set
			{
				WriteBool(0xF0,value);
			}
		}
		
		/// <summary>
		/// Name: EQSRequest
		/// Type: StructProperty
		/// Offset: 0xF8
		/// Size: 0x48
		/// </summary>
		public FEQSParametrizedQueryExecutionRequest EQSRequest => ReadStruct<FEQSParametrizedQueryExecutionRequest>(0xF8);
		
	}


	/// <summary>
	/// UBTTask_BlueprintBase:UBTTaskNode
	/// Size: 0xA0
	/// Properties: 3
	/// </summary>
	public class UBTTask_BlueprintBase:UBTTaskNode
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: AIOwner
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public AAIController AIOwner => ReadUObject<AAIController>(0x70);
		
		/// <summary>
		/// Name: ActorOwner
		/// Type: ObjectProperty
		/// Offset: 0x78
		/// Size: 0x08
		/// </summary>
		public AActor ActorOwner => ReadUObject<AActor>(0x78);
		
		/// <summary>
		/// Name: bShowPropertyDetails
		/// Type: BoolProperty
		/// Offset: 0x98
		/// Size: 0x01
		/// </summary>
		public bool bShowPropertyDetails => (ReadByte(0x0098) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UBTTask_MakeNoise:UBTTaskNode
	/// Size: 0x78
	/// Properties: 1
	/// </summary>
	public class UBTTask_MakeNoise:UBTTaskNode
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: Loudnes
		/// Type: FloatProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public float Loudnes
		{
			get
			{
				return ReadSingle(0x70);
			}
			set
			{
				WriteSingle(0x70,value);
			}
		}
		
	}


	/// <summary>
	/// UPawnAction:UObject
	/// Size: 0xD0
	/// Properties: 9
	/// </summary>
	public class UPawnAction:UObject
	{
		public override int ObjectSize => 208;
		/// <summary>
		/// Name: ChildAction
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UPawnAction ChildAction => ReadUObject<UPawnAction>(0x28);
		
		/// <summary>
		/// Name: ParentAction
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UPawnAction ParentAction => ReadUObject<UPawnAction>(0x30);
		
		/// <summary>
		/// Name: OwnerComponent
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UPawnActionsComponent OwnerComponent => ReadUObject<UPawnActionsComponent>(0x38);
		
		/// <summary>
		/// Name: Instigator
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UObject Instigator => ReadUObject<UObject>(0x40);
		
		/// <summary>
		/// Name: BrainComp
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public UBrainComponent BrainComp => ReadUObject<UBrainComponent>(0x48);
		
		/// <summary>
		/// Name: bAllowNewSameClassInstance
		/// Type: BoolProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public bool bAllowNewSameClassInstance => (ReadByte(0x00B8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bReplaceActiveSameClassInstance
		/// Type: BoolProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public bool bReplaceActiveSameClassInstance => (ReadByte(0x00B8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bShouldPauseMovement
		/// Type: BoolProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public bool bShouldPauseMovement => (ReadByte(0x00B8) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bAlwaysNotifyOnFinished
		/// Type: BoolProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public bool bAlwaysNotifyOnFinished => (ReadByte(0x00B8) & 0x08) == 0x08;
		
	}


	/// <summary>
	/// UBTTask_PawnActionBase:UBTTaskNode
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UBTTask_PawnActionBase:UBTTaskNode
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UBTTask_PushPawnAction:UBTTask_PawnActionBase
	/// Size: 0x78
	/// Properties: 1
	/// </summary>
	public class UBTTask_PushPawnAction:UBTTask_PawnActionBase
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: Action
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public UPawnAction Action => ReadUObject<UPawnAction>(0x70);
		
	}


	/// <summary>
	/// UBTTask_PlayAnimation:UBTTaskNode
	/// Size: 0xF0
	/// Properties: 5
	/// </summary>
	public class UBTTask_PlayAnimation:UBTTaskNode
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: AnimationToPlay
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public UAnimationAsset AnimationToPlay => ReadUObject<UAnimationAsset>(0x70);
		
		/// <summary>
		/// Name: bLooping
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bLooping => (ReadByte(0x0078) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bNonBlocking
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bNonBlocking => (ReadByte(0x0078) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: MyOwnerComp
		/// Type: ObjectProperty
		/// Offset: 0x80
		/// Size: 0x08
		/// </summary>
		public UBehaviorTreeComponent MyOwnerComp => ReadUObject<UBehaviorTreeComponent>(0x80);
		
		/// <summary>
		/// Name: CachedSkelMesh
		/// Type: ObjectProperty
		/// Offset: 0x88
		/// Size: 0x08
		/// </summary>
		public USkeletalMeshComponent CachedSkelMesh => ReadUObject<USkeletalMeshComponent>(0x88);
		
	}


	/// <summary>
	/// UBTTask_PlaySound:UBTTaskNode
	/// Size: 0x78
	/// Properties: 1
	/// </summary>
	public class UBTTask_PlaySound:UBTTaskNode
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: SoundToPlay
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public USoundCue SoundToPlay => ReadUObject<USoundCue>(0x70);
		
	}


	/// <summary>
	/// UBTTask_RunBehavior:UBTTaskNode
	/// Size: 0x78
	/// Properties: 1
	/// </summary>
	public class UBTTask_RunBehavior:UBTTaskNode
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: BehaviorAsset
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public UBehaviorTree BehaviorAsset => ReadUObject<UBehaviorTree>(0x70);
		
	}


	/// <summary>
	/// UBTTask_RunBehaviorDynamic:UBTTaskNode
	/// Size: 0x88
	/// Properties: 3
	/// </summary>
	public class UBTTask_RunBehaviorDynamic:UBTTaskNode
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: InjectionTag
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public FGameplayTag InjectionTag => ReadStruct<FGameplayTag>(0x70);
		
		/// <summary>
		/// Name: DefaultBehaviorAsset
		/// Type: ObjectProperty
		/// Offset: 0x78
		/// Size: 0x08
		/// </summary>
		public UBehaviorTree DefaultBehaviorAsset => ReadUObject<UBehaviorTree>(0x78);
		
		/// <summary>
		/// Name: BehaviorAsset
		/// Type: ObjectProperty
		/// Offset: 0x80
		/// Size: 0x08
		/// </summary>
		public UBehaviorTree BehaviorAsset => ReadUObject<UBehaviorTree>(0x80);
		
	}


	/// <summary>
	/// UBTTask_SetTagCooldown:UBTTaskNode
	/// Size: 0x80
	/// Properties: 3
	/// </summary>
	public class UBTTask_SetTagCooldown:UBTTaskNode
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: CooldownTag
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public FGameplayTag CooldownTag => ReadStruct<FGameplayTag>(0x70);
		
		/// <summary>
		/// Name: bAddToExistingDuration
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bAddToExistingDuration
		{
			get
			{
				return ReadBool(0x78);
			}
			set
			{
				WriteBool(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: CooldownDuration
		/// Type: FloatProperty
		/// Offset: 0x7C
		/// Size: 0x04
		/// </summary>
		public float CooldownDuration
		{
			get
			{
				return ReadSingle(0x7C);
			}
			set
			{
				WriteSingle(0x7C,value);
			}
		}
		
	}


	/// <summary>
	/// UBTTask_Wait:UBTTaskNode
	/// Size: 0x78
	/// Properties: 2
	/// </summary>
	public class UBTTask_Wait:UBTTaskNode
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: WaitTime
		/// Type: FloatProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public float WaitTime
		{
			get
			{
				return ReadSingle(0x70);
			}
			set
			{
				WriteSingle(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: RandomDeviation
		/// Type: FloatProperty
		/// Offset: 0x74
		/// Size: 0x04
		/// </summary>
		public float RandomDeviation
		{
			get
			{
				return ReadSingle(0x74);
			}
			set
			{
				WriteSingle(0x74,value);
			}
		}
		
	}


	/// <summary>
	/// UBTTask_WaitBlackboardTime:UBTTask_Wait
	/// Size: 0xA0
	/// Properties: 1
	/// </summary>
	public class UBTTask_WaitBlackboardTime:UBTTask_Wait
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: BlackboardKey
		/// Type: StructProperty
		/// Offset: 0x78
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector BlackboardKey => ReadStruct<FBlackboardKeySelector>(0x78);
		
	}


	/// <summary>
	/// UCrowdAgentInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UCrowdAgentInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UCrowdManager:UObject
	/// Size: 0xE8
	/// Properties: 10
	/// </summary>
	public class UCrowdManager:UObject
	{
		public override int ObjectSize => 232;
		/// <summary>
		/// Name: MyNavData
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public ANavigationData MyNavData => ReadUObject<ANavigationData>(0x28);
		
		/// <summary>
		/// Name: AvoidanceConfig
		/// Type: TArray<FCrowdAvoidanceConfig>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x1C
		/// </summary>
		public TArray<FCrowdAvoidanceConfig> AvoidanceConfig => new TArray<FCrowdAvoidanceConfig>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: SamplingPatterns
		/// Type: TArray<FCrowdAvoidanceSamplingPattern>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FCrowdAvoidanceSamplingPattern> SamplingPatterns => new TArray<FCrowdAvoidanceSamplingPattern>(BaseAddress+0x40);
		
		/// <summary>
		/// Name: MaxAgents
		/// Type: IntProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public int MaxAgents
		{
			get
			{
				return ReadInt32(0x50);
			}
			set
			{
				WriteInt32(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: MaxAgentRadius
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float MaxAgentRadius
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: MaxAvoidedAgents
		/// Type: IntProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public int MaxAvoidedAgents
		{
			get
			{
				return ReadInt32(0x58);
			}
			set
			{
				WriteInt32(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: MaxAvoidedWalls
		/// Type: IntProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public int MaxAvoidedWalls
		{
			get
			{
				return ReadInt32(0x5C);
			}
			set
			{
				WriteInt32(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: NavmeshCheckInterval
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float NavmeshCheckInterval
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: PathOptimizationInterval
		/// Type: FloatProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public float PathOptimizationInterval
		{
			get
			{
				return ReadSingle(0x64);
			}
			set
			{
				WriteSingle(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: bResolveCollisions
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bResolveCollisions => (ReadByte(0x0068) & 0x08) == 0x08;
		
	}


	/// <summary>
	/// UEnvQuery:UDataAsset
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class UEnvQuery:UDataAsset
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: QueryName
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Options
		/// Type: TArray<UEnvQueryOption>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UEnvQueryOption> Options => new TArray<UEnvQueryOption>(BaseAddress+0x30);
		
	}


	/// <summary>
	/// UEnvQueryContext_BlueprintBase:UEnvQueryContext
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UEnvQueryContext_BlueprintBase:UEnvQueryContext
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UEnvQueryContext_Item:UEnvQueryContext
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UEnvQueryContext_Item:UEnvQueryContext
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UEnvQueryContext_Querier:UEnvQueryContext
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UEnvQueryContext_Querier:UEnvQueryContext
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UVisualLoggerExtension:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UVisualLoggerExtension:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UEnvQueryDebugHelpers:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UEnvQueryDebugHelpers:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UEQSQueryResultSourceInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UEQSQueryResultSourceInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UEnvQueryInstanceBlueprintWrapper:UObject
	/// Size: 0x78
	/// Properties: 3
	/// </summary>
	public class UEnvQueryInstanceBlueprintWrapper:UObject
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: QueryID
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int QueryID
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: ItemType
		/// Type: ClassProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: OptionIndex
		/// Type: IntProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public int OptionIndex
		{
			get
			{
				return ReadInt32(0x60);
			}
			set
			{
				WriteInt32(0x60,value);
			}
		}
		
	}


	/// <summary>
	/// UEnvQueryItemType_VectorBase:UEnvQueryItemType
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UEnvQueryItemType_VectorBase:UEnvQueryItemType
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UEnvQueryItemType_ActorBase:UEnvQueryItemType_VectorBase
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UEnvQueryItemType_ActorBase:UEnvQueryItemType_VectorBase
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UEnvQueryItemType_Actor:UEnvQueryItemType_ActorBase
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UEnvQueryItemType_Actor:UEnvQueryItemType_ActorBase
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UEnvQueryItemType_Direction:UEnvQueryItemType_VectorBase
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UEnvQueryItemType_Direction:UEnvQueryItemType_VectorBase
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UEnvQueryItemType_Point:UEnvQueryItemType_VectorBase
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UEnvQueryItemType_Point:UEnvQueryItemType_VectorBase
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UEnvQueryManager:UObject
	/// Size: 0x138
	/// Properties: 7
	/// </summary>
	public class UEnvQueryManager:UObject
	{
		public override int ObjectSize => 312;
		/// <summary>
		/// Name: InstanceCache
		/// Type: TArray<FEnvQueryInstanceCache>
		/// Offset: 0x98
		/// Size: 0x10
		/// SubElement Size: 0x1D0
		/// </summary>
		public TArray<FEnvQueryInstanceCache> InstanceCache => new TArray<FEnvQueryInstanceCache>(BaseAddress+0x98);
		
		/// <summary>
		/// Name: LocalContexts
		/// Type: TArray<UEnvQueryContext>
		/// Offset: 0xA8
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UEnvQueryContext> LocalContexts => new TArray<UEnvQueryContext>(BaseAddress+0xA8);
		
		/// <summary>
		/// Name: GCShieldedWrappers
		/// Type: TArray<UEnvQueryInstanceBlueprintWrapper>
		/// Offset: 0xB8
		/// Size: 0x10
		/// SubElement Size: 0x78
		/// </summary>
		public TArray<UEnvQueryInstanceBlueprintWrapper> GCShieldedWrappers => new TArray<UEnvQueryInstanceBlueprintWrapper>(BaseAddress+0xB8);
		
		/// <summary>
		/// Name: MaxAllowedTestingTime
		/// Type: DoubleProperty
		/// Offset: 0x120
		/// Size: 0x08
		/// </summary>
		public double MaxAllowedTestingTime
		{
			get
			{
				return ReadDouble(0x120);
			}
			set
			{
				WriteDouble(0x120,value);
			}
		}
		
		/// <summary>
		/// Name: bTestQueriesUsingBreadth
		/// Type: BoolProperty
		/// Offset: 0x128
		/// Size: 0x01
		/// </summary>
		public bool bTestQueriesUsingBreadth
		{
			get
			{
				return ReadBool(0x128);
			}
			set
			{
				WriteBool(0x128,value);
			}
		}
		
		/// <summary>
		/// Name: QueryCountWarningThreshold
		/// Type: IntProperty
		/// Offset: 0x12C
		/// Size: 0x04
		/// </summary>
		public int QueryCountWarningThreshold
		{
			get
			{
				return ReadInt32(0x12C);
			}
			set
			{
				WriteInt32(0x12C,value);
			}
		}
		
		/// <summary>
		/// Name: QueryCountWarningInterval
		/// Type: DoubleProperty
		/// Offset: 0x130
		/// Size: 0x08
		/// </summary>
		public double QueryCountWarningInterval
		{
			get
			{
				return ReadDouble(0x130);
			}
			set
			{
				WriteDouble(0x130,value);
			}
		}
		
	}


	/// <summary>
	/// UEnvQueryNode:UObject
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class UEnvQueryNode:UObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: VerNum
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int VerNum
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// UEnvQueryGenerator:UEnvQueryNode
	/// Size: 0x50
	/// Properties: 3
	/// </summary>
	public class UEnvQueryGenerator:UEnvQueryNode
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: OptionName
		/// Type: StrProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FString OptionName => new FString(BaseAddress+0x30);
		
		/// <summary>
		/// Name: ItemType
		/// Type: ClassProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bAutoSortTests
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool bAutoSortTests => (ReadByte(0x0048) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UEnvQueryGenerator_ActorsOfClass:UEnvQueryGenerator
	/// Size: 0x90
	/// Properties: 3
	/// </summary>
	public class UEnvQueryGenerator_ActorsOfClass:UEnvQueryGenerator
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: SearchRadius
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue SearchRadius => ReadStruct<FAIDataProviderFloatValue>(0x50);
		
		/// <summary>
		/// Name: SearchedActorClass
		/// Type: ClassProperty
		/// Offset: 0x80
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SearchCenter
		/// Type: ClassProperty
		/// Offset: 0x88
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UEnvQueryGenerator_BlueprintBase:UEnvQueryGenerator
	/// Size: 0x80
	/// Properties: 3
	/// </summary>
	public class UEnvQueryGenerator_BlueprintBase:UEnvQueryGenerator
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: GeneratorsActionDescription
		/// Type: TextProperty
		/// Offset: 0x50
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: Context
		/// Type: ClassProperty
		/// Offset: 0x68
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: GeneratedItemType
		/// Type: ClassProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UEnvQueryGenerator_Composite:UEnvQueryGenerator
	/// Size: 0x68
	/// Properties: 2
	/// </summary>
	public class UEnvQueryGenerator_Composite:UEnvQueryGenerator
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: Generators
		/// Type: TArray<UEnvQueryGenerator>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x50
		/// </summary>
		public TArray<UEnvQueryGenerator> Generators => new TArray<UEnvQueryGenerator>(BaseAddress+0x50);
		
		/// <summary>
		/// Name: bHasMatchingItemType
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bHasMatchingItemType
		{
			get
			{
				return ReadBool(0x60);
			}
			set
			{
				WriteBool(0x60,value);
			}
		}
		
	}


	/// <summary>
	/// UEnvQueryGenerator_CurrentLocation:UEnvQueryGenerator
	/// Size: 0x58
	/// Properties: 1
	/// </summary>
	public class UEnvQueryGenerator_CurrentLocation:UEnvQueryGenerator
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: QueryContext
		/// Type: ClassProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UEnvQueryGenerator_ProjectedPoints:UEnvQueryGenerator
	/// Size: 0x80
	/// Properties: 1
	/// </summary>
	public class UEnvQueryGenerator_ProjectedPoints:UEnvQueryGenerator
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: ProjectionData
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x30
		/// </summary>
		public FEnvTraceData ProjectionData => ReadStruct<FEnvTraceData>(0x50);
		
	}


	/// <summary>
	/// UEnvQueryGenerator_Donut:UEnvQueryGenerator_ProjectedPoints
	/// Size: 0x1A8
	/// Properties: 9
	/// </summary>
	public class UEnvQueryGenerator_Donut:UEnvQueryGenerator_ProjectedPoints
	{
		public override int ObjectSize => 424;
		/// <summary>
		/// Name: InnerRadius
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue InnerRadius => ReadStruct<FAIDataProviderFloatValue>(0x80);
		
		/// <summary>
		/// Name: OuterRadius
		/// Type: StructProperty
		/// Offset: 0xB0
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue OuterRadius => ReadStruct<FAIDataProviderFloatValue>(0xB0);
		
		/// <summary>
		/// Name: NumberOfRings
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderIntValue NumberOfRings => ReadStruct<FAIDataProviderIntValue>(0xE0);
		
		/// <summary>
		/// Name: PointsPerRing
		/// Type: StructProperty
		/// Offset: 0x110
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderIntValue PointsPerRing => ReadStruct<FAIDataProviderIntValue>(0x110);
		
		/// <summary>
		/// Name: ArcDirection
		/// Type: StructProperty
		/// Offset: 0x140
		/// Size: 0x20
		/// </summary>
		public FEnvDirection ArcDirection => ReadStruct<FEnvDirection>(0x140);
		
		/// <summary>
		/// Name: ArcAngle
		/// Type: StructProperty
		/// Offset: 0x160
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue ArcAngle => ReadStruct<FAIDataProviderFloatValue>(0x160);
		
		/// <summary>
		/// Name: bUseSpiralPattern
		/// Type: BoolProperty
		/// Offset: 0x190
		/// Size: 0x01
		/// </summary>
		public bool bUseSpiralPattern
		{
			get
			{
				return ReadBool(0x190);
			}
			set
			{
				WriteBool(0x190,value);
			}
		}
		
		/// <summary>
		/// Name: Center
		/// Type: ClassProperty
		/// Offset: 0x198
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bDefineArc
		/// Type: BoolProperty
		/// Offset: 0x1A0
		/// Size: 0x01
		/// </summary>
		public bool bDefineArc => (ReadByte(0x01A0) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UEnvQueryGenerator_OnCircle:UEnvQueryGenerator_ProjectedPoints
	/// Size: 0x1E8
	/// Properties: 12
	/// </summary>
	public class UEnvQueryGenerator_OnCircle:UEnvQueryGenerator_ProjectedPoints
	{
		public override int ObjectSize => 488;
		/// <summary>
		/// Name: CircleRadius
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue CircleRadius => ReadStruct<FAIDataProviderFloatValue>(0x80);
		
		/// <summary>
		/// Name: SpaceBetween
		/// Type: StructProperty
		/// Offset: 0xB0
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue SpaceBetween => ReadStruct<FAIDataProviderFloatValue>(0xB0);
		
		/// <summary>
		/// Name: NumberOfPoints
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderIntValue NumberOfPoints => ReadStruct<FAIDataProviderIntValue>(0xE0);
		
		/// <summary>
		/// Name: PointOnCircleSpacingMethod
		/// Type: ByteProperty
		/// Offset: 0x110
		/// Size: 0x01
		/// </summary>
		public byte PointOnCircleSpacingMethod
		{
			get
			{
				return ReadByte(0x110);
			}
			set
			{
				WriteByte(0x110,value);
			}
		}
		
		/// <summary>
		/// Name: ArcDirection
		/// Type: StructProperty
		/// Offset: 0x118
		/// Size: 0x20
		/// </summary>
		public FEnvDirection ArcDirection => ReadStruct<FEnvDirection>(0x118);
		
		/// <summary>
		/// Name: ArcAngle
		/// Type: StructProperty
		/// Offset: 0x138
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue ArcAngle => ReadStruct<FAIDataProviderFloatValue>(0x138);
		
		/// <summary>
		/// Name: AngleRadians
		/// Type: FloatProperty
		/// Offset: 0x168
		/// Size: 0x04
		/// </summary>
		public float AngleRadians
		{
			get
			{
				return ReadSingle(0x168);
			}
			set
			{
				WriteSingle(0x168,value);
			}
		}
		
		/// <summary>
		/// Name: CircleCenter
		/// Type: ClassProperty
		/// Offset: 0x170
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bIgnoreAnyContextActorsWhenGeneratingCircle
		/// Type: BoolProperty
		/// Offset: 0x178
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreAnyContextActorsWhenGeneratingCircle
		{
			get
			{
				return ReadBool(0x178);
			}
			set
			{
				WriteBool(0x178,value);
			}
		}
		
		/// <summary>
		/// Name: CircleCenterZOffset
		/// Type: StructProperty
		/// Offset: 0x180
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue CircleCenterZOffset => ReadStruct<FAIDataProviderFloatValue>(0x180);
		
		/// <summary>
		/// Name: TraceData
		/// Type: StructProperty
		/// Offset: 0x1B0
		/// Size: 0x30
		/// </summary>
		public FEnvTraceData TraceData => ReadStruct<FEnvTraceData>(0x1B0);
		
		/// <summary>
		/// Name: bDefineArc
		/// Type: BoolProperty
		/// Offset: 0x1E0
		/// Size: 0x01
		/// </summary>
		public bool bDefineArc => (ReadByte(0x01E0) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UEnvQueryGenerator_SimpleGrid:UEnvQueryGenerator_ProjectedPoints
	/// Size: 0xE8
	/// Properties: 3
	/// </summary>
	public class UEnvQueryGenerator_SimpleGrid:UEnvQueryGenerator_ProjectedPoints
	{
		public override int ObjectSize => 232;
		/// <summary>
		/// Name: GridSize
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue GridSize => ReadStruct<FAIDataProviderFloatValue>(0x80);
		
		/// <summary>
		/// Name: SpaceBetween
		/// Type: StructProperty
		/// Offset: 0xB0
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue SpaceBetween => ReadStruct<FAIDataProviderFloatValue>(0xB0);
		
		/// <summary>
		/// Name: GenerateAround
		/// Type: ClassProperty
		/// Offset: 0xE0
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UEnvQueryGenerator_PathingGrid:UEnvQueryGenerator_SimpleGrid
	/// Size: 0x150
	/// Properties: 3
	/// </summary>
	public class UEnvQueryGenerator_PathingGrid:UEnvQueryGenerator_SimpleGrid
	{
		public override int ObjectSize => 336;
		/// <summary>
		/// Name: PathToItem
		/// Type: StructProperty
		/// Offset: 0xE8
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderBoolValue PathToItem => ReadStruct<FAIDataProviderBoolValue>(0xE8);
		
		/// <summary>
		/// Name: NavigationFilter
		/// Type: ClassProperty
		/// Offset: 0x118
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ScanRangeMultiplier
		/// Type: StructProperty
		/// Offset: 0x120
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue ScanRangeMultiplier => ReadStruct<FAIDataProviderFloatValue>(0x120);
		
	}


	/// <summary>
	/// UEnvQueryTest:UEnvQueryNode
	/// Size: 0x1C0
	/// Properties: 18
	/// </summary>
	public class UEnvQueryTest:UEnvQueryNode
	{
		public override int ObjectSize => 448;
		/// <summary>
		/// Name: TestOrder
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int TestOrder
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: TestPurpose
		/// Type: ByteProperty
		/// Offset: 0x34
		/// Size: 0x01
		/// </summary>
		public byte TestPurpose
		{
			get
			{
				return ReadByte(0x34);
			}
			set
			{
				WriteByte(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: TestComment
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString TestComment => new FString(BaseAddress+0x38);
		
		/// <summary>
		/// Name: MultipleContextFilterOp
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte MultipleContextFilterOp
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: MultipleContextScoreOp
		/// Type: ByteProperty
		/// Offset: 0x49
		/// Size: 0x01
		/// </summary>
		public byte MultipleContextScoreOp
		{
			get
			{
				return ReadByte(0x49);
			}
			set
			{
				WriteByte(0x49,value);
			}
		}
		
		/// <summary>
		/// Name: FilterType
		/// Type: ByteProperty
		/// Offset: 0x4A
		/// Size: 0x01
		/// </summary>
		public byte FilterType
		{
			get
			{
				return ReadByte(0x4A);
			}
			set
			{
				WriteByte(0x4A,value);
			}
		}
		
		/// <summary>
		/// Name: BoolValue
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderBoolValue BoolValue => ReadStruct<FAIDataProviderBoolValue>(0x50);
		
		/// <summary>
		/// Name: FloatValueMin
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue FloatValueMin => ReadStruct<FAIDataProviderFloatValue>(0x80);
		
		/// <summary>
		/// Name: FloatValueMax
		/// Type: StructProperty
		/// Offset: 0xB0
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue FloatValueMax => ReadStruct<FAIDataProviderFloatValue>(0xB0);
		
		/// <summary>
		/// Name: ScoringEquation
		/// Type: ByteProperty
		/// Offset: 0xE1
		/// Size: 0x01
		/// </summary>
		public byte ScoringEquation
		{
			get
			{
				return ReadByte(0xE1);
			}
			set
			{
				WriteByte(0xE1,value);
			}
		}
		
		/// <summary>
		/// Name: ClampMinType
		/// Type: ByteProperty
		/// Offset: 0xE2
		/// Size: 0x01
		/// </summary>
		public byte ClampMinType
		{
			get
			{
				return ReadByte(0xE2);
			}
			set
			{
				WriteByte(0xE2,value);
			}
		}
		
		/// <summary>
		/// Name: ClampMaxType
		/// Type: ByteProperty
		/// Offset: 0xE3
		/// Size: 0x01
		/// </summary>
		public byte ClampMaxType
		{
			get
			{
				return ReadByte(0xE3);
			}
			set
			{
				WriteByte(0xE3,value);
			}
		}
		
		/// <summary>
		/// Name: ScoreClampMin
		/// Type: StructProperty
		/// Offset: 0xE8
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue ScoreClampMin => ReadStruct<FAIDataProviderFloatValue>(0xE8);
		
		/// <summary>
		/// Name: ScoreClampMax
		/// Type: StructProperty
		/// Offset: 0x118
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue ScoreClampMax => ReadStruct<FAIDataProviderFloatValue>(0x118);
		
		/// <summary>
		/// Name: ScoringFactor
		/// Type: StructProperty
		/// Offset: 0x148
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue ScoringFactor => ReadStruct<FAIDataProviderFloatValue>(0x148);
		
		/// <summary>
		/// Name: ReferenceValue
		/// Type: StructProperty
		/// Offset: 0x178
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue ReferenceValue => ReadStruct<FAIDataProviderFloatValue>(0x178);
		
		/// <summary>
		/// Name: bDefineReferenceValue
		/// Type: BoolProperty
		/// Offset: 0x1A8
		/// Size: 0x01
		/// </summary>
		public bool bDefineReferenceValue
		{
			get
			{
				return ReadBool(0x1A8);
			}
			set
			{
				WriteBool(0x1A8,value);
			}
		}
		
		/// <summary>
		/// Name: bWorkOnFloatValues
		/// Type: BoolProperty
		/// Offset: 0x1B8
		/// Size: 0x01
		/// </summary>
		public bool bWorkOnFloatValues => (ReadByte(0x01B8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UEnvQueryTest_Distance:UEnvQueryTest
	/// Size: 0x1D0
	/// Properties: 2
	/// </summary>
	public class UEnvQueryTest_Distance:UEnvQueryTest
	{
		public override int ObjectSize => 464;
		/// <summary>
		/// Name: TestMode
		/// Type: ByteProperty
		/// Offset: 0x1C0
		/// Size: 0x01
		/// </summary>
		public byte TestMode
		{
			get
			{
				return ReadByte(0x1C0);
			}
			set
			{
				WriteByte(0x1C0,value);
			}
		}
		
		/// <summary>
		/// Name: DistanceTo
		/// Type: ClassProperty
		/// Offset: 0x1C8
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UEnvQueryTest_Dot:UEnvQueryTest
	/// Size: 0x208
	/// Properties: 4
	/// </summary>
	public class UEnvQueryTest_Dot:UEnvQueryTest
	{
		public override int ObjectSize => 520;
		/// <summary>
		/// Name: LineA
		/// Type: StructProperty
		/// Offset: 0x1C0
		/// Size: 0x20
		/// </summary>
		public FEnvDirection LineA => ReadStruct<FEnvDirection>(0x1C0);
		
		/// <summary>
		/// Name: LineB
		/// Type: StructProperty
		/// Offset: 0x1E0
		/// Size: 0x20
		/// </summary>
		public FEnvDirection LineB => ReadStruct<FEnvDirection>(0x1E0);
		
		/// <summary>
		/// Name: TestMode
		/// Type: ByteProperty
		/// Offset: 0x200
		/// Size: 0x01
		/// </summary>
		public byte TestMode
		{
			get
			{
				return ReadByte(0x200);
			}
			set
			{
				WriteByte(0x200,value);
			}
		}
		
		/// <summary>
		/// Name: bAbsoluteValue
		/// Type: BoolProperty
		/// Offset: 0x201
		/// Size: 0x01
		/// </summary>
		public bool bAbsoluteValue
		{
			get
			{
				return ReadBool(0x201);
			}
			set
			{
				WriteBool(0x201,value);
			}
		}
		
	}


	/// <summary>
	/// UEnvQueryTest_GameplayTags:UEnvQueryTest
	/// Size: 0x1E8
	/// Properties: 2
	/// </summary>
	public class UEnvQueryTest_GameplayTags:UEnvQueryTest
	{
		public override int ObjectSize => 488;
		/// <summary>
		/// Name: TagsToMatch
		/// Type: ByteProperty
		/// Offset: 0x1C0
		/// Size: 0x01
		/// </summary>
		public byte TagsToMatch
		{
			get
			{
				return ReadByte(0x1C0);
			}
			set
			{
				WriteByte(0x1C0,value);
			}
		}
		
		/// <summary>
		/// Name: GameplayTags
		/// Type: StructProperty
		/// Offset: 0x1C8
		/// Size: 0x20
		/// </summary>
		public FGameplayTagContainer GameplayTags => ReadStruct<FGameplayTagContainer>(0x1C8);
		
	}


	/// <summary>
	/// UEnvQueryTest_Overlap:UEnvQueryTest
	/// Size: 0x1E0
	/// Properties: 1
	/// </summary>
	public class UEnvQueryTest_Overlap:UEnvQueryTest
	{
		public override int ObjectSize => 480;
		/// <summary>
		/// Name: OverlapData
		/// Type: StructProperty
		/// Offset: 0x1C0
		/// Size: 0x20
		/// </summary>
		public FEnvOverlapData OverlapData => ReadStruct<FEnvOverlapData>(0x1C0);
		
	}


	/// <summary>
	/// UEnvQueryTest_Pathfinding:UEnvQueryTest
	/// Size: 0x238
	/// Properties: 5
	/// </summary>
	public class UEnvQueryTest_Pathfinding:UEnvQueryTest
	{
		public override int ObjectSize => 568;
		/// <summary>
		/// Name: TestMode
		/// Type: ByteProperty
		/// Offset: 0x1C0
		/// Size: 0x01
		/// </summary>
		public byte TestMode
		{
			get
			{
				return ReadByte(0x1C0);
			}
			set
			{
				WriteByte(0x1C0,value);
			}
		}
		
		/// <summary>
		/// Name: Context
		/// Type: ClassProperty
		/// Offset: 0x1C8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PathFromContext
		/// Type: StructProperty
		/// Offset: 0x1D0
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderBoolValue PathFromContext => ReadStruct<FAIDataProviderBoolValue>(0x1D0);
		
		/// <summary>
		/// Name: SkipUnreachable
		/// Type: StructProperty
		/// Offset: 0x200
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderBoolValue SkipUnreachable => ReadStruct<FAIDataProviderBoolValue>(0x200);
		
		/// <summary>
		/// Name: FilterClass
		/// Type: ClassProperty
		/// Offset: 0x230
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UEnvQueryTest_PathfindingBatch:UEnvQueryTest_Pathfinding
	/// Size: 0x268
	/// Properties: 1
	/// </summary>
	public class UEnvQueryTest_PathfindingBatch:UEnvQueryTest_Pathfinding
	{
		public override int ObjectSize => 616;
		/// <summary>
		/// Name: ScanRangeMultiplier
		/// Type: StructProperty
		/// Offset: 0x238
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue ScanRangeMultiplier => ReadStruct<FAIDataProviderFloatValue>(0x238);
		
	}


	/// <summary>
	/// UEnvQueryTest_Project:UEnvQueryTest
	/// Size: 0x1F0
	/// Properties: 1
	/// </summary>
	public class UEnvQueryTest_Project:UEnvQueryTest
	{
		public override int ObjectSize => 496;
		/// <summary>
		/// Name: ProjectionData
		/// Type: StructProperty
		/// Offset: 0x1C0
		/// Size: 0x30
		/// </summary>
		public FEnvTraceData ProjectionData => ReadStruct<FEnvTraceData>(0x1C0);
		
	}


	/// <summary>
	/// UEnvQueryTest_Random:UEnvQueryTest
	/// Size: 0x1C0
	/// Properties: 0
	/// </summary>
	public class UEnvQueryTest_Random:UEnvQueryTest
	{
		public override int ObjectSize => 448;
	}


	/// <summary>
	/// UEnvQueryTest_Trace:UEnvQueryTest
	/// Size: 0x288
	/// Properties: 5
	/// </summary>
	public class UEnvQueryTest_Trace:UEnvQueryTest
	{
		public override int ObjectSize => 648;
		/// <summary>
		/// Name: TraceData
		/// Type: StructProperty
		/// Offset: 0x1C0
		/// Size: 0x30
		/// </summary>
		public FEnvTraceData TraceData => ReadStruct<FEnvTraceData>(0x1C0);
		
		/// <summary>
		/// Name: TraceFromContext
		/// Type: StructProperty
		/// Offset: 0x1F0
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderBoolValue TraceFromContext => ReadStruct<FAIDataProviderBoolValue>(0x1F0);
		
		/// <summary>
		/// Name: ItemHeightOffset
		/// Type: StructProperty
		/// Offset: 0x220
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue ItemHeightOffset => ReadStruct<FAIDataProviderFloatValue>(0x220);
		
		/// <summary>
		/// Name: ContextHeightOffset
		/// Type: StructProperty
		/// Offset: 0x250
		/// Size: 0x30
		/// </summary>
		public FAIDataProviderFloatValue ContextHeightOffset => ReadStruct<FAIDataProviderFloatValue>(0x250);
		
		/// <summary>
		/// Name: Context
		/// Type: ClassProperty
		/// Offset: 0x280
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UEnvQueryOption:UObject
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class UEnvQueryOption:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Generator
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UEnvQueryGenerator Generator => ReadUObject<UEnvQueryGenerator>(0x28);
		
		/// <summary>
		/// Name: Tests
		/// Type: TArray<UEnvQueryTest>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x1C0
		/// </summary>
		public TArray<UEnvQueryTest> Tests => new TArray<UEnvQueryTest>(BaseAddress+0x30);
		
	}


	/// <summary>
	/// UEQSRenderingComponent:UPrimitiveComponent
	/// Size: 0x5C0
	/// Properties: 0
	/// </summary>
	public class UEQSRenderingComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1472;
	}


	/// <summary>
	/// AEQSTestingPawn:ACharacter
	/// Size: 0x850
	/// Properties: 12
	/// </summary>
	public class AEQSTestingPawn:ACharacter
	{
		public override int ObjectSize => 2128;
		/// <summary>
		/// Name: QueryTemplate
		/// Type: ObjectProperty
		/// Offset: 0x7E8
		/// Size: 0x08
		/// </summary>
		public UEnvQuery QueryTemplate => ReadUObject<UEnvQuery>(0x7E8);
		
		/// <summary>
		/// Name: QueryParams
		/// Type: TArray<FEnvNamedValue>
		/// Offset: 0x7F0
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FEnvNamedValue> QueryParams => new TArray<FEnvNamedValue>(BaseAddress+0x7F0);
		
		/// <summary>
		/// Name: QueryConfig
		/// Type: TArray<FAIDynamicParam>
		/// Offset: 0x800
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FAIDynamicParam> QueryConfig => new TArray<FAIDynamicParam>(BaseAddress+0x800);
		
		/// <summary>
		/// Name: TimeLimitPerStep
		/// Type: FloatProperty
		/// Offset: 0x810
		/// Size: 0x04
		/// </summary>
		public float TimeLimitPerStep
		{
			get
			{
				return ReadSingle(0x810);
			}
			set
			{
				WriteSingle(0x810,value);
			}
		}
		
		/// <summary>
		/// Name: StepToDebugDraw
		/// Type: IntProperty
		/// Offset: 0x814
		/// Size: 0x04
		/// </summary>
		public int StepToDebugDraw
		{
			get
			{
				return ReadInt32(0x814);
			}
			set
			{
				WriteInt32(0x814,value);
			}
		}
		
		/// <summary>
		/// Name: HighlightMode
		/// Type: ByteProperty
		/// Offset: 0x818
		/// Size: 0x01
		/// </summary>
		public byte HighlightMode
		{
			get
			{
				return ReadByte(0x818);
			}
			set
			{
				WriteByte(0x818,value);
			}
		}
		
		/// <summary>
		/// Name: bDrawLabels
		/// Type: BoolProperty
		/// Offset: 0x81C
		/// Size: 0x01
		/// </summary>
		public bool bDrawLabels => (ReadByte(0x081C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDrawFailedItems
		/// Type: BoolProperty
		/// Offset: 0x81C
		/// Size: 0x01
		/// </summary>
		public bool bDrawFailedItems => (ReadByte(0x081C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bReRunQueryOnlyOnFinishedMove
		/// Type: BoolProperty
		/// Offset: 0x81C
		/// Size: 0x01
		/// </summary>
		public bool bReRunQueryOnlyOnFinishedMove => (ReadByte(0x081C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bShouldBeVisibleInGame
		/// Type: BoolProperty
		/// Offset: 0x81C
		/// Size: 0x01
		/// </summary>
		public bool bShouldBeVisibleInGame => (ReadByte(0x081C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bTickDuringGame
		/// Type: BoolProperty
		/// Offset: 0x81C
		/// Size: 0x01
		/// </summary>
		public bool bTickDuringGame => (ReadByte(0x081C) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: QueryingMode
		/// Type: ByteProperty
		/// Offset: 0x820
		/// Size: 0x01
		/// </summary>
		public byte QueryingMode
		{
			get
			{
				return ReadByte(0x820);
			}
			set
			{
				WriteByte(0x820,value);
			}
		}
		
	}


	/// <summary>
	/// UCrowdFollowingComponent:UPathFollowingComponent
	/// Size: 0x390
	/// Properties: 5
	/// </summary>
	public class UCrowdFollowingComponent:UPathFollowingComponent
	{
		public override int ObjectSize => 912;
		/// <summary>
		/// Name: CrowdAgentMoveDirection
		/// Type: StructProperty
		/// Offset: 0x340
		/// Size: 0x0C
		/// </summary>
		public FVector CrowdAgentMoveDirection => ReadStruct<FVector>(0x340);
		
		/// <summary>
		/// Name: CharacterMovement
		/// Type: ObjectProperty
		/// Offset: 0x350
		/// Size: 0x08
		/// </summary>
		public UCharacterMovementComponent CharacterMovement => ReadUObject<UCharacterMovementComponent>(0x350);
		
		/// <summary>
		/// Name: AvoidanceGroup
		/// Type: StructProperty
		/// Offset: 0x358
		/// Size: 0x04
		/// </summary>
		public FNavAvoidanceMask AvoidanceGroup => ReadStruct<FNavAvoidanceMask>(0x358);
		
		/// <summary>
		/// Name: GroupsToAvoid
		/// Type: StructProperty
		/// Offset: 0x35C
		/// Size: 0x04
		/// </summary>
		public FNavAvoidanceMask GroupsToAvoid => ReadStruct<FNavAvoidanceMask>(0x35C);
		
		/// <summary>
		/// Name: GroupsToIgnore
		/// Type: StructProperty
		/// Offset: 0x360
		/// Size: 0x04
		/// </summary>
		public FNavAvoidanceMask GroupsToIgnore => ReadStruct<FNavAvoidanceMask>(0x360);
		
	}


	/// <summary>
	/// UPawnAction_BlueprintBase:UPawnAction
	/// Size: 0xD0
	/// Properties: 0
	/// </summary>
	public class UPawnAction_BlueprintBase:UPawnAction
	{
		public override int ObjectSize => 208;
	}


	/// <summary>
	/// UPawnAction_Move:UPawnAction
	/// Size: 0x120
	/// Properties: 11
	/// </summary>
	public class UPawnAction_Move:UPawnAction
	{
		public override int ObjectSize => 288;
		/// <summary>
		/// Name: GoalActor
		/// Type: ObjectProperty
		/// Offset: 0xD0
		/// Size: 0x08
		/// </summary>
		public AActor GoalActor => ReadUObject<AActor>(0xD0);
		
		/// <summary>
		/// Name: GoalLocation
		/// Type: StructProperty
		/// Offset: 0xD8
		/// Size: 0x0C
		/// </summary>
		public FVector GoalLocation => ReadStruct<FVector>(0xD8);
		
		/// <summary>
		/// Name: AcceptableRadius
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float AcceptableRadius
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
		/// <summary>
		/// Name: FilterClass
		/// Type: ClassProperty
		/// Offset: 0xE8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bAllowStrafe
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool bAllowStrafe => (ReadByte(0x00F0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bFinishOnOverlap
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool bFinishOnOverlap => (ReadByte(0x00F0) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bUsePathfinding
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool bUsePathfinding => (ReadByte(0x00F0) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bAllowPartialPath
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool bAllowPartialPath => (ReadByte(0x00F0) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bProjectGoalToNavigation
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool bProjectGoalToNavigation => (ReadByte(0x00F0) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bUpdatePathToGoal
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool bUpdatePathToGoal => (ReadByte(0x00F0) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bAbortChildActionOnPathChange
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool bAbortChildActionOnPathChange => (ReadByte(0x00F0) & 0x40) == 0x40;
		
	}


	/// <summary>
	/// UPawnAction_Repeat:UPawnAction
	/// Size: 0xF0
	/// Properties: 3
	/// </summary>
	public class UPawnAction_Repeat:UPawnAction
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: ActionToRepeat
		/// Type: ObjectProperty
		/// Offset: 0xD0
		/// Size: 0x08
		/// </summary>
		public UPawnAction ActionToRepeat => ReadUObject<UPawnAction>(0xD0);
		
		/// <summary>
		/// Name: RecentActionCopy
		/// Type: ObjectProperty
		/// Offset: 0xD8
		/// Size: 0x08
		/// </summary>
		public UPawnAction RecentActionCopy => ReadUObject<UPawnAction>(0xD8);
		
		/// <summary>
		/// Name: ChildFailureHandlingMode
		/// Type: ByteProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public byte ChildFailureHandlingMode
		{
			get
			{
				return ReadByte(0xE0);
			}
			set
			{
				WriteByte(0xE0,value);
			}
		}
		
	}


	/// <summary>
	/// UPawnAction_Sequence:UPawnAction
	/// Size: 0x100
	/// Properties: 3
	/// </summary>
	public class UPawnAction_Sequence:UPawnAction
	{
		public override int ObjectSize => 256;
		/// <summary>
		/// Name: ActionSequence
		/// Type: TArray<UPawnAction>
		/// Offset: 0xD0
		/// Size: 0x10
		/// SubElement Size: 0xD0
		/// </summary>
		public TArray<UPawnAction> ActionSequence => new TArray<UPawnAction>(BaseAddress+0xD0);
		
		/// <summary>
		/// Name: ChildFailureHandlingMode
		/// Type: ByteProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public byte ChildFailureHandlingMode
		{
			get
			{
				return ReadByte(0xE0);
			}
			set
			{
				WriteByte(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: RecentActionCopy
		/// Type: ObjectProperty
		/// Offset: 0xE8
		/// Size: 0x08
		/// </summary>
		public UPawnAction RecentActionCopy => ReadUObject<UPawnAction>(0xE8);
		
	}


	/// <summary>
	/// UPawnAction_Wait:UPawnAction
	/// Size: 0xE0
	/// Properties: 1
	/// </summary>
	public class UPawnAction_Wait:UPawnAction
	{
		public override int ObjectSize => 224;
		/// <summary>
		/// Name: TimeToWait
		/// Type: FloatProperty
		/// Offset: 0xD0
		/// Size: 0x04
		/// </summary>
		public float TimeToWait
		{
			get
			{
				return ReadSingle(0xD0);
			}
			set
			{
				WriteSingle(0xD0,value);
			}
		}
		
	}


	/// <summary>
	/// UPawnSensingComponent:UActorComponent
	/// Size: 0x120
	/// Properties: 11
	/// </summary>
	public class UPawnSensingComponent:UActorComponent
	{
		public override int ObjectSize => 288;
		/// <summary>
		/// Name: HearingThreshold
		/// Type: FloatProperty
		/// Offset: 0xD8
		/// Size: 0x04
		/// </summary>
		public float HearingThreshold
		{
			get
			{
				return ReadSingle(0xD8);
			}
			set
			{
				WriteSingle(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: LOSHearingThreshold
		/// Type: FloatProperty
		/// Offset: 0xDC
		/// Size: 0x04
		/// </summary>
		public float LOSHearingThreshold
		{
			get
			{
				return ReadSingle(0xDC);
			}
			set
			{
				WriteSingle(0xDC,value);
			}
		}
		
		/// <summary>
		/// Name: SightRadius
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float SightRadius
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: SensingInterval
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float SensingInterval
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
		/// <summary>
		/// Name: HearingMaxSoundAge
		/// Type: FloatProperty
		/// Offset: 0xE8
		/// Size: 0x04
		/// </summary>
		public float HearingMaxSoundAge
		{
			get
			{
				return ReadSingle(0xE8);
			}
			set
			{
				WriteSingle(0xE8,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableSensingUpdates
		/// Type: BoolProperty
		/// Offset: 0xEC
		/// Size: 0x01
		/// </summary>
		public bool bEnableSensingUpdates => (ReadByte(0x00EC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOnlySensePlayers
		/// Type: BoolProperty
		/// Offset: 0xEC
		/// Size: 0x01
		/// </summary>
		public bool bOnlySensePlayers => (ReadByte(0x00EC) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bSeePawns
		/// Type: BoolProperty
		/// Offset: 0xEC
		/// Size: 0x01
		/// </summary>
		public bool bSeePawns => (ReadByte(0x00EC) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bHearNoises
		/// Type: BoolProperty
		/// Offset: 0xEC
		/// Size: 0x01
		/// </summary>
		public bool bHearNoises => (ReadByte(0x00EC) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: PeripheralVisionAngle
		/// Type: FloatProperty
		/// Offset: 0x118
		/// Size: 0x04
		/// </summary>
		public float PeripheralVisionAngle
		{
			get
			{
				return ReadSingle(0x118);
			}
			set
			{
				WriteSingle(0x118,value);
			}
		}
		
		/// <summary>
		/// Name: PeripheralVisionCosine
		/// Type: FloatProperty
		/// Offset: 0x11C
		/// Size: 0x04
		/// </summary>
		public float PeripheralVisionCosine
		{
			get
			{
				return ReadSingle(0x11C);
			}
			set
			{
				WriteSingle(0x11C,value);
			}
		}
		
	}


	/// <summary>
	/// UHandlerComponentFactory:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UHandlerComponentFactory:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// ULevelSequence:UMovieSceneSequence
	/// Size: 0xD0
	/// Properties: 3
	/// </summary>
	public class ULevelSequence:UMovieSceneSequence
	{
		public override int ObjectSize => 208;
		/// <summary>
		/// Name: MovieScene
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UMovieScene MovieScene => ReadUObject<UMovieScene>(0x28);
		
		/// <summary>
		/// Name: ObjectReferences
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FLevelSequenceObjectReferenceMap ObjectReferences => ReadStruct<FLevelSequenceObjectReferenceMap>(0x30);
		
		/// <summary>
		/// Name: PossessedObjects
		/// Type: MapProperty
		/// Offset: 0x80
		/// Size: 0x50
		/// </summary>
		
	}


	/// <summary>
	/// ULevelSequencePlayer:UObject
	/// Size: 0xA8
	/// Properties: 4
	/// </summary>
	public class ULevelSequencePlayer:UObject
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: LevelSequence
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public ULevelSequence LevelSequence => ReadUObject<ULevelSequence>(0x48);
		
		/// <summary>
		/// Name: bIsPlaying
		/// Type: BoolProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public bool bIsPlaying
		{
			get
			{
				return ReadBool(0x50);
			}
			set
			{
				WriteBool(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: TimeCursorPosition
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float TimeCursorPosition
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: PlaybackSettings
		/// Type: StructProperty
		/// Offset: 0x64
		/// Size: 0x08
		/// </summary>
		public FLevelSequencePlaybackSettings PlaybackSettings => ReadStruct<FLevelSequencePlaybackSettings>(0x64);
		
	}


	/// <summary>
	/// ALevelSequenceActor:AActor
	/// Size: 0x3F8
	/// Properties: 4
	/// </summary>
	public class ALevelSequenceActor:AActor
	{
		public override int ObjectSize => 1016;
		/// <summary>
		/// Name: bAutoPlay
		/// Type: BoolProperty
		/// Offset: 0x3D0
		/// Size: 0x01
		/// </summary>
		public bool bAutoPlay
		{
			get
			{
				return ReadBool(0x3D0);
			}
			set
			{
				WriteBool(0x3D0,value);
			}
		}
		
		/// <summary>
		/// Name: PlaybackSettings
		/// Type: StructProperty
		/// Offset: 0x3D4
		/// Size: 0x08
		/// </summary>
		public FLevelSequencePlaybackSettings PlaybackSettings => ReadStruct<FLevelSequencePlaybackSettings>(0x3D4);
		
		/// <summary>
		/// Name: SequencePlayer
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public ULevelSequencePlayer SequencePlayer => ReadUObject<ULevelSequencePlayer>(0x3E0);
		
		/// <summary>
		/// Name: LevelSequence
		/// Type: StructProperty
		/// Offset: 0x3E8
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference LevelSequence => ReadStruct<FStringAssetReference>(0x3E8);
		
	}


	/// <summary>
	/// UMovieSceneCaptureInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UMovieSceneCaptureInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UMovieSceneCaptureProtocolSettings:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UMovieSceneCaptureProtocolSettings:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UMovieSceneCapture:UObject
	/// Size: 0x1F0
	/// Properties: 7
	/// </summary>
	public class UMovieSceneCapture:UObject
	{
		public override int ObjectSize => 496;
		/// <summary>
		/// Name: CaptureType
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public FCaptureProtocolID CaptureType => ReadStruct<FCaptureProtocolID>(0x38);
		
		/// <summary>
		/// Name: ProtocolSettings
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UMovieSceneCaptureProtocolSettings ProtocolSettings => ReadUObject<UMovieSceneCaptureProtocolSettings>(0x40);
		
		/// <summary>
		/// Name: Settings
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x48
		/// </summary>
		public FMovieSceneCaptureSettings Settings => ReadStruct<FMovieSceneCaptureSettings>(0x48);
		
		/// <summary>
		/// Name: bUseSeparateProcess
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool bUseSeparateProcess
		{
			get
			{
				return ReadBool(0x90);
			}
			set
			{
				WriteBool(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: bCloseEditorWhenCaptureStarts
		/// Type: BoolProperty
		/// Offset: 0x91
		/// Size: 0x01
		/// </summary>
		public bool bCloseEditorWhenCaptureStarts
		{
			get
			{
				return ReadBool(0x91);
			}
			set
			{
				WriteBool(0x91,value);
			}
		}
		
		/// <summary>
		/// Name: AdditionalCommandLineArguments
		/// Type: StrProperty
		/// Offset: 0x98
		/// Size: 0x10
		/// </summary>
		public FString AdditionalCommandLineArguments => new FString(BaseAddress+0x98);
		
		/// <summary>
		/// Name: InheritedCommandLineArguments
		/// Type: StrProperty
		/// Offset: 0xA8
		/// Size: 0x10
		/// </summary>
		public FString InheritedCommandLineArguments => new FString(BaseAddress+0xA8);
		
	}


	/// <summary>
	/// UAutomatedLevelSequenceCapture:UMovieSceneCapture
	/// Size: 0x1F0
	/// Properties: 0
	/// </summary>
	public class UAutomatedLevelSequenceCapture:UMovieSceneCapture
	{
		public override int ObjectSize => 496;
	}


	/// <summary>
	/// ULevelCapture:UMovieSceneCapture
	/// Size: 0x210
	/// Properties: 2
	/// </summary>
	public class ULevelCapture:UMovieSceneCapture
	{
		public override int ObjectSize => 528;
		/// <summary>
		/// Name: bAutoStartCapture
		/// Type: BoolProperty
		/// Offset: 0x1F0
		/// Size: 0x01
		/// </summary>
		public bool bAutoStartCapture
		{
			get
			{
				return ReadBool(0x1F0);
			}
			set
			{
				WriteBool(0x1F0,value);
			}
		}
		
		/// <summary>
		/// Name: PrerequisiteActorId
		/// Type: StructProperty
		/// Offset: 0x1FC
		/// Size: 0x10
		/// </summary>
		public FGuid PrerequisiteActorId => ReadStruct<FGuid>(0x1FC);
		
	}


	/// <summary>
	/// UMovieSceneCaptureEnvironment:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UMovieSceneCaptureEnvironment:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UFrameGrabberProtocolSettings:UMovieSceneCaptureProtocolSettings
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UFrameGrabberProtocolSettings:UMovieSceneCaptureProtocolSettings
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UBmpImageCaptureSettings:UMovieSceneCaptureProtocolSettings
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UBmpImageCaptureSettings:UMovieSceneCaptureProtocolSettings
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UImageCaptureSettings:UFrameGrabberProtocolSettings
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UImageCaptureSettings:UFrameGrabberProtocolSettings
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: CompressionQuality
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int CompressionQuality
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
	}


	/// <summary>
	/// UCompositionGraphCaptureSettings:UMovieSceneCaptureProtocolSettings
	/// Size: 0x50
	/// Properties: 3
	/// </summary>
	public class UCompositionGraphCaptureSettings:UMovieSceneCaptureProtocolSettings
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: IncludeRenderPasses
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FCompositionGraphCapturePasses IncludeRenderPasses => ReadStruct<FCompositionGraphCapturePasses>(0x28);
		
		/// <summary>
		/// Name: bCaptureFramesInHDR
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bCaptureFramesInHDR
		{
			get
			{
				return ReadBool(0x38);
			}
			set
			{
				WriteBool(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: PostProcessingMaterial
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference PostProcessingMaterial => ReadStruct<FStringAssetReference>(0x40);
		
	}


	/// <summary>
	/// UVideoCaptureSettings:UFrameGrabberProtocolSettings
	/// Size: 0x48
	/// Properties: 3
	/// </summary>
	public class UVideoCaptureSettings:UFrameGrabberProtocolSettings
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: bUseCompression
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bUseCompression
		{
			get
			{
				return ReadBool(0x30);
			}
			set
			{
				WriteBool(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: CompressionQuality
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float CompressionQuality
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: VideoCodec
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString VideoCodec => new FString(BaseAddress+0x38);
		
	}


	/// <summary>
	/// UMoviePlayerSettings:UObject
	/// Size: 0x40
	/// Properties: 3
	/// </summary>
	public class UMoviePlayerSettings:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: bWaitForMoviesToComplete
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bWaitForMoviesToComplete
		{
			get
			{
				return ReadBool(0x28);
			}
			set
			{
				WriteBool(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: bMoviesAreSkippable
		/// Type: BoolProperty
		/// Offset: 0x29
		/// Size: 0x01
		/// </summary>
		public bool bMoviesAreSkippable
		{
			get
			{
				return ReadBool(0x29);
			}
			set
			{
				WriteBool(0x29,value);
			}
		}
		
		/// <summary>
		/// Name: StartupMovies
		/// Type: TArray<>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// UNamedInterfaces:UObject
	/// Size: 0xC0
	/// Properties: 2
	/// </summary>
	public class UNamedInterfaces:UObject
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: NamedInterfaces
		/// Type: TArray<FNamedInterface>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FNamedInterface> NamedInterfaces => new TArray<FNamedInterface>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: NamedInterfaceDefs
		/// Type: TArray<FNamedInterfaceDef>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FNamedInterfaceDef> NamedInterfaceDefs => new TArray<FNamedInterfaceDef>(BaseAddress+0x38);
		
	}


	/// <summary>
	/// UTurnBasedMatchInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UTurnBasedMatchInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAchievementBlueprintLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UAchievementBlueprintLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UInAppPurchaseCallbackProxy:UObject
	/// Size: 0xC0
	/// Properties: 0
	/// </summary>
	public class UInAppPurchaseCallbackProxy:UObject
	{
		public override int ObjectSize => 192;
	}


	/// <summary>
	/// UInAppPurchaseQueryCallbackProxy:UObject
	/// Size: 0xD0
	/// Properties: 0
	/// </summary>
	public class UInAppPurchaseQueryCallbackProxy:UObject
	{
		public override int ObjectSize => 208;
	}


	/// <summary>
	/// UInAppPurchaseRestoreCallbackProxy:UObject
	/// Size: 0xD0
	/// Properties: 0
	/// </summary>
	public class UInAppPurchaseRestoreCallbackProxy:UObject
	{
		public override int ObjectSize => 208;
	}


	/// <summary>
	/// UNetConnection:UPlayer
	/// Size: 0x336A0
	/// Properties: 12
	/// </summary>
	public class UNetConnection:UPlayer
	{
		public override int ObjectSize => 210592;
		/// <summary>
		/// Name: Children
		/// Type: TArray<UChildConnection>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x336A8
		/// </summary>
		public TArray<UChildConnection> Children => new TArray<UChildConnection>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: Driver
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UNetDriver Driver => ReadUObject<UNetDriver>(0x58);
		
		/// <summary>
		/// Name: PackageMap
		/// Type: ObjectProperty
		/// Offset: 0x60
		/// Size: 0x08
		/// </summary>
		public UPackageMap PackageMap => ReadUObject<UPackageMap>(0x60);
		
		/// <summary>
		/// Name: OpenChannels
		/// Type: TArray<UChannel>
		/// Offset: 0x68
		/// Size: 0x10
		/// SubElement Size: 0x68
		/// </summary>
		public TArray<UChannel> OpenChannels => new TArray<UChannel>(BaseAddress+0x68);
		
		/// <summary>
		/// Name: SentTemporaries
		/// Type: TArray<AActor>
		/// Offset: 0x78
		/// Size: 0x10
		/// SubElement Size: 0x3D0
		/// </summary>
		public TArray<AActor> SentTemporaries => new TArray<AActor>(BaseAddress+0x78);
		
		/// <summary>
		/// Name: ViewTarget
		/// Type: ObjectProperty
		/// Offset: 0x88
		/// Size: 0x08
		/// </summary>
		public AActor ViewTarget => ReadUObject<AActor>(0x88);
		
		/// <summary>
		/// Name: OwningActor
		/// Type: ObjectProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		public AActor OwningActor => ReadUObject<AActor>(0x90);
		
		/// <summary>
		/// Name: MaxPacket
		/// Type: IntProperty
		/// Offset: 0x98
		/// Size: 0x04
		/// </summary>
		public int MaxPacket
		{
			get
			{
				return ReadInt32(0x98);
			}
			set
			{
				WriteInt32(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: InternalAck
		/// Type: BoolProperty
		/// Offset: 0x9C
		/// Size: 0x01
		/// </summary>
		public bool InternalAck => (ReadByte(0x009C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: AsyncLoadedObjects
		/// Type: TArray<UObject>
		/// Offset: 0xA0
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UObject> AsyncLoadedObjects => new TArray<UObject>(BaseAddress+0xA0);
		
		/// <summary>
		/// Name: LastReceiveTime
		/// Type: DoubleProperty
		/// Offset: 0x1D8
		/// Size: 0x08
		/// </summary>
		public double LastReceiveTime
		{
			get
			{
				return ReadDouble(0x1D8);
			}
			set
			{
				WriteDouble(0x1D8,value);
			}
		}
		
		/// <summary>
		/// Name: ChannelsToTick
		/// Type: TArray<UChannel>
		/// Offset: 0x33690
		/// Size: 0x10
		/// SubElement Size: 0x68
		/// </summary>
		public TArray<UChannel> ChannelsToTick => new TArray<UChannel>(BaseAddress+0x33690);
		
	}


	/// <summary>
	/// UIpConnection:UNetConnection
	/// Size: 0x336C0
	/// Properties: 0
	/// </summary>
	public class UIpConnection:UNetConnection
	{
		public override int ObjectSize => 210624;
	}


	/// <summary>
	/// UNetDriver:UObject
	/// Size: 0x350
	/// Properties: 22
	/// </summary>
	public class UNetDriver:UObject
	{
		public override int ObjectSize => 848;
		/// <summary>
		/// Name: NetConnectionClassName
		/// Type: StrProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FString NetConnectionClassName => new FString(BaseAddress+0x30);
		
		/// <summary>
		/// Name: MaxDownloadSize
		/// Type: IntProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public int MaxDownloadSize
		{
			get
			{
				return ReadInt32(0x40);
			}
			set
			{
				WriteInt32(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: bClampListenServerTickRate
		/// Type: BoolProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public bool bClampListenServerTickRate => (ReadByte(0x0044) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: NetServerMaxTickRate
		/// Type: IntProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public int NetServerMaxTickRate
		{
			get
			{
				return ReadInt32(0x48);
			}
			set
			{
				WriteInt32(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: MaxInternetClientRate
		/// Type: IntProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public int MaxInternetClientRate
		{
			get
			{
				return ReadInt32(0x4C);
			}
			set
			{
				WriteInt32(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxClientRate
		/// Type: IntProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public int MaxClientRate
		{
			get
			{
				return ReadInt32(0x50);
			}
			set
			{
				WriteInt32(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: ServerTravelPause
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float ServerTravelPause
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: SpawnPrioritySeconds
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float SpawnPrioritySeconds
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: RelevantTimeout
		/// Type: FloatProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public float RelevantTimeout
		{
			get
			{
				return ReadSingle(0x5C);
			}
			set
			{
				WriteSingle(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: ExtendedRelevantTimeout
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float ExtendedRelevantTimeout
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: KeepAliveTime
		/// Type: FloatProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public float KeepAliveTime
		{
			get
			{
				return ReadSingle(0x64);
			}
			set
			{
				WriteSingle(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: InitialConnectTimeout
		/// Type: FloatProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public float InitialConnectTimeout
		{
			get
			{
				return ReadSingle(0x68);
			}
			set
			{
				WriteSingle(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: ConnectionTimeout
		/// Type: FloatProperty
		/// Offset: 0x6C
		/// Size: 0x04
		/// </summary>
		public float ConnectionTimeout
		{
			get
			{
				return ReadSingle(0x6C);
			}
			set
			{
				WriteSingle(0x6C,value);
			}
		}
		
		/// <summary>
		/// Name: bNoTimeouts
		/// Type: BoolProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public bool bNoTimeouts
		{
			get
			{
				return ReadBool(0x70);
			}
			set
			{
				WriteBool(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: ServerConnection
		/// Type: ObjectProperty
		/// Offset: 0x78
		/// Size: 0x08
		/// </summary>
		public UNetConnection ServerConnection => ReadUObject<UNetConnection>(0x78);
		
		/// <summary>
		/// Name: ClientConnections
		/// Type: TArray<UNetConnection>
		/// Offset: 0x80
		/// Size: 0x10
		/// SubElement Size: 0x336A0
		/// </summary>
		public TArray<UNetConnection> ClientConnections => new TArray<UNetConnection>(BaseAddress+0x80);
		
		/// <summary>
		/// Name: World
		/// Type: ObjectProperty
		/// Offset: 0xA8
		/// Size: 0x08
		/// </summary>
		public UWorld World => ReadUObject<UWorld>(0xA8);
		
		/// <summary>
		/// Name: NetConnectionClass
		/// Type: ClassProperty
		/// Offset: 0xD0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: RoleProperty
		/// Type: ObjectProperty
		/// Offset: 0xD8
		/// Size: 0x08
		/// </summary>
		public UProperty RoleProperty => ReadUObject<UProperty>(0xD8);
		
		/// <summary>
		/// Name: RemoteRoleProperty
		/// Type: ObjectProperty
		/// Offset: 0xE0
		/// Size: 0x08
		/// </summary>
		public UProperty RemoteRoleProperty => ReadUObject<UProperty>(0xE0);
		
		/// <summary>
		/// Name: NetDriverName
		/// Type: NameProperty
		/// Offset: 0xE8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0xF8
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0xF8);
			}
			set
			{
				WriteSingle(0xF8,value);
			}
		}
		
	}


	/// <summary>
	/// UIpNetDriver:UNetDriver
	/// Size: 0x370
	/// Properties: 3
	/// </summary>
	public class UIpNetDriver:UNetDriver
	{
		public override int ObjectSize => 880;
		/// <summary>
		/// Name: LogPortUnreach
		/// Type: BoolProperty
		/// Offset: 0x350
		/// Size: 0x01
		/// </summary>
		public bool LogPortUnreach => (ReadByte(0x0350) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: AllowPlayerPortUnreach
		/// Type: BoolProperty
		/// Offset: 0x350
		/// Size: 0x01
		/// </summary>
		public bool AllowPlayerPortUnreach => (ReadByte(0x0350) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: MaxPortCountToTry
		/// Type: UInt32Property
		/// Offset: 0x354
		/// Size: 0x04
		/// </summary>
		
	}


	/// <summary>
	/// ULeaderboardBlueprintLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class ULeaderboardBlueprintLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// ULeaderboardFlushCallbackProxy:UObject
	/// Size: 0xA0
	/// Properties: 0
	/// </summary>
	public class ULeaderboardFlushCallbackProxy:UObject
	{
		public override int ObjectSize => 160;
	}


	/// <summary>
	/// ULeaderboardQueryCallbackProxy:UObject
	/// Size: 0xD0
	/// Properties: 0
	/// </summary>
	public class ULeaderboardQueryCallbackProxy:UObject
	{
		public override int ObjectSize => 208;
	}


	/// <summary>
	/// ULogoutCallbackProxy:UBlueprintAsyncActionBase
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class ULogoutCallbackProxy:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// AOnlineBeacon:AActor
	/// Size: 0x3F8
	/// Properties: 3
	/// </summary>
	public class AOnlineBeacon:AActor
	{
		public override int ObjectSize => 1016;
		/// <summary>
		/// Name: BeaconConnectionInitialTimeout
		/// Type: FloatProperty
		/// Offset: 0x3D8
		/// Size: 0x04
		/// </summary>
		public float BeaconConnectionInitialTimeout
		{
			get
			{
				return ReadSingle(0x3D8);
			}
			set
			{
				WriteSingle(0x3D8,value);
			}
		}
		
		/// <summary>
		/// Name: BeaconConnectionTimeout
		/// Type: FloatProperty
		/// Offset: 0x3DC
		/// Size: 0x04
		/// </summary>
		public float BeaconConnectionTimeout
		{
			get
			{
				return ReadSingle(0x3DC);
			}
			set
			{
				WriteSingle(0x3DC,value);
			}
		}
		
		/// <summary>
		/// Name: NetDriver
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public UNetDriver NetDriver => ReadUObject<UNetDriver>(0x3E0);
		
	}


	/// <summary>
	/// AOnlineBeaconClient:AOnlineBeacon
	/// Size: 0x460
	/// Properties: 3
	/// </summary>
	public class AOnlineBeaconClient:AOnlineBeacon
	{
		public override int ObjectSize => 1120;
		/// <summary>
		/// Name: BeaconOwner
		/// Type: ObjectProperty
		/// Offset: 0x3F8
		/// Size: 0x08
		/// </summary>
		public AOnlineBeaconHostObject BeaconOwner => ReadUObject<AOnlineBeaconHostObject>(0x3F8);
		
		/// <summary>
		/// Name: BeaconConnection
		/// Type: ObjectProperty
		/// Offset: 0x400
		/// Size: 0x08
		/// </summary>
		public UNetConnection BeaconConnection => ReadUObject<UNetConnection>(0x400);
		
		/// <summary>
		/// Name: ConnectionState
		/// Type: ByteProperty
		/// Offset: 0x408
		/// Size: 0x01
		/// </summary>
		public byte ConnectionState
		{
			get
			{
				return ReadByte(0x408);
			}
			set
			{
				WriteByte(0x408,value);
			}
		}
		
	}


	/// <summary>
	/// UPartyBeaconState:UObject
	/// Size: 0x68
	/// Properties: 8
	/// </summary>
	public class UPartyBeaconState:UObject
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: SessionName
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: NumConsumedReservations
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int NumConsumedReservations
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: MaxReservations
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int MaxReservations
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: NumTeams
		/// Type: IntProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public int NumTeams
		{
			get
			{
				return ReadInt32(0x38);
			}
			set
			{
				WriteInt32(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: NumPlayersPerTeam
		/// Type: IntProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public int NumPlayersPerTeam
		{
			get
			{
				return ReadInt32(0x3C);
			}
			set
			{
				WriteInt32(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: ReservedHostTeamNum
		/// Type: IntProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public int ReservedHostTeamNum
		{
			get
			{
				return ReadInt32(0x40);
			}
			set
			{
				WriteInt32(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: ForceTeamNum
		/// Type: IntProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public int ForceTeamNum
		{
			get
			{
				return ReadInt32(0x44);
			}
			set
			{
				WriteInt32(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: Reservations
		/// Type: TArray<FPartyReservation>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FPartyReservation> Reservations => new TArray<FPartyReservation>(BaseAddress+0x48);
		
	}


	/// <summary>
	/// APartyBeaconClient:AOnlineBeaconClient
	/// Size: 0x590
	/// Properties: 5
	/// </summary>
	public class APartyBeaconClient:AOnlineBeaconClient
	{
		public override int ObjectSize => 1424;
		/// <summary>
		/// Name: DestSessionId
		/// Type: StrProperty
		/// Offset: 0x520
		/// Size: 0x10
		/// </summary>
		public FString DestSessionId => new FString(BaseAddress+0x520);
		
		/// <summary>
		/// Name: PendingReservation
		/// Type: StructProperty
		/// Offset: 0x530
		/// Size: 0x28
		/// </summary>
		public FPartyReservation PendingReservation => ReadStruct<FPartyReservation>(0x530);
		
		/// <summary>
		/// Name: RequestType
		/// Type: ByteProperty
		/// Offset: 0x558
		/// Size: 0x01
		/// </summary>
		public byte RequestType
		{
			get
			{
				return ReadByte(0x558);
			}
			set
			{
				WriteByte(0x558,value);
			}
		}
		
		/// <summary>
		/// Name: bPendingReservationSent
		/// Type: BoolProperty
		/// Offset: 0x559
		/// Size: 0x01
		/// </summary>
		public bool bPendingReservationSent
		{
			get
			{
				return ReadBool(0x559);
			}
			set
			{
				WriteBool(0x559,value);
			}
		}
		
		/// <summary>
		/// Name: bCancelReservation
		/// Type: BoolProperty
		/// Offset: 0x55A
		/// Size: 0x01
		/// </summary>
		public bool bCancelReservation
		{
			get
			{
				return ReadBool(0x55A);
			}
			set
			{
				WriteBool(0x55A,value);
			}
		}
		
	}


	/// <summary>
	/// ATestBeaconClient:AOnlineBeaconClient
	/// Size: 0x460
	/// Properties: 0
	/// </summary>
	public class ATestBeaconClient:AOnlineBeaconClient
	{
		public override int ObjectSize => 1120;
	}


	/// <summary>
	/// AOnlineBeaconHost:AOnlineBeacon
	/// Size: 0x4B0
	/// Properties: 2
	/// </summary>
	public class AOnlineBeaconHost:AOnlineBeacon
	{
		public override int ObjectSize => 1200;
		/// <summary>
		/// Name: ListenPort
		/// Type: IntProperty
		/// Offset: 0x3F8
		/// Size: 0x04
		/// </summary>
		public int ListenPort
		{
			get
			{
				return ReadInt32(0x3F8);
			}
			set
			{
				WriteInt32(0x3F8,value);
			}
		}
		
		/// <summary>
		/// Name: ClientActors
		/// Type: TArray<AOnlineBeaconClient>
		/// Offset: 0x400
		/// Size: 0x10
		/// SubElement Size: 0x460
		/// </summary>
		public TArray<AOnlineBeaconClient> ClientActors => new TArray<AOnlineBeaconClient>(BaseAddress+0x400);
		
	}


	/// <summary>
	/// AOnlineBeaconHostObject:AActor
	/// Size: 0x3F8
	/// Properties: 3
	/// </summary>
	public class AOnlineBeaconHostObject:AActor
	{
		public override int ObjectSize => 1016;
		/// <summary>
		/// Name: BeaconTypeName
		/// Type: StrProperty
		/// Offset: 0x3D0
		/// Size: 0x10
		/// </summary>
		public FString BeaconTypeName => new FString(BaseAddress+0x3D0);
		
		/// <summary>
		/// Name: ClientBeaconActorClass
		/// Type: ClassProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ClientActors
		/// Type: TArray<AOnlineBeaconClient>
		/// Offset: 0x3E8
		/// Size: 0x10
		/// SubElement Size: 0x460
		/// </summary>
		public TArray<AOnlineBeaconClient> ClientActors => new TArray<AOnlineBeaconClient>(BaseAddress+0x3E8);
		
	}


	/// <summary>
	/// APartyBeaconHost:AOnlineBeaconHostObject
	/// Size: 0x550
	/// Properties: 4
	/// </summary>
	public class APartyBeaconHost:AOnlineBeaconHostObject
	{
		public override int ObjectSize => 1360;
		/// <summary>
		/// Name: State
		/// Type: ObjectProperty
		/// Offset: 0x3F8
		/// Size: 0x08
		/// </summary>
		public UPartyBeaconState State => ReadUObject<UPartyBeaconState>(0x3F8);
		
		/// <summary>
		/// Name: bNoTimeouts
		/// Type: BoolProperty
		/// Offset: 0x540
		/// Size: 0x01
		/// </summary>
		public bool bNoTimeouts
		{
			get
			{
				return ReadBool(0x540);
			}
			set
			{
				WriteBool(0x540,value);
			}
		}
		
		/// <summary>
		/// Name: SessionTimeoutSecs
		/// Type: FloatProperty
		/// Offset: 0x544
		/// Size: 0x04
		/// </summary>
		public float SessionTimeoutSecs
		{
			get
			{
				return ReadSingle(0x544);
			}
			set
			{
				WriteSingle(0x544,value);
			}
		}
		
		/// <summary>
		/// Name: TravelSessionTimeoutSecs
		/// Type: FloatProperty
		/// Offset: 0x548
		/// Size: 0x04
		/// </summary>
		public float TravelSessionTimeoutSecs
		{
			get
			{
				return ReadSingle(0x548);
			}
			set
			{
				WriteSingle(0x548,value);
			}
		}
		
	}


	/// <summary>
	/// ATestBeaconHost:AOnlineBeaconHostObject
	/// Size: 0x3F8
	/// Properties: 0
	/// </summary>
	public class ATestBeaconHost:AOnlineBeaconHostObject
	{
		public override int ObjectSize => 1016;
	}


	/// <summary>
	/// UOnlineBlueprintCallProxyBase:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UOnlineBlueprintCallProxyBase:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAchievementQueryCallbackProxy:UOnlineBlueprintCallProxyBase
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class UAchievementQueryCallbackProxy:UOnlineBlueprintCallProxyBase
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// UAchievementWriteCallbackProxy:UOnlineBlueprintCallProxyBase
	/// Size: 0x78
	/// Properties: 0
	/// </summary>
	public class UAchievementWriteCallbackProxy:UOnlineBlueprintCallProxyBase
	{
		public override int ObjectSize => 120;
	}


	/// <summary>
	/// UConnectionCallbackProxy:UOnlineBlueprintCallProxyBase
	/// Size: 0xA0
	/// Properties: 0
	/// </summary>
	public class UConnectionCallbackProxy:UOnlineBlueprintCallProxyBase
	{
		public override int ObjectSize => 160;
	}


	/// <summary>
	/// UCreateSessionCallbackProxy:UOnlineBlueprintCallProxyBase
	/// Size: 0xF0
	/// Properties: 0
	/// </summary>
	public class UCreateSessionCallbackProxy:UOnlineBlueprintCallProxyBase
	{
		public override int ObjectSize => 240;
	}


	/// <summary>
	/// UDestroySessionCallbackProxy:UOnlineBlueprintCallProxyBase
	/// Size: 0xA0
	/// Properties: 0
	/// </summary>
	public class UDestroySessionCallbackProxy:UOnlineBlueprintCallProxyBase
	{
		public override int ObjectSize => 160;
	}


	/// <summary>
	/// UEndMatchCallbackProxy:UOnlineBlueprintCallProxyBase
	/// Size: 0x78
	/// Properties: 0
	/// </summary>
	public class UEndMatchCallbackProxy:UOnlineBlueprintCallProxyBase
	{
		public override int ObjectSize => 120;
	}


	/// <summary>
	/// UEndTurnCallbackProxy:UOnlineBlueprintCallProxyBase
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UEndTurnCallbackProxy:UOnlineBlueprintCallProxyBase
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UFindSessionsCallbackProxy:UOnlineBlueprintCallProxyBase
	/// Size: 0xC0
	/// Properties: 0
	/// </summary>
	public class UFindSessionsCallbackProxy:UOnlineBlueprintCallProxyBase
	{
		public override int ObjectSize => 192;
	}


	/// <summary>
	/// UFindTurnBasedMatchCallbackProxy:UOnlineBlueprintCallProxyBase
	/// Size: 0x80
	/// Properties: 0
	/// </summary>
	public class UFindTurnBasedMatchCallbackProxy:UOnlineBlueprintCallProxyBase
	{
		public override int ObjectSize => 128;
	}


	/// <summary>
	/// UJoinSessionCallbackProxy:UOnlineBlueprintCallProxyBase
	/// Size: 0x170
	/// Properties: 0
	/// </summary>
	public class UJoinSessionCallbackProxy:UOnlineBlueprintCallProxyBase
	{
		public override int ObjectSize => 368;
	}


	/// <summary>
	/// UQuitMatchCallbackProxy:UOnlineBlueprintCallProxyBase
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UQuitMatchCallbackProxy:UOnlineBlueprintCallProxyBase
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UDeveloperSettings:UObject
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class UDeveloperSettings:UObject
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UOnlinePIESettings:UDeveloperSettings
	/// Size: 0x50
	/// Properties: 2
	/// </summary>
	public class UOnlinePIESettings:UDeveloperSettings
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: bOnlinePIEEnabled
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bOnlinePIEEnabled
		{
			get
			{
				return ReadBool(0x38);
			}
			set
			{
				WriteBool(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: Logins
		/// Type: TArray<FPIELoginSettingsInternal>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FPIELoginSettingsInternal> Logins => new TArray<FPIELoginSettingsInternal>(BaseAddress+0x40);
		
	}


	/// <summary>
	/// UOnlineSession:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UOnlineSession:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UOnlineSessionClient:UOnlineSession
	/// Size: 0x240
	/// Properties: 2
	/// </summary>
	public class UOnlineSessionClient:UOnlineSession
	{
		public override int ObjectSize => 576;
		/// <summary>
		/// Name: bIsFromInvite
		/// Type: BoolProperty
		/// Offset: 0x230
		/// Size: 0x01
		/// </summary>
		public bool bIsFromInvite
		{
			get
			{
				return ReadBool(0x230);
			}
			set
			{
				WriteBool(0x230,value);
			}
		}
		
		/// <summary>
		/// Name: bHandlingDisconnect
		/// Type: BoolProperty
		/// Offset: 0x231
		/// Size: 0x01
		/// </summary>
		public bool bHandlingDisconnect
		{
			get
			{
				return ReadBool(0x231);
			}
			set
			{
				WriteBool(0x231,value);
			}
		}
		
	}


	/// <summary>
	/// UShowLoginUICallbackProxy:UBlueprintAsyncActionBase
	/// Size: 0x58
	/// Properties: 0
	/// </summary>
	public class UShowLoginUICallbackProxy:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 88;
	}


	/// <summary>
	/// UTurnBasedBlueprintLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UTurnBasedBlueprintLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UGameLiveStreamingFunctionLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UGameLiveStreamingFunctionLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UQueryLiveStreamsCallbackProxy:UOnlineBlueprintCallProxyBase
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class UQueryLiveStreamsCallbackProxy:UOnlineBlueprintCallProxyBase
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// UModel:UObject
	/// Size: 0x578
	/// Properties: 0
	/// </summary>
	public class UModel:UObject
	{
		public override int ObjectSize => 1400;
	}


	/// <summary>
	/// UEngineBaseTypes:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UEngineBaseTypes:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UDamageType:UObject
	/// Size: 0x40
	/// Properties: 7
	/// </summary>
	public class UDamageType:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: bCausedByWorld
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bCausedByWorld => (ReadByte(0x0028) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bScaleMomentumByMass
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bScaleMomentumByMass => (ReadByte(0x0028) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: DamageImpulse
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float DamageImpulse
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: bRadialDamageVelChange
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bRadialDamageVelChange => (ReadByte(0x0030) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: DestructibleImpulse
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float DestructibleImpulse
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: DestructibleDamageSpreadScale
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float DestructibleDamageSpreadScale
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: DamageFalloff
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float DamageFalloff
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
	}


	/// <summary>
	/// UEngineTypes:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UEngineTypes:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UEdGraphNode:UObject
	/// Size: 0x90
	/// Properties: 16
	/// </summary>
	public class UEdGraphNode:UObject
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: Pins
		/// Type: TArray<UEdGraphPin>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x110
		/// </summary>
		public TArray<UEdGraphPin> Pins => new TArray<UEdGraphPin>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: NodePosX
		/// Type: IntProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public int NodePosX
		{
			get
			{
				return ReadInt32(0x38);
			}
			set
			{
				WriteInt32(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: NodePosY
		/// Type: IntProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public int NodePosY
		{
			get
			{
				return ReadInt32(0x3C);
			}
			set
			{
				WriteInt32(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: NodeWidth
		/// Type: IntProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public int NodeWidth
		{
			get
			{
				return ReadInt32(0x40);
			}
			set
			{
				WriteInt32(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: NodeHeight
		/// Type: IntProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public int NodeHeight
		{
			get
			{
				return ReadInt32(0x44);
			}
			set
			{
				WriteInt32(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: bHasCompilerMessage
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool bHasCompilerMessage => (ReadByte(0x0048) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: NodeComment
		/// Type: StrProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FString NodeComment => new FString(BaseAddress+0x50);
		
		/// <summary>
		/// Name: bCommentBubblePinned
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bCommentBubblePinned
		{
			get
			{
				return ReadBool(0x60);
			}
			set
			{
				WriteBool(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: bCommentBubbleVisible
		/// Type: BoolProperty
		/// Offset: 0x61
		/// Size: 0x01
		/// </summary>
		public bool bCommentBubbleVisible
		{
			get
			{
				return ReadBool(0x61);
			}
			set
			{
				WriteBool(0x61,value);
			}
		}
		
		/// <summary>
		/// Name: ErrorType
		/// Type: IntProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public int ErrorType
		{
			get
			{
				return ReadInt32(0x64);
			}
			set
			{
				WriteInt32(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: ErrorMsg
		/// Type: StrProperty
		/// Offset: 0x68
		/// Size: 0x10
		/// </summary>
		public FString ErrorMsg => new FString(BaseAddress+0x68);
		
		/// <summary>
		/// Name: NodeGuid
		/// Type: StructProperty
		/// Offset: 0x78
		/// Size: 0x10
		/// </summary>
		public FGuid NodeGuid => ReadStruct<FGuid>(0x78);
		
		/// <summary>
		/// Name: AdvancedPinDisplay
		/// Type: ByteProperty
		/// Offset: 0x88
		/// Size: 0x01
		/// </summary>
		public byte AdvancedPinDisplay
		{
			get
			{
				return ReadByte(0x88);
			}
			set
			{
				WriteByte(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: EnabledState
		/// Type: ByteProperty
		/// Offset: 0x89
		/// Size: 0x01
		/// </summary>
		public byte EnabledState
		{
			get
			{
				return ReadByte(0x89);
			}
			set
			{
				WriteByte(0x89,value);
			}
		}
		
		/// <summary>
		/// Name: bUserSetEnabledState
		/// Type: BoolProperty
		/// Offset: 0x8A
		/// Size: 0x01
		/// </summary>
		public bool bUserSetEnabledState
		{
			get
			{
				return ReadBool(0x8A);
			}
			set
			{
				WriteBool(0x8A,value);
			}
		}
		
		/// <summary>
		/// Name: bIsNodeEnabled
		/// Type: BoolProperty
		/// Offset: 0x8B
		/// Size: 0x01
		/// </summary>
		public bool bIsNodeEnabled
		{
			get
			{
				return ReadBool(0x8B);
			}
			set
			{
				WriteBool(0x8B,value);
			}
		}
		
	}


	/// <summary>
	/// UEdGraphPin:UObject
	/// Size: 0x110
	/// Properties: 12
	/// </summary>
	public class UEdGraphPin:UObject
	{
		public override int ObjectSize => 272;
		/// <summary>
		/// Name: PinName
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString PinName => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: PinToolTip
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString PinToolTip => new FString(BaseAddress+0x38);
		
		/// <summary>
		/// Name: Direction
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte Direction
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: PinType
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x50
		/// </summary>
		public FEdGraphPinType PinType => ReadStruct<FEdGraphPinType>(0x50);
		
		/// <summary>
		/// Name: DefaultValue
		/// Type: StrProperty
		/// Offset: 0xA0
		/// Size: 0x10
		/// </summary>
		public FString DefaultValue => new FString(BaseAddress+0xA0);
		
		/// <summary>
		/// Name: AutogeneratedDefaultValue
		/// Type: StrProperty
		/// Offset: 0xB0
		/// Size: 0x10
		/// </summary>
		public FString AutogeneratedDefaultValue => new FString(BaseAddress+0xB0);
		
		/// <summary>
		/// Name: DefaultObject
		/// Type: ObjectProperty
		/// Offset: 0xC0
		/// Size: 0x08
		/// </summary>
		public UObject DefaultObject => ReadUObject<UObject>(0xC0);
		
		/// <summary>
		/// Name: DefaultTextValue
		/// Type: TextProperty
		/// Offset: 0xC8
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: LinkedTo
		/// Type: TArray<UEdGraphPin>
		/// Offset: 0xE0
		/// Size: 0x10
		/// SubElement Size: 0x110
		/// </summary>
		public TArray<UEdGraphPin> LinkedTo => new TArray<UEdGraphPin>(BaseAddress+0xE0);
		
		/// <summary>
		/// Name: SubPins
		/// Type: TArray<UEdGraphPin>
		/// Offset: 0xF0
		/// Size: 0x10
		/// SubElement Size: 0x110
		/// </summary>
		public TArray<UEdGraphPin> SubPins => new TArray<UEdGraphPin>(BaseAddress+0xF0);
		
		/// <summary>
		/// Name: ParentPin
		/// Type: ObjectProperty
		/// Offset: 0x100
		/// Size: 0x08
		/// </summary>
		public UEdGraphPin ParentPin => ReadUObject<UEdGraphPin>(0x100);
		
		/// <summary>
		/// Name: ReferencePassThroughConnection
		/// Type: ObjectProperty
		/// Offset: 0x108
		/// Size: 0x08
		/// </summary>
		public UEdGraphPin ReferencePassThroughConnection => ReadUObject<UEdGraphPin>(0x108);
		
	}


	/// <summary>
	/// UBlueprintCore:UObject
	/// Size: 0x50
	/// Properties: 5
	/// </summary>
	public class UBlueprintCore:UObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: SkeletonGeneratedClass
		/// Type: ClassProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: GeneratedClass
		/// Type: ClassProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bLegacyNeedToPurgeSkelRefs
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bLegacyNeedToPurgeSkelRefs
		{
			get
			{
				return ReadBool(0x38);
			}
			set
			{
				WriteBool(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: bLegacyGeneratedClassIsAuthoritative
		/// Type: BoolProperty
		/// Offset: 0x39
		/// Size: 0x01
		/// </summary>
		public bool bLegacyGeneratedClassIsAuthoritative
		{
			get
			{
				return ReadBool(0x39);
			}
			set
			{
				WriteBool(0x39,value);
			}
		}
		
		/// <summary>
		/// Name: BlueprintGuid
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x10
		/// </summary>
		public FGuid BlueprintGuid => ReadStruct<FGuid>(0x3C);
		
	}


	/// <summary>
	/// UBlueprint:UBlueprintCore
	/// Size: 0x190
	/// Properties: 11
	/// </summary>
	public class UBlueprint:UBlueprintCore
	{
		public override int ObjectSize => 400;
		/// <summary>
		/// Name: bRecompileOnLoad
		/// Type: BoolProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public bool bRecompileOnLoad => (ReadByte(0x0050) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ParentClass
		/// Type: ClassProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PRIVATE_InnermostPreviousCDO
		/// Type: ObjectProperty
		/// Offset: 0x60
		/// Size: 0x08
		/// </summary>
		public UObject PRIVATE_InnermostPreviousCDO => ReadUObject<UObject>(0x60);
		
		/// <summary>
		/// Name: bHasBeenRegenerated
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bHasBeenRegenerated => (ReadByte(0x0068) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bIsRegeneratingOnLoad
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bIsRegeneratingOnLoad => (ReadByte(0x0068) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: SimpleConstructionScript
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public USimpleConstructionScript SimpleConstructionScript => ReadUObject<USimpleConstructionScript>(0x70);
		
		/// <summary>
		/// Name: ComponentTemplates
		/// Type: TArray<UActorComponent>
		/// Offset: 0x78
		/// Size: 0x10
		/// SubElement Size: 0xD8
		/// </summary>
		public TArray<UActorComponent> ComponentTemplates => new TArray<UActorComponent>(BaseAddress+0x78);
		
		/// <summary>
		/// Name: Timelines
		/// Type: TArray<UTimelineTemplate>
		/// Offset: 0x88
		/// Size: 0x10
		/// SubElement Size: 0x98
		/// </summary>
		public TArray<UTimelineTemplate> Timelines => new TArray<UTimelineTemplate>(BaseAddress+0x88);
		
		/// <summary>
		/// Name: InheritableComponentHandler
		/// Type: ObjectProperty
		/// Offset: 0x98
		/// Size: 0x08
		/// </summary>
		public UInheritableComponentHandler InheritableComponentHandler => ReadUObject<UInheritableComponentHandler>(0x98);
		
		/// <summary>
		/// Name: BlueprintType
		/// Type: ByteProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public byte BlueprintType
		{
			get
			{
				return ReadByte(0xA0);
			}
			set
			{
				WriteByte(0xA0,value);
			}
		}
		
		/// <summary>
		/// Name: BlueprintSystemVersion
		/// Type: IntProperty
		/// Offset: 0xA4
		/// Size: 0x04
		/// </summary>
		public int BlueprintSystemVersion
		{
			get
			{
				return ReadInt32(0xA4);
			}
			set
			{
				WriteInt32(0xA4,value);
			}
		}
		
	}


	/// <summary>
	/// UInterface_AssetUserData:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UInterface_AssetUserData:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// AAmbientSound:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class AAmbientSound:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: AudioComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UAudioComponent AudioComponent => ReadUObject<UAudioComponent>(0x3D0);
		
	}


	/// <summary>
	/// UPendingNetGame:UObject
	/// Size: 0xC8
	/// Properties: 2
	/// </summary>
	public class UPendingNetGame:UObject
	{
		public override int ObjectSize => 200;
		/// <summary>
		/// Name: NetDriver
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UNetDriver NetDriver => ReadUObject<UNetDriver>(0x30);
		
		/// <summary>
		/// Name: DemoNetDriver
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UDemoNetDriver DemoNetDriver => ReadUObject<UDemoNetDriver>(0x38);
		
	}


	/// <summary>
	/// UWorld:UObject
	/// Size: 0x920
	/// Properties: 26
	/// </summary>
	public class UWorld:UObject
	{
		public override int ObjectSize => 2336;
		/// <summary>
		/// Name: PersistentLevel
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public ULevel PersistentLevel => ReadUObject<ULevel>(0x30);
		
		/// <summary>
		/// Name: NetDriver
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UNetDriver NetDriver => ReadUObject<UNetDriver>(0x38);
		
		/// <summary>
		/// Name: LineBatcher
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public ULineBatchComponent LineBatcher => ReadUObject<ULineBatchComponent>(0x40);
		
		/// <summary>
		/// Name: PersistentLineBatcher
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public ULineBatchComponent PersistentLineBatcher => ReadUObject<ULineBatchComponent>(0x48);
		
		/// <summary>
		/// Name: ForegroundLineBatcher
		/// Type: ObjectProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public ULineBatchComponent ForegroundLineBatcher => ReadUObject<ULineBatchComponent>(0x50);
		
		/// <summary>
		/// Name: GameState
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public AGameState GameState => ReadUObject<AGameState>(0x58);
		
		/// <summary>
		/// Name: NetworkManager
		/// Type: ObjectProperty
		/// Offset: 0x60
		/// Size: 0x08
		/// </summary>
		public AGameNetworkManager NetworkManager => ReadUObject<AGameNetworkManager>(0x60);
		
		/// <summary>
		/// Name: PhysicsCollisionHandler
		/// Type: ObjectProperty
		/// Offset: 0x68
		/// Size: 0x08
		/// </summary>
		public UPhysicsCollisionHandler PhysicsCollisionHandler => ReadUObject<UPhysicsCollisionHandler>(0x68);
		
		/// <summary>
		/// Name: ExtraReferencedObjects
		/// Type: TArray<UObject>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UObject> ExtraReferencedObjects => new TArray<UObject>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: PerModuleDataObjects
		/// Type: TArray<UObject>
		/// Offset: 0x80
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UObject> PerModuleDataObjects => new TArray<UObject>(BaseAddress+0x80);
		
		/// <summary>
		/// Name: StreamingLevels
		/// Type: TArray<ULevelStreaming>
		/// Offset: 0x90
		/// Size: 0x10
		/// SubElement Size: 0x160
		/// </summary>
		public TArray<ULevelStreaming> StreamingLevels => new TArray<ULevelStreaming>(BaseAddress+0x90);
		
		/// <summary>
		/// Name: StreamingLevelsPrefix
		/// Type: StrProperty
		/// Offset: 0xA0
		/// Size: 0x10
		/// </summary>
		public FString StreamingLevelsPrefix => new FString(BaseAddress+0xA0);
		
		/// <summary>
		/// Name: CurrentLevelPendingVisibility
		/// Type: ObjectProperty
		/// Offset: 0xB0
		/// Size: 0x08
		/// </summary>
		public ULevel CurrentLevelPendingVisibility => ReadUObject<ULevel>(0xB0);
		
		/// <summary>
		/// Name: DemoNetDriver
		/// Type: ObjectProperty
		/// Offset: 0xB8
		/// Size: 0x08
		/// </summary>
		public UDemoNetDriver DemoNetDriver => ReadUObject<UDemoNetDriver>(0xB8);
		
		/// <summary>
		/// Name: MyParticleEventManager
		/// Type: ObjectProperty
		/// Offset: 0xC0
		/// Size: 0x08
		/// </summary>
		public AParticleEventManager MyParticleEventManager => ReadUObject<AParticleEventManager>(0xC0);
		
		/// <summary>
		/// Name: DefaultPhysicsVolume
		/// Type: ObjectProperty
		/// Offset: 0xC8
		/// Size: 0x08
		/// </summary>
		public APhysicsVolume DefaultPhysicsVolume => ReadUObject<APhysicsVolume>(0xC8);
		
		/// <summary>
		/// Name: NavigationSystem
		/// Type: ObjectProperty
		/// Offset: 0xE8
		/// Size: 0x08
		/// </summary>
		public UNavigationSystem NavigationSystem => ReadUObject<UNavigationSystem>(0xE8);
		
		/// <summary>
		/// Name: AuthorityGameMode
		/// Type: ObjectProperty
		/// Offset: 0xF0
		/// Size: 0x08
		/// </summary>
		public AGameMode AuthorityGameMode => ReadUObject<AGameMode>(0xF0);
		
		/// <summary>
		/// Name: AISystem
		/// Type: ObjectProperty
		/// Offset: 0xF8
		/// Size: 0x08
		/// </summary>
		public UAISystemBase AISystem => ReadUObject<UAISystemBase>(0xF8);
		
		/// <summary>
		/// Name: AvoidanceManager
		/// Type: ObjectProperty
		/// Offset: 0x100
		/// Size: 0x08
		/// </summary>
		public UAvoidanceManager AvoidanceManager => ReadUObject<UAvoidanceManager>(0x100);
		
		/// <summary>
		/// Name: Levels
		/// Type: TArray<ULevel>
		/// Offset: 0x108
		/// Size: 0x10
		/// SubElement Size: 0x3D0
		/// </summary>
		public TArray<ULevel> Levels => new TArray<ULevel>(BaseAddress+0x108);
		
		/// <summary>
		/// Name: CurrentLevel
		/// Type: ObjectProperty
		/// Offset: 0x118
		/// Size: 0x08
		/// </summary>
		public ULevel CurrentLevel => ReadUObject<ULevel>(0x118);
		
		/// <summary>
		/// Name: OwningGameInstance
		/// Type: ObjectProperty
		/// Offset: 0x120
		/// Size: 0x08
		/// </summary>
		public UGameInstance OwningGameInstance => ReadUObject<UGameInstance>(0x120);
		
		/// <summary>
		/// Name: ParameterCollectionInstances
		/// Type: TArray<UMaterialParameterCollectionInstance>
		/// Offset: 0x128
		/// Size: 0x10
		/// SubElement Size: 0xE8
		/// </summary>
		public TArray<UMaterialParameterCollectionInstance> ParameterCollectionInstances => new TArray<UMaterialParameterCollectionInstance>(BaseAddress+0x128);
		
		/// <summary>
		/// Name: WorldComposition
		/// Type: ObjectProperty
		/// Offset: 0x8C8
		/// Size: 0x08
		/// </summary>
		public UWorldComposition WorldComposition => ReadUObject<UWorldComposition>(0x8C8);
		
		/// <summary>
		/// Name: bAreConstraintsDirty
		/// Type: BoolProperty
		/// Offset: 0x90E
		/// Size: 0x01
		/// </summary>
		public bool bAreConstraintsDirty => (ReadByte(0x090E) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// ULevel:UObject
	/// Size: 0x3D0
	/// Properties: 16
	/// </summary>
	public class ULevel:UObject
	{
		public override int ObjectSize => 976;
		/// <summary>
		/// Name: OwningWorld
		/// Type: ObjectProperty
		/// Offset: 0xB8
		/// Size: 0x08
		/// </summary>
		public UWorld OwningWorld => ReadUObject<UWorld>(0xB8);
		
		/// <summary>
		/// Name: Model
		/// Type: ObjectProperty
		/// Offset: 0xC0
		/// Size: 0x08
		/// </summary>
		public UModel Model => ReadUObject<UModel>(0xC0);
		
		/// <summary>
		/// Name: ModelComponents
		/// Type: TArray<UModelComponent>
		/// Offset: 0xC8
		/// Size: 0x10
		/// SubElement Size: 0x5E0
		/// </summary>
		public TArray<UModelComponent> ModelComponents => new TArray<UModelComponent>(BaseAddress+0xC8);
		
		/// <summary>
		/// Name: LevelScriptActor
		/// Type: ObjectProperty
		/// Offset: 0xD8
		/// Size: 0x08
		/// </summary>
		public ALevelScriptActor LevelScriptActor => ReadUObject<ALevelScriptActor>(0xD8);
		
		/// <summary>
		/// Name: NavListStart
		/// Type: ObjectProperty
		/// Offset: 0xE0
		/// Size: 0x08
		/// </summary>
		public ANavigationObjectBase NavListStart => ReadUObject<ANavigationObjectBase>(0xE0);
		
		/// <summary>
		/// Name: NavListEnd
		/// Type: ObjectProperty
		/// Offset: 0xE8
		/// Size: 0x08
		/// </summary>
		public ANavigationObjectBase NavListEnd => ReadUObject<ANavigationObjectBase>(0xE8);
		
		/// <summary>
		/// Name: NavDataChunks
		/// Type: TArray<UNavigationDataChunk>
		/// Offset: 0xF0
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<UNavigationDataChunk> NavDataChunks => new TArray<UNavigationDataChunk>(BaseAddress+0xF0);
		
		/// <summary>
		/// Name: LightmapTotalSize
		/// Type: FloatProperty
		/// Offset: 0x100
		/// Size: 0x04
		/// </summary>
		public float LightmapTotalSize
		{
			get
			{
				return ReadSingle(0x100);
			}
			set
			{
				WriteSingle(0x100,value);
			}
		}
		
		/// <summary>
		/// Name: ShadowmapTotalSize
		/// Type: FloatProperty
		/// Offset: 0x104
		/// Size: 0x04
		/// </summary>
		public float ShadowmapTotalSize
		{
			get
			{
				return ReadSingle(0x104);
			}
			set
			{
				WriteSingle(0x104,value);
			}
		}
		
		/// <summary>
		/// Name: StaticNavigableGeometry
		/// Type: TArray<FVector>
		/// Offset: 0x108
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> StaticNavigableGeometry => new TArray<FVector>(BaseAddress+0x108);
		
		/// <summary>
		/// Name: StreamingTextureGuids
		/// Type: TArray<FGuid>
		/// Offset: 0x118
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FGuid> StreamingTextureGuids => new TArray<FGuid>(BaseAddress+0x118);
		
		/// <summary>
		/// Name: bTextureStreamingRotationChanged
		/// Type: BoolProperty
		/// Offset: 0x2A8
		/// Size: 0x01
		/// </summary>
		public bool bTextureStreamingRotationChanged => (ReadByte(0x02A8) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bIsVisible
		/// Type: BoolProperty
		/// Offset: 0x2A8
		/// Size: 0x01
		/// </summary>
		public bool bIsVisible => (ReadByte(0x02A8) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bLocked
		/// Type: BoolProperty
		/// Offset: 0x2A8
		/// Size: 0x01
		/// </summary>
		public bool bLocked => (ReadByte(0x02A8) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: WorldSettings
		/// Type: ObjectProperty
		/// Offset: 0x3A0
		/// Size: 0x08
		/// </summary>
		public AWorldSettings WorldSettings => ReadUObject<AWorldSettings>(0x3A0);
		
		/// <summary>
		/// Name: AssetUserData
		/// Type: TArray<UAssetUserData>
		/// Offset: 0x3A8
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UAssetUserData> AssetUserData => new TArray<UAssetUserData>(BaseAddress+0x3A8);
		
	}


	/// <summary>
	/// ABrushShape:ABrush
	/// Size: 0x408
	/// Properties: 0
	/// </summary>
	public class ABrushShape:ABrush
	{
		public override int ObjectSize => 1032;
	}


	/// <summary>
	/// AAudioVolume:AVolume
	/// Size: 0x458
	/// Properties: 5
	/// </summary>
	public class AAudioVolume:AVolume
	{
		public override int ObjectSize => 1112;
		/// <summary>
		/// Name: Priority
		/// Type: FloatProperty
		/// Offset: 0x408
		/// Size: 0x04
		/// </summary>
		public float Priority
		{
			get
			{
				return ReadSingle(0x408);
			}
			set
			{
				WriteSingle(0x408,value);
			}
		}
		
		/// <summary>
		/// Name: bEnabled
		/// Type: BoolProperty
		/// Offset: 0x40C
		/// Size: 0x01
		/// </summary>
		public bool bEnabled => (ReadByte(0x040C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Settings
		/// Type: StructProperty
		/// Offset: 0x410
		/// Size: 0x18
		/// </summary>
		public FReverbSettings Settings => ReadStruct<FReverbSettings>(0x410);
		
		/// <summary>
		/// Name: AmbientZoneSettings
		/// Type: StructProperty
		/// Offset: 0x428
		/// Size: 0x24
		/// </summary>
		public FInteriorSettings AmbientZoneSettings => ReadStruct<FInteriorSettings>(0x428);
		
		/// <summary>
		/// Name: NextLowerPriorityVolume
		/// Type: ObjectProperty
		/// Offset: 0x450
		/// Size: 0x08
		/// </summary>
		public AAudioVolume NextLowerPriorityVolume => ReadUObject<AAudioVolume>(0x450);
		
	}


	/// <summary>
	/// ABlockingVolume:AVolume
	/// Size: 0x408
	/// Properties: 0
	/// </summary>
	public class ABlockingVolume:AVolume
	{
		public override int ObjectSize => 1032;
	}


	/// <summary>
	/// ACameraBlockingVolume:AVolume
	/// Size: 0x408
	/// Properties: 0
	/// </summary>
	public class ACameraBlockingVolume:AVolume
	{
		public override int ObjectSize => 1032;
	}


	/// <summary>
	/// ACullDistanceVolume:AVolume
	/// Size: 0x420
	/// Properties: 2
	/// </summary>
	public class ACullDistanceVolume:AVolume
	{
		public override int ObjectSize => 1056;
		/// <summary>
		/// Name: CullDistances
		/// Type: TArray<FCullDistanceSizePair>
		/// Offset: 0x408
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FCullDistanceSizePair> CullDistances => new TArray<FCullDistanceSizePair>(BaseAddress+0x408);
		
		/// <summary>
		/// Name: bEnabled
		/// Type: BoolProperty
		/// Offset: 0x418
		/// Size: 0x01
		/// </summary>
		public bool bEnabled => (ReadByte(0x0418) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// AHLODMeshCullingVolume:AVolume
	/// Size: 0x408
	/// Properties: 0
	/// </summary>
	public class AHLODMeshCullingVolume:AVolume
	{
		public override int ObjectSize => 1032;
	}


	/// <summary>
	/// ALevelStreamingVolume:AVolume
	/// Size: 0x420
	/// Properties: 4
	/// </summary>
	public class ALevelStreamingVolume:AVolume
	{
		public override int ObjectSize => 1056;
		/// <summary>
		/// Name: StreamingLevelNames
		/// Type: TArray<FName>
		/// Offset: 0x408
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> StreamingLevelNames => new TArray<FName>(BaseAddress+0x408);
		
		/// <summary>
		/// Name: bEditorPreVisOnly
		/// Type: BoolProperty
		/// Offset: 0x418
		/// Size: 0x01
		/// </summary>
		public bool bEditorPreVisOnly => (ReadByte(0x0418) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDisabled
		/// Type: BoolProperty
		/// Offset: 0x418
		/// Size: 0x01
		/// </summary>
		public bool bDisabled => (ReadByte(0x0418) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: StreamingUsage
		/// Type: ByteProperty
		/// Offset: 0x41C
		/// Size: 0x01
		/// </summary>
		public byte StreamingUsage
		{
			get
			{
				return ReadByte(0x41C);
			}
			set
			{
				WriteByte(0x41C,value);
			}
		}
		
	}


	/// <summary>
	/// ALightmassCharacterIndirectDetailVolume:AVolume
	/// Size: 0x408
	/// Properties: 0
	/// </summary>
	public class ALightmassCharacterIndirectDetailVolume:AVolume
	{
		public override int ObjectSize => 1032;
	}


	/// <summary>
	/// ALightmassImportanceVolume:AVolume
	/// Size: 0x408
	/// Properties: 0
	/// </summary>
	public class ALightmassImportanceVolume:AVolume
	{
		public override int ObjectSize => 1032;
	}


	/// <summary>
	/// ANavMeshBoundsVolume:AVolume
	/// Size: 0x410
	/// Properties: 1
	/// </summary>
	public class ANavMeshBoundsVolume:AVolume
	{
		public override int ObjectSize => 1040;
		/// <summary>
		/// Name: SupportedAgents
		/// Type: StructProperty
		/// Offset: 0x408
		/// Size: 0x04
		/// </summary>
		public FNavAgentSelector SupportedAgents => ReadStruct<FNavAgentSelector>(0x408);
		
	}


	/// <summary>
	/// UNavigationQueryFilter:UObject
	/// Size: 0x48
	/// Properties: 3
	/// </summary>
	public class UNavigationQueryFilter:UObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: Areas
		/// Type: TArray<FNavigationFilterArea>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FNavigationFilterArea> Areas => new TArray<FNavigationFilterArea>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: IncludeFlags
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public FNavigationFilterFlags IncludeFlags => ReadStruct<FNavigationFilterFlags>(0x38);
		
		/// <summary>
		/// Name: ExcludeFlags
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public FNavigationFilterFlags ExcludeFlags => ReadStruct<FNavigationFilterFlags>(0x3C);
		
	}


	/// <summary>
	/// UNavigationTypes:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNavigationTypes:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UNavRelevantInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNavRelevantInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// ANavModifierVolume:AVolume
	/// Size: 0x418
	/// Properties: 1
	/// </summary>
	public class ANavModifierVolume:AVolume
	{
		public override int ObjectSize => 1048;
		/// <summary>
		/// Name: AreaClass
		/// Type: ClassProperty
		/// Offset: 0x410
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// APhysicsVolume:AVolume
	/// Size: 0x418
	/// Properties: 5
	/// </summary>
	public class APhysicsVolume:AVolume
	{
		public override int ObjectSize => 1048;
		/// <summary>
		/// Name: TerminalVelocity
		/// Type: FloatProperty
		/// Offset: 0x408
		/// Size: 0x04
		/// </summary>
		public float TerminalVelocity
		{
			get
			{
				return ReadSingle(0x408);
			}
			set
			{
				WriteSingle(0x408,value);
			}
		}
		
		/// <summary>
		/// Name: Priority
		/// Type: IntProperty
		/// Offset: 0x40C
		/// Size: 0x04
		/// </summary>
		public int Priority
		{
			get
			{
				return ReadInt32(0x40C);
			}
			set
			{
				WriteInt32(0x40C,value);
			}
		}
		
		/// <summary>
		/// Name: FluidFriction
		/// Type: FloatProperty
		/// Offset: 0x410
		/// Size: 0x04
		/// </summary>
		public float FluidFriction
		{
			get
			{
				return ReadSingle(0x410);
			}
			set
			{
				WriteSingle(0x410,value);
			}
		}
		
		/// <summary>
		/// Name: bWaterVolume
		/// Type: BoolProperty
		/// Offset: 0x414
		/// Size: 0x01
		/// </summary>
		public bool bWaterVolume => (ReadByte(0x0414) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bPhysicsOnContact
		/// Type: BoolProperty
		/// Offset: 0x414
		/// Size: 0x01
		/// </summary>
		public bool bPhysicsOnContact => (ReadByte(0x0414) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// ADefaultPhysicsVolume:APhysicsVolume
	/// Size: 0x418
	/// Properties: 0
	/// </summary>
	public class ADefaultPhysicsVolume:APhysicsVolume
	{
		public override int ObjectSize => 1048;
	}


	/// <summary>
	/// AKillZVolume:APhysicsVolume
	/// Size: 0x418
	/// Properties: 0
	/// </summary>
	public class AKillZVolume:APhysicsVolume
	{
		public override int ObjectSize => 1048;
	}


	/// <summary>
	/// APainCausingVolume:APhysicsVolume
	/// Size: 0x440
	/// Properties: 7
	/// </summary>
	public class APainCausingVolume:APhysicsVolume
	{
		public override int ObjectSize => 1088;
		/// <summary>
		/// Name: bPainCausing
		/// Type: BoolProperty
		/// Offset: 0x418
		/// Size: 0x01
		/// </summary>
		public bool bPainCausing => (ReadByte(0x0418) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: DamagePerSec
		/// Type: FloatProperty
		/// Offset: 0x41C
		/// Size: 0x04
		/// </summary>
		public float DamagePerSec
		{
			get
			{
				return ReadSingle(0x41C);
			}
			set
			{
				WriteSingle(0x41C,value);
			}
		}
		
		/// <summary>
		/// Name: DamageType
		/// Type: ClassProperty
		/// Offset: 0x420
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PainInterval
		/// Type: FloatProperty
		/// Offset: 0x428
		/// Size: 0x04
		/// </summary>
		public float PainInterval
		{
			get
			{
				return ReadSingle(0x428);
			}
			set
			{
				WriteSingle(0x428,value);
			}
		}
		
		/// <summary>
		/// Name: bEntryPain
		/// Type: BoolProperty
		/// Offset: 0x42C
		/// Size: 0x01
		/// </summary>
		public bool bEntryPain => (ReadByte(0x042C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: BACKUP_bPainCausing
		/// Type: BoolProperty
		/// Offset: 0x42C
		/// Size: 0x01
		/// </summary>
		public bool BACKUP_bPainCausing => (ReadByte(0x042C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: DamageInstigator
		/// Type: ObjectProperty
		/// Offset: 0x430
		/// Size: 0x08
		/// </summary>
		public AController DamageInstigator => ReadUObject<AController>(0x430);
		
	}


	/// <summary>
	/// UBlendableInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UBlendableInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UScene:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UScene:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UInterface_PostProcessVolume:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UInterface_PostProcessVolume:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// APostProcessVolume:AVolume
	/// Size: 0x7C0
	/// Properties: 6
	/// </summary>
	public class APostProcessVolume:AVolume
	{
		public override int ObjectSize => 1984;
		/// <summary>
		/// Name: Settings
		/// Type: StructProperty
		/// Offset: 0x410
		/// Size: 0x3A0
		/// </summary>
		public FPostProcessSettings Settings => ReadStruct<FPostProcessSettings>(0x410);
		
		/// <summary>
		/// Name: Priority
		/// Type: FloatProperty
		/// Offset: 0x7B0
		/// Size: 0x04
		/// </summary>
		public float Priority
		{
			get
			{
				return ReadSingle(0x7B0);
			}
			set
			{
				WriteSingle(0x7B0,value);
			}
		}
		
		/// <summary>
		/// Name: BlendRadius
		/// Type: FloatProperty
		/// Offset: 0x7B4
		/// Size: 0x04
		/// </summary>
		public float BlendRadius
		{
			get
			{
				return ReadSingle(0x7B4);
			}
			set
			{
				WriteSingle(0x7B4,value);
			}
		}
		
		/// <summary>
		/// Name: BlendWeight
		/// Type: FloatProperty
		/// Offset: 0x7B8
		/// Size: 0x04
		/// </summary>
		public float BlendWeight
		{
			get
			{
				return ReadSingle(0x7B8);
			}
			set
			{
				WriteSingle(0x7B8,value);
			}
		}
		
		/// <summary>
		/// Name: bEnabled
		/// Type: BoolProperty
		/// Offset: 0x7BC
		/// Size: 0x01
		/// </summary>
		public bool bEnabled => (ReadByte(0x07BC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUnbound
		/// Type: BoolProperty
		/// Offset: 0x7BC
		/// Size: 0x01
		/// </summary>
		public bool bUnbound => (ReadByte(0x07BC) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// APrecomputedVisibilityOverrideVolume:AVolume
	/// Size: 0x438
	/// Properties: 3
	/// </summary>
	public class APrecomputedVisibilityOverrideVolume:AVolume
	{
		public override int ObjectSize => 1080;
		/// <summary>
		/// Name: OverrideVisibleActors
		/// Type: TArray<AActor>
		/// Offset: 0x408
		/// Size: 0x10
		/// SubElement Size: 0x3D0
		/// </summary>
		public TArray<AActor> OverrideVisibleActors => new TArray<AActor>(BaseAddress+0x408);
		
		/// <summary>
		/// Name: OverrideInvisibleActors
		/// Type: TArray<AActor>
		/// Offset: 0x418
		/// Size: 0x10
		/// SubElement Size: 0x3D0
		/// </summary>
		public TArray<AActor> OverrideInvisibleActors => new TArray<AActor>(BaseAddress+0x418);
		
		/// <summary>
		/// Name: OverrideInvisibleLevels
		/// Type: TArray<FName>
		/// Offset: 0x428
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> OverrideInvisibleLevels => new TArray<FName>(BaseAddress+0x428);
		
	}


	/// <summary>
	/// APrecomputedVisibilityVolume:AVolume
	/// Size: 0x408
	/// Properties: 0
	/// </summary>
	public class APrecomputedVisibilityVolume:AVolume
	{
		public override int ObjectSize => 1032;
	}


	/// <summary>
	/// APreCullTrianglesVolume:AVolume
	/// Size: 0x408
	/// Properties: 0
	/// </summary>
	public class APreCullTrianglesVolume:AVolume
	{
		public override int ObjectSize => 1032;
	}


	/// <summary>
	/// ATriggerVolume:AVolume
	/// Size: 0x408
	/// Properties: 0
	/// </summary>
	public class ATriggerVolume:AVolume
	{
		public override int ObjectSize => 1032;
	}


	/// <summary>
	/// UNavAgentInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNavAgentInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UCameraShake:UObject
	/// Size: 0x160
	/// Properties: 18
	/// </summary>
	public class UCameraShake:UObject
	{
		public override int ObjectSize => 352;
		/// <summary>
		/// Name: bSingleInstance
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bSingleInstance => (ReadByte(0x0028) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: OscillationDuration
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float OscillationDuration
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: OscillationBlendInTime
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float OscillationBlendInTime
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: OscillationBlendOutTime
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float OscillationBlendOutTime
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: RotOscillation
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x24
		/// </summary>
		public FROscillator RotOscillation => ReadStruct<FROscillator>(0x38);
		
		/// <summary>
		/// Name: LocOscillation
		/// Type: StructProperty
		/// Offset: 0x5C
		/// Size: 0x24
		/// </summary>
		public FVOscillator LocOscillation => ReadStruct<FVOscillator>(0x5C);
		
		/// <summary>
		/// Name: FOVOscillation
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x0C
		/// </summary>
		public FFOscillator FOVOscillation => ReadStruct<FFOscillator>(0x80);
		
		/// <summary>
		/// Name: AnimPlayRate
		/// Type: FloatProperty
		/// Offset: 0x8C
		/// Size: 0x04
		/// </summary>
		public float AnimPlayRate
		{
			get
			{
				return ReadSingle(0x8C);
			}
			set
			{
				WriteSingle(0x8C,value);
			}
		}
		
		/// <summary>
		/// Name: AnimScale
		/// Type: FloatProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public float AnimScale
		{
			get
			{
				return ReadSingle(0x90);
			}
			set
			{
				WriteSingle(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: AnimBlendInTime
		/// Type: FloatProperty
		/// Offset: 0x94
		/// Size: 0x04
		/// </summary>
		public float AnimBlendInTime
		{
			get
			{
				return ReadSingle(0x94);
			}
			set
			{
				WriteSingle(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: AnimBlendOutTime
		/// Type: FloatProperty
		/// Offset: 0x98
		/// Size: 0x04
		/// </summary>
		public float AnimBlendOutTime
		{
			get
			{
				return ReadSingle(0x98);
			}
			set
			{
				WriteSingle(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: RandomAnimSegmentDuration
		/// Type: FloatProperty
		/// Offset: 0x9C
		/// Size: 0x04
		/// </summary>
		public float RandomAnimSegmentDuration
		{
			get
			{
				return ReadSingle(0x9C);
			}
			set
			{
				WriteSingle(0x9C,value);
			}
		}
		
		/// <summary>
		/// Name: Anim
		/// Type: ObjectProperty
		/// Offset: 0xA0
		/// Size: 0x08
		/// </summary>
		public UCameraAnim Anim => ReadUObject<UCameraAnim>(0xA0);
		
		/// <summary>
		/// Name: bRandomAnimSegment
		/// Type: BoolProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public bool bRandomAnimSegment => (ReadByte(0x00A8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CameraOwner
		/// Type: ObjectProperty
		/// Offset: 0xC0
		/// Size: 0x08
		/// </summary>
		public APlayerCameraManager CameraOwner => ReadUObject<APlayerCameraManager>(0xC0);
		
		/// <summary>
		/// Name: ShakeScale
		/// Type: FloatProperty
		/// Offset: 0x148
		/// Size: 0x04
		/// </summary>
		public float ShakeScale
		{
			get
			{
				return ReadSingle(0x148);
			}
			set
			{
				WriteSingle(0x148,value);
			}
		}
		
		/// <summary>
		/// Name: OscillatorTimeRemaining
		/// Type: FloatProperty
		/// Offset: 0x14C
		/// Size: 0x04
		/// </summary>
		public float OscillatorTimeRemaining
		{
			get
			{
				return ReadSingle(0x14C);
			}
			set
			{
				WriteSingle(0x14C,value);
			}
		}
		
		/// <summary>
		/// Name: AnimInst
		/// Type: ObjectProperty
		/// Offset: 0x150
		/// Size: 0x08
		/// </summary>
		public UCameraAnimInst AnimInst => ReadUObject<UCameraAnimInst>(0x150);
		
	}


	/// <summary>
	/// UInputComponent:UActorComponent
	/// Size: 0x150
	/// Properties: 0
	/// </summary>
	public class UInputComponent:UActorComponent
	{
		public override int ObjectSize => 336;
	}


	/// <summary>
	/// UCurveBase:UObject
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UCurveBase:UObject
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UCurveFloat:UCurveBase
	/// Size: 0xB0
	/// Properties: 2
	/// </summary>
	public class UCurveFloat:UCurveBase
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: FloatCurve
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x78
		/// </summary>
		public FRichCurve FloatCurve => ReadStruct<FRichCurve>(0x30);
		
		/// <summary>
		/// Name: bIsEventCurve
		/// Type: BoolProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public bool bIsEventCurve
		{
			get
			{
				return ReadBool(0xA8);
			}
			set
			{
				WriteBool(0xA8,value);
			}
		}
		
	}


	/// <summary>
	/// UForceFeedbackEffect:UObject
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class UForceFeedbackEffect:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: ChannelDetails
		/// Type: TArray<FForceFeedbackChannelDetails>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x88
		/// </summary>
		public TArray<FForceFeedbackChannelDetails> ChannelDetails => new TArray<FForceFeedbackChannelDetails>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: Duration
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float Duration
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// ADebugCameraController:APlayerController
	/// Size: 0x710
	/// Properties: 3
	/// </summary>
	public class ADebugCameraController:APlayerController
	{
		public override int ObjectSize => 1808;
		/// <summary>
		/// Name: bShowSelectedInfo
		/// Type: BoolProperty
		/// Offset: 0x6C8
		/// Size: 0x01
		/// </summary>
		public bool bShowSelectedInfo => (ReadByte(0x06C8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bIsFrozenRendering
		/// Type: BoolProperty
		/// Offset: 0x6C8
		/// Size: 0x01
		/// </summary>
		public bool bIsFrozenRendering => (ReadByte(0x06C8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: DrawFrustum
		/// Type: ObjectProperty
		/// Offset: 0x6D0
		/// Size: 0x08
		/// </summary>
		public UDrawFrustumComponent DrawFrustum => ReadUObject<UDrawFrustumComponent>(0x6D0);
		
	}


	/// <summary>
	/// ADecalActor:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class ADecalActor:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: Decal
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UDecalComponent Decal => ReadUObject<UDecalComponent>(0x3D0);
		
	}


	/// <summary>
	/// ADestructibleActor:AActor
	/// Size: 0x3F0
	/// Properties: 2
	/// </summary>
	public class ADestructibleActor:AActor
	{
		public override int ObjectSize => 1008;
		/// <summary>
		/// Name: DestructibleComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UDestructibleComponent DestructibleComponent => ReadUObject<UDestructibleComponent>(0x3D0);
		
		/// <summary>
		/// Name: bAffectNavigation
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bAffectNavigation => (ReadByte(0x03D8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// ADocumentationActor:AActor
	/// Size: 0x3D8
	/// Properties: 0
	/// </summary>
	public class ADocumentationActor:AActor
	{
		public override int ObjectSize => 984;
	}


	/// <summary>
	/// AEmitter:AActor
	/// Size: 0x420
	/// Properties: 4
	/// </summary>
	public class AEmitter:AActor
	{
		public override int ObjectSize => 1056;
		/// <summary>
		/// Name: ParticleSystemComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UParticleSystemComponent ParticleSystemComponent => ReadUObject<UParticleSystemComponent>(0x3D0);
		
		/// <summary>
		/// Name: bDestroyOnSystemFinish
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bDestroyOnSystemFinish => (ReadByte(0x03D8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bPostUpdateTickGroup
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bPostUpdateTickGroup => (ReadByte(0x03D8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bCurrentlyActive
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bCurrentlyActive => (ReadByte(0x03D8) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// AEmitterCameraLensEffectBase:AEmitter
	/// Size: 0x490
	/// Properties: 8
	/// </summary>
	public class AEmitterCameraLensEffectBase:AEmitter
	{
		public override int ObjectSize => 1168;
		/// <summary>
		/// Name: PS_CameraEffect
		/// Type: ObjectProperty
		/// Offset: 0x420
		/// Size: 0x08
		/// </summary>
		public UParticleSystem PS_CameraEffect => ReadUObject<UParticleSystem>(0x420);
		
		/// <summary>
		/// Name: PS_CameraEffectNonExtremeContent
		/// Type: ObjectProperty
		/// Offset: 0x428
		/// Size: 0x08
		/// </summary>
		public UParticleSystem PS_CameraEffectNonExtremeContent => ReadUObject<UParticleSystem>(0x428);
		
		/// <summary>
		/// Name: BaseCamera
		/// Type: ObjectProperty
		/// Offset: 0x430
		/// Size: 0x08
		/// </summary>
		public APlayerCameraManager BaseCamera => ReadUObject<APlayerCameraManager>(0x430);
		
		/// <summary>
		/// Name: RelativeTransform
		/// Type: StructProperty
		/// Offset: 0x440
		/// Size: 0x30
		/// </summary>
		public FTransform RelativeTransform => ReadStruct<FTransform>(0x440);
		
		/// <summary>
		/// Name: BaseFOV
		/// Type: FloatProperty
		/// Offset: 0x470
		/// Size: 0x04
		/// </summary>
		public float BaseFOV
		{
			get
			{
				return ReadSingle(0x470);
			}
			set
			{
				WriteSingle(0x470,value);
			}
		}
		
		/// <summary>
		/// Name: bAllowMultipleInstances
		/// Type: BoolProperty
		/// Offset: 0x474
		/// Size: 0x01
		/// </summary>
		public bool bAllowMultipleInstances => (ReadByte(0x0474) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: EmittersToTreatAsSame
		/// Type: TArray<>
		/// Offset: 0x478
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: DistFromCamera
		/// Type: FloatProperty
		/// Offset: 0x488
		/// Size: 0x04
		/// </summary>
		public float DistFromCamera
		{
			get
			{
				return ReadSingle(0x488);
			}
			set
			{
				WriteSingle(0x488,value);
			}
		}
		
	}


	/// <summary>
	/// ADebugCameraHUD:AHUD
	/// Size: 0x4D0
	/// Properties: 0
	/// </summary>
	public class ADebugCameraHUD:AHUD
	{
		public override int ObjectSize => 1232;
	}


	/// <summary>
	/// AAtmosphericFog:AInfo
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class AAtmosphericFog:AInfo
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: AtmosphericFogComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UAtmosphericFogComponent AtmosphericFogComponent => ReadUObject<UAtmosphericFogComponent>(0x3D0);
		
	}


	/// <summary>
	/// AExponentialHeightFog:AInfo
	/// Size: 0x3E0
	/// Properties: 2
	/// </summary>
	public class AExponentialHeightFog:AInfo
	{
		public override int ObjectSize => 992;
		/// <summary>
		/// Name: Component
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UExponentialHeightFogComponent Component => ReadUObject<UExponentialHeightFogComponent>(0x3D0);
		
		/// <summary>
		/// Name: bEnabled
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bEnabled => (ReadByte(0x03D8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// ANavigationObjectBase:AActor
	/// Size: 0x3F8
	/// Properties: 4
	/// </summary>
	public class ANavigationObjectBase:AActor
	{
		public override int ObjectSize => 1016;
		/// <summary>
		/// Name: CapsuleComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public UCapsuleComponent CapsuleComponent => ReadUObject<UCapsuleComponent>(0x3D8);
		
		/// <summary>
		/// Name: GoodSprite
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public UBillboardComponent GoodSprite => ReadUObject<UBillboardComponent>(0x3E0);
		
		/// <summary>
		/// Name: BadSprite
		/// Type: ObjectProperty
		/// Offset: 0x3E8
		/// Size: 0x08
		/// </summary>
		public UBillboardComponent BadSprite => ReadUObject<UBillboardComponent>(0x3E8);
		
		/// <summary>
		/// Name: bIsPIEPlayerStart
		/// Type: BoolProperty
		/// Offset: 0x3F0
		/// Size: 0x01
		/// </summary>
		public bool bIsPIEPlayerStart => (ReadByte(0x03F0) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// APlayerStart:ANavigationObjectBase
	/// Size: 0x400
	/// Properties: 1
	/// </summary>
	public class APlayerStart:ANavigationObjectBase
	{
		public override int ObjectSize => 1024;
		/// <summary>
		/// Name: PlayerStartTag
		/// Type: NameProperty
		/// Offset: 0x3F8
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// AGameNetworkManager:AInfo
	/// Size: 0x448
	/// Properties: 31
	/// </summary>
	public class AGameNetworkManager:AInfo
	{
		public override int ObjectSize => 1096;
		/// <summary>
		/// Name: AdjustedNetSpeed
		/// Type: IntProperty
		/// Offset: 0x3D0
		/// Size: 0x04
		/// </summary>
		public int AdjustedNetSpeed
		{
			get
			{
				return ReadInt32(0x3D0);
			}
			set
			{
				WriteInt32(0x3D0,value);
			}
		}
		
		/// <summary>
		/// Name: LastNetSpeedUpdateTime
		/// Type: FloatProperty
		/// Offset: 0x3D4
		/// Size: 0x04
		/// </summary>
		public float LastNetSpeedUpdateTime
		{
			get
			{
				return ReadSingle(0x3D4);
			}
			set
			{
				WriteSingle(0x3D4,value);
			}
		}
		
		/// <summary>
		/// Name: TotalNetBandwidth
		/// Type: IntProperty
		/// Offset: 0x3D8
		/// Size: 0x04
		/// </summary>
		public int TotalNetBandwidth
		{
			get
			{
				return ReadInt32(0x3D8);
			}
			set
			{
				WriteInt32(0x3D8,value);
			}
		}
		
		/// <summary>
		/// Name: MinDynamicBandwidth
		/// Type: IntProperty
		/// Offset: 0x3DC
		/// Size: 0x04
		/// </summary>
		public int MinDynamicBandwidth
		{
			get
			{
				return ReadInt32(0x3DC);
			}
			set
			{
				WriteInt32(0x3DC,value);
			}
		}
		
		/// <summary>
		/// Name: MaxDynamicBandwidth
		/// Type: IntProperty
		/// Offset: 0x3E0
		/// Size: 0x04
		/// </summary>
		public int MaxDynamicBandwidth
		{
			get
			{
				return ReadInt32(0x3E0);
			}
			set
			{
				WriteInt32(0x3E0,value);
			}
		}
		
		/// <summary>
		/// Name: bIsStandbyCheckingEnabled
		/// Type: BoolProperty
		/// Offset: 0x3E4
		/// Size: 0x01
		/// </summary>
		public bool bIsStandbyCheckingEnabled => (ReadByte(0x03E4) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bHasStandbyCheatTriggered
		/// Type: BoolProperty
		/// Offset: 0x3E4
		/// Size: 0x01
		/// </summary>
		public bool bHasStandbyCheatTriggered => (ReadByte(0x03E4) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: StandbyRxCheatTime
		/// Type: FloatProperty
		/// Offset: 0x3E8
		/// Size: 0x04
		/// </summary>
		public float StandbyRxCheatTime
		{
			get
			{
				return ReadSingle(0x3E8);
			}
			set
			{
				WriteSingle(0x3E8,value);
			}
		}
		
		/// <summary>
		/// Name: StandbyTxCheatTime
		/// Type: FloatProperty
		/// Offset: 0x3EC
		/// Size: 0x04
		/// </summary>
		public float StandbyTxCheatTime
		{
			get
			{
				return ReadSingle(0x3EC);
			}
			set
			{
				WriteSingle(0x3EC,value);
			}
		}
		
		/// <summary>
		/// Name: BadPingThreshold
		/// Type: IntProperty
		/// Offset: 0x3F0
		/// Size: 0x04
		/// </summary>
		public int BadPingThreshold
		{
			get
			{
				return ReadInt32(0x3F0);
			}
			set
			{
				WriteInt32(0x3F0,value);
			}
		}
		
		/// <summary>
		/// Name: PercentMissingForRxStandby
		/// Type: FloatProperty
		/// Offset: 0x3F4
		/// Size: 0x04
		/// </summary>
		public float PercentMissingForRxStandby
		{
			get
			{
				return ReadSingle(0x3F4);
			}
			set
			{
				WriteSingle(0x3F4,value);
			}
		}
		
		/// <summary>
		/// Name: PercentMissingForTxStandby
		/// Type: FloatProperty
		/// Offset: 0x3F8
		/// Size: 0x04
		/// </summary>
		public float PercentMissingForTxStandby
		{
			get
			{
				return ReadSingle(0x3F8);
			}
			set
			{
				WriteSingle(0x3F8,value);
			}
		}
		
		/// <summary>
		/// Name: PercentForBadPing
		/// Type: FloatProperty
		/// Offset: 0x3FC
		/// Size: 0x04
		/// </summary>
		public float PercentForBadPing
		{
			get
			{
				return ReadSingle(0x3FC);
			}
			set
			{
				WriteSingle(0x3FC,value);
			}
		}
		
		/// <summary>
		/// Name: JoinInProgressStandbyWaitTime
		/// Type: FloatProperty
		/// Offset: 0x400
		/// Size: 0x04
		/// </summary>
		public float JoinInProgressStandbyWaitTime
		{
			get
			{
				return ReadSingle(0x400);
			}
			set
			{
				WriteSingle(0x400,value);
			}
		}
		
		/// <summary>
		/// Name: MoveRepSize
		/// Type: FloatProperty
		/// Offset: 0x404
		/// Size: 0x04
		/// </summary>
		public float MoveRepSize
		{
			get
			{
				return ReadSingle(0x404);
			}
			set
			{
				WriteSingle(0x404,value);
			}
		}
		
		/// <summary>
		/// Name: MAXPOSITIONERRORSQUARED
		/// Type: FloatProperty
		/// Offset: 0x408
		/// Size: 0x04
		/// </summary>
		public float MAXPOSITIONERRORSQUARED
		{
			get
			{
				return ReadSingle(0x408);
			}
			set
			{
				WriteSingle(0x408,value);
			}
		}
		
		/// <summary>
		/// Name: MAXLENIENTPOSITIONERRORSQUARED
		/// Type: FloatProperty
		/// Offset: 0x40C
		/// Size: 0x04
		/// </summary>
		public float MAXLENIENTPOSITIONERRORSQUARED
		{
			get
			{
				return ReadSingle(0x40C);
			}
			set
			{
				WriteSingle(0x40C,value);
			}
		}
		
		/// <summary>
		/// Name: MAXNEARZEROVELOCITYSQUARED
		/// Type: FloatProperty
		/// Offset: 0x410
		/// Size: 0x04
		/// </summary>
		public float MAXNEARZEROVELOCITYSQUARED
		{
			get
			{
				return ReadSingle(0x410);
			}
			set
			{
				WriteSingle(0x410,value);
			}
		}
		
		/// <summary>
		/// Name: CLIENTADJUSTUPDATECOST
		/// Type: FloatProperty
		/// Offset: 0x414
		/// Size: 0x04
		/// </summary>
		public float CLIENTADJUSTUPDATECOST
		{
			get
			{
				return ReadSingle(0x414);
			}
			set
			{
				WriteSingle(0x414,value);
			}
		}
		
		/// <summary>
		/// Name: MAXCLIENTUPDATEINTERVAL
		/// Type: FloatProperty
		/// Offset: 0x418
		/// Size: 0x04
		/// </summary>
		public float MAXCLIENTUPDATEINTERVAL
		{
			get
			{
				return ReadSingle(0x418);
			}
			set
			{
				WriteSingle(0x418,value);
			}
		}
		
		/// <summary>
		/// Name: MaxMoveDeltaTime
		/// Type: FloatProperty
		/// Offset: 0x41C
		/// Size: 0x04
		/// </summary>
		public float MaxMoveDeltaTime
		{
			get
			{
				return ReadSingle(0x41C);
			}
			set
			{
				WriteSingle(0x41C,value);
			}
		}
		
		/// <summary>
		/// Name: ClientAuthorativePosition
		/// Type: BoolProperty
		/// Offset: 0x420
		/// Size: 0x01
		/// </summary>
		public bool ClientAuthorativePosition
		{
			get
			{
				return ReadBool(0x420);
			}
			set
			{
				WriteBool(0x420,value);
			}
		}
		
		/// <summary>
		/// Name: ClientErrorUpdateRateLimit
		/// Type: FloatProperty
		/// Offset: 0x424
		/// Size: 0x04
		/// </summary>
		public float ClientErrorUpdateRateLimit
		{
			get
			{
				return ReadSingle(0x424);
			}
			set
			{
				WriteSingle(0x424,value);
			}
		}
		
		/// <summary>
		/// Name: bMovementTimeDiscrepancyDetection
		/// Type: BoolProperty
		/// Offset: 0x428
		/// Size: 0x01
		/// </summary>
		public bool bMovementTimeDiscrepancyDetection
		{
			get
			{
				return ReadBool(0x428);
			}
			set
			{
				WriteBool(0x428,value);
			}
		}
		
		/// <summary>
		/// Name: bMovementTimeDiscrepancyResolution
		/// Type: BoolProperty
		/// Offset: 0x429
		/// Size: 0x01
		/// </summary>
		public bool bMovementTimeDiscrepancyResolution
		{
			get
			{
				return ReadBool(0x429);
			}
			set
			{
				WriteBool(0x429,value);
			}
		}
		
		/// <summary>
		/// Name: MovementTimeDiscrepancyMaxTimeMargin
		/// Type: FloatProperty
		/// Offset: 0x42C
		/// Size: 0x04
		/// </summary>
		public float MovementTimeDiscrepancyMaxTimeMargin
		{
			get
			{
				return ReadSingle(0x42C);
			}
			set
			{
				WriteSingle(0x42C,value);
			}
		}
		
		/// <summary>
		/// Name: MovementTimeDiscrepancyMinTimeMargin
		/// Type: FloatProperty
		/// Offset: 0x430
		/// Size: 0x04
		/// </summary>
		public float MovementTimeDiscrepancyMinTimeMargin
		{
			get
			{
				return ReadSingle(0x430);
			}
			set
			{
				WriteSingle(0x430,value);
			}
		}
		
		/// <summary>
		/// Name: MovementTimeDiscrepancyResolutionRate
		/// Type: FloatProperty
		/// Offset: 0x434
		/// Size: 0x04
		/// </summary>
		public float MovementTimeDiscrepancyResolutionRate
		{
			get
			{
				return ReadSingle(0x434);
			}
			set
			{
				WriteSingle(0x434,value);
			}
		}
		
		/// <summary>
		/// Name: MovementTimeDiscrepancyDriftAllowance
		/// Type: FloatProperty
		/// Offset: 0x438
		/// Size: 0x04
		/// </summary>
		public float MovementTimeDiscrepancyDriftAllowance
		{
			get
			{
				return ReadSingle(0x438);
			}
			set
			{
				WriteSingle(0x438,value);
			}
		}
		
		/// <summary>
		/// Name: bMovementTimeDiscrepancyForceCorrectionsDuringResolution
		/// Type: BoolProperty
		/// Offset: 0x43C
		/// Size: 0x01
		/// </summary>
		public bool bMovementTimeDiscrepancyForceCorrectionsDuringResolution
		{
			get
			{
				return ReadBool(0x43C);
			}
			set
			{
				WriteBool(0x43C,value);
			}
		}
		
		/// <summary>
		/// Name: bUseDistanceBasedRelevancy
		/// Type: BoolProperty
		/// Offset: 0x43D
		/// Size: 0x01
		/// </summary>
		public bool bUseDistanceBasedRelevancy
		{
			get
			{
				return ReadBool(0x43D);
			}
			set
			{
				WriteBool(0x43D,value);
			}
		}
		
	}


	/// <summary>
	/// ASkyLight:AInfo
	/// Size: 0x3E0
	/// Properties: 2
	/// </summary>
	public class ASkyLight:AInfo
	{
		public override int ObjectSize => 992;
		/// <summary>
		/// Name: LightComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public USkyLightComponent LightComponent => ReadUObject<USkyLightComponent>(0x3D0);
		
		/// <summary>
		/// Name: bEnabled
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bEnabled => (ReadByte(0x03D8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// AWindDirectionalSource:AInfo
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class AWindDirectionalSource:AInfo
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: Component
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UWindDirectionalSourceComponent Component => ReadUObject<UWindDirectionalSourceComponent>(0x3D0);
		
	}


	/// <summary>
	/// ALevelBounds:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class ALevelBounds:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: bAutoUpdateBounds
		/// Type: BoolProperty
		/// Offset: 0x3D0
		/// Size: 0x01
		/// </summary>
		public bool bAutoUpdateBounds
		{
			get
			{
				return ReadBool(0x3D0);
			}
			set
			{
				WriteBool(0x3D0,value);
			}
		}
		
	}


	/// <summary>
	/// ULightComponentBase:USceneComponent
	/// Size: 0x240
	/// Properties: 11
	/// </summary>
	public class ULightComponentBase:USceneComponent
	{
		public override int ObjectSize => 576;
		/// <summary>
		/// Name: LightGuid
		/// Type: StructProperty
		/// Offset: 0x218
		/// Size: 0x10
		/// </summary>
		public FGuid LightGuid => ReadStruct<FGuid>(0x218);
		
		/// <summary>
		/// Name: Brightness
		/// Type: FloatProperty
		/// Offset: 0x228
		/// Size: 0x04
		/// </summary>
		public float Brightness
		{
			get
			{
				return ReadSingle(0x228);
			}
			set
			{
				WriteSingle(0x228,value);
			}
		}
		
		/// <summary>
		/// Name: Intensity
		/// Type: FloatProperty
		/// Offset: 0x22C
		/// Size: 0x04
		/// </summary>
		public float Intensity
		{
			get
			{
				return ReadSingle(0x22C);
			}
			set
			{
				WriteSingle(0x22C,value);
			}
		}
		
		/// <summary>
		/// Name: LightColor
		/// Type: StructProperty
		/// Offset: 0x230
		/// Size: 0x04
		/// </summary>
		public FColor LightColor => ReadStruct<FColor>(0x230);
		
		/// <summary>
		/// Name: bAffectsWorld
		/// Type: BoolProperty
		/// Offset: 0x234
		/// Size: 0x01
		/// </summary>
		public bool bAffectsWorld => (ReadByte(0x0234) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CastShadows
		/// Type: BoolProperty
		/// Offset: 0x234
		/// Size: 0x01
		/// </summary>
		public bool CastShadows => (ReadByte(0x0234) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: CastStaticShadows
		/// Type: BoolProperty
		/// Offset: 0x234
		/// Size: 0x01
		/// </summary>
		public bool CastStaticShadows => (ReadByte(0x0234) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: CastDynamicShadows
		/// Type: BoolProperty
		/// Offset: 0x234
		/// Size: 0x01
		/// </summary>
		public bool CastDynamicShadows => (ReadByte(0x0234) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bAffectTranslucentLighting
		/// Type: BoolProperty
		/// Offset: 0x234
		/// Size: 0x01
		/// </summary>
		public bool bAffectTranslucentLighting => (ReadByte(0x0234) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bPrecomputedLightingIsValid
		/// Type: BoolProperty
		/// Offset: 0x234
		/// Size: 0x01
		/// </summary>
		public bool bPrecomputedLightingIsValid => (ReadByte(0x0234) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: IndirectLightingIntensity
		/// Type: FloatProperty
		/// Offset: 0x238
		/// Size: 0x04
		/// </summary>
		public float IndirectLightingIntensity
		{
			get
			{
				return ReadSingle(0x238);
			}
			set
			{
				WriteSingle(0x238,value);
			}
		}
		
	}


	/// <summary>
	/// ULightComponent:ULightComponentBase
	/// Size: 0x3A0
	/// Properties: 24
	/// </summary>
	public class ULightComponent:ULightComponentBase
	{
		public override int ObjectSize => 928;
		/// <summary>
		/// Name: Temperature
		/// Type: FloatProperty
		/// Offset: 0x240
		/// Size: 0x04
		/// </summary>
		public float Temperature
		{
			get
			{
				return ReadSingle(0x240);
			}
			set
			{
				WriteSingle(0x240,value);
			}
		}
		
		/// <summary>
		/// Name: bUseTemperature
		/// Type: BoolProperty
		/// Offset: 0x244
		/// Size: 0x01
		/// </summary>
		public bool bUseTemperature => (ReadByte(0x0244) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ShadowMapChannel
		/// Type: IntProperty
		/// Offset: 0x248
		/// Size: 0x04
		/// </summary>
		public int ShadowMapChannel
		{
			get
			{
				return ReadInt32(0x248);
			}
			set
			{
				WriteInt32(0x248,value);
			}
		}
		
		/// <summary>
		/// Name: MinRoughness
		/// Type: FloatProperty
		/// Offset: 0x250
		/// Size: 0x04
		/// </summary>
		public float MinRoughness
		{
			get
			{
				return ReadSingle(0x250);
			}
			set
			{
				WriteSingle(0x250,value);
			}
		}
		
		/// <summary>
		/// Name: ShadowBias
		/// Type: FloatProperty
		/// Offset: 0x254
		/// Size: 0x04
		/// </summary>
		public float ShadowBias
		{
			get
			{
				return ReadSingle(0x254);
			}
			set
			{
				WriteSingle(0x254,value);
			}
		}
		
		/// <summary>
		/// Name: ShadowSharpen
		/// Type: FloatProperty
		/// Offset: 0x258
		/// Size: 0x04
		/// </summary>
		public float ShadowSharpen
		{
			get
			{
				return ReadSingle(0x258);
			}
			set
			{
				WriteSingle(0x258,value);
			}
		}
		
		/// <summary>
		/// Name: InverseSquaredFalloff
		/// Type: BoolProperty
		/// Offset: 0x25C
		/// Size: 0x01
		/// </summary>
		public bool InverseSquaredFalloff => (ReadByte(0x025C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CastTranslucentShadows
		/// Type: BoolProperty
		/// Offset: 0x25C
		/// Size: 0x01
		/// </summary>
		public bool CastTranslucentShadows => (ReadByte(0x025C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bCastShadowsFromCinematicObjectsOnly
		/// Type: BoolProperty
		/// Offset: 0x25C
		/// Size: 0x01
		/// </summary>
		public bool bCastShadowsFromCinematicObjectsOnly => (ReadByte(0x025C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bAffectDynamicIndirectLighting
		/// Type: BoolProperty
		/// Offset: 0x25C
		/// Size: 0x01
		/// </summary>
		public bool bAffectDynamicIndirectLighting => (ReadByte(0x025C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: LightingChannels
		/// Type: StructProperty
		/// Offset: 0x260
		/// Size: 0x03
		/// </summary>
		public FLightingChannels LightingChannels => ReadStruct<FLightingChannels>(0x260);
		
		/// <summary>
		/// Name: LightFunctionMaterial
		/// Type: ObjectProperty
		/// Offset: 0x268
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface LightFunctionMaterial => ReadUObject<UMaterialInterface>(0x268);
		
		/// <summary>
		/// Name: LightFunctionScale
		/// Type: StructProperty
		/// Offset: 0x270
		/// Size: 0x0C
		/// </summary>
		public FVector LightFunctionScale => ReadStruct<FVector>(0x270);
		
		/// <summary>
		/// Name: IESTexture
		/// Type: ObjectProperty
		/// Offset: 0x280
		/// Size: 0x08
		/// </summary>
		public UTextureLightProfile IESTexture => ReadUObject<UTextureLightProfile>(0x280);
		
		/// <summary>
		/// Name: bUseIESBrightness
		/// Type: BoolProperty
		/// Offset: 0x288
		/// Size: 0x01
		/// </summary>
		public bool bUseIESBrightness => (ReadByte(0x0288) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: IESBrightnessScale
		/// Type: FloatProperty
		/// Offset: 0x28C
		/// Size: 0x04
		/// </summary>
		public float IESBrightnessScale
		{
			get
			{
				return ReadSingle(0x28C);
			}
			set
			{
				WriteSingle(0x28C,value);
			}
		}
		
		/// <summary>
		/// Name: LightFunctionFadeDistance
		/// Type: FloatProperty
		/// Offset: 0x290
		/// Size: 0x04
		/// </summary>
		public float LightFunctionFadeDistance
		{
			get
			{
				return ReadSingle(0x290);
			}
			set
			{
				WriteSingle(0x290,value);
			}
		}
		
		/// <summary>
		/// Name: DisabledBrightness
		/// Type: FloatProperty
		/// Offset: 0x294
		/// Size: 0x04
		/// </summary>
		public float DisabledBrightness
		{
			get
			{
				return ReadSingle(0x294);
			}
			set
			{
				WriteSingle(0x294,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableLightShaftBloom
		/// Type: BoolProperty
		/// Offset: 0x298
		/// Size: 0x01
		/// </summary>
		public bool bEnableLightShaftBloom => (ReadByte(0x0298) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: BloomScale
		/// Type: FloatProperty
		/// Offset: 0x29C
		/// Size: 0x04
		/// </summary>
		public float BloomScale
		{
			get
			{
				return ReadSingle(0x29C);
			}
			set
			{
				WriteSingle(0x29C,value);
			}
		}
		
		/// <summary>
		/// Name: BloomThreshold
		/// Type: FloatProperty
		/// Offset: 0x2A0
		/// Size: 0x04
		/// </summary>
		public float BloomThreshold
		{
			get
			{
				return ReadSingle(0x2A0);
			}
			set
			{
				WriteSingle(0x2A0,value);
			}
		}
		
		/// <summary>
		/// Name: BloomTint
		/// Type: StructProperty
		/// Offset: 0x2A4
		/// Size: 0x04
		/// </summary>
		public FColor BloomTint => ReadStruct<FColor>(0x2A4);
		
		/// <summary>
		/// Name: bUseRayTracedDistanceFieldShadows
		/// Type: BoolProperty
		/// Offset: 0x2A8
		/// Size: 0x01
		/// </summary>
		public bool bUseRayTracedDistanceFieldShadows
		{
			get
			{
				return ReadBool(0x2A8);
			}
			set
			{
				WriteBool(0x2A8,value);
			}
		}
		
		/// <summary>
		/// Name: RayStartOffsetDepthScale
		/// Type: FloatProperty
		/// Offset: 0x2AC
		/// Size: 0x04
		/// </summary>
		public float RayStartOffsetDepthScale
		{
			get
			{
				return ReadSingle(0x2AC);
			}
			set
			{
				WriteSingle(0x2AC,value);
			}
		}
		
	}


	/// <summary>
	/// ALight:AActor
	/// Size: 0x3E0
	/// Properties: 2
	/// </summary>
	public class ALight:AActor
	{
		public override int ObjectSize => 992;
		/// <summary>
		/// Name: LightComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public ULightComponent LightComponent => ReadUObject<ULightComponent>(0x3D0);
		
		/// <summary>
		/// Name: bEnabled
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bEnabled => (ReadByte(0x03D8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// ADirectionalLight:ALight
	/// Size: 0x3E0
	/// Properties: 0
	/// </summary>
	public class ADirectionalLight:ALight
	{
		public override int ObjectSize => 992;
	}


	/// <summary>
	/// APointLight:ALight
	/// Size: 0x3E8
	/// Properties: 1
	/// </summary>
	public class APointLight:ALight
	{
		public override int ObjectSize => 1000;
		/// <summary>
		/// Name: PointLightComponent
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public UPointLightComponent PointLightComponent => ReadUObject<UPointLightComponent>(0x3E0);
		
	}


	/// <summary>
	/// ASpotLight:ALight
	/// Size: 0x3E8
	/// Properties: 1
	/// </summary>
	public class ASpotLight:ALight
	{
		public override int ObjectSize => 1000;
		/// <summary>
		/// Name: SpotLightComponent
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public USpotLightComponent SpotLightComponent => ReadUObject<USpotLightComponent>(0x3E0);
		
	}


	/// <summary>
	/// AGeneratedMeshAreaLight:ASpotLight
	/// Size: 0x3E8
	/// Properties: 0
	/// </summary>
	public class AGeneratedMeshAreaLight:ASpotLight
	{
		public override int ObjectSize => 1000;
	}


	/// <summary>
	/// ALightmassPortal:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class ALightmassPortal:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: PortalComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public ULightmassPortalComponent PortalComponent => ReadUObject<ULightmassPortalComponent>(0x3D0);
		
	}


	/// <summary>
	/// ALODActor:AActor
	/// Size: 0x400
	/// Properties: 5
	/// </summary>
	public class ALODActor:AActor
	{
		public override int ObjectSize => 1024;
		/// <summary>
		/// Name: StaticMeshComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UStaticMeshComponent StaticMeshComponent => ReadUObject<UStaticMeshComponent>(0x3D0);
		
		/// <summary>
		/// Name: SubActors
		/// Type: TArray<AActor>
		/// Offset: 0x3D8
		/// Size: 0x10
		/// SubElement Size: 0x3D0
		/// </summary>
		public TArray<AActor> SubActors => new TArray<AActor>(BaseAddress+0x3D8);
		
		/// <summary>
		/// Name: LODDrawDistance
		/// Type: FloatProperty
		/// Offset: 0x3E8
		/// Size: 0x04
		/// </summary>
		public float LODDrawDistance
		{
			get
			{
				return ReadSingle(0x3E8);
			}
			set
			{
				WriteSingle(0x3E8,value);
			}
		}
		
		/// <summary>
		/// Name: LODlevel
		/// Type: IntProperty
		/// Offset: 0x3EC
		/// Size: 0x04
		/// </summary>
		public int LODlevel
		{
			get
			{
				return ReadInt32(0x3EC);
			}
			set
			{
				WriteInt32(0x3EC,value);
			}
		}
		
		/// <summary>
		/// Name: SubObjects
		/// Type: TArray<UObject>
		/// Offset: 0x3F0
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UObject> SubObjects => new TArray<UObject>(BaseAddress+0x3F0);
		
	}


	/// <summary>
	/// AMaterialInstanceActor:AActor
	/// Size: 0x3E0
	/// Properties: 1
	/// </summary>
	public class AMaterialInstanceActor:AActor
	{
		public override int ObjectSize => 992;
		/// <summary>
		/// Name: TargetActors
		/// Type: TArray<AActor>
		/// Offset: 0x3D0
		/// Size: 0x10
		/// SubElement Size: 0x3D0
		/// </summary>
		public TArray<AActor> TargetActors => new TArray<AActor>(BaseAddress+0x3D0);
		
	}


	/// <summary>
	/// AMatineeActor:AActor
	/// Size: 0x478
	/// Properties: 29
	/// </summary>
	public class AMatineeActor:AActor
	{
		public override int ObjectSize => 1144;
		/// <summary>
		/// Name: MatineeData
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UInterpData MatineeData => ReadUObject<UInterpData>(0x3D0);
		
		/// <summary>
		/// Name: MatineeControllerName
		/// Type: NameProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PlayRate
		/// Type: FloatProperty
		/// Offset: 0x3E0
		/// Size: 0x04
		/// </summary>
		public float PlayRate
		{
			get
			{
				return ReadSingle(0x3E0);
			}
			set
			{
				WriteSingle(0x3E0,value);
			}
		}
		
		/// <summary>
		/// Name: bPlayOnLevelLoad
		/// Type: BoolProperty
		/// Offset: 0x3E4
		/// Size: 0x01
		/// </summary>
		public bool bPlayOnLevelLoad => (ReadByte(0x03E4) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bForceStartPos
		/// Type: BoolProperty
		/// Offset: 0x3E4
		/// Size: 0x01
		/// </summary>
		public bool bForceStartPos => (ReadByte(0x03E4) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: ForceStartPosition
		/// Type: FloatProperty
		/// Offset: 0x3E8
		/// Size: 0x04
		/// </summary>
		public float ForceStartPosition
		{
			get
			{
				return ReadSingle(0x3E8);
			}
			set
			{
				WriteSingle(0x3E8,value);
			}
		}
		
		/// <summary>
		/// Name: bLooping
		/// Type: BoolProperty
		/// Offset: 0x3EC
		/// Size: 0x01
		/// </summary>
		public bool bLooping => (ReadByte(0x03EC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bRewindOnPlay
		/// Type: BoolProperty
		/// Offset: 0x3EC
		/// Size: 0x01
		/// </summary>
		public bool bRewindOnPlay => (ReadByte(0x03EC) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bNoResetOnRewind
		/// Type: BoolProperty
		/// Offset: 0x3EC
		/// Size: 0x01
		/// </summary>
		public bool bNoResetOnRewind => (ReadByte(0x03EC) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bRewindIfAlreadyPlaying
		/// Type: BoolProperty
		/// Offset: 0x3EC
		/// Size: 0x01
		/// </summary>
		public bool bRewindIfAlreadyPlaying => (ReadByte(0x03EC) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bDisableRadioFilter
		/// Type: BoolProperty
		/// Offset: 0x3EC
		/// Size: 0x01
		/// </summary>
		public bool bDisableRadioFilter => (ReadByte(0x03EC) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bClientSideOnly
		/// Type: BoolProperty
		/// Offset: 0x3EC
		/// Size: 0x01
		/// </summary>
		public bool bClientSideOnly => (ReadByte(0x03EC) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bSkipUpdateIfNotVisible
		/// Type: BoolProperty
		/// Offset: 0x3EC
		/// Size: 0x01
		/// </summary>
		public bool bSkipUpdateIfNotVisible => (ReadByte(0x03EC) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bIsSkippable
		/// Type: BoolProperty
		/// Offset: 0x3EC
		/// Size: 0x01
		/// </summary>
		public bool bIsSkippable => (ReadByte(0x03EC) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: PreferredSplitScreenNum
		/// Type: IntProperty
		/// Offset: 0x3F0
		/// Size: 0x04
		/// </summary>
		public int PreferredSplitScreenNum
		{
			get
			{
				return ReadInt32(0x3F0);
			}
			set
			{
				WriteInt32(0x3F0,value);
			}
		}
		
		/// <summary>
		/// Name: bDisableMovementInput
		/// Type: BoolProperty
		/// Offset: 0x3F4
		/// Size: 0x01
		/// </summary>
		public bool bDisableMovementInput => (ReadByte(0x03F4) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDisableLookAtInput
		/// Type: BoolProperty
		/// Offset: 0x3F4
		/// Size: 0x01
		/// </summary>
		public bool bDisableLookAtInput => (ReadByte(0x03F4) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bHidePlayer
		/// Type: BoolProperty
		/// Offset: 0x3F4
		/// Size: 0x01
		/// </summary>
		public bool bHidePlayer => (ReadByte(0x03F4) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bHideHud
		/// Type: BoolProperty
		/// Offset: 0x3F4
		/// Size: 0x01
		/// </summary>
		public bool bHideHud => (ReadByte(0x03F4) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: GroupActorInfos
		/// Type: TArray<FInterpGroupActorInfo>
		/// Offset: 0x3F8
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FInterpGroupActorInfo> GroupActorInfos => new TArray<FInterpGroupActorInfo>(BaseAddress+0x3F8);
		
		/// <summary>
		/// Name: bShouldShowGore
		/// Type: BoolProperty
		/// Offset: 0x408
		/// Size: 0x01
		/// </summary>
		public bool bShouldShowGore => (ReadByte(0x0408) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: GroupInst
		/// Type: TArray<UInterpGroupInst>
		/// Offset: 0x410
		/// Size: 0x10
		/// SubElement Size: 0x48
		/// </summary>
		public TArray<UInterpGroupInst> GroupInst => new TArray<UInterpGroupInst>(BaseAddress+0x410);
		
		/// <summary>
		/// Name: CameraCuts
		/// Type: TArray<FCameraCutInfo>
		/// Offset: 0x420
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FCameraCutInfo> CameraCuts => new TArray<FCameraCutInfo>(BaseAddress+0x420);
		
		/// <summary>
		/// Name: bIsPlaying
		/// Type: BoolProperty
		/// Offset: 0x430
		/// Size: 0x01
		/// </summary>
		public bool bIsPlaying => (ReadByte(0x0430) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bReversePlayback
		/// Type: BoolProperty
		/// Offset: 0x430
		/// Size: 0x01
		/// </summary>
		public bool bReversePlayback => (ReadByte(0x0430) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bPaused
		/// Type: BoolProperty
		/// Offset: 0x430
		/// Size: 0x01
		/// </summary>
		public bool bPaused => (ReadByte(0x0430) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bPendingStop
		/// Type: BoolProperty
		/// Offset: 0x430
		/// Size: 0x01
		/// </summary>
		public bool bPendingStop => (ReadByte(0x0430) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: InterpPosition
		/// Type: FloatProperty
		/// Offset: 0x434
		/// Size: 0x04
		/// </summary>
		public float InterpPosition
		{
			get
			{
				return ReadSingle(0x434);
			}
			set
			{
				WriteSingle(0x434,value);
			}
		}
		
		/// <summary>
		/// Name: ReplicationForceIsPlaying
		/// Type: ByteProperty
		/// Offset: 0x43C
		/// Size: 0x01
		/// </summary>
		public byte ReplicationForceIsPlaying
		{
			get
			{
				return ReadByte(0x43C);
			}
			set
			{
				WriteByte(0x43C,value);
			}
		}
		
	}


	/// <summary>
	/// AMatineeActorCameraAnim:AMatineeActor
	/// Size: 0x480
	/// Properties: 1
	/// </summary>
	public class AMatineeActorCameraAnim:AMatineeActor
	{
		public override int ObjectSize => 1152;
		/// <summary>
		/// Name: CameraAnim
		/// Type: ObjectProperty
		/// Offset: 0x478
		/// Size: 0x08
		/// </summary>
		public UCameraAnim CameraAnim => ReadUObject<UCameraAnim>(0x478);
		
	}


	/// <summary>
	/// ANavigationData:AActor
	/// Size: 0x570
	/// Properties: 11
	/// </summary>
	public class ANavigationData:AActor
	{
		public override int ObjectSize => 1392;
		/// <summary>
		/// Name: RenderingComp
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UPrimitiveComponent RenderingComp => ReadUObject<UPrimitiveComponent>(0x3D0);
		
		/// <summary>
		/// Name: NavDataConfig
		/// Type: StructProperty
		/// Offset: 0x3D8
		/// Size: 0x50
		/// </summary>
		public FNavDataConfig NavDataConfig => ReadStruct<FNavDataConfig>(0x3D8);
		
		/// <summary>
		/// Name: bEnableDrawing
		/// Type: BoolProperty
		/// Offset: 0x428
		/// Size: 0x01
		/// </summary>
		public bool bEnableDrawing => (ReadByte(0x0428) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bForceRebuildOnLoad
		/// Type: BoolProperty
		/// Offset: 0x428
		/// Size: 0x01
		/// </summary>
		public bool bForceRebuildOnLoad => (ReadByte(0x0428) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bCanBeMainNavData
		/// Type: BoolProperty
		/// Offset: 0x428
		/// Size: 0x01
		/// </summary>
		public bool bCanBeMainNavData => (ReadByte(0x0428) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bCanSpawnOnRebuild
		/// Type: BoolProperty
		/// Offset: 0x428
		/// Size: 0x01
		/// </summary>
		public bool bCanSpawnOnRebuild => (ReadByte(0x0428) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bRebuildAtRuntime
		/// Type: BoolProperty
		/// Offset: 0x428
		/// Size: 0x01
		/// </summary>
		public bool bRebuildAtRuntime => (ReadByte(0x0428) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: RuntimeGeneration
		/// Type: ByteProperty
		/// Offset: 0x42C
		/// Size: 0x01
		/// </summary>
		public byte RuntimeGeneration
		{
			get
			{
				return ReadByte(0x42C);
			}
			set
			{
				WriteByte(0x42C,value);
			}
		}
		
		/// <summary>
		/// Name: ObservedPathsTickInterval
		/// Type: FloatProperty
		/// Offset: 0x430
		/// Size: 0x04
		/// </summary>
		public float ObservedPathsTickInterval
		{
			get
			{
				return ReadSingle(0x430);
			}
			set
			{
				WriteSingle(0x430,value);
			}
		}
		
		/// <summary>
		/// Name: DataVersion
		/// Type: UInt32Property
		/// Offset: 0x434
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: SupportedAreas
		/// Type: TArray<FSupportedAreaData>
		/// Offset: 0x508
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FSupportedAreaData> SupportedAreas => new TArray<FSupportedAreaData>(BaseAddress+0x508);
		
	}


	/// <summary>
	/// AAbstractNavData:ANavigationData
	/// Size: 0x570
	/// Properties: 0
	/// </summary>
	public class AAbstractNavData:ANavigationData
	{
		public override int ObjectSize => 1392;
	}


	/// <summary>
	/// ANavigationGraph:ANavigationData
	/// Size: 0x570
	/// Properties: 0
	/// </summary>
	public class ANavigationGraph:ANavigationData
	{
		public override int ObjectSize => 1392;
	}


	/// <summary>
	/// ARecastNavMesh:ANavigationData
	/// Size: 0x680
	/// Properties: 52
	/// </summary>
	public class ARecastNavMesh:ANavigationData
	{
		public override int ObjectSize => 1664;
		/// <summary>
		/// Name: bDrawTriangleEdges
		/// Type: BoolProperty
		/// Offset: 0x570
		/// Size: 0x01
		/// </summary>
		public bool bDrawTriangleEdges => (ReadByte(0x0570) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDrawPolyEdges
		/// Type: BoolProperty
		/// Offset: 0x570
		/// Size: 0x01
		/// </summary>
		public bool bDrawPolyEdges => (ReadByte(0x0570) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bDrawFilledPolys
		/// Type: BoolProperty
		/// Offset: 0x570
		/// Size: 0x01
		/// </summary>
		public bool bDrawFilledPolys => (ReadByte(0x0570) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bDrawNavMeshEdges
		/// Type: BoolProperty
		/// Offset: 0x570
		/// Size: 0x01
		/// </summary>
		public bool bDrawNavMeshEdges => (ReadByte(0x0570) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bDrawTileBounds
		/// Type: BoolProperty
		/// Offset: 0x570
		/// Size: 0x01
		/// </summary>
		public bool bDrawTileBounds => (ReadByte(0x0570) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bDrawPathCollidingGeometry
		/// Type: BoolProperty
		/// Offset: 0x570
		/// Size: 0x01
		/// </summary>
		public bool bDrawPathCollidingGeometry => (ReadByte(0x0570) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bDrawTileLabels
		/// Type: BoolProperty
		/// Offset: 0x570
		/// Size: 0x01
		/// </summary>
		public bool bDrawTileLabels => (ReadByte(0x0570) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bDrawPolygonLabels
		/// Type: BoolProperty
		/// Offset: 0x570
		/// Size: 0x01
		/// </summary>
		public bool bDrawPolygonLabels => (ReadByte(0x0570) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bDrawDefaultPolygonCost
		/// Type: BoolProperty
		/// Offset: 0x571
		/// Size: 0x01
		/// </summary>
		public bool bDrawDefaultPolygonCost => (ReadByte(0x0571) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDrawLabelsOnPathNodes
		/// Type: BoolProperty
		/// Offset: 0x571
		/// Size: 0x01
		/// </summary>
		public bool bDrawLabelsOnPathNodes => (ReadByte(0x0571) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bDrawNavLinks
		/// Type: BoolProperty
		/// Offset: 0x571
		/// Size: 0x01
		/// </summary>
		public bool bDrawNavLinks => (ReadByte(0x0571) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bDrawFailedNavLinks
		/// Type: BoolProperty
		/// Offset: 0x571
		/// Size: 0x01
		/// </summary>
		public bool bDrawFailedNavLinks => (ReadByte(0x0571) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bDrawClusters
		/// Type: BoolProperty
		/// Offset: 0x571
		/// Size: 0x01
		/// </summary>
		public bool bDrawClusters => (ReadByte(0x0571) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bDrawOctree
		/// Type: BoolProperty
		/// Offset: 0x571
		/// Size: 0x01
		/// </summary>
		public bool bDrawOctree => (ReadByte(0x0571) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bDistinctlyDrawTilesBeingBuilt
		/// Type: BoolProperty
		/// Offset: 0x571
		/// Size: 0x01
		/// </summary>
		public bool bDistinctlyDrawTilesBeingBuilt => (ReadByte(0x0571) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bDrawNavMesh
		/// Type: BoolProperty
		/// Offset: 0x571
		/// Size: 0x01
		/// </summary>
		public bool bDrawNavMesh => (ReadByte(0x0571) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: DrawOffset
		/// Type: FloatProperty
		/// Offset: 0x574
		/// Size: 0x04
		/// </summary>
		public float DrawOffset
		{
			get
			{
				return ReadSingle(0x574);
			}
			set
			{
				WriteSingle(0x574,value);
			}
		}
		
		/// <summary>
		/// Name: bFixedTilePoolSize
		/// Type: BoolProperty
		/// Offset: 0x578
		/// Size: 0x01
		/// </summary>
		public bool bFixedTilePoolSize => (ReadByte(0x0578) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: TilePoolSize
		/// Type: IntProperty
		/// Offset: 0x57C
		/// Size: 0x04
		/// </summary>
		public int TilePoolSize
		{
			get
			{
				return ReadInt32(0x57C);
			}
			set
			{
				WriteInt32(0x57C,value);
			}
		}
		
		/// <summary>
		/// Name: TileSizeUU
		/// Type: FloatProperty
		/// Offset: 0x580
		/// Size: 0x04
		/// </summary>
		public float TileSizeUU
		{
			get
			{
				return ReadSingle(0x580);
			}
			set
			{
				WriteSingle(0x580,value);
			}
		}
		
		/// <summary>
		/// Name: CellSize
		/// Type: FloatProperty
		/// Offset: 0x584
		/// Size: 0x04
		/// </summary>
		public float CellSize
		{
			get
			{
				return ReadSingle(0x584);
			}
			set
			{
				WriteSingle(0x584,value);
			}
		}
		
		/// <summary>
		/// Name: CellHeight
		/// Type: FloatProperty
		/// Offset: 0x588
		/// Size: 0x04
		/// </summary>
		public float CellHeight
		{
			get
			{
				return ReadSingle(0x588);
			}
			set
			{
				WriteSingle(0x588,value);
			}
		}
		
		/// <summary>
		/// Name: AgentRadius
		/// Type: FloatProperty
		/// Offset: 0x58C
		/// Size: 0x04
		/// </summary>
		public float AgentRadius
		{
			get
			{
				return ReadSingle(0x58C);
			}
			set
			{
				WriteSingle(0x58C,value);
			}
		}
		
		/// <summary>
		/// Name: AgentHeight
		/// Type: FloatProperty
		/// Offset: 0x590
		/// Size: 0x04
		/// </summary>
		public float AgentHeight
		{
			get
			{
				return ReadSingle(0x590);
			}
			set
			{
				WriteSingle(0x590,value);
			}
		}
		
		/// <summary>
		/// Name: AgentMaxHeight
		/// Type: FloatProperty
		/// Offset: 0x594
		/// Size: 0x04
		/// </summary>
		public float AgentMaxHeight
		{
			get
			{
				return ReadSingle(0x594);
			}
			set
			{
				WriteSingle(0x594,value);
			}
		}
		
		/// <summary>
		/// Name: AgentMaxSlope
		/// Type: FloatProperty
		/// Offset: 0x598
		/// Size: 0x04
		/// </summary>
		public float AgentMaxSlope
		{
			get
			{
				return ReadSingle(0x598);
			}
			set
			{
				WriteSingle(0x598,value);
			}
		}
		
		/// <summary>
		/// Name: AgentMaxStepHeight
		/// Type: FloatProperty
		/// Offset: 0x59C
		/// Size: 0x04
		/// </summary>
		public float AgentMaxStepHeight
		{
			get
			{
				return ReadSingle(0x59C);
			}
			set
			{
				WriteSingle(0x59C,value);
			}
		}
		
		/// <summary>
		/// Name: MinRegionArea
		/// Type: FloatProperty
		/// Offset: 0x5A0
		/// Size: 0x04
		/// </summary>
		public float MinRegionArea
		{
			get
			{
				return ReadSingle(0x5A0);
			}
			set
			{
				WriteSingle(0x5A0,value);
			}
		}
		
		/// <summary>
		/// Name: MergeRegionSize
		/// Type: FloatProperty
		/// Offset: 0x5A4
		/// Size: 0x04
		/// </summary>
		public float MergeRegionSize
		{
			get
			{
				return ReadSingle(0x5A4);
			}
			set
			{
				WriteSingle(0x5A4,value);
			}
		}
		
		/// <summary>
		/// Name: MaxSimplificationError
		/// Type: FloatProperty
		/// Offset: 0x5A8
		/// Size: 0x04
		/// </summary>
		public float MaxSimplificationError
		{
			get
			{
				return ReadSingle(0x5A8);
			}
			set
			{
				WriteSingle(0x5A8,value);
			}
		}
		
		/// <summary>
		/// Name: MaxSimultaneousTileGenerationJobsCount
		/// Type: IntProperty
		/// Offset: 0x5AC
		/// Size: 0x04
		/// </summary>
		public int MaxSimultaneousTileGenerationJobsCount
		{
			get
			{
				return ReadInt32(0x5AC);
			}
			set
			{
				WriteInt32(0x5AC,value);
			}
		}
		
		/// <summary>
		/// Name: TileNumberHardLimit
		/// Type: IntProperty
		/// Offset: 0x5B0
		/// Size: 0x04
		/// </summary>
		public int TileNumberHardLimit
		{
			get
			{
				return ReadInt32(0x5B0);
			}
			set
			{
				WriteInt32(0x5B0,value);
			}
		}
		
		/// <summary>
		/// Name: PolyRefTileBits
		/// Type: IntProperty
		/// Offset: 0x5B4
		/// Size: 0x04
		/// </summary>
		public int PolyRefTileBits
		{
			get
			{
				return ReadInt32(0x5B4);
			}
			set
			{
				WriteInt32(0x5B4,value);
			}
		}
		
		/// <summary>
		/// Name: PolyRefNavPolyBits
		/// Type: IntProperty
		/// Offset: 0x5B8
		/// Size: 0x04
		/// </summary>
		public int PolyRefNavPolyBits
		{
			get
			{
				return ReadInt32(0x5B8);
			}
			set
			{
				WriteInt32(0x5B8,value);
			}
		}
		
		/// <summary>
		/// Name: PolyRefSaltBits
		/// Type: IntProperty
		/// Offset: 0x5BC
		/// Size: 0x04
		/// </summary>
		public int PolyRefSaltBits
		{
			get
			{
				return ReadInt32(0x5BC);
			}
			set
			{
				WriteInt32(0x5BC,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultDrawDistance
		/// Type: FloatProperty
		/// Offset: 0x5C0
		/// Size: 0x04
		/// </summary>
		public float DefaultDrawDistance
		{
			get
			{
				return ReadSingle(0x5C0);
			}
			set
			{
				WriteSingle(0x5C0,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultMaxSearchNodes
		/// Type: FloatProperty
		/// Offset: 0x5C4
		/// Size: 0x04
		/// </summary>
		public float DefaultMaxSearchNodes
		{
			get
			{
				return ReadSingle(0x5C4);
			}
			set
			{
				WriteSingle(0x5C4,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultMaxHierarchicalSearchNodes
		/// Type: FloatProperty
		/// Offset: 0x5C8
		/// Size: 0x04
		/// </summary>
		public float DefaultMaxHierarchicalSearchNodes
		{
			get
			{
				return ReadSingle(0x5C8);
			}
			set
			{
				WriteSingle(0x5C8,value);
			}
		}
		
		/// <summary>
		/// Name: RegionPartitioning
		/// Type: ByteProperty
		/// Offset: 0x5CC
		/// Size: 0x01
		/// </summary>
		public byte RegionPartitioning
		{
			get
			{
				return ReadByte(0x5CC);
			}
			set
			{
				WriteByte(0x5CC,value);
			}
		}
		
		/// <summary>
		/// Name: LayerPartitioning
		/// Type: ByteProperty
		/// Offset: 0x5CD
		/// Size: 0x01
		/// </summary>
		public byte LayerPartitioning
		{
			get
			{
				return ReadByte(0x5CD);
			}
			set
			{
				WriteByte(0x5CD,value);
			}
		}
		
		/// <summary>
		/// Name: RegionChunkSplits
		/// Type: IntProperty
		/// Offset: 0x5D0
		/// Size: 0x04
		/// </summary>
		public int RegionChunkSplits
		{
			get
			{
				return ReadInt32(0x5D0);
			}
			set
			{
				WriteInt32(0x5D0,value);
			}
		}
		
		/// <summary>
		/// Name: LayerChunkSplits
		/// Type: IntProperty
		/// Offset: 0x5D4
		/// Size: 0x04
		/// </summary>
		public int LayerChunkSplits
		{
			get
			{
				return ReadInt32(0x5D4);
			}
			set
			{
				WriteInt32(0x5D4,value);
			}
		}
		
		/// <summary>
		/// Name: bSortNavigationAreasByCost
		/// Type: BoolProperty
		/// Offset: 0x5D8
		/// Size: 0x01
		/// </summary>
		public bool bSortNavigationAreasByCost => (ReadByte(0x05D8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bPerformVoxelFiltering
		/// Type: BoolProperty
		/// Offset: 0x5D8
		/// Size: 0x01
		/// </summary>
		public bool bPerformVoxelFiltering => (ReadByte(0x05D8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bMarkLowHeightAreas
		/// Type: BoolProperty
		/// Offset: 0x5D8
		/// Size: 0x01
		/// </summary>
		public bool bMarkLowHeightAreas => (ReadByte(0x05D8) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bDoFullyAsyncNavDataGathering
		/// Type: BoolProperty
		/// Offset: 0x5D8
		/// Size: 0x01
		/// </summary>
		public bool bDoFullyAsyncNavDataGathering => (ReadByte(0x05D8) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bUseBetterOffsetsFromCorners
		/// Type: BoolProperty
		/// Offset: 0x5D8
		/// Size: 0x01
		/// </summary>
		public bool bUseBetterOffsetsFromCorners => (ReadByte(0x05D8) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bUseVirtualFilters
		/// Type: BoolProperty
		/// Offset: 0x5D8
		/// Size: 0x01
		/// </summary>
		public bool bUseVirtualFilters => (ReadByte(0x05D8) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bUseVoxelCache
		/// Type: BoolProperty
		/// Offset: 0x5D8
		/// Size: 0x01
		/// </summary>
		public bool bUseVoxelCache => (ReadByte(0x05D8) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: TileSetUpdateInterval
		/// Type: FloatProperty
		/// Offset: 0x5DC
		/// Size: 0x04
		/// </summary>
		public float TileSetUpdateInterval
		{
			get
			{
				return ReadSingle(0x5DC);
			}
			set
			{
				WriteSingle(0x5DC,value);
			}
		}
		
		/// <summary>
		/// Name: HeuristicScale
		/// Type: FloatProperty
		/// Offset: 0x5E0
		/// Size: 0x04
		/// </summary>
		public float HeuristicScale
		{
			get
			{
				return ReadSingle(0x5E0);
			}
			set
			{
				WriteSingle(0x5E0,value);
			}
		}
		
		/// <summary>
		/// Name: VerticalDeviationFromGroundCompensation
		/// Type: FloatProperty
		/// Offset: 0x5E4
		/// Size: 0x04
		/// </summary>
		public float VerticalDeviationFromGroundCompensation
		{
			get
			{
				return ReadSingle(0x5E4);
			}
			set
			{
				WriteSingle(0x5E4,value);
			}
		}
		
	}


	/// <summary>
	/// ANavigationGraphNode:AActor
	/// Size: 0x3D0
	/// Properties: 0
	/// </summary>
	public class ANavigationGraphNode:AActor
	{
		public override int ObjectSize => 976;
	}


	/// <summary>
	/// APlayerStartPIE:APlayerStart
	/// Size: 0x400
	/// Properties: 0
	/// </summary>
	public class APlayerStartPIE:APlayerStart
	{
		public override int ObjectSize => 1024;
	}


	/// <summary>
	/// UNavPathObserverInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNavPathObserverInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// ANavigationTestingActor:AActor
	/// Size: 0x4E0
	/// Properties: 28
	/// </summary>
	public class ANavigationTestingActor:AActor
	{
		public override int ObjectSize => 1248;
		/// <summary>
		/// Name: CapsuleComponent
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public UCapsuleComponent CapsuleComponent => ReadUObject<UCapsuleComponent>(0x3E0);
		
		/// <summary>
		/// Name: InvokerComponent
		/// Type: ObjectProperty
		/// Offset: 0x3E8
		/// Size: 0x08
		/// </summary>
		public UNavigationInvokerComponent InvokerComponent => ReadUObject<UNavigationInvokerComponent>(0x3E8);
		
		/// <summary>
		/// Name: bActAsNavigationInvoker
		/// Type: BoolProperty
		/// Offset: 0x3F0
		/// Size: 0x01
		/// </summary>
		public bool bActAsNavigationInvoker => (ReadByte(0x03F0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: NavAgentProps
		/// Type: StructProperty
		/// Offset: 0x3F8
		/// Size: 0x20
		/// </summary>
		public FNavAgentProperties NavAgentProps => ReadStruct<FNavAgentProperties>(0x3F8);
		
		/// <summary>
		/// Name: QueryingExtent
		/// Type: StructProperty
		/// Offset: 0x418
		/// Size: 0x0C
		/// </summary>
		public FVector QueryingExtent => ReadStruct<FVector>(0x418);
		
		/// <summary>
		/// Name: MyNavData
		/// Type: ObjectProperty
		/// Offset: 0x428
		/// Size: 0x08
		/// </summary>
		public ANavigationData MyNavData => ReadUObject<ANavigationData>(0x428);
		
		/// <summary>
		/// Name: ProjectedLocation
		/// Type: StructProperty
		/// Offset: 0x430
		/// Size: 0x0C
		/// </summary>
		public FVector ProjectedLocation => ReadStruct<FVector>(0x430);
		
		/// <summary>
		/// Name: bProjectedLocationValid
		/// Type: BoolProperty
		/// Offset: 0x43C
		/// Size: 0x01
		/// </summary>
		public bool bProjectedLocationValid => (ReadByte(0x043C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSearchStart
		/// Type: BoolProperty
		/// Offset: 0x43C
		/// Size: 0x01
		/// </summary>
		public bool bSearchStart => (ReadByte(0x043C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bUseHierarchicalPathfinding
		/// Type: BoolProperty
		/// Offset: 0x43C
		/// Size: 0x01
		/// </summary>
		public bool bUseHierarchicalPathfinding => (ReadByte(0x043C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bGatherDetailedInfo
		/// Type: BoolProperty
		/// Offset: 0x43C
		/// Size: 0x01
		/// </summary>
		public bool bGatherDetailedInfo => (ReadByte(0x043C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bDrawDistanceToWall
		/// Type: BoolProperty
		/// Offset: 0x43C
		/// Size: 0x01
		/// </summary>
		public bool bDrawDistanceToWall => (ReadByte(0x043C) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bShowNodePool
		/// Type: BoolProperty
		/// Offset: 0x43C
		/// Size: 0x01
		/// </summary>
		public bool bShowNodePool => (ReadByte(0x043C) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bShowBestPath
		/// Type: BoolProperty
		/// Offset: 0x43C
		/// Size: 0x01
		/// </summary>
		public bool bShowBestPath => (ReadByte(0x043C) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bShowDiffWithPreviousStep
		/// Type: BoolProperty
		/// Offset: 0x43C
		/// Size: 0x01
		/// </summary>
		public bool bShowDiffWithPreviousStep => (ReadByte(0x043C) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bShouldBeVisibleInGame
		/// Type: BoolProperty
		/// Offset: 0x43D
		/// Size: 0x01
		/// </summary>
		public bool bShouldBeVisibleInGame => (ReadByte(0x043D) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CostDisplayMode
		/// Type: ByteProperty
		/// Offset: 0x440
		/// Size: 0x01
		/// </summary>
		public byte CostDisplayMode
		{
			get
			{
				return ReadByte(0x440);
			}
			set
			{
				WriteByte(0x440,value);
			}
		}
		
		/// <summary>
		/// Name: TextCanvasOffset
		/// Type: StructProperty
		/// Offset: 0x444
		/// Size: 0x08
		/// </summary>
		public FVector2D TextCanvasOffset => ReadStruct<FVector2D>(0x444);
		
		/// <summary>
		/// Name: bPathExist
		/// Type: BoolProperty
		/// Offset: 0x44C
		/// Size: 0x01
		/// </summary>
		public bool bPathExist => (ReadByte(0x044C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bPathIsPartial
		/// Type: BoolProperty
		/// Offset: 0x44C
		/// Size: 0x01
		/// </summary>
		public bool bPathIsPartial => (ReadByte(0x044C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bPathSearchOutOfNodes
		/// Type: BoolProperty
		/// Offset: 0x44C
		/// Size: 0x01
		/// </summary>
		public bool bPathSearchOutOfNodes => (ReadByte(0x044C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: PathfindingTime
		/// Type: FloatProperty
		/// Offset: 0x450
		/// Size: 0x04
		/// </summary>
		public float PathfindingTime
		{
			get
			{
				return ReadSingle(0x450);
			}
			set
			{
				WriteSingle(0x450,value);
			}
		}
		
		/// <summary>
		/// Name: PathCost
		/// Type: FloatProperty
		/// Offset: 0x454
		/// Size: 0x04
		/// </summary>
		public float PathCost
		{
			get
			{
				return ReadSingle(0x454);
			}
			set
			{
				WriteSingle(0x454,value);
			}
		}
		
		/// <summary>
		/// Name: PathfindingSteps
		/// Type: IntProperty
		/// Offset: 0x458
		/// Size: 0x04
		/// </summary>
		public int PathfindingSteps
		{
			get
			{
				return ReadInt32(0x458);
			}
			set
			{
				WriteInt32(0x458,value);
			}
		}
		
		/// <summary>
		/// Name: OtherActor
		/// Type: ObjectProperty
		/// Offset: 0x460
		/// Size: 0x08
		/// </summary>
		public ANavigationTestingActor OtherActor => ReadUObject<ANavigationTestingActor>(0x460);
		
		/// <summary>
		/// Name: FilterClass
		/// Type: ClassProperty
		/// Offset: 0x468
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ShowStepIndex
		/// Type: IntProperty
		/// Offset: 0x470
		/// Size: 0x04
		/// </summary>
		public int ShowStepIndex
		{
			get
			{
				return ReadInt32(0x470);
			}
			set
			{
				WriteInt32(0x470,value);
			}
		}
		
		/// <summary>
		/// Name: OffsetFromCornersDistance
		/// Type: FloatProperty
		/// Offset: 0x474
		/// Size: 0x04
		/// </summary>
		public float OffsetFromCornersDistance
		{
			get
			{
				return ReadSingle(0x474);
			}
			set
			{
				WriteSingle(0x474,value);
			}
		}
		
	}


	/// <summary>
	/// UNavArea:UObject
	/// Size: 0x40
	/// Properties: 20
	/// </summary>
	public class UNavArea:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: DefaultCost
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float DefaultCost
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: FixedAreaEnteringCost
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float FixedAreaEnteringCost
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: DrawColor
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public FColor DrawColor => ReadStruct<FColor>(0x30);
		
		/// <summary>
		/// Name: SupportedAgents
		/// Type: StructProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public FNavAgentSelector SupportedAgents => ReadStruct<FNavAgentSelector>(0x34);
		
		/// <summary>
		/// Name: bSupportsAgent0
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent0 => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSupportsAgent1
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent1 => (ReadByte(0x0038) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bSupportsAgent2
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent2 => (ReadByte(0x0038) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bSupportsAgent3
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent3 => (ReadByte(0x0038) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bSupportsAgent4
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent4 => (ReadByte(0x0038) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bSupportsAgent5
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent5 => (ReadByte(0x0038) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bSupportsAgent6
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent6 => (ReadByte(0x0038) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bSupportsAgent7
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent7 => (ReadByte(0x0038) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bSupportsAgent8
		/// Type: BoolProperty
		/// Offset: 0x39
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent8 => (ReadByte(0x0039) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSupportsAgent9
		/// Type: BoolProperty
		/// Offset: 0x39
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent9 => (ReadByte(0x0039) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bSupportsAgent10
		/// Type: BoolProperty
		/// Offset: 0x39
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent10 => (ReadByte(0x0039) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bSupportsAgent11
		/// Type: BoolProperty
		/// Offset: 0x39
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent11 => (ReadByte(0x0039) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bSupportsAgent12
		/// Type: BoolProperty
		/// Offset: 0x39
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent12 => (ReadByte(0x0039) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bSupportsAgent13
		/// Type: BoolProperty
		/// Offset: 0x39
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent13 => (ReadByte(0x0039) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bSupportsAgent14
		/// Type: BoolProperty
		/// Offset: 0x39
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent14 => (ReadByte(0x0039) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bSupportsAgent15
		/// Type: BoolProperty
		/// Offset: 0x39
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent15 => (ReadByte(0x0039) & 0x80) == 0x80;
		
	}


	/// <summary>
	/// UNavLinkDefinition:UObject
	/// Size: 0x50
	/// Properties: 2
	/// </summary>
	public class UNavLinkDefinition:UObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: Links
		/// Type: TArray<FNavigationLink>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x48
		/// </summary>
		public TArray<FNavigationLink> Links => new TArray<FNavigationLink>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: SegmentLinks
		/// Type: TArray<FNavigationSegmentLink>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x60
		/// </summary>
		public TArray<FNavigationSegmentLink> SegmentLinks => new TArray<FNavigationSegmentLink>(BaseAddress+0x38);
		
	}


	/// <summary>
	/// UNavLinkHostInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNavLinkHostInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// ANavLinkProxy:AActor
	/// Size: 0x420
	/// Properties: 4
	/// </summary>
	public class ANavLinkProxy:AActor
	{
		public override int ObjectSize => 1056;
		/// <summary>
		/// Name: PointLinks
		/// Type: TArray<FNavigationLink>
		/// Offset: 0x3E0
		/// Size: 0x10
		/// SubElement Size: 0x48
		/// </summary>
		public TArray<FNavigationLink> PointLinks => new TArray<FNavigationLink>(BaseAddress+0x3E0);
		
		/// <summary>
		/// Name: SegmentLinks
		/// Type: TArray<FNavigationSegmentLink>
		/// Offset: 0x3F0
		/// Size: 0x10
		/// SubElement Size: 0x60
		/// </summary>
		public TArray<FNavigationSegmentLink> SegmentLinks => new TArray<FNavigationSegmentLink>(BaseAddress+0x3F0);
		
		/// <summary>
		/// Name: SmartLinkComp
		/// Type: ObjectProperty
		/// Offset: 0x400
		/// Size: 0x08
		/// </summary>
		public UNavLinkCustomComponent SmartLinkComp => ReadUObject<UNavLinkCustomComponent>(0x400);
		
		/// <summary>
		/// Name: bSmartLinkIsRelevant
		/// Type: BoolProperty
		/// Offset: 0x408
		/// Size: 0x01
		/// </summary>
		public bool bSmartLinkIsRelevant
		{
			get
			{
				return ReadBool(0x408);
			}
			set
			{
				WriteBool(0x408,value);
			}
		}
		
	}


	/// <summary>
	/// ANote:AActor
	/// Size: 0x3D0
	/// Properties: 0
	/// </summary>
	public class ANote:AActor
	{
		public override int ObjectSize => 976;
	}


	/// <summary>
	/// AParticleEventManager:AActor
	/// Size: 0x3D0
	/// Properties: 0
	/// </summary>
	public class AParticleEventManager:AActor
	{
		public override int ObjectSize => 976;
	}


	/// <summary>
	/// USkeleton:UObject
	/// Size: 0x2D0
	/// Properties: 7
	/// </summary>
	public class USkeleton:UObject
	{
		public override int ObjectSize => 720;
		/// <summary>
		/// Name: BoneTree
		/// Type: TArray<FBoneNode>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FBoneNode> BoneTree => new TArray<FBoneNode>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: RefLocalPoses
		/// Type: TArray<FTransform>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FTransform> RefLocalPoses => new TArray<FTransform>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: LinkupCache
		/// Type: TArray<FSkeletonToMeshLinkup>
		/// Offset: 0xC8
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FSkeletonToMeshLinkup> LinkupCache => new TArray<FSkeletonToMeshLinkup>(BaseAddress+0xC8);
		
		/// <summary>
		/// Name: Sockets
		/// Type: TArray<USkeletalMeshSocket>
		/// Offset: 0xD8
		/// Size: 0x10
		/// SubElement Size: 0x60
		/// </summary>
		public TArray<USkeletalMeshSocket> Sockets => new TArray<USkeletalMeshSocket>(BaseAddress+0xD8);
		
		/// <summary>
		/// Name: SmartNames
		/// Type: StructProperty
		/// Offset: 0x138
		/// Size: 0x50
		/// </summary>
		public FSmartNameContainer SmartNames => ReadStruct<FSmartNameContainer>(0x138);
		
		/// <summary>
		/// Name: BlendProfiles
		/// Type: TArray<UBlendProfile>
		/// Offset: 0x198
		/// Size: 0x10
		/// SubElement Size: 0x48
		/// </summary>
		public TArray<UBlendProfile> BlendProfiles => new TArray<UBlendProfile>(BaseAddress+0x198);
		
		/// <summary>
		/// Name: SlotGroups
		/// Type: TArray<FAnimSlotGroup>
		/// Offset: 0x1A8
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FAnimSlotGroup> SlotGroups => new TArray<FAnimSlotGroup>(BaseAddress+0x1A8);
		
	}


	/// <summary>
	/// UInterface_CollisionDataProvider:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UInterface_CollisionDataProvider:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// USkeletalMesh:UObject
	/// Size: 0x240
	/// Properties: 22
	/// </summary>
	public class USkeletalMesh:UObject
	{
		public override int ObjectSize => 576;
		/// <summary>
		/// Name: Skeleton
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public USkeleton Skeleton => ReadUObject<USkeleton>(0x48);
		
		/// <summary>
		/// Name: ImportedBounds
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x1C
		/// </summary>
		public FBoxSphereBounds ImportedBounds => ReadStruct<FBoxSphereBounds>(0x50);
		
		/// <summary>
		/// Name: ExtendedBounds
		/// Type: StructProperty
		/// Offset: 0x6C
		/// Size: 0x1C
		/// </summary>
		public FBoxSphereBounds ExtendedBounds => ReadStruct<FBoxSphereBounds>(0x6C);
		
		/// <summary>
		/// Name: PositiveBoundsExtension
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0x0C
		/// </summary>
		public FVector PositiveBoundsExtension => ReadStruct<FVector>(0x88);
		
		/// <summary>
		/// Name: NegativeBoundsExtension
		/// Type: StructProperty
		/// Offset: 0x94
		/// Size: 0x0C
		/// </summary>
		public FVector NegativeBoundsExtension => ReadStruct<FVector>(0x94);
		
		/// <summary>
		/// Name: Materials
		/// Type: TArray<FSkeletalMaterial>
		/// Offset: 0xA0
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FSkeletalMaterial> Materials => new TArray<FSkeletalMaterial>(BaseAddress+0xA0);
		
		/// <summary>
		/// Name: SkelMirrorTable
		/// Type: TArray<FBoneMirrorInfo>
		/// Offset: 0xB0
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FBoneMirrorInfo> SkelMirrorTable => new TArray<FBoneMirrorInfo>(BaseAddress+0xB0);
		
		/// <summary>
		/// Name: SkelMirrorAxis
		/// Type: ByteProperty
		/// Offset: 0xC0
		/// Size: 0x01
		/// </summary>
		public byte SkelMirrorAxis
		{
			get
			{
				return ReadByte(0xC0);
			}
			set
			{
				WriteByte(0xC0,value);
			}
		}
		
		/// <summary>
		/// Name: SkelMirrorFlipAxis
		/// Type: ByteProperty
		/// Offset: 0xC1
		/// Size: 0x01
		/// </summary>
		public byte SkelMirrorFlipAxis
		{
			get
			{
				return ReadByte(0xC1);
			}
			set
			{
				WriteByte(0xC1,value);
			}
		}
		
		/// <summary>
		/// Name: LODInfo
		/// Type: TArray<FSkeletalMeshLODInfo>
		/// Offset: 0xC8
		/// Size: 0x10
		/// SubElement Size: 0x378
		/// </summary>
		public TArray<FSkeletalMeshLODInfo> LODInfo => new TArray<FSkeletalMeshLODInfo>(BaseAddress+0xC8);
		
		/// <summary>
		/// Name: bUseFullPrecisionUVs
		/// Type: BoolProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public bool bUseFullPrecisionUVs => (ReadByte(0x00D8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bHasBeenSimplified
		/// Type: BoolProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public bool bHasBeenSimplified => (ReadByte(0x00D8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bHasVertexColors
		/// Type: BoolProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public bool bHasVertexColors => (ReadByte(0x00D8) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bEnablePerPolyCollision
		/// Type: BoolProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public bool bEnablePerPolyCollision => (ReadByte(0x00D8) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: BodySetup
		/// Type: ObjectProperty
		/// Offset: 0xE0
		/// Size: 0x08
		/// </summary>
		public UBodySetup BodySetup => ReadUObject<UBodySetup>(0xE0);
		
		/// <summary>
		/// Name: PhysicsAsset
		/// Type: ObjectProperty
		/// Offset: 0xE8
		/// Size: 0x08
		/// </summary>
		public UPhysicsAsset PhysicsAsset => ReadUObject<UPhysicsAsset>(0xE8);
		
		/// <summary>
		/// Name: ShadowPhysicsAsset
		/// Type: ObjectProperty
		/// Offset: 0xF0
		/// Size: 0x08
		/// </summary>
		public UPhysicsAsset ShadowPhysicsAsset => ReadUObject<UPhysicsAsset>(0xF0);
		
		/// <summary>
		/// Name: StreamingDistanceMultiplier
		/// Type: FloatProperty
		/// Offset: 0xF8
		/// Size: 0x04
		/// </summary>
		public float StreamingDistanceMultiplier
		{
			get
			{
				return ReadSingle(0xF8);
			}
			set
			{
				WriteSingle(0xF8,value);
			}
		}
		
		/// <summary>
		/// Name: MorphTargets
		/// Type: TArray<UMorphTarget>
		/// Offset: 0x100
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UMorphTarget> MorphTargets => new TArray<UMorphTarget>(BaseAddress+0x100);
		
		/// <summary>
		/// Name: ClothingAssets
		/// Type: TArray<FClothingAssetData>
		/// Offset: 0x1E8
		/// Size: 0x10
		/// SubElement Size: 0xF0
		/// </summary>
		public TArray<FClothingAssetData> ClothingAssets => new TArray<FClothingAssetData>(BaseAddress+0x1E8);
		
		/// <summary>
		/// Name: AssetUserData
		/// Type: TArray<UAssetUserData>
		/// Offset: 0x1F8
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UAssetUserData> AssetUserData => new TArray<UAssetUserData>(BaseAddress+0x1F8);
		
		/// <summary>
		/// Name: Sockets
		/// Type: TArray<USkeletalMeshSocket>
		/// Offset: 0x220
		/// Size: 0x10
		/// SubElement Size: 0x60
		/// </summary>
		public TArray<USkeletalMeshSocket> Sockets => new TArray<USkeletalMeshSocket>(BaseAddress+0x220);
		
	}


	/// <summary>
	/// UAnimationAsset:UObject
	/// Size: 0x68
	/// Properties: 3
	/// </summary>
	public class UAnimationAsset:UObject
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: Skeleton
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public USkeleton Skeleton => ReadUObject<USkeleton>(0x30);
		
		/// <summary>
		/// Name: MetaData
		/// Type: TArray<UAnimMetaData>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UAnimMetaData> MetaData => new TArray<UAnimMetaData>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: AssetUserData
		/// Type: TArray<UAssetUserData>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UAssetUserData> AssetUserData => new TArray<UAssetUserData>(BaseAddress+0x58);
		
	}


	/// <summary>
	/// ADefaultPawn:APawn
	/// Size: 0x458
	/// Properties: 6
	/// </summary>
	public class ADefaultPawn:APawn
	{
		public override int ObjectSize => 1112;
		/// <summary>
		/// Name: BaseTurnRate
		/// Type: FloatProperty
		/// Offset: 0x430
		/// Size: 0x04
		/// </summary>
		public float BaseTurnRate
		{
			get
			{
				return ReadSingle(0x430);
			}
			set
			{
				WriteSingle(0x430,value);
			}
		}
		
		/// <summary>
		/// Name: BaseLookUpRate
		/// Type: FloatProperty
		/// Offset: 0x434
		/// Size: 0x04
		/// </summary>
		public float BaseLookUpRate
		{
			get
			{
				return ReadSingle(0x434);
			}
			set
			{
				WriteSingle(0x434,value);
			}
		}
		
		/// <summary>
		/// Name: MovementComponent
		/// Type: ObjectProperty
		/// Offset: 0x438
		/// Size: 0x08
		/// </summary>
		public UPawnMovementComponent MovementComponent => ReadUObject<UPawnMovementComponent>(0x438);
		
		/// <summary>
		/// Name: CollisionComponent
		/// Type: ObjectProperty
		/// Offset: 0x440
		/// Size: 0x08
		/// </summary>
		public USphereComponent CollisionComponent => ReadUObject<USphereComponent>(0x440);
		
		/// <summary>
		/// Name: MeshComponent
		/// Type: ObjectProperty
		/// Offset: 0x448
		/// Size: 0x08
		/// </summary>
		public UStaticMeshComponent MeshComponent => ReadUObject<UStaticMeshComponent>(0x448);
		
		/// <summary>
		/// Name: bAddDefaultMovementBindings
		/// Type: BoolProperty
		/// Offset: 0x450
		/// Size: 0x01
		/// </summary>
		public bool bAddDefaultMovementBindings => (ReadByte(0x0450) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// ASpectatorPawn:ADefaultPawn
	/// Size: 0x458
	/// Properties: 0
	/// </summary>
	public class ASpectatorPawn:ADefaultPawn
	{
		public override int ObjectSize => 1112;
	}


	/// <summary>
	/// AWheeledVehicle:APawn
	/// Size: 0x440
	/// Properties: 2
	/// </summary>
	public class AWheeledVehicle:APawn
	{
		public override int ObjectSize => 1088;
		/// <summary>
		/// Name: Mesh
		/// Type: ObjectProperty
		/// Offset: 0x430
		/// Size: 0x08
		/// </summary>
		public USkeletalMeshComponent Mesh => ReadUObject<USkeletalMeshComponent>(0x430);
		
		/// <summary>
		/// Name: VehicleMovement
		/// Type: ObjectProperty
		/// Offset: 0x438
		/// Size: 0x08
		/// </summary>
		public UWheeledVehicleMovementComponent VehicleMovement => ReadUObject<UWheeledVehicleMovementComponent>(0x438);
		
	}


	/// <summary>
	/// AReflectionCapture:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class AReflectionCapture:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: CaptureComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UReflectionCaptureComponent CaptureComponent => ReadUObject<UReflectionCaptureComponent>(0x3D0);
		
	}


	/// <summary>
	/// ABoxReflectionCapture:AReflectionCapture
	/// Size: 0x3D8
	/// Properties: 0
	/// </summary>
	public class ABoxReflectionCapture:AReflectionCapture
	{
		public override int ObjectSize => 984;
	}


	/// <summary>
	/// APlaneReflectionCapture:AReflectionCapture
	/// Size: 0x3D8
	/// Properties: 0
	/// </summary>
	public class APlaneReflectionCapture:AReflectionCapture
	{
		public override int ObjectSize => 984;
	}


	/// <summary>
	/// ASphereReflectionCapture:AReflectionCapture
	/// Size: 0x3E0
	/// Properties: 1
	/// </summary>
	public class ASphereReflectionCapture:AReflectionCapture
	{
		public override int ObjectSize => 992;
		/// <summary>
		/// Name: DrawCaptureRadius
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public UDrawSphereComponent DrawCaptureRadius => ReadUObject<UDrawSphereComponent>(0x3D8);
		
	}


	/// <summary>
	/// ARigidBodyBase:AActor
	/// Size: 0x3D0
	/// Properties: 0
	/// </summary>
	public class ARigidBodyBase:AActor
	{
		public override int ObjectSize => 976;
	}


	/// <summary>
	/// APhysicsConstraintActor:ARigidBodyBase
	/// Size: 0x3F0
	/// Properties: 4
	/// </summary>
	public class APhysicsConstraintActor:ARigidBodyBase
	{
		public override int ObjectSize => 1008;
		/// <summary>
		/// Name: ConstraintComp
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UPhysicsConstraintComponent ConstraintComp => ReadUObject<UPhysicsConstraintComponent>(0x3D0);
		
		/// <summary>
		/// Name: ConstraintActor1
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public AActor ConstraintActor1 => ReadUObject<AActor>(0x3D8);
		
		/// <summary>
		/// Name: ConstraintActor2
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public AActor ConstraintActor2 => ReadUObject<AActor>(0x3E0);
		
		/// <summary>
		/// Name: bDisableCollision
		/// Type: BoolProperty
		/// Offset: 0x3E8
		/// Size: 0x01
		/// </summary>
		public bool bDisableCollision => (ReadByte(0x03E8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// APhysicsThruster:ARigidBodyBase
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class APhysicsThruster:ARigidBodyBase
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: ThrusterComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UPhysicsThrusterComponent ThrusterComponent => ReadUObject<UPhysicsThrusterComponent>(0x3D0);
		
	}


	/// <summary>
	/// ARadialForceActor:ARigidBodyBase
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class ARadialForceActor:ARigidBodyBase
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: ForceComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public URadialForceComponent ForceComponent => ReadUObject<URadialForceComponent>(0x3D0);
		
	}


	/// <summary>
	/// ASceneCapture:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class ASceneCapture:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: MeshComp
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UStaticMeshComponent MeshComp => ReadUObject<UStaticMeshComponent>(0x3D0);
		
	}


	/// <summary>
	/// APlanarReflection:ASceneCapture
	/// Size: 0x3E0
	/// Properties: 1
	/// </summary>
	public class APlanarReflection:ASceneCapture
	{
		public override int ObjectSize => 992;
		/// <summary>
		/// Name: PlanarReflectionComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public UPlanarReflectionComponent PlanarReflectionComponent => ReadUObject<UPlanarReflectionComponent>(0x3D8);
		
	}


	/// <summary>
	/// ASceneCapture2D:ASceneCapture
	/// Size: 0x3E8
	/// Properties: 2
	/// </summary>
	public class ASceneCapture2D:ASceneCapture
	{
		public override int ObjectSize => 1000;
		/// <summary>
		/// Name: CaptureComponent2D
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public USceneCaptureComponent2D CaptureComponent2D => ReadUObject<USceneCaptureComponent2D>(0x3D8);
		
		/// <summary>
		/// Name: DrawFrustum
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public UDrawFrustumComponent DrawFrustum => ReadUObject<UDrawFrustumComponent>(0x3E0);
		
	}


	/// <summary>
	/// ASceneCaptureCube:ASceneCapture
	/// Size: 0x3E8
	/// Properties: 2
	/// </summary>
	public class ASceneCaptureCube:ASceneCapture
	{
		public override int ObjectSize => 1000;
		/// <summary>
		/// Name: CaptureComponentCube
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public USceneCaptureComponentCube CaptureComponentCube => ReadUObject<USceneCaptureComponentCube>(0x3D8);
		
		/// <summary>
		/// Name: DrawFrustum
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public UDrawFrustumComponent DrawFrustum => ReadUObject<UDrawFrustumComponent>(0x3E0);
		
	}


	/// <summary>
	/// ASceneCaptureSand:ASceneCapture
	/// Size: 0x3F0
	/// Properties: 3
	/// </summary>
	public class ASceneCaptureSand:ASceneCapture
	{
		public override int ObjectSize => 1008;
		/// <summary>
		/// Name: CaptureComponentSand
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public USceneCaptureComponentSand CaptureComponentSand => ReadUObject<USceneCaptureComponentSand>(0x3D8);
		
		/// <summary>
		/// Name: DrawBox
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public UBoxComponent DrawBox => ReadUObject<UBoxComponent>(0x3E0);
		
		/// <summary>
		/// Name: ImprintReceiver
		/// Type: ObjectProperty
		/// Offset: 0x3E8
		/// Size: 0x08
		/// </summary>
		public UImprintReceiverComponent ImprintReceiver => ReadUObject<UImprintReceiverComponent>(0x3E8);
		
	}


	/// <summary>
	/// ASceneCaptureWater:ASceneCapture
	/// Size: 0x3E8
	/// Properties: 2
	/// </summary>
	public class ASceneCaptureWater:ASceneCapture
	{
		public override int ObjectSize => 1000;
		/// <summary>
		/// Name: CaptureComponentWater
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public USceneCaptureComponentWater CaptureComponentWater => ReadUObject<USceneCaptureComponentWater>(0x3D8);
		
		/// <summary>
		/// Name: DrawBox
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public UBoxComponent DrawBox => ReadUObject<UBoxComponent>(0x3E0);
		
	}


	/// <summary>
	/// UPhysicsConstraintComponent:USceneComponent
	/// Size: 0x3C0
	/// Properties: 6
	/// </summary>
	public class UPhysicsConstraintComponent:USceneComponent
	{
		public override int ObjectSize => 960;
		/// <summary>
		/// Name: ConstraintActor1
		/// Type: ObjectProperty
		/// Offset: 0x218
		/// Size: 0x08
		/// </summary>
		public AActor ConstraintActor1 => ReadUObject<AActor>(0x218);
		
		/// <summary>
		/// Name: ComponentName1
		/// Type: StructProperty
		/// Offset: 0x220
		/// Size: 0x08
		/// </summary>
		public FConstrainComponentPropName ComponentName1 => ReadStruct<FConstrainComponentPropName>(0x220);
		
		/// <summary>
		/// Name: ConstraintActor2
		/// Type: ObjectProperty
		/// Offset: 0x228
		/// Size: 0x08
		/// </summary>
		public AActor ConstraintActor2 => ReadUObject<AActor>(0x228);
		
		/// <summary>
		/// Name: ComponentName2
		/// Type: StructProperty
		/// Offset: 0x230
		/// Size: 0x08
		/// </summary>
		public FConstrainComponentPropName ComponentName2 => ReadStruct<FConstrainComponentPropName>(0x230);
		
		/// <summary>
		/// Name: ConstraintSetup
		/// Type: ObjectProperty
		/// Offset: 0x248
		/// Size: 0x08
		/// </summary>
		public UPhysicsConstraintTemplate ConstraintSetup => ReadUObject<UPhysicsConstraintTemplate>(0x248);
		
		/// <summary>
		/// Name: ConstraintInstance
		/// Type: StructProperty
		/// Offset: 0x260
		/// Size: 0x160
		/// </summary>
		public FConstraintInstance ConstraintInstance => ReadStruct<FConstraintInstance>(0x260);
		
	}


	/// <summary>
	/// UMatineeAnimInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UMatineeAnimInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// ASkeletalMeshActor:AActor
	/// Size: 0x458
	/// Properties: 7
	/// </summary>
	public class ASkeletalMeshActor:AActor
	{
		public override int ObjectSize => 1112;
		/// <summary>
		/// Name: bShouldDoAnimNotifies
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bShouldDoAnimNotifies => (ReadByte(0x03D8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bWakeOnLevelStart
		/// Type: BoolProperty
		/// Offset: 0x3D8
		/// Size: 0x01
		/// </summary>
		public bool bWakeOnLevelStart => (ReadByte(0x03D8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: SkeletalMeshComponent
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public USkeletalMeshComponent SkeletalMeshComponent => ReadUObject<USkeletalMeshComponent>(0x3E0);
		
		/// <summary>
		/// Name: ReplicatedMesh
		/// Type: ObjectProperty
		/// Offset: 0x3E8
		/// Size: 0x08
		/// </summary>
		public USkeletalMesh ReplicatedMesh => ReadUObject<USkeletalMesh>(0x3E8);
		
		/// <summary>
		/// Name: ReplicatedPhysAsset
		/// Type: ObjectProperty
		/// Offset: 0x3F0
		/// Size: 0x08
		/// </summary>
		public UPhysicsAsset ReplicatedPhysAsset => ReadUObject<UPhysicsAsset>(0x3F0);
		
		/// <summary>
		/// Name: ReplicatedMaterial0
		/// Type: ObjectProperty
		/// Offset: 0x3F8
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface ReplicatedMaterial0 => ReadUObject<UMaterialInterface>(0x3F8);
		
		/// <summary>
		/// Name: ReplicatedMaterial1
		/// Type: ObjectProperty
		/// Offset: 0x400
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface ReplicatedMaterial1 => ReadUObject<UMaterialInterface>(0x400);
		
	}


	/// <summary>
	/// ASplineMeshActor:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class ASplineMeshActor:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: SplineMeshComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public USplineMeshComponent SplineMeshComponent => ReadUObject<USplineMeshComponent>(0x3D0);
		
	}


	/// <summary>
	/// ATargetPoint:AActor
	/// Size: 0x3D0
	/// Properties: 0
	/// </summary>
	public class ATargetPoint:AActor
	{
		public override int ObjectSize => 976;
	}


	/// <summary>
	/// ATextRenderActor:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class ATextRenderActor:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: TextRender
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UTextRenderComponent TextRender => ReadUObject<UTextRenderComponent>(0x3D0);
		
	}


	/// <summary>
	/// ATriggerBase:AActor
	/// Size: 0x3E0
	/// Properties: 2
	/// </summary>
	public class ATriggerBase:AActor
	{
		public override int ObjectSize => 992;
		/// <summary>
		/// Name: CollisionComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UShapeComponent CollisionComponent => ReadUObject<UShapeComponent>(0x3D0);
		
		/// <summary>
		/// Name: SpriteComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public UBillboardComponent SpriteComponent => ReadUObject<UBillboardComponent>(0x3D8);
		
	}


	/// <summary>
	/// ATriggerBox:ATriggerBase
	/// Size: 0x3E0
	/// Properties: 0
	/// </summary>
	public class ATriggerBox:ATriggerBase
	{
		public override int ObjectSize => 992;
	}


	/// <summary>
	/// ATriggerCapsule:ATriggerBase
	/// Size: 0x3E0
	/// Properties: 0
	/// </summary>
	public class ATriggerCapsule:ATriggerBase
	{
		public override int ObjectSize => 992;
	}


	/// <summary>
	/// ATriggerSphere:ATriggerBase
	/// Size: 0x3E0
	/// Properties: 0
	/// </summary>
	public class ATriggerSphere:ATriggerBase
	{
		public override int ObjectSize => 992;
	}


	/// <summary>
	/// AVectorFieldVolume:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class AVectorFieldVolume:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: VectorFieldComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UVectorFieldComponent VectorFieldComponent => ReadUObject<UVectorFieldComponent>(0x3D0);
		
	}


	/// <summary>
	/// UApplicationLifecycleComponent:UActorComponent
	/// Size: 0x128
	/// Properties: 0
	/// </summary>
	public class UApplicationLifecycleComponent:UActorComponent
	{
		public override int ObjectSize => 296;
	}


	/// <summary>
	/// USplineComponent:UPrimitiveComponent
	/// Size: 0x620
	/// Properties: 13
	/// </summary>
	public class USplineComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1568;
		/// <summary>
		/// Name: SplineInfo
		/// Type: StructProperty
		/// Offset: 0x5A0
		/// Size: 0x18
		/// </summary>
		public FInterpCurveVector SplineInfo => ReadStruct<FInterpCurveVector>(0x5A0);
		
		/// <summary>
		/// Name: SplineRotInfo
		/// Type: StructProperty
		/// Offset: 0x5B8
		/// Size: 0x18
		/// </summary>
		public FInterpCurveQuat SplineRotInfo => ReadStruct<FInterpCurveQuat>(0x5B8);
		
		/// <summary>
		/// Name: SplineScaleInfo
		/// Type: StructProperty
		/// Offset: 0x5D0
		/// Size: 0x18
		/// </summary>
		public FInterpCurveVector SplineScaleInfo => ReadStruct<FInterpCurveVector>(0x5D0);
		
		/// <summary>
		/// Name: SplineReparamTable
		/// Type: StructProperty
		/// Offset: 0x5E8
		/// Size: 0x18
		/// </summary>
		public FInterpCurveFloat SplineReparamTable => ReadStruct<FInterpCurveFloat>(0x5E8);
		
		/// <summary>
		/// Name: bAllowSplineEditingPerInstance
		/// Type: BoolProperty
		/// Offset: 0x600
		/// Size: 0x01
		/// </summary>
		public bool bAllowSplineEditingPerInstance
		{
			get
			{
				return ReadBool(0x600);
			}
			set
			{
				WriteBool(0x600,value);
			}
		}
		
		/// <summary>
		/// Name: ReparamStepsPerSegment
		/// Type: IntProperty
		/// Offset: 0x604
		/// Size: 0x04
		/// </summary>
		public int ReparamStepsPerSegment
		{
			get
			{
				return ReadInt32(0x604);
			}
			set
			{
				WriteInt32(0x604,value);
			}
		}
		
		/// <summary>
		/// Name: Duration
		/// Type: FloatProperty
		/// Offset: 0x608
		/// Size: 0x04
		/// </summary>
		public float Duration
		{
			get
			{
				return ReadSingle(0x608);
			}
			set
			{
				WriteSingle(0x608,value);
			}
		}
		
		/// <summary>
		/// Name: bStationaryEndpoints
		/// Type: BoolProperty
		/// Offset: 0x60C
		/// Size: 0x01
		/// </summary>
		public bool bStationaryEndpoints
		{
			get
			{
				return ReadBool(0x60C);
			}
			set
			{
				WriteBool(0x60C,value);
			}
		}
		
		/// <summary>
		/// Name: bSplineHasBeenEdited
		/// Type: BoolProperty
		/// Offset: 0x60D
		/// Size: 0x01
		/// </summary>
		public bool bSplineHasBeenEdited
		{
			get
			{
				return ReadBool(0x60D);
			}
			set
			{
				WriteBool(0x60D,value);
			}
		}
		
		/// <summary>
		/// Name: bInputSplinePointsToConstructionScript
		/// Type: BoolProperty
		/// Offset: 0x60E
		/// Size: 0x01
		/// </summary>
		public bool bInputSplinePointsToConstructionScript
		{
			get
			{
				return ReadBool(0x60E);
			}
			set
			{
				WriteBool(0x60E,value);
			}
		}
		
		/// <summary>
		/// Name: bDrawDebug
		/// Type: BoolProperty
		/// Offset: 0x60F
		/// Size: 0x01
		/// </summary>
		public bool bDrawDebug
		{
			get
			{
				return ReadBool(0x60F);
			}
			set
			{
				WriteBool(0x60F,value);
			}
		}
		
		/// <summary>
		/// Name: bClosedLoop
		/// Type: BoolProperty
		/// Offset: 0x610
		/// Size: 0x01
		/// </summary>
		public bool bClosedLoop
		{
			get
			{
				return ReadBool(0x610);
			}
			set
			{
				WriteBool(0x610,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultUpVector
		/// Type: StructProperty
		/// Offset: 0x614
		/// Size: 0x0C
		/// </summary>
		public FVector DefaultUpVector => ReadStruct<FVector>(0x614);
		
	}


	/// <summary>
	/// UInterpToMovementComponent:UMovementComponent
	/// Size: 0x1C8
	/// Properties: 7
	/// </summary>
	public class UInterpToMovementComponent:UMovementComponent
	{
		public override int ObjectSize => 456;
		/// <summary>
		/// Name: Duration
		/// Type: FloatProperty
		/// Offset: 0x130
		/// Size: 0x04
		/// </summary>
		public float Duration
		{
			get
			{
				return ReadSingle(0x130);
			}
			set
			{
				WriteSingle(0x130,value);
			}
		}
		
		/// <summary>
		/// Name: bPauseOnImpact
		/// Type: BoolProperty
		/// Offset: 0x134
		/// Size: 0x01
		/// </summary>
		public bool bPauseOnImpact => (ReadByte(0x0134) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: BehaviourType
		/// Type: ByteProperty
		/// Offset: 0x138
		/// Size: 0x01
		/// </summary>
		public byte BehaviourType
		{
			get
			{
				return ReadByte(0x138);
			}
			set
			{
				WriteByte(0x138,value);
			}
		}
		
		/// <summary>
		/// Name: bForceSubStepping
		/// Type: BoolProperty
		/// Offset: 0x13C
		/// Size: 0x01
		/// </summary>
		public bool bForceSubStepping => (ReadByte(0x013C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: MaxSimulationTimeStep
		/// Type: FloatProperty
		/// Offset: 0x190
		/// Size: 0x04
		/// </summary>
		public float MaxSimulationTimeStep
		{
			get
			{
				return ReadSingle(0x190);
			}
			set
			{
				WriteSingle(0x190,value);
			}
		}
		
		/// <summary>
		/// Name: MaxSimulationIterations
		/// Type: IntProperty
		/// Offset: 0x194
		/// Size: 0x04
		/// </summary>
		public int MaxSimulationIterations
		{
			get
			{
				return ReadInt32(0x194);
			}
			set
			{
				WriteInt32(0x194,value);
			}
		}
		
		/// <summary>
		/// Name: ControlPoints
		/// Type: TArray<FInterpControlPoint>
		/// Offset: 0x198
		/// Size: 0x10
		/// SubElement Size: 0x1C
		/// </summary>
		public TArray<FInterpControlPoint> ControlPoints => new TArray<FInterpControlPoint>(BaseAddress+0x198);
		
	}


	/// <summary>
	/// UNavigationSystem:UBlueprintFunctionLibrary
	/// Size: 0x460
	/// Properties: 15
	/// </summary>
	public class UNavigationSystem:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 1120;
		/// <summary>
		/// Name: MainNavData
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public ANavigationData MainNavData => ReadUObject<ANavigationData>(0x28);
		
		/// <summary>
		/// Name: AbstractNavData
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public ANavigationData AbstractNavData => ReadUObject<ANavigationData>(0x30);
		
		/// <summary>
		/// Name: bAutoCreateNavigationData
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bAutoCreateNavigationData => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bAllowClientSideNavigation
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bAllowClientSideNavigation => (ReadByte(0x0038) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bSupportRebuilding
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bSupportRebuilding => (ReadByte(0x0038) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bInitialBuildingLocked
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bInitialBuildingLocked => (ReadByte(0x0038) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bSkipAgentHeightCheckWhenPickingNavData
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bSkipAgentHeightCheckWhenPickingNavData => (ReadByte(0x0038) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: DataGatheringMode
		/// Type: ByteProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public byte DataGatheringMode
		{
			get
			{
				return ReadByte(0x3C);
			}
			set
			{
				WriteByte(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: bGenerateNavigationOnlyAroundNavigationInvokers
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bGenerateNavigationOnlyAroundNavigationInvokers => (ReadByte(0x0040) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ActiveTilesUpdateInterval
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float ActiveTilesUpdateInterval
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: SupportedAgents
		/// Type: TArray<FNavDataConfig>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x50
		/// </summary>
		public TArray<FNavDataConfig> SupportedAgents => new TArray<FNavDataConfig>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: DirtyAreasUpdateFreq
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float DirtyAreasUpdateFreq
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: NavDataSet
		/// Type: TArray<ANavigationData>
		/// Offset: 0x60
		/// Size: 0x10
		/// SubElement Size: 0x570
		/// </summary>
		public TArray<ANavigationData> NavDataSet => new TArray<ANavigationData>(BaseAddress+0x60);
		
		/// <summary>
		/// Name: NavDataRegistrationQueue
		/// Type: TArray<ANavigationData>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x570
		/// </summary>
		public TArray<ANavigationData> NavDataRegistrationQueue => new TArray<ANavigationData>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: OperationMode
		/// Type: ByteProperty
		/// Offset: 0x224
		/// Size: 0x01
		/// </summary>
		public byte OperationMode
		{
			get
			{
				return ReadByte(0x224);
			}
			set
			{
				WriteByte(0x224,value);
			}
		}
		
	}


	/// <summary>
	/// UNavMovementComponent:UMovementComponent
	/// Size: 0x168
	/// Properties: 6
	/// </summary>
	public class UNavMovementComponent:UMovementComponent
	{
		public override int ObjectSize => 360;
		/// <summary>
		/// Name: NavAgentProps
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x20
		/// </summary>
		public FNavAgentProperties NavAgentProps => ReadStruct<FNavAgentProperties>(0x130);
		
		/// <summary>
		/// Name: FixedPathBrakingDistance
		/// Type: FloatProperty
		/// Offset: 0x150
		/// Size: 0x04
		/// </summary>
		public float FixedPathBrakingDistance
		{
			get
			{
				return ReadSingle(0x150);
			}
			set
			{
				WriteSingle(0x150,value);
			}
		}
		
		/// <summary>
		/// Name: bUpdateNavAgentWithOwnersCollision
		/// Type: BoolProperty
		/// Offset: 0x154
		/// Size: 0x01
		/// </summary>
		public bool bUpdateNavAgentWithOwnersCollision => (ReadByte(0x0154) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUseAccelerationForPaths
		/// Type: BoolProperty
		/// Offset: 0x154
		/// Size: 0x01
		/// </summary>
		public bool bUseAccelerationForPaths => (ReadByte(0x0154) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bUseFixedBrakingDistanceForPaths
		/// Type: BoolProperty
		/// Offset: 0x154
		/// Size: 0x01
		/// </summary>
		public bool bUseFixedBrakingDistanceForPaths => (ReadByte(0x0154) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: MovementState
		/// Type: StructProperty
		/// Offset: 0x158
		/// Size: 0x04
		/// </summary>
		public FMovementProperties MovementState => ReadStruct<FMovementProperties>(0x158);
		
	}


	/// <summary>
	/// UPawnMovementComponent:UNavMovementComponent
	/// Size: 0x170
	/// Properties: 1
	/// </summary>
	public class UPawnMovementComponent:UNavMovementComponent
	{
		public override int ObjectSize => 368;
		/// <summary>
		/// Name: PawnOwner
		/// Type: ObjectProperty
		/// Offset: 0x168
		/// Size: 0x08
		/// </summary>
		public APawn PawnOwner => ReadUObject<APawn>(0x168);
		
	}


	/// <summary>
	/// URVOAvoidanceInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class URVOAvoidanceInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UNetworkPredictionInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNetworkPredictionInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UCharacterMovementComponent:UPawnMovementComponent
	/// Size: 0x740
	/// Properties: 136
	/// </summary>
	public class UCharacterMovementComponent:UPawnMovementComponent
	{
		public override int ObjectSize => 1856;
		/// <summary>
		/// Name: CharacterOwner
		/// Type: ObjectProperty
		/// Offset: 0x180
		/// Size: 0x08
		/// </summary>
		public ACharacter CharacterOwner => ReadUObject<ACharacter>(0x180);
		
		/// <summary>
		/// Name: GravityScale
		/// Type: FloatProperty
		/// Offset: 0x188
		/// Size: 0x04
		/// </summary>
		public float GravityScale
		{
			get
			{
				return ReadSingle(0x188);
			}
			set
			{
				WriteSingle(0x188,value);
			}
		}
		
		/// <summary>
		/// Name: MaxStepHeight
		/// Type: FloatProperty
		/// Offset: 0x18C
		/// Size: 0x04
		/// </summary>
		public float MaxStepHeight
		{
			get
			{
				return ReadSingle(0x18C);
			}
			set
			{
				WriteSingle(0x18C,value);
			}
		}
		
		/// <summary>
		/// Name: JumpZVelocity
		/// Type: FloatProperty
		/// Offset: 0x190
		/// Size: 0x04
		/// </summary>
		public float JumpZVelocity
		{
			get
			{
				return ReadSingle(0x190);
			}
			set
			{
				WriteSingle(0x190,value);
			}
		}
		
		/// <summary>
		/// Name: JumpOffJumpZFactor
		/// Type: FloatProperty
		/// Offset: 0x194
		/// Size: 0x04
		/// </summary>
		public float JumpOffJumpZFactor
		{
			get
			{
				return ReadSingle(0x194);
			}
			set
			{
				WriteSingle(0x194,value);
			}
		}
		
		/// <summary>
		/// Name: WalkableFloorAngle
		/// Type: FloatProperty
		/// Offset: 0x198
		/// Size: 0x04
		/// </summary>
		public float WalkableFloorAngle
		{
			get
			{
				return ReadSingle(0x198);
			}
			set
			{
				WriteSingle(0x198,value);
			}
		}
		
		/// <summary>
		/// Name: WalkableFloorZ
		/// Type: FloatProperty
		/// Offset: 0x19C
		/// Size: 0x04
		/// </summary>
		public float WalkableFloorZ
		{
			get
			{
				return ReadSingle(0x19C);
			}
			set
			{
				WriteSingle(0x19C,value);
			}
		}
		
		/// <summary>
		/// Name: MovementMode
		/// Type: ByteProperty
		/// Offset: 0x1A0
		/// Size: 0x01
		/// </summary>
		public byte MovementMode
		{
			get
			{
				return ReadByte(0x1A0);
			}
			set
			{
				WriteByte(0x1A0,value);
			}
		}
		
		/// <summary>
		/// Name: CustomMovementMode
		/// Type: ByteProperty
		/// Offset: 0x1A1
		/// Size: 0x01
		/// </summary>
		public byte CustomMovementMode
		{
			get
			{
				return ReadByte(0x1A1);
			}
			set
			{
				WriteByte(0x1A1,value);
			}
		}
		
		/// <summary>
		/// Name: GroundFriction
		/// Type: FloatProperty
		/// Offset: 0x1C0
		/// Size: 0x04
		/// </summary>
		public float GroundFriction
		{
			get
			{
				return ReadSingle(0x1C0);
			}
			set
			{
				WriteSingle(0x1C0,value);
			}
		}
		
		/// <summary>
		/// Name: MaxWalkSpeed
		/// Type: FloatProperty
		/// Offset: 0x1C4
		/// Size: 0x04
		/// </summary>
		public float MaxWalkSpeed
		{
			get
			{
				return ReadSingle(0x1C4);
			}
			set
			{
				WriteSingle(0x1C4,value);
			}
		}
		
		/// <summary>
		/// Name: MaxWalkSpeedCrouched
		/// Type: FloatProperty
		/// Offset: 0x1C8
		/// Size: 0x04
		/// </summary>
		public float MaxWalkSpeedCrouched
		{
			get
			{
				return ReadSingle(0x1C8);
			}
			set
			{
				WriteSingle(0x1C8,value);
			}
		}
		
		/// <summary>
		/// Name: MaxSwimSpeed
		/// Type: FloatProperty
		/// Offset: 0x1CC
		/// Size: 0x04
		/// </summary>
		public float MaxSwimSpeed
		{
			get
			{
				return ReadSingle(0x1CC);
			}
			set
			{
				WriteSingle(0x1CC,value);
			}
		}
		
		/// <summary>
		/// Name: MaxFlySpeed
		/// Type: FloatProperty
		/// Offset: 0x1D0
		/// Size: 0x04
		/// </summary>
		public float MaxFlySpeed
		{
			get
			{
				return ReadSingle(0x1D0);
			}
			set
			{
				WriteSingle(0x1D0,value);
			}
		}
		
		/// <summary>
		/// Name: MaxCustomMovementSpeed
		/// Type: FloatProperty
		/// Offset: 0x1D4
		/// Size: 0x04
		/// </summary>
		public float MaxCustomMovementSpeed
		{
			get
			{
				return ReadSingle(0x1D4);
			}
			set
			{
				WriteSingle(0x1D4,value);
			}
		}
		
		/// <summary>
		/// Name: MaxAcceleration
		/// Type: FloatProperty
		/// Offset: 0x1D8
		/// Size: 0x04
		/// </summary>
		public float MaxAcceleration
		{
			get
			{
				return ReadSingle(0x1D8);
			}
			set
			{
				WriteSingle(0x1D8,value);
			}
		}
		
		/// <summary>
		/// Name: BrakingFrictionFactor
		/// Type: FloatProperty
		/// Offset: 0x1DC
		/// Size: 0x04
		/// </summary>
		public float BrakingFrictionFactor
		{
			get
			{
				return ReadSingle(0x1DC);
			}
			set
			{
				WriteSingle(0x1DC,value);
			}
		}
		
		/// <summary>
		/// Name: BrakingFriction
		/// Type: FloatProperty
		/// Offset: 0x1E0
		/// Size: 0x04
		/// </summary>
		public float BrakingFriction
		{
			get
			{
				return ReadSingle(0x1E0);
			}
			set
			{
				WriteSingle(0x1E0,value);
			}
		}
		
		/// <summary>
		/// Name: bUseSeparateBrakingFriction
		/// Type: BoolProperty
		/// Offset: 0x1E4
		/// Size: 0x01
		/// </summary>
		public bool bUseSeparateBrakingFriction => (ReadByte(0x01E4) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: BrakingDecelerationWalking
		/// Type: FloatProperty
		/// Offset: 0x1E8
		/// Size: 0x04
		/// </summary>
		public float BrakingDecelerationWalking
		{
			get
			{
				return ReadSingle(0x1E8);
			}
			set
			{
				WriteSingle(0x1E8,value);
			}
		}
		
		/// <summary>
		/// Name: BrakingDecelerationFalling
		/// Type: FloatProperty
		/// Offset: 0x1EC
		/// Size: 0x04
		/// </summary>
		public float BrakingDecelerationFalling
		{
			get
			{
				return ReadSingle(0x1EC);
			}
			set
			{
				WriteSingle(0x1EC,value);
			}
		}
		
		/// <summary>
		/// Name: BrakingDecelerationSwimming
		/// Type: FloatProperty
		/// Offset: 0x1F0
		/// Size: 0x04
		/// </summary>
		public float BrakingDecelerationSwimming
		{
			get
			{
				return ReadSingle(0x1F0);
			}
			set
			{
				WriteSingle(0x1F0,value);
			}
		}
		
		/// <summary>
		/// Name: BrakingDecelerationFlying
		/// Type: FloatProperty
		/// Offset: 0x1F4
		/// Size: 0x04
		/// </summary>
		public float BrakingDecelerationFlying
		{
			get
			{
				return ReadSingle(0x1F4);
			}
			set
			{
				WriteSingle(0x1F4,value);
			}
		}
		
		/// <summary>
		/// Name: AirControl
		/// Type: FloatProperty
		/// Offset: 0x1F8
		/// Size: 0x04
		/// </summary>
		public float AirControl
		{
			get
			{
				return ReadSingle(0x1F8);
			}
			set
			{
				WriteSingle(0x1F8,value);
			}
		}
		
		/// <summary>
		/// Name: AirControlBoostMultiplier
		/// Type: FloatProperty
		/// Offset: 0x1FC
		/// Size: 0x04
		/// </summary>
		public float AirControlBoostMultiplier
		{
			get
			{
				return ReadSingle(0x1FC);
			}
			set
			{
				WriteSingle(0x1FC,value);
			}
		}
		
		/// <summary>
		/// Name: AirControlBoostVelocityThreshold
		/// Type: FloatProperty
		/// Offset: 0x200
		/// Size: 0x04
		/// </summary>
		public float AirControlBoostVelocityThreshold
		{
			get
			{
				return ReadSingle(0x200);
			}
			set
			{
				WriteSingle(0x200,value);
			}
		}
		
		/// <summary>
		/// Name: FallingLateralFriction
		/// Type: FloatProperty
		/// Offset: 0x204
		/// Size: 0x04
		/// </summary>
		public float FallingLateralFriction
		{
			get
			{
				return ReadSingle(0x204);
			}
			set
			{
				WriteSingle(0x204,value);
			}
		}
		
		/// <summary>
		/// Name: CrouchedHalfHeight
		/// Type: FloatProperty
		/// Offset: 0x208
		/// Size: 0x04
		/// </summary>
		public float CrouchedHalfHeight
		{
			get
			{
				return ReadSingle(0x208);
			}
			set
			{
				WriteSingle(0x208,value);
			}
		}
		
		/// <summary>
		/// Name: Buoyancy
		/// Type: FloatProperty
		/// Offset: 0x20C
		/// Size: 0x04
		/// </summary>
		public float Buoyancy
		{
			get
			{
				return ReadSingle(0x20C);
			}
			set
			{
				WriteSingle(0x20C,value);
			}
		}
		
		/// <summary>
		/// Name: PerchRadiusThreshold
		/// Type: FloatProperty
		/// Offset: 0x210
		/// Size: 0x04
		/// </summary>
		public float PerchRadiusThreshold
		{
			get
			{
				return ReadSingle(0x210);
			}
			set
			{
				WriteSingle(0x210,value);
			}
		}
		
		/// <summary>
		/// Name: PerchAdditionalHeight
		/// Type: FloatProperty
		/// Offset: 0x214
		/// Size: 0x04
		/// </summary>
		public float PerchAdditionalHeight
		{
			get
			{
				return ReadSingle(0x214);
			}
			set
			{
				WriteSingle(0x214,value);
			}
		}
		
		/// <summary>
		/// Name: RotationRate
		/// Type: StructProperty
		/// Offset: 0x218
		/// Size: 0x0C
		/// </summary>
		public FRotator RotationRate => ReadStruct<FRotator>(0x218);
		
		/// <summary>
		/// Name: bUseControllerDesiredRotation
		/// Type: BoolProperty
		/// Offset: 0x224
		/// Size: 0x01
		/// </summary>
		public bool bUseControllerDesiredRotation => (ReadByte(0x0224) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOrientRotationToMovement
		/// Type: BoolProperty
		/// Offset: 0x224
		/// Size: 0x01
		/// </summary>
		public bool bOrientRotationToMovement => (ReadByte(0x0224) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bMovementInProgress
		/// Type: BoolProperty
		/// Offset: 0x224
		/// Size: 0x01
		/// </summary>
		public bool bMovementInProgress => (ReadByte(0x0224) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bEnableScopedMovementUpdates
		/// Type: BoolProperty
		/// Offset: 0x224
		/// Size: 0x01
		/// </summary>
		public bool bEnableScopedMovementUpdates => (ReadByte(0x0224) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bForceMaxAccel
		/// Type: BoolProperty
		/// Offset: 0x224
		/// Size: 0x01
		/// </summary>
		public bool bForceMaxAccel => (ReadByte(0x0224) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bRunPhysicsWithNoController
		/// Type: BoolProperty
		/// Offset: 0x224
		/// Size: 0x01
		/// </summary>
		public bool bRunPhysicsWithNoController => (ReadByte(0x0224) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bForceNextFloorCheck
		/// Type: BoolProperty
		/// Offset: 0x224
		/// Size: 0x01
		/// </summary>
		public bool bForceNextFloorCheck => (ReadByte(0x0224) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bShrinkProxyCapsule
		/// Type: BoolProperty
		/// Offset: 0x224
		/// Size: 0x01
		/// </summary>
		public bool bShrinkProxyCapsule => (ReadByte(0x0224) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bCanWalkOffLedges
		/// Type: BoolProperty
		/// Offset: 0x225
		/// Size: 0x01
		/// </summary>
		public bool bCanWalkOffLedges => (ReadByte(0x0225) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bCanWalkOffLedgesWhenCrouching
		/// Type: BoolProperty
		/// Offset: 0x225
		/// Size: 0x01
		/// </summary>
		public bool bCanWalkOffLedgesWhenCrouching => (ReadByte(0x0225) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bDeferUpdateMoveComponent
		/// Type: BoolProperty
		/// Offset: 0x225
		/// Size: 0x01
		/// </summary>
		public bool bDeferUpdateMoveComponent => (ReadByte(0x0225) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: DeferredUpdatedMoveComponent
		/// Type: ObjectProperty
		/// Offset: 0x228
		/// Size: 0x08
		/// </summary>
		public USceneComponent DeferredUpdatedMoveComponent => ReadUObject<USceneComponent>(0x228);
		
		/// <summary>
		/// Name: MaxOutOfWaterStepHeight
		/// Type: FloatProperty
		/// Offset: 0x230
		/// Size: 0x04
		/// </summary>
		public float MaxOutOfWaterStepHeight
		{
			get
			{
				return ReadSingle(0x230);
			}
			set
			{
				WriteSingle(0x230,value);
			}
		}
		
		/// <summary>
		/// Name: OutofWaterZ
		/// Type: FloatProperty
		/// Offset: 0x234
		/// Size: 0x04
		/// </summary>
		public float OutofWaterZ
		{
			get
			{
				return ReadSingle(0x234);
			}
			set
			{
				WriteSingle(0x234,value);
			}
		}
		
		/// <summary>
		/// Name: Mass
		/// Type: FloatProperty
		/// Offset: 0x238
		/// Size: 0x04
		/// </summary>
		public float Mass
		{
			get
			{
				return ReadSingle(0x238);
			}
			set
			{
				WriteSingle(0x238,value);
			}
		}
		
		/// <summary>
		/// Name: bEnablePhysicsInteraction
		/// Type: BoolProperty
		/// Offset: 0x23C
		/// Size: 0x01
		/// </summary>
		public bool bEnablePhysicsInteraction
		{
			get
			{
				return ReadBool(0x23C);
			}
			set
			{
				WriteBool(0x23C,value);
			}
		}
		
		/// <summary>
		/// Name: bTouchForceScaledToMass
		/// Type: BoolProperty
		/// Offset: 0x23D
		/// Size: 0x01
		/// </summary>
		public bool bTouchForceScaledToMass
		{
			get
			{
				return ReadBool(0x23D);
			}
			set
			{
				WriteBool(0x23D,value);
			}
		}
		
		/// <summary>
		/// Name: bPushForceScaledToMass
		/// Type: BoolProperty
		/// Offset: 0x23E
		/// Size: 0x01
		/// </summary>
		public bool bPushForceScaledToMass
		{
			get
			{
				return ReadBool(0x23E);
			}
			set
			{
				WriteBool(0x23E,value);
			}
		}
		
		/// <summary>
		/// Name: bPushForceUsingZOffset
		/// Type: BoolProperty
		/// Offset: 0x23F
		/// Size: 0x01
		/// </summary>
		public bool bPushForceUsingZOffset
		{
			get
			{
				return ReadBool(0x23F);
			}
			set
			{
				WriteBool(0x23F,value);
			}
		}
		
		/// <summary>
		/// Name: bScalePushForceToVelocity
		/// Type: BoolProperty
		/// Offset: 0x240
		/// Size: 0x01
		/// </summary>
		public bool bScalePushForceToVelocity
		{
			get
			{
				return ReadBool(0x240);
			}
			set
			{
				WriteBool(0x240,value);
			}
		}
		
		/// <summary>
		/// Name: StandingDownwardForceScale
		/// Type: FloatProperty
		/// Offset: 0x244
		/// Size: 0x04
		/// </summary>
		public float StandingDownwardForceScale
		{
			get
			{
				return ReadSingle(0x244);
			}
			set
			{
				WriteSingle(0x244,value);
			}
		}
		
		/// <summary>
		/// Name: InitialPushForceFactor
		/// Type: FloatProperty
		/// Offset: 0x248
		/// Size: 0x04
		/// </summary>
		public float InitialPushForceFactor
		{
			get
			{
				return ReadSingle(0x248);
			}
			set
			{
				WriteSingle(0x248,value);
			}
		}
		
		/// <summary>
		/// Name: PushForceFactor
		/// Type: FloatProperty
		/// Offset: 0x24C
		/// Size: 0x04
		/// </summary>
		public float PushForceFactor
		{
			get
			{
				return ReadSingle(0x24C);
			}
			set
			{
				WriteSingle(0x24C,value);
			}
		}
		
		/// <summary>
		/// Name: PushForcePointZOffsetFactor
		/// Type: FloatProperty
		/// Offset: 0x250
		/// Size: 0x04
		/// </summary>
		public float PushForcePointZOffsetFactor
		{
			get
			{
				return ReadSingle(0x250);
			}
			set
			{
				WriteSingle(0x250,value);
			}
		}
		
		/// <summary>
		/// Name: TouchForceFactor
		/// Type: FloatProperty
		/// Offset: 0x254
		/// Size: 0x04
		/// </summary>
		public float TouchForceFactor
		{
			get
			{
				return ReadSingle(0x254);
			}
			set
			{
				WriteSingle(0x254,value);
			}
		}
		
		/// <summary>
		/// Name: MinTouchForce
		/// Type: FloatProperty
		/// Offset: 0x258
		/// Size: 0x04
		/// </summary>
		public float MinTouchForce
		{
			get
			{
				return ReadSingle(0x258);
			}
			set
			{
				WriteSingle(0x258,value);
			}
		}
		
		/// <summary>
		/// Name: MaxTouchForce
		/// Type: FloatProperty
		/// Offset: 0x25C
		/// Size: 0x04
		/// </summary>
		public float MaxTouchForce
		{
			get
			{
				return ReadSingle(0x25C);
			}
			set
			{
				WriteSingle(0x25C,value);
			}
		}
		
		/// <summary>
		/// Name: RepulsionForce
		/// Type: FloatProperty
		/// Offset: 0x260
		/// Size: 0x04
		/// </summary>
		public float RepulsionForce
		{
			get
			{
				return ReadSingle(0x260);
			}
			set
			{
				WriteSingle(0x260,value);
			}
		}
		
		/// <summary>
		/// Name: bForceBraking
		/// Type: BoolProperty
		/// Offset: 0x264
		/// Size: 0x01
		/// </summary>
		public bool bForceBraking => (ReadByte(0x0264) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CrouchedSpeedMultiplier
		/// Type: FloatProperty
		/// Offset: 0x268
		/// Size: 0x04
		/// </summary>
		public float CrouchedSpeedMultiplier
		{
			get
			{
				return ReadSingle(0x268);
			}
			set
			{
				WriteSingle(0x268,value);
			}
		}
		
		/// <summary>
		/// Name: UpperImpactNormalScale
		/// Type: FloatProperty
		/// Offset: 0x26C
		/// Size: 0x04
		/// </summary>
		public float UpperImpactNormalScale
		{
			get
			{
				return ReadSingle(0x26C);
			}
			set
			{
				WriteSingle(0x26C,value);
			}
		}
		
		/// <summary>
		/// Name: Acceleration
		/// Type: StructProperty
		/// Offset: 0x270
		/// Size: 0x0C
		/// </summary>
		public FVector Acceleration => ReadStruct<FVector>(0x270);
		
		/// <summary>
		/// Name: LastUpdateLocation
		/// Type: StructProperty
		/// Offset: 0x27C
		/// Size: 0x0C
		/// </summary>
		public FVector LastUpdateLocation => ReadStruct<FVector>(0x27C);
		
		/// <summary>
		/// Name: LastUpdateRotation
		/// Type: StructProperty
		/// Offset: 0x290
		/// Size: 0x10
		/// </summary>
		public FQuat LastUpdateRotation => ReadStruct<FQuat>(0x290);
		
		/// <summary>
		/// Name: LastUpdateVelocity
		/// Type: StructProperty
		/// Offset: 0x2A0
		/// Size: 0x0C
		/// </summary>
		public FVector LastUpdateVelocity => ReadStruct<FVector>(0x2A0);
		
		/// <summary>
		/// Name: ServerLastTransformUpdateTimeStamp
		/// Type: FloatProperty
		/// Offset: 0x2AC
		/// Size: 0x04
		/// </summary>
		public float ServerLastTransformUpdateTimeStamp
		{
			get
			{
				return ReadSingle(0x2AC);
			}
			set
			{
				WriteSingle(0x2AC,value);
			}
		}
		
		/// <summary>
		/// Name: PendingImpulseToApply
		/// Type: StructProperty
		/// Offset: 0x2B0
		/// Size: 0x0C
		/// </summary>
		public FVector PendingImpulseToApply => ReadStruct<FVector>(0x2B0);
		
		/// <summary>
		/// Name: PendingForceToApply
		/// Type: StructProperty
		/// Offset: 0x2BC
		/// Size: 0x0C
		/// </summary>
		public FVector PendingForceToApply => ReadStruct<FVector>(0x2BC);
		
		/// <summary>
		/// Name: AnalogInputModifier
		/// Type: FloatProperty
		/// Offset: 0x2C8
		/// Size: 0x04
		/// </summary>
		public float AnalogInputModifier
		{
			get
			{
				return ReadSingle(0x2C8);
			}
			set
			{
				WriteSingle(0x2C8,value);
			}
		}
		
		/// <summary>
		/// Name: MaxSimulationTimeStep
		/// Type: FloatProperty
		/// Offset: 0x2CC
		/// Size: 0x04
		/// </summary>
		public float MaxSimulationTimeStep
		{
			get
			{
				return ReadSingle(0x2CC);
			}
			set
			{
				WriteSingle(0x2CC,value);
			}
		}
		
		/// <summary>
		/// Name: MaxSimulationIterations
		/// Type: IntProperty
		/// Offset: 0x2D0
		/// Size: 0x04
		/// </summary>
		public int MaxSimulationIterations
		{
			get
			{
				return ReadInt32(0x2D0);
			}
			set
			{
				WriteInt32(0x2D0,value);
			}
		}
		
		/// <summary>
		/// Name: NetworkSimulatedSmoothLocationTime
		/// Type: FloatProperty
		/// Offset: 0x2D4
		/// Size: 0x04
		/// </summary>
		public float NetworkSimulatedSmoothLocationTime
		{
			get
			{
				return ReadSingle(0x2D4);
			}
			set
			{
				WriteSingle(0x2D4,value);
			}
		}
		
		/// <summary>
		/// Name: NetworkSimulatedSmoothLocationZTime
		/// Type: FloatProperty
		/// Offset: 0x2D8
		/// Size: 0x04
		/// </summary>
		public float NetworkSimulatedSmoothLocationZTime
		{
			get
			{
				return ReadSingle(0x2D8);
			}
			set
			{
				WriteSingle(0x2D8,value);
			}
		}
		
		/// <summary>
		/// Name: NetworkSimulatedSmoothRotationTime
		/// Type: FloatProperty
		/// Offset: 0x2DC
		/// Size: 0x04
		/// </summary>
		public float NetworkSimulatedSmoothRotationTime
		{
			get
			{
				return ReadSingle(0x2DC);
			}
			set
			{
				WriteSingle(0x2DC,value);
			}
		}
		
		/// <summary>
		/// Name: ListenServerNetworkSimulatedSmoothLocationTime
		/// Type: FloatProperty
		/// Offset: 0x2E0
		/// Size: 0x04
		/// </summary>
		public float ListenServerNetworkSimulatedSmoothLocationTime
		{
			get
			{
				return ReadSingle(0x2E0);
			}
			set
			{
				WriteSingle(0x2E0,value);
			}
		}
		
		/// <summary>
		/// Name: ListenServerNetworkSimulatedSmoothLocationZTime
		/// Type: FloatProperty
		/// Offset: 0x2E4
		/// Size: 0x04
		/// </summary>
		public float ListenServerNetworkSimulatedSmoothLocationZTime
		{
			get
			{
				return ReadSingle(0x2E4);
			}
			set
			{
				WriteSingle(0x2E4,value);
			}
		}
		
		/// <summary>
		/// Name: ListenServerNetworkSimulatedSmoothRotationTime
		/// Type: FloatProperty
		/// Offset: 0x2E8
		/// Size: 0x04
		/// </summary>
		public float ListenServerNetworkSimulatedSmoothRotationTime
		{
			get
			{
				return ReadSingle(0x2E8);
			}
			set
			{
				WriteSingle(0x2E8,value);
			}
		}
		
		/// <summary>
		/// Name: NetworkMaxSmoothUpdateDistance
		/// Type: FloatProperty
		/// Offset: 0x2EC
		/// Size: 0x04
		/// </summary>
		public float NetworkMaxSmoothUpdateDistance
		{
			get
			{
				return ReadSingle(0x2EC);
			}
			set
			{
				WriteSingle(0x2EC,value);
			}
		}
		
		/// <summary>
		/// Name: NetworkNoSmoothUpdateDistance
		/// Type: FloatProperty
		/// Offset: 0x2F0
		/// Size: 0x04
		/// </summary>
		public float NetworkNoSmoothUpdateDistance
		{
			get
			{
				return ReadSingle(0x2F0);
			}
			set
			{
				WriteSingle(0x2F0,value);
			}
		}
		
		/// <summary>
		/// Name: NetworkSmoothingMode
		/// Type: ByteProperty
		/// Offset: 0x2F4
		/// Size: 0x01
		/// </summary>
		public byte NetworkSmoothingMode
		{
			get
			{
				return ReadByte(0x2F4);
			}
			set
			{
				WriteByte(0x2F4,value);
			}
		}
		
		/// <summary>
		/// Name: LedgeCheckThreshold
		/// Type: FloatProperty
		/// Offset: 0x2F8
		/// Size: 0x04
		/// </summary>
		public float LedgeCheckThreshold
		{
			get
			{
				return ReadSingle(0x2F8);
			}
			set
			{
				WriteSingle(0x2F8,value);
			}
		}
		
		/// <summary>
		/// Name: JumpOutOfWaterPitch
		/// Type: FloatProperty
		/// Offset: 0x2FC
		/// Size: 0x04
		/// </summary>
		public float JumpOutOfWaterPitch
		{
			get
			{
				return ReadSingle(0x2FC);
			}
			set
			{
				WriteSingle(0x2FC,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentFloor
		/// Type: StructProperty
		/// Offset: 0x300
		/// Size: 0x98
		/// </summary>
		public FFindFloorResult CurrentFloor => ReadStruct<FFindFloorResult>(0x300);
		
		/// <summary>
		/// Name: DefaultLandMovementMode
		/// Type: ByteProperty
		/// Offset: 0x398
		/// Size: 0x01
		/// </summary>
		public byte DefaultLandMovementMode
		{
			get
			{
				return ReadByte(0x398);
			}
			set
			{
				WriteByte(0x398,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultWaterMovementMode
		/// Type: ByteProperty
		/// Offset: 0x399
		/// Size: 0x01
		/// </summary>
		public byte DefaultWaterMovementMode
		{
			get
			{
				return ReadByte(0x399);
			}
			set
			{
				WriteByte(0x399,value);
			}
		}
		
		/// <summary>
		/// Name: NetMoveDeltaMultiplier
		/// Type: FloatProperty
		/// Offset: 0x39C
		/// Size: 0x04
		/// </summary>
		public float NetMoveDeltaMultiplier
		{
			get
			{
				return ReadSingle(0x39C);
			}
			set
			{
				WriteSingle(0x39C,value);
			}
		}
		
		/// <summary>
		/// Name: GroundMovementMode
		/// Type: ByteProperty
		/// Offset: 0x3A0
		/// Size: 0x01
		/// </summary>
		public byte GroundMovementMode
		{
			get
			{
				return ReadByte(0x3A0);
			}
			set
			{
				WriteByte(0x3A0,value);
			}
		}
		
		/// <summary>
		/// Name: bMaintainHorizontalGroundVelocity
		/// Type: BoolProperty
		/// Offset: 0x3A4
		/// Size: 0x01
		/// </summary>
		public bool bMaintainHorizontalGroundVelocity => (ReadByte(0x03A4) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bImpartBaseVelocityX
		/// Type: BoolProperty
		/// Offset: 0x3A4
		/// Size: 0x01
		/// </summary>
		public bool bImpartBaseVelocityX => (ReadByte(0x03A4) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bImpartBaseVelocityY
		/// Type: BoolProperty
		/// Offset: 0x3A4
		/// Size: 0x01
		/// </summary>
		public bool bImpartBaseVelocityY => (ReadByte(0x03A4) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bImpartBaseVelocityZ
		/// Type: BoolProperty
		/// Offset: 0x3A4
		/// Size: 0x01
		/// </summary>
		public bool bImpartBaseVelocityZ => (ReadByte(0x03A4) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bImpartBaseAngularVelocity
		/// Type: BoolProperty
		/// Offset: 0x3A4
		/// Size: 0x01
		/// </summary>
		public bool bImpartBaseAngularVelocity => (ReadByte(0x03A4) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bJustTeleported
		/// Type: BoolProperty
		/// Offset: 0x3A4
		/// Size: 0x01
		/// </summary>
		public bool bJustTeleported => (ReadByte(0x03A4) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bNetworkUpdateReceived
		/// Type: BoolProperty
		/// Offset: 0x3A4
		/// Size: 0x01
		/// </summary>
		public bool bNetworkUpdateReceived => (ReadByte(0x03A4) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bNetworkMovementModeChanged
		/// Type: BoolProperty
		/// Offset: 0x3A4
		/// Size: 0x01
		/// </summary>
		public bool bNetworkMovementModeChanged => (ReadByte(0x03A4) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bIgnoreClientMovementErrorChecksAndCorrection
		/// Type: BoolProperty
		/// Offset: 0x3A5
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreClientMovementErrorChecksAndCorrection => (ReadByte(0x03A5) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bNotifyApex
		/// Type: BoolProperty
		/// Offset: 0x3A5
		/// Size: 0x01
		/// </summary>
		public bool bNotifyApex => (ReadByte(0x03A5) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bCheatFlying
		/// Type: BoolProperty
		/// Offset: 0x3A5
		/// Size: 0x01
		/// </summary>
		public bool bCheatFlying => (ReadByte(0x03A5) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bWantsToCrouch
		/// Type: BoolProperty
		/// Offset: 0x3A5
		/// Size: 0x01
		/// </summary>
		public bool bWantsToCrouch => (ReadByte(0x03A5) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bCrouchMaintainsBaseLocation
		/// Type: BoolProperty
		/// Offset: 0x3A5
		/// Size: 0x01
		/// </summary>
		public bool bCrouchMaintainsBaseLocation => (ReadByte(0x03A5) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bIgnoreBaseRotation
		/// Type: BoolProperty
		/// Offset: 0x3A5
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreBaseRotation => (ReadByte(0x03A5) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bFastAttachedMove
		/// Type: BoolProperty
		/// Offset: 0x3A5
		/// Size: 0x01
		/// </summary>
		public bool bFastAttachedMove => (ReadByte(0x03A5) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bAlwaysCheckFloor
		/// Type: BoolProperty
		/// Offset: 0x3A5
		/// Size: 0x01
		/// </summary>
		public bool bAlwaysCheckFloor => (ReadByte(0x03A5) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bUseFlatBaseForFloorChecks
		/// Type: BoolProperty
		/// Offset: 0x3A6
		/// Size: 0x01
		/// </summary>
		public bool bUseFlatBaseForFloorChecks => (ReadByte(0x03A6) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bPerformingJumpOff
		/// Type: BoolProperty
		/// Offset: 0x3A6
		/// Size: 0x01
		/// </summary>
		public bool bPerformingJumpOff => (ReadByte(0x03A6) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bWantsToLeaveNavWalking
		/// Type: BoolProperty
		/// Offset: 0x3A6
		/// Size: 0x01
		/// </summary>
		public bool bWantsToLeaveNavWalking => (ReadByte(0x03A6) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bUseRVOAvoidance
		/// Type: BoolProperty
		/// Offset: 0x3A6
		/// Size: 0x01
		/// </summary>
		public bool bUseRVOAvoidance => (ReadByte(0x03A6) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bRequestedMoveUseAcceleration
		/// Type: BoolProperty
		/// Offset: 0x3A6
		/// Size: 0x01
		/// </summary>
		public bool bRequestedMoveUseAcceleration => (ReadByte(0x03A6) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bHasRequestedVelocity
		/// Type: BoolProperty
		/// Offset: 0x3A6
		/// Size: 0x01
		/// </summary>
		public bool bHasRequestedVelocity => (ReadByte(0x03A6) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bRequestedMoveWithMaxSpeed
		/// Type: BoolProperty
		/// Offset: 0x3A6
		/// Size: 0x01
		/// </summary>
		public bool bRequestedMoveWithMaxSpeed => (ReadByte(0x03A6) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bWasAvoidanceUpdated
		/// Type: BoolProperty
		/// Offset: 0x3A6
		/// Size: 0x01
		/// </summary>
		public bool bWasAvoidanceUpdated => (ReadByte(0x03A6) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bProjectNavMeshWalking
		/// Type: BoolProperty
		/// Offset: 0x3A7
		/// Size: 0x01
		/// </summary>
		public bool bProjectNavMeshWalking => (ReadByte(0x03A7) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bSwitchToWalkingIfNoNavData
		/// Type: BoolProperty
		/// Offset: 0x3A7
		/// Size: 0x01
		/// </summary>
		public bool bSwitchToWalkingIfNoNavData => (ReadByte(0x03A7) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bProjectNavMeshOnBothWorldChannels
		/// Type: BoolProperty
		/// Offset: 0x3A7
		/// Size: 0x01
		/// </summary>
		public bool bProjectNavMeshOnBothWorldChannels => (ReadByte(0x03A7) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bForceSweepWhenNavWalking
		/// Type: BoolProperty
		/// Offset: 0x3A7
		/// Size: 0x01
		/// </summary>
		public bool bForceSweepWhenNavWalking => (ReadByte(0x03A7) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bAssumeServerIsNavWalkingInSimulateMovement
		/// Type: BoolProperty
		/// Offset: 0x3A7
		/// Size: 0x01
		/// </summary>
		public bool bAssumeServerIsNavWalkingInSimulateMovement => (ReadByte(0x03A7) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: AvoidanceConsiderationRadius
		/// Type: FloatProperty
		/// Offset: 0x3BC
		/// Size: 0x04
		/// </summary>
		public float AvoidanceConsiderationRadius
		{
			get
			{
				return ReadSingle(0x3BC);
			}
			set
			{
				WriteSingle(0x3BC,value);
			}
		}
		
		/// <summary>
		/// Name: RequestedVelocity
		/// Type: StructProperty
		/// Offset: 0x3C0
		/// Size: 0x0C
		/// </summary>
		public FVector RequestedVelocity => ReadStruct<FVector>(0x3C0);
		
		/// <summary>
		/// Name: AvoidanceUID
		/// Type: IntProperty
		/// Offset: 0x3CC
		/// Size: 0x04
		/// </summary>
		public int AvoidanceUID
		{
			get
			{
				return ReadInt32(0x3CC);
			}
			set
			{
				WriteInt32(0x3CC,value);
			}
		}
		
		/// <summary>
		/// Name: AvoidanceGroup
		/// Type: StructProperty
		/// Offset: 0x3D0
		/// Size: 0x04
		/// </summary>
		public FNavAvoidanceMask AvoidanceGroup => ReadStruct<FNavAvoidanceMask>(0x3D0);
		
		/// <summary>
		/// Name: GroupsToAvoid
		/// Type: StructProperty
		/// Offset: 0x3D4
		/// Size: 0x04
		/// </summary>
		public FNavAvoidanceMask GroupsToAvoid => ReadStruct<FNavAvoidanceMask>(0x3D4);
		
		/// <summary>
		/// Name: GroupsToIgnore
		/// Type: StructProperty
		/// Offset: 0x3D8
		/// Size: 0x04
		/// </summary>
		public FNavAvoidanceMask GroupsToIgnore => ReadStruct<FNavAvoidanceMask>(0x3D8);
		
		/// <summary>
		/// Name: AvoidanceWeight
		/// Type: FloatProperty
		/// Offset: 0x3DC
		/// Size: 0x04
		/// </summary>
		public float AvoidanceWeight
		{
			get
			{
				return ReadSingle(0x3DC);
			}
			set
			{
				WriteSingle(0x3DC,value);
			}
		}
		
		/// <summary>
		/// Name: PendingLaunchVelocity
		/// Type: StructProperty
		/// Offset: 0x3E0
		/// Size: 0x0C
		/// </summary>
		public FVector PendingLaunchVelocity => ReadStruct<FVector>(0x3E0);
		
		/// <summary>
		/// Name: NavMeshProjectionInterval
		/// Type: FloatProperty
		/// Offset: 0x490
		/// Size: 0x04
		/// </summary>
		public float NavMeshProjectionInterval
		{
			get
			{
				return ReadSingle(0x490);
			}
			set
			{
				WriteSingle(0x490,value);
			}
		}
		
		/// <summary>
		/// Name: NavMeshProjectionTimer
		/// Type: FloatProperty
		/// Offset: 0x494
		/// Size: 0x04
		/// </summary>
		public float NavMeshProjectionTimer
		{
			get
			{
				return ReadSingle(0x494);
			}
			set
			{
				WriteSingle(0x494,value);
			}
		}
		
		/// <summary>
		/// Name: NavMeshProjectionInterpSpeed
		/// Type: FloatProperty
		/// Offset: 0x498
		/// Size: 0x04
		/// </summary>
		public float NavMeshProjectionInterpSpeed
		{
			get
			{
				return ReadSingle(0x498);
			}
			set
			{
				WriteSingle(0x498,value);
			}
		}
		
		/// <summary>
		/// Name: NavMeshProjectionHeightScaleUp
		/// Type: FloatProperty
		/// Offset: 0x49C
		/// Size: 0x04
		/// </summary>
		public float NavMeshProjectionHeightScaleUp
		{
			get
			{
				return ReadSingle(0x49C);
			}
			set
			{
				WriteSingle(0x49C,value);
			}
		}
		
		/// <summary>
		/// Name: NavMeshProjectionHeightScaleDown
		/// Type: FloatProperty
		/// Offset: 0x4A0
		/// Size: 0x04
		/// </summary>
		public float NavMeshProjectionHeightScaleDown
		{
			get
			{
				return ReadSingle(0x4A0);
			}
			set
			{
				WriteSingle(0x4A0,value);
			}
		}
		
		/// <summary>
		/// Name: PostPhysicsTickFunction
		/// Type: StructProperty
		/// Offset: 0x4A8
		/// Size: 0x60
		/// </summary>
		public FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction => ReadStruct<FCharacterMovementComponentPostPhysicsTickFunction>(0x4A8);
		
		/// <summary>
		/// Name: MinTimeBetweenTimeStampResets
		/// Type: FloatProperty
		/// Offset: 0x518
		/// Size: 0x04
		/// </summary>
		public float MinTimeBetweenTimeStampResets
		{
			get
			{
				return ReadSingle(0x518);
			}
			set
			{
				WriteSingle(0x518,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentRootMotion
		/// Type: StructProperty
		/// Offset: 0x520
		/// Size: 0x100
		/// </summary>
		public FRootMotionSourceGroup CurrentRootMotion => ReadStruct<FRootMotionSourceGroup>(0x520);
		
		/// <summary>
		/// Name: RootMotionParams
		/// Type: StructProperty
		/// Offset: 0x6B0
		/// Size: 0x40
		/// </summary>
		public FRootMotionMovementParams RootMotionParams => ReadStruct<FRootMotionMovementParams>(0x6B0);
		
		/// <summary>
		/// Name: bWasSimulatingRootMotion
		/// Type: BoolProperty
		/// Offset: 0x6F0
		/// Size: 0x01
		/// </summary>
		public bool bWasSimulatingRootMotion
		{
			get
			{
				return ReadBool(0x6F0);
			}
			set
			{
				WriteBool(0x6F0,value);
			}
		}
		
	}


	/// <summary>
	/// UFloatingPawnMovement:UPawnMovementComponent
	/// Size: 0x188
	/// Properties: 5
	/// </summary>
	public class UFloatingPawnMovement:UPawnMovementComponent
	{
		public override int ObjectSize => 392;
		/// <summary>
		/// Name: MaxSpeed
		/// Type: FloatProperty
		/// Offset: 0x170
		/// Size: 0x04
		/// </summary>
		public float MaxSpeed
		{
			get
			{
				return ReadSingle(0x170);
			}
			set
			{
				WriteSingle(0x170,value);
			}
		}
		
		/// <summary>
		/// Name: Acceleration
		/// Type: FloatProperty
		/// Offset: 0x174
		/// Size: 0x04
		/// </summary>
		public float Acceleration
		{
			get
			{
				return ReadSingle(0x174);
			}
			set
			{
				WriteSingle(0x174,value);
			}
		}
		
		/// <summary>
		/// Name: Deceleration
		/// Type: FloatProperty
		/// Offset: 0x178
		/// Size: 0x04
		/// </summary>
		public float Deceleration
		{
			get
			{
				return ReadSingle(0x178);
			}
			set
			{
				WriteSingle(0x178,value);
			}
		}
		
		/// <summary>
		/// Name: TurningBoost
		/// Type: FloatProperty
		/// Offset: 0x17C
		/// Size: 0x04
		/// </summary>
		public float TurningBoost
		{
			get
			{
				return ReadSingle(0x17C);
			}
			set
			{
				WriteSingle(0x17C,value);
			}
		}
		
		/// <summary>
		/// Name: bPositionCorrected
		/// Type: BoolProperty
		/// Offset: 0x180
		/// Size: 0x01
		/// </summary>
		public bool bPositionCorrected => (ReadByte(0x0180) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// USpectatorPawnMovement:UFloatingPawnMovement
	/// Size: 0x190
	/// Properties: 1
	/// </summary>
	public class USpectatorPawnMovement:UFloatingPawnMovement
	{
		public override int ObjectSize => 400;
		/// <summary>
		/// Name: bIgnoreTimeDilation
		/// Type: BoolProperty
		/// Offset: 0x188
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreTimeDilation => (ReadByte(0x0188) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UWheeledVehicleMovementComponent:UPawnMovementComponent
	/// Size: 0x2B8
	/// Properties: 48
	/// </summary>
	public class UWheeledVehicleMovementComponent:UPawnMovementComponent
	{
		public override int ObjectSize => 696;
		/// <summary>
		/// Name: WheelSetups
		/// Type: TArray<FWheelSetup>
		/// Offset: 0x178
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FWheelSetup> WheelSetups => new TArray<FWheelSetup>(BaseAddress+0x178);
		
		/// <summary>
		/// Name: Mass
		/// Type: FloatProperty
		/// Offset: 0x188
		/// Size: 0x04
		/// </summary>
		public float Mass
		{
			get
			{
				return ReadSingle(0x188);
			}
			set
			{
				WriteSingle(0x188,value);
			}
		}
		
		/// <summary>
		/// Name: DragCoefficient
		/// Type: FloatProperty
		/// Offset: 0x18C
		/// Size: 0x04
		/// </summary>
		public float DragCoefficient
		{
			get
			{
				return ReadSingle(0x18C);
			}
			set
			{
				WriteSingle(0x18C,value);
			}
		}
		
		/// <summary>
		/// Name: ChassisWidth
		/// Type: FloatProperty
		/// Offset: 0x190
		/// Size: 0x04
		/// </summary>
		public float ChassisWidth
		{
			get
			{
				return ReadSingle(0x190);
			}
			set
			{
				WriteSingle(0x190,value);
			}
		}
		
		/// <summary>
		/// Name: ChassisHeight
		/// Type: FloatProperty
		/// Offset: 0x194
		/// Size: 0x04
		/// </summary>
		public float ChassisHeight
		{
			get
			{
				return ReadSingle(0x194);
			}
			set
			{
				WriteSingle(0x194,value);
			}
		}
		
		/// <summary>
		/// Name: DragArea
		/// Type: FloatProperty
		/// Offset: 0x198
		/// Size: 0x04
		/// </summary>
		public float DragArea
		{
			get
			{
				return ReadSingle(0x198);
			}
			set
			{
				WriteSingle(0x198,value);
			}
		}
		
		/// <summary>
		/// Name: EstimatedMaxEngineSpeed
		/// Type: FloatProperty
		/// Offset: 0x19C
		/// Size: 0x04
		/// </summary>
		public float EstimatedMaxEngineSpeed
		{
			get
			{
				return ReadSingle(0x19C);
			}
			set
			{
				WriteSingle(0x19C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxEngineRPM
		/// Type: FloatProperty
		/// Offset: 0x1A0
		/// Size: 0x04
		/// </summary>
		public float MaxEngineRPM
		{
			get
			{
				return ReadSingle(0x1A0);
			}
			set
			{
				WriteSingle(0x1A0,value);
			}
		}
		
		/// <summary>
		/// Name: DebugDragMagnitude
		/// Type: FloatProperty
		/// Offset: 0x1A4
		/// Size: 0x04
		/// </summary>
		public float DebugDragMagnitude
		{
			get
			{
				return ReadSingle(0x1A4);
			}
			set
			{
				WriteSingle(0x1A4,value);
			}
		}
		
		/// <summary>
		/// Name: InertiaTensorScale
		/// Type: StructProperty
		/// Offset: 0x1A8
		/// Size: 0x0C
		/// </summary>
		public FVector InertiaTensorScale => ReadStruct<FVector>(0x1A8);
		
		/// <summary>
		/// Name: MinNormalizedTireLoad
		/// Type: FloatProperty
		/// Offset: 0x1B4
		/// Size: 0x04
		/// </summary>
		public float MinNormalizedTireLoad
		{
			get
			{
				return ReadSingle(0x1B4);
			}
			set
			{
				WriteSingle(0x1B4,value);
			}
		}
		
		/// <summary>
		/// Name: MinNormalizedTireLoadFiltered
		/// Type: FloatProperty
		/// Offset: 0x1B8
		/// Size: 0x04
		/// </summary>
		public float MinNormalizedTireLoadFiltered
		{
			get
			{
				return ReadSingle(0x1B8);
			}
			set
			{
				WriteSingle(0x1B8,value);
			}
		}
		
		/// <summary>
		/// Name: MaxNormalizedTireLoad
		/// Type: FloatProperty
		/// Offset: 0x1BC
		/// Size: 0x04
		/// </summary>
		public float MaxNormalizedTireLoad
		{
			get
			{
				return ReadSingle(0x1BC);
			}
			set
			{
				WriteSingle(0x1BC,value);
			}
		}
		
		/// <summary>
		/// Name: MaxNormalizedTireLoadFiltered
		/// Type: FloatProperty
		/// Offset: 0x1C0
		/// Size: 0x04
		/// </summary>
		public float MaxNormalizedTireLoadFiltered
		{
			get
			{
				return ReadSingle(0x1C0);
			}
			set
			{
				WriteSingle(0x1C0,value);
			}
		}
		
		/// <summary>
		/// Name: ThresholdLongitudinalSpeed
		/// Type: FloatProperty
		/// Offset: 0x1C4
		/// Size: 0x04
		/// </summary>
		public float ThresholdLongitudinalSpeed
		{
			get
			{
				return ReadSingle(0x1C4);
			}
			set
			{
				WriteSingle(0x1C4,value);
			}
		}
		
		/// <summary>
		/// Name: LowForwardSpeedSubStepCount
		/// Type: IntProperty
		/// Offset: 0x1C8
		/// Size: 0x04
		/// </summary>
		public int LowForwardSpeedSubStepCount
		{
			get
			{
				return ReadInt32(0x1C8);
			}
			set
			{
				WriteInt32(0x1C8,value);
			}
		}
		
		/// <summary>
		/// Name: HighForwardSpeedSubStepCount
		/// Type: IntProperty
		/// Offset: 0x1CC
		/// Size: 0x04
		/// </summary>
		public int HighForwardSpeedSubStepCount
		{
			get
			{
				return ReadInt32(0x1CC);
			}
			set
			{
				WriteInt32(0x1CC,value);
			}
		}
		
		/// <summary>
		/// Name: Wheels
		/// Type: TArray<UVehicleWheel>
		/// Offset: 0x1D0
		/// Size: 0x10
		/// SubElement Size: 0xD8
		/// </summary>
		public TArray<UVehicleWheel> Wheels => new TArray<UVehicleWheel>(BaseAddress+0x1D0);
		
		/// <summary>
		/// Name: bUseRVOAvoidance
		/// Type: BoolProperty
		/// Offset: 0x1F8
		/// Size: 0x01
		/// </summary>
		public bool bUseRVOAvoidance => (ReadByte(0x01F8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: RVOAvoidanceRadius
		/// Type: FloatProperty
		/// Offset: 0x1FC
		/// Size: 0x04
		/// </summary>
		public float RVOAvoidanceRadius
		{
			get
			{
				return ReadSingle(0x1FC);
			}
			set
			{
				WriteSingle(0x1FC,value);
			}
		}
		
		/// <summary>
		/// Name: RVOAvoidanceHeight
		/// Type: FloatProperty
		/// Offset: 0x200
		/// Size: 0x04
		/// </summary>
		public float RVOAvoidanceHeight
		{
			get
			{
				return ReadSingle(0x200);
			}
			set
			{
				WriteSingle(0x200,value);
			}
		}
		
		/// <summary>
		/// Name: AvoidanceConsiderationRadius
		/// Type: FloatProperty
		/// Offset: 0x204
		/// Size: 0x04
		/// </summary>
		public float AvoidanceConsiderationRadius
		{
			get
			{
				return ReadSingle(0x204);
			}
			set
			{
				WriteSingle(0x204,value);
			}
		}
		
		/// <summary>
		/// Name: RVOSteeringStep
		/// Type: FloatProperty
		/// Offset: 0x208
		/// Size: 0x04
		/// </summary>
		public float RVOSteeringStep
		{
			get
			{
				return ReadSingle(0x208);
			}
			set
			{
				WriteSingle(0x208,value);
			}
		}
		
		/// <summary>
		/// Name: RVOThrottleStep
		/// Type: FloatProperty
		/// Offset: 0x20C
		/// Size: 0x04
		/// </summary>
		public float RVOThrottleStep
		{
			get
			{
				return ReadSingle(0x20C);
			}
			set
			{
				WriteSingle(0x20C,value);
			}
		}
		
		/// <summary>
		/// Name: AvoidanceUID
		/// Type: IntProperty
		/// Offset: 0x210
		/// Size: 0x04
		/// </summary>
		public int AvoidanceUID
		{
			get
			{
				return ReadInt32(0x210);
			}
			set
			{
				WriteInt32(0x210,value);
			}
		}
		
		/// <summary>
		/// Name: AvoidanceGroup
		/// Type: StructProperty
		/// Offset: 0x214
		/// Size: 0x04
		/// </summary>
		public FNavAvoidanceMask AvoidanceGroup => ReadStruct<FNavAvoidanceMask>(0x214);
		
		/// <summary>
		/// Name: GroupsToAvoid
		/// Type: StructProperty
		/// Offset: 0x218
		/// Size: 0x04
		/// </summary>
		public FNavAvoidanceMask GroupsToAvoid => ReadStruct<FNavAvoidanceMask>(0x218);
		
		/// <summary>
		/// Name: GroupsToIgnore
		/// Type: StructProperty
		/// Offset: 0x21C
		/// Size: 0x04
		/// </summary>
		public FNavAvoidanceMask GroupsToIgnore => ReadStruct<FNavAvoidanceMask>(0x21C);
		
		/// <summary>
		/// Name: AvoidanceWeight
		/// Type: FloatProperty
		/// Offset: 0x220
		/// Size: 0x04
		/// </summary>
		public float AvoidanceWeight
		{
			get
			{
				return ReadSingle(0x220);
			}
			set
			{
				WriteSingle(0x220,value);
			}
		}
		
		/// <summary>
		/// Name: PendingLaunchVelocity
		/// Type: StructProperty
		/// Offset: 0x224
		/// Size: 0x0C
		/// </summary>
		public FVector PendingLaunchVelocity => ReadStruct<FVector>(0x224);
		
		/// <summary>
		/// Name: ReplicatedState
		/// Type: StructProperty
		/// Offset: 0x230
		/// Size: 0x14
		/// </summary>
		public FReplicatedVehicleState ReplicatedState => ReadStruct<FReplicatedVehicleState>(0x230);
		
		/// <summary>
		/// Name: RawSteeringInput
		/// Type: FloatProperty
		/// Offset: 0x248
		/// Size: 0x04
		/// </summary>
		public float RawSteeringInput
		{
			get
			{
				return ReadSingle(0x248);
			}
			set
			{
				WriteSingle(0x248,value);
			}
		}
		
		/// <summary>
		/// Name: RawThrottleInput
		/// Type: FloatProperty
		/// Offset: 0x24C
		/// Size: 0x04
		/// </summary>
		public float RawThrottleInput
		{
			get
			{
				return ReadSingle(0x24C);
			}
			set
			{
				WriteSingle(0x24C,value);
			}
		}
		
		/// <summary>
		/// Name: bRawHandbrakeInput
		/// Type: BoolProperty
		/// Offset: 0x250
		/// Size: 0x01
		/// </summary>
		public bool bRawHandbrakeInput => (ReadByte(0x0250) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bRawGearUpInput
		/// Type: BoolProperty
		/// Offset: 0x250
		/// Size: 0x01
		/// </summary>
		public bool bRawGearUpInput => (ReadByte(0x0250) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bRawGearDownInput
		/// Type: BoolProperty
		/// Offset: 0x250
		/// Size: 0x01
		/// </summary>
		public bool bRawGearDownInput => (ReadByte(0x0250) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: SteeringInput
		/// Type: FloatProperty
		/// Offset: 0x254
		/// Size: 0x04
		/// </summary>
		public float SteeringInput
		{
			get
			{
				return ReadSingle(0x254);
			}
			set
			{
				WriteSingle(0x254,value);
			}
		}
		
		/// <summary>
		/// Name: ThrottleInput
		/// Type: FloatProperty
		/// Offset: 0x258
		/// Size: 0x04
		/// </summary>
		public float ThrottleInput
		{
			get
			{
				return ReadSingle(0x258);
			}
			set
			{
				WriteSingle(0x258,value);
			}
		}
		
		/// <summary>
		/// Name: BrakeInput
		/// Type: FloatProperty
		/// Offset: 0x25C
		/// Size: 0x04
		/// </summary>
		public float BrakeInput
		{
			get
			{
				return ReadSingle(0x25C);
			}
			set
			{
				WriteSingle(0x25C,value);
			}
		}
		
		/// <summary>
		/// Name: HandbrakeInput
		/// Type: FloatProperty
		/// Offset: 0x260
		/// Size: 0x04
		/// </summary>
		public float HandbrakeInput
		{
			get
			{
				return ReadSingle(0x260);
			}
			set
			{
				WriteSingle(0x260,value);
			}
		}
		
		/// <summary>
		/// Name: IdleBrakeInput
		/// Type: FloatProperty
		/// Offset: 0x264
		/// Size: 0x04
		/// </summary>
		public float IdleBrakeInput
		{
			get
			{
				return ReadSingle(0x264);
			}
			set
			{
				WriteSingle(0x264,value);
			}
		}
		
		/// <summary>
		/// Name: StopThreshold
		/// Type: FloatProperty
		/// Offset: 0x268
		/// Size: 0x04
		/// </summary>
		public float StopThreshold
		{
			get
			{
				return ReadSingle(0x268);
			}
			set
			{
				WriteSingle(0x268,value);
			}
		}
		
		/// <summary>
		/// Name: WrongDirectionThreshold
		/// Type: FloatProperty
		/// Offset: 0x26C
		/// Size: 0x04
		/// </summary>
		public float WrongDirectionThreshold
		{
			get
			{
				return ReadSingle(0x26C);
			}
			set
			{
				WriteSingle(0x26C,value);
			}
		}
		
		/// <summary>
		/// Name: ThrottleInputRate
		/// Type: StructProperty
		/// Offset: 0x270
		/// Size: 0x08
		/// </summary>
		public FVehicleInputRate ThrottleInputRate => ReadStruct<FVehicleInputRate>(0x270);
		
		/// <summary>
		/// Name: BrakeInputRate
		/// Type: StructProperty
		/// Offset: 0x278
		/// Size: 0x08
		/// </summary>
		public FVehicleInputRate BrakeInputRate => ReadStruct<FVehicleInputRate>(0x278);
		
		/// <summary>
		/// Name: HandbrakeInputRate
		/// Type: StructProperty
		/// Offset: 0x280
		/// Size: 0x08
		/// </summary>
		public FVehicleInputRate HandbrakeInputRate => ReadStruct<FVehicleInputRate>(0x280);
		
		/// <summary>
		/// Name: SteeringInputRate
		/// Type: StructProperty
		/// Offset: 0x288
		/// Size: 0x08
		/// </summary>
		public FVehicleInputRate SteeringInputRate => ReadStruct<FVehicleInputRate>(0x288);
		
		/// <summary>
		/// Name: bWasAvoidanceUpdated
		/// Type: BoolProperty
		/// Offset: 0x290
		/// Size: 0x01
		/// </summary>
		public bool bWasAvoidanceUpdated => (ReadByte(0x0290) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UWheeledVehicleMovementComponent4W:UWheeledVehicleMovementComponent
	/// Size: 0x428
	/// Properties: 5
	/// </summary>
	public class UWheeledVehicleMovementComponent4W:UWheeledVehicleMovementComponent
	{
		public override int ObjectSize => 1064;
		/// <summary>
		/// Name: EngineSetup
		/// Type: StructProperty
		/// Offset: 0x2B8
		/// Size: 0x98
		/// </summary>
		public FVehicleEngineData EngineSetup => ReadStruct<FVehicleEngineData>(0x2B8);
		
		/// <summary>
		/// Name: DifferentialSetup
		/// Type: StructProperty
		/// Offset: 0x350
		/// Size: 0x1C
		/// </summary>
		public FVehicleDifferential4WData DifferentialSetup => ReadStruct<FVehicleDifferential4WData>(0x350);
		
		/// <summary>
		/// Name: TransmissionSetup
		/// Type: StructProperty
		/// Offset: 0x370
		/// Size: 0x30
		/// </summary>
		public FVehicleTransmissionData TransmissionSetup => ReadStruct<FVehicleTransmissionData>(0x370);
		
		/// <summary>
		/// Name: SteeringCurve
		/// Type: StructProperty
		/// Offset: 0x3A0
		/// Size: 0x80
		/// </summary>
		public FRuntimeFloatCurve SteeringCurve => ReadStruct<FRuntimeFloatCurve>(0x3A0);
		
		/// <summary>
		/// Name: AckermannAccuracy
		/// Type: FloatProperty
		/// Offset: 0x420
		/// Size: 0x04
		/// </summary>
		public float AckermannAccuracy
		{
			get
			{
				return ReadSingle(0x420);
			}
			set
			{
				WriteSingle(0x420,value);
			}
		}
		
	}


	/// <summary>
	/// URotatingMovementComponent:UMovementComponent
	/// Size: 0x150
	/// Properties: 3
	/// </summary>
	public class URotatingMovementComponent:UMovementComponent
	{
		public override int ObjectSize => 336;
		/// <summary>
		/// Name: RotationRate
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x0C
		/// </summary>
		public FRotator RotationRate => ReadStruct<FRotator>(0x130);
		
		/// <summary>
		/// Name: PivotTranslation
		/// Type: StructProperty
		/// Offset: 0x13C
		/// Size: 0x0C
		/// </summary>
		public FVector PivotTranslation => ReadStruct<FVector>(0x13C);
		
		/// <summary>
		/// Name: bRotationInLocalSpace
		/// Type: BoolProperty
		/// Offset: 0x148
		/// Size: 0x01
		/// </summary>
		public bool bRotationInLocalSpace => (ReadByte(0x0148) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UNavigationInvokerComponent:UActorComponent
	/// Size: 0xE8
	/// Properties: 3
	/// </summary>
	public class UNavigationInvokerComponent:UActorComponent
	{
		public override int ObjectSize => 232;
		/// <summary>
		/// Name: TileGenerationRadius
		/// Type: FloatProperty
		/// Offset: 0xD8
		/// Size: 0x04
		/// </summary>
		public float TileGenerationRadius
		{
			get
			{
				return ReadSingle(0xD8);
			}
			set
			{
				WriteSingle(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: TileRemovalRadius
		/// Type: FloatProperty
		/// Offset: 0xDC
		/// Size: 0x04
		/// </summary>
		public float TileRemovalRadius
		{
			get
			{
				return ReadSingle(0xDC);
			}
			set
			{
				WriteSingle(0xDC,value);
			}
		}
		
		/// <summary>
		/// Name: NavDataConfigName
		/// Type: NameProperty
		/// Offset: 0xE0
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UNavRelevantComponent:UActorComponent
	/// Size: 0x108
	/// Properties: 2
	/// </summary>
	public class UNavRelevantComponent:UActorComponent
	{
		public override int ObjectSize => 264;
		/// <summary>
		/// Name: bAttachToOwnersRoot
		/// Type: BoolProperty
		/// Offset: 0xFC
		/// Size: 0x01
		/// </summary>
		public bool bAttachToOwnersRoot => (ReadByte(0x00FC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CachedNavParent
		/// Type: ObjectProperty
		/// Offset: 0x100
		/// Size: 0x08
		/// </summary>
		public UObject CachedNavParent => ReadUObject<UObject>(0x100);
		
	}


	/// <summary>
	/// UNavLinkCustomInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNavLinkCustomInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UNavLinkCustomComponent:UNavRelevantComponent
	/// Size: 0x220
	/// Properties: 16
	/// </summary>
	public class UNavLinkCustomComponent:UNavRelevantComponent
	{
		public override int ObjectSize => 544;
		/// <summary>
		/// Name: NavLinkUserId
		/// Type: UInt32Property
		/// Offset: 0x110
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: EnabledAreaClass
		/// Type: ClassProperty
		/// Offset: 0x118
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: DisabledAreaClass
		/// Type: ClassProperty
		/// Offset: 0x120
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: LinkRelativeStart
		/// Type: StructProperty
		/// Offset: 0x128
		/// Size: 0x0C
		/// </summary>
		public FVector LinkRelativeStart => ReadStruct<FVector>(0x128);
		
		/// <summary>
		/// Name: LinkRelativeEnd
		/// Type: StructProperty
		/// Offset: 0x134
		/// Size: 0x0C
		/// </summary>
		public FVector LinkRelativeEnd => ReadStruct<FVector>(0x134);
		
		/// <summary>
		/// Name: LinkDirection
		/// Type: ByteProperty
		/// Offset: 0x140
		/// Size: 0x01
		/// </summary>
		public byte LinkDirection
		{
			get
			{
				return ReadByte(0x140);
			}
			set
			{
				WriteByte(0x140,value);
			}
		}
		
		/// <summary>
		/// Name: bLinkEnabled
		/// Type: BoolProperty
		/// Offset: 0x144
		/// Size: 0x01
		/// </summary>
		public bool bLinkEnabled => (ReadByte(0x0144) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bNotifyWhenEnabled
		/// Type: BoolProperty
		/// Offset: 0x144
		/// Size: 0x01
		/// </summary>
		public bool bNotifyWhenEnabled => (ReadByte(0x0144) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bNotifyWhenDisabled
		/// Type: BoolProperty
		/// Offset: 0x144
		/// Size: 0x01
		/// </summary>
		public bool bNotifyWhenDisabled => (ReadByte(0x0144) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bCreateBoxObstacle
		/// Type: BoolProperty
		/// Offset: 0x144
		/// Size: 0x01
		/// </summary>
		public bool bCreateBoxObstacle => (ReadByte(0x0144) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: ObstacleOffset
		/// Type: StructProperty
		/// Offset: 0x148
		/// Size: 0x0C
		/// </summary>
		public FVector ObstacleOffset => ReadStruct<FVector>(0x148);
		
		/// <summary>
		/// Name: ObstacleExtent
		/// Type: StructProperty
		/// Offset: 0x154
		/// Size: 0x0C
		/// </summary>
		public FVector ObstacleExtent => ReadStruct<FVector>(0x154);
		
		/// <summary>
		/// Name: ObstacleAreaClass
		/// Type: ClassProperty
		/// Offset: 0x160
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: BroadcastRadius
		/// Type: FloatProperty
		/// Offset: 0x168
		/// Size: 0x04
		/// </summary>
		public float BroadcastRadius
		{
			get
			{
				return ReadSingle(0x168);
			}
			set
			{
				WriteSingle(0x168,value);
			}
		}
		
		/// <summary>
		/// Name: BroadcastInterval
		/// Type: FloatProperty
		/// Offset: 0x16C
		/// Size: 0x04
		/// </summary>
		public float BroadcastInterval
		{
			get
			{
				return ReadSingle(0x16C);
			}
			set
			{
				WriteSingle(0x16C,value);
			}
		}
		
		/// <summary>
		/// Name: BroadcastChannel
		/// Type: ByteProperty
		/// Offset: 0x170
		/// Size: 0x01
		/// </summary>
		public byte BroadcastChannel
		{
			get
			{
				return ReadByte(0x170);
			}
			set
			{
				WriteByte(0x170,value);
			}
		}
		
	}


	/// <summary>
	/// UNavModifierComponent:UNavRelevantComponent
	/// Size: 0x130
	/// Properties: 2
	/// </summary>
	public class UNavModifierComponent:UNavRelevantComponent
	{
		public override int ObjectSize => 304;
		/// <summary>
		/// Name: AreaClass
		/// Type: ClassProperty
		/// Offset: 0x108
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: FailsafeExtent
		/// Type: StructProperty
		/// Offset: 0x110
		/// Size: 0x0C
		/// </summary>
		public FVector FailsafeExtent => ReadStruct<FVector>(0x110);
		
	}


	/// <summary>
	/// UPawnNoiseEmitterComponent:UActorComponent
	/// Size: 0x100
	/// Properties: 7
	/// </summary>
	public class UPawnNoiseEmitterComponent:UActorComponent
	{
		public override int ObjectSize => 256;
		/// <summary>
		/// Name: bAIPerceptionSystemCompatibilityMode
		/// Type: BoolProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public bool bAIPerceptionSystemCompatibilityMode => (ReadByte(0x00D8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LastRemoteNoisePosition
		/// Type: StructProperty
		/// Offset: 0xDC
		/// Size: 0x0C
		/// </summary>
		public FVector LastRemoteNoisePosition => ReadStruct<FVector>(0xDC);
		
		/// <summary>
		/// Name: NoiseLifetime
		/// Type: FloatProperty
		/// Offset: 0xE8
		/// Size: 0x04
		/// </summary>
		public float NoiseLifetime
		{
			get
			{
				return ReadSingle(0xE8);
			}
			set
			{
				WriteSingle(0xE8,value);
			}
		}
		
		/// <summary>
		/// Name: LastRemoteNoiseVolume
		/// Type: FloatProperty
		/// Offset: 0xEC
		/// Size: 0x04
		/// </summary>
		public float LastRemoteNoiseVolume
		{
			get
			{
				return ReadSingle(0xEC);
			}
			set
			{
				WriteSingle(0xEC,value);
			}
		}
		
		/// <summary>
		/// Name: LastRemoteNoiseTime
		/// Type: FloatProperty
		/// Offset: 0xF0
		/// Size: 0x04
		/// </summary>
		public float LastRemoteNoiseTime
		{
			get
			{
				return ReadSingle(0xF0);
			}
			set
			{
				WriteSingle(0xF0,value);
			}
		}
		
		/// <summary>
		/// Name: LastLocalNoiseVolume
		/// Type: FloatProperty
		/// Offset: 0xF4
		/// Size: 0x04
		/// </summary>
		public float LastLocalNoiseVolume
		{
			get
			{
				return ReadSingle(0xF4);
			}
			set
			{
				WriteSingle(0xF4,value);
			}
		}
		
		/// <summary>
		/// Name: LastLocalNoiseTime
		/// Type: FloatProperty
		/// Offset: 0xF8
		/// Size: 0x04
		/// </summary>
		public float LastLocalNoiseTime
		{
			get
			{
				return ReadSingle(0xF8);
			}
			set
			{
				WriteSingle(0xF8,value);
			}
		}
		
	}


	/// <summary>
	/// UPhysicsHandleComponent:UActorComponent
	/// Size: 0x180
	/// Properties: 6
	/// </summary>
	public class UPhysicsHandleComponent:UActorComponent
	{
		public override int ObjectSize => 384;
		/// <summary>
		/// Name: GrabbedComponent
		/// Type: ObjectProperty
		/// Offset: 0xD8
		/// Size: 0x08
		/// </summary>
		public UPrimitiveComponent GrabbedComponent => ReadUObject<UPrimitiveComponent>(0xD8);
		
		/// <summary>
		/// Name: LinearDamping
		/// Type: FloatProperty
		/// Offset: 0xF0
		/// Size: 0x04
		/// </summary>
		public float LinearDamping
		{
			get
			{
				return ReadSingle(0xF0);
			}
			set
			{
				WriteSingle(0xF0,value);
			}
		}
		
		/// <summary>
		/// Name: LinearStiffness
		/// Type: FloatProperty
		/// Offset: 0xF4
		/// Size: 0x04
		/// </summary>
		public float LinearStiffness
		{
			get
			{
				return ReadSingle(0xF4);
			}
			set
			{
				WriteSingle(0xF4,value);
			}
		}
		
		/// <summary>
		/// Name: AngularDamping
		/// Type: FloatProperty
		/// Offset: 0xF8
		/// Size: 0x04
		/// </summary>
		public float AngularDamping
		{
			get
			{
				return ReadSingle(0xF8);
			}
			set
			{
				WriteSingle(0xF8,value);
			}
		}
		
		/// <summary>
		/// Name: AngularStiffness
		/// Type: FloatProperty
		/// Offset: 0xFC
		/// Size: 0x04
		/// </summary>
		public float AngularStiffness
		{
			get
			{
				return ReadSingle(0xFC);
			}
			set
			{
				WriteSingle(0xFC,value);
			}
		}
		
		/// <summary>
		/// Name: InterpolationSpeed
		/// Type: FloatProperty
		/// Offset: 0x160
		/// Size: 0x04
		/// </summary>
		public float InterpolationSpeed
		{
			get
			{
				return ReadSingle(0x160);
			}
			set
			{
				WriteSingle(0x160,value);
			}
		}
		
	}


	/// <summary>
	/// UPlatformEventsComponent:UActorComponent
	/// Size: 0xF8
	/// Properties: 0
	/// </summary>
	public class UPlatformEventsComponent:UActorComponent
	{
		public override int ObjectSize => 248;
	}


	/// <summary>
	/// UAtmosphericFogComponent:USceneComponent
	/// Size: 0x400
	/// Properties: 17
	/// </summary>
	public class UAtmosphericFogComponent:USceneComponent
	{
		public override int ObjectSize => 1024;
		/// <summary>
		/// Name: SunMultiplier
		/// Type: FloatProperty
		/// Offset: 0x218
		/// Size: 0x04
		/// </summary>
		public float SunMultiplier
		{
			get
			{
				return ReadSingle(0x218);
			}
			set
			{
				WriteSingle(0x218,value);
			}
		}
		
		/// <summary>
		/// Name: FogMultiplier
		/// Type: FloatProperty
		/// Offset: 0x21C
		/// Size: 0x04
		/// </summary>
		public float FogMultiplier
		{
			get
			{
				return ReadSingle(0x21C);
			}
			set
			{
				WriteSingle(0x21C,value);
			}
		}
		
		/// <summary>
		/// Name: DensityMultiplier
		/// Type: FloatProperty
		/// Offset: 0x220
		/// Size: 0x04
		/// </summary>
		public float DensityMultiplier
		{
			get
			{
				return ReadSingle(0x220);
			}
			set
			{
				WriteSingle(0x220,value);
			}
		}
		
		/// <summary>
		/// Name: DensityOffset
		/// Type: FloatProperty
		/// Offset: 0x224
		/// Size: 0x04
		/// </summary>
		public float DensityOffset
		{
			get
			{
				return ReadSingle(0x224);
			}
			set
			{
				WriteSingle(0x224,value);
			}
		}
		
		/// <summary>
		/// Name: DistanceScale
		/// Type: FloatProperty
		/// Offset: 0x228
		/// Size: 0x04
		/// </summary>
		public float DistanceScale
		{
			get
			{
				return ReadSingle(0x228);
			}
			set
			{
				WriteSingle(0x228,value);
			}
		}
		
		/// <summary>
		/// Name: AltitudeScale
		/// Type: FloatProperty
		/// Offset: 0x22C
		/// Size: 0x04
		/// </summary>
		public float AltitudeScale
		{
			get
			{
				return ReadSingle(0x22C);
			}
			set
			{
				WriteSingle(0x22C,value);
			}
		}
		
		/// <summary>
		/// Name: DistanceOffset
		/// Type: FloatProperty
		/// Offset: 0x230
		/// Size: 0x04
		/// </summary>
		public float DistanceOffset
		{
			get
			{
				return ReadSingle(0x230);
			}
			set
			{
				WriteSingle(0x230,value);
			}
		}
		
		/// <summary>
		/// Name: GroundOffset
		/// Type: FloatProperty
		/// Offset: 0x234
		/// Size: 0x04
		/// </summary>
		public float GroundOffset
		{
			get
			{
				return ReadSingle(0x234);
			}
			set
			{
				WriteSingle(0x234,value);
			}
		}
		
		/// <summary>
		/// Name: StartDistance
		/// Type: FloatProperty
		/// Offset: 0x238
		/// Size: 0x04
		/// </summary>
		public float StartDistance
		{
			get
			{
				return ReadSingle(0x238);
			}
			set
			{
				WriteSingle(0x238,value);
			}
		}
		
		/// <summary>
		/// Name: SunDiscScale
		/// Type: FloatProperty
		/// Offset: 0x23C
		/// Size: 0x04
		/// </summary>
		public float SunDiscScale
		{
			get
			{
				return ReadSingle(0x23C);
			}
			set
			{
				WriteSingle(0x23C,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultBrightness
		/// Type: FloatProperty
		/// Offset: 0x240
		/// Size: 0x04
		/// </summary>
		public float DefaultBrightness
		{
			get
			{
				return ReadSingle(0x240);
			}
			set
			{
				WriteSingle(0x240,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultLightColor
		/// Type: StructProperty
		/// Offset: 0x244
		/// Size: 0x04
		/// </summary>
		public FColor DefaultLightColor => ReadStruct<FColor>(0x244);
		
		/// <summary>
		/// Name: bDisableSunDisk
		/// Type: BoolProperty
		/// Offset: 0x248
		/// Size: 0x01
		/// </summary>
		public bool bDisableSunDisk => (ReadByte(0x0248) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDisableGroundScattering
		/// Type: BoolProperty
		/// Offset: 0x248
		/// Size: 0x01
		/// </summary>
		public bool bDisableGroundScattering => (ReadByte(0x0248) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: PrecomputeParams
		/// Type: StructProperty
		/// Offset: 0x24C
		/// Size: 0x2C
		/// </summary>
		public FAtmospherePrecomputeParameters PrecomputeParams => ReadStruct<FAtmospherePrecomputeParameters>(0x24C);
		
		/// <summary>
		/// Name: TransmittanceTexture
		/// Type: ObjectProperty
		/// Offset: 0x278
		/// Size: 0x08
		/// </summary>
		public UTexture2D TransmittanceTexture => ReadUObject<UTexture2D>(0x278);
		
		/// <summary>
		/// Name: IrradianceTexture
		/// Type: ObjectProperty
		/// Offset: 0x280
		/// Size: 0x08
		/// </summary>
		public UTexture2D IrradianceTexture => ReadUObject<UTexture2D>(0x280);
		
	}


	/// <summary>
	/// USoundAttenuation:UObject
	/// Size: 0x120
	/// Properties: 1
	/// </summary>
	public class USoundAttenuation:UObject
	{
		public override int ObjectSize => 288;
		/// <summary>
		/// Name: Attenuation
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0xF8
		/// </summary>
		public FAttenuationSettings Attenuation => ReadStruct<FAttenuationSettings>(0x28);
		
	}


	/// <summary>
	/// UChildActorComponent:USceneComponent
	/// Size: 0x240
	/// Properties: 2
	/// </summary>
	public class UChildActorComponent:USceneComponent
	{
		public override int ObjectSize => 576;
		/// <summary>
		/// Name: ChildActorClass
		/// Type: ClassProperty
		/// Offset: 0x218
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ChildActor
		/// Type: ObjectProperty
		/// Offset: 0x220
		/// Size: 0x08
		/// </summary>
		public AActor ChildActor => ReadUObject<AActor>(0x220);
		
	}


	/// <summary>
	/// UDecalComponent:USceneComponent
	/// Size: 0x250
	/// Properties: 7
	/// </summary>
	public class UDecalComponent:USceneComponent
	{
		public override int ObjectSize => 592;
		/// <summary>
		/// Name: DecalMaterial
		/// Type: ObjectProperty
		/// Offset: 0x218
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface DecalMaterial => ReadUObject<UMaterialInterface>(0x218);
		
		/// <summary>
		/// Name: SortOrder
		/// Type: IntProperty
		/// Offset: 0x220
		/// Size: 0x04
		/// </summary>
		public int SortOrder
		{
			get
			{
				return ReadInt32(0x220);
			}
			set
			{
				WriteInt32(0x220,value);
			}
		}
		
		/// <summary>
		/// Name: FadeScreenSize
		/// Type: FloatProperty
		/// Offset: 0x224
		/// Size: 0x04
		/// </summary>
		public float FadeScreenSize
		{
			get
			{
				return ReadSingle(0x224);
			}
			set
			{
				WriteSingle(0x224,value);
			}
		}
		
		/// <summary>
		/// Name: FadeStartDelay
		/// Type: FloatProperty
		/// Offset: 0x228
		/// Size: 0x04
		/// </summary>
		public float FadeStartDelay
		{
			get
			{
				return ReadSingle(0x228);
			}
			set
			{
				WriteSingle(0x228,value);
			}
		}
		
		/// <summary>
		/// Name: FadeDuration
		/// Type: FloatProperty
		/// Offset: 0x22C
		/// Size: 0x04
		/// </summary>
		public float FadeDuration
		{
			get
			{
				return ReadSingle(0x22C);
			}
			set
			{
				WriteSingle(0x22C,value);
			}
		}
		
		/// <summary>
		/// Name: bDestroyOwnerAfterFade
		/// Type: BoolProperty
		/// Offset: 0x230
		/// Size: 0x01
		/// </summary>
		public bool bDestroyOwnerAfterFade => (ReadByte(0x0230) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: DecalSize
		/// Type: StructProperty
		/// Offset: 0x234
		/// Size: 0x0C
		/// </summary>
		public FVector DecalSize => ReadStruct<FVector>(0x234);
		
	}


	/// <summary>
	/// UExponentialHeightFogComponent:USceneComponent
	/// Size: 0x250
	/// Properties: 8
	/// </summary>
	public class UExponentialHeightFogComponent:USceneComponent
	{
		public override int ObjectSize => 592;
		/// <summary>
		/// Name: FogDensity
		/// Type: FloatProperty
		/// Offset: 0x218
		/// Size: 0x04
		/// </summary>
		public float FogDensity
		{
			get
			{
				return ReadSingle(0x218);
			}
			set
			{
				WriteSingle(0x218,value);
			}
		}
		
		/// <summary>
		/// Name: FogInscatteringColor
		/// Type: StructProperty
		/// Offset: 0x21C
		/// Size: 0x10
		/// </summary>
		public FLinearColor FogInscatteringColor => ReadStruct<FLinearColor>(0x21C);
		
		/// <summary>
		/// Name: DirectionalInscatteringExponent
		/// Type: FloatProperty
		/// Offset: 0x22C
		/// Size: 0x04
		/// </summary>
		public float DirectionalInscatteringExponent
		{
			get
			{
				return ReadSingle(0x22C);
			}
			set
			{
				WriteSingle(0x22C,value);
			}
		}
		
		/// <summary>
		/// Name: DirectionalInscatteringStartDistance
		/// Type: FloatProperty
		/// Offset: 0x230
		/// Size: 0x04
		/// </summary>
		public float DirectionalInscatteringStartDistance
		{
			get
			{
				return ReadSingle(0x230);
			}
			set
			{
				WriteSingle(0x230,value);
			}
		}
		
		/// <summary>
		/// Name: DirectionalInscatteringColor
		/// Type: StructProperty
		/// Offset: 0x234
		/// Size: 0x10
		/// </summary>
		public FLinearColor DirectionalInscatteringColor => ReadStruct<FLinearColor>(0x234);
		
		/// <summary>
		/// Name: FogHeightFalloff
		/// Type: FloatProperty
		/// Offset: 0x244
		/// Size: 0x04
		/// </summary>
		public float FogHeightFalloff
		{
			get
			{
				return ReadSingle(0x244);
			}
			set
			{
				WriteSingle(0x244,value);
			}
		}
		
		/// <summary>
		/// Name: FogMaxOpacity
		/// Type: FloatProperty
		/// Offset: 0x248
		/// Size: 0x04
		/// </summary>
		public float FogMaxOpacity
		{
			get
			{
				return ReadSingle(0x248);
			}
			set
			{
				WriteSingle(0x248,value);
			}
		}
		
		/// <summary>
		/// Name: StartDistance
		/// Type: FloatProperty
		/// Offset: 0x24C
		/// Size: 0x04
		/// </summary>
		public float StartDistance
		{
			get
			{
				return ReadSingle(0x24C);
			}
			set
			{
				WriteSingle(0x24C,value);
			}
		}
		
	}


	/// <summary>
	/// USceneCaptureComponent:USceneComponent
	/// Size: 0x2A0
	/// Properties: 10
	/// </summary>
	public class USceneCaptureComponent:USceneComponent
	{
		public override int ObjectSize => 672;
		/// <summary>
		/// Name: HiddenComponents
		/// Type: TArray<>
		/// Offset: 0x218
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: ShowOnlyComponents
		/// Type: TArray<>
		/// Offset: 0x228
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: bCaptureEveryFrame
		/// Type: BoolProperty
		/// Offset: 0x238
		/// Size: 0x01
		/// </summary>
		public bool bCaptureEveryFrame
		{
			get
			{
				return ReadBool(0x238);
			}
			set
			{
				WriteBool(0x238,value);
			}
		}
		
		/// <summary>
		/// Name: MaxViewDistanceOverride
		/// Type: FloatProperty
		/// Offset: 0x23C
		/// Size: 0x04
		/// </summary>
		public float MaxViewDistanceOverride
		{
			get
			{
				return ReadSingle(0x23C);
			}
			set
			{
				WriteSingle(0x23C,value);
			}
		}
		
		/// <summary>
		/// Name: ShowFlagSettings
		/// Type: TArray<FEngineShowFlagsSetting>
		/// Offset: 0x240
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FEngineShowFlagsSetting> ShowFlagSettings => new TArray<FEngineShowFlagsSetting>(BaseAddress+0x240);
		
		/// <summary>
		/// Name: OrthoWidth
		/// Type: FloatProperty
		/// Offset: 0x258
		/// Size: 0x04
		/// </summary>
		public float OrthoWidth
		{
			get
			{
				return ReadSingle(0x258);
			}
			set
			{
				WriteSingle(0x258,value);
			}
		}
		
		/// <summary>
		/// Name: OrthoNearClipPlane
		/// Type: FloatProperty
		/// Offset: 0x25C
		/// Size: 0x04
		/// </summary>
		public float OrthoNearClipPlane
		{
			get
			{
				return ReadSingle(0x25C);
			}
			set
			{
				WriteSingle(0x25C,value);
			}
		}
		
		/// <summary>
		/// Name: OrthoFarClipPlane
		/// Type: FloatProperty
		/// Offset: 0x260
		/// Size: 0x04
		/// </summary>
		public float OrthoFarClipPlane
		{
			get
			{
				return ReadSingle(0x260);
			}
			set
			{
				WriteSingle(0x260,value);
			}
		}
		
		/// <summary>
		/// Name: AspectRatio
		/// Type: FloatProperty
		/// Offset: 0x264
		/// Size: 0x04
		/// </summary>
		public float AspectRatio
		{
			get
			{
				return ReadSingle(0x264);
			}
			set
			{
				WriteSingle(0x264,value);
			}
		}
		
		/// <summary>
		/// Name: ProjectionMode
		/// Type: ByteProperty
		/// Offset: 0x268
		/// Size: 0x01
		/// </summary>
		public byte ProjectionMode
		{
			get
			{
				return ReadByte(0x268);
			}
			set
			{
				WriteByte(0x268,value);
			}
		}
		
	}


	/// <summary>
	/// UImprintReceiverComponent:USceneComponent
	/// Size: 0x2B0
	/// Properties: 6
	/// </summary>
	public class UImprintReceiverComponent:USceneComponent
	{
		public override int ObjectSize => 688;
		/// <summary>
		/// Name: QualityLevel
		/// Type: IntProperty
		/// Offset: 0x218
		/// Size: 0x04
		/// </summary>
		public int QualityLevel
		{
			get
			{
				return ReadInt32(0x218);
			}
			set
			{
				WriteInt32(0x218,value);
			}
		}
		
		/// <summary>
		/// Name: QualityLevelMeshes
		/// Type: TArray<UStaticMesh>
		/// Offset: 0x220
		/// Size: 0x10
		/// SubElement Size: 0x118
		/// </summary>
		public TArray<UStaticMesh> QualityLevelMeshes => new TArray<UStaticMesh>(BaseAddress+0x220);
		
		/// <summary>
		/// Name: QualityLevelMaterials
		/// Type: TArray<UMaterial>
		/// Offset: 0x230
		/// Size: 0x10
		/// SubElement Size: 0x980
		/// </summary>
		public TArray<UMaterial> QualityLevelMaterials => new TArray<UMaterial>(BaseAddress+0x230);
		
		/// <summary>
		/// Name: MaskTextureParameterName
		/// Type: NameProperty
		/// Offset: 0x240
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: MaskParamsParameterName
		/// Type: NameProperty
		/// Offset: 0x248
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Meshes
		/// Type: ObjectProperty
		/// Offset: 0x250
		/// Size: 0x08
		/// </summary>
		public UStaticMeshComponent Meshes => ReadUObject<UStaticMeshComponent>(0x250);
		
	}


	/// <summary>
	/// USceneCaptureComponentImprints:USceneCaptureComponent
	/// Size: 0x320
	/// Properties: 15
	/// </summary>
	public class USceneCaptureComponentImprints:USceneCaptureComponent
	{
		public override int ObjectSize => 800;
		/// <summary>
		/// Name: TextureTarget
		/// Type: ObjectProperty
		/// Offset: 0x298
		/// Size: 0x08
		/// </summary>
		public UTextureRenderTarget2D TextureTarget => ReadUObject<UTextureRenderTarget2D>(0x298);
		
		/// <summary>
		/// Name: TextureTargetOutput
		/// Type: ByteProperty
		/// Offset: 0x2A0
		/// Size: 0x01
		/// </summary>
		public byte TextureTargetOutput
		{
			get
			{
				return ReadByte(0x2A0);
			}
			set
			{
				WriteByte(0x2A0,value);
			}
		}
		
		/// <summary>
		/// Name: ReferenceHeightMap
		/// Type: ObjectProperty
		/// Offset: 0x2A8
		/// Size: 0x08
		/// </summary>
		public UTextureRenderTarget2D ReferenceHeightMap => ReadUObject<UTextureRenderTarget2D>(0x2A8);
		
		/// <summary>
		/// Name: ImprintsMap
		/// Type: ObjectProperty
		/// Offset: 0x2B0
		/// Size: 0x08
		/// </summary>
		public UTextureRenderTarget2D ImprintsMap => ReadUObject<UTextureRenderTarget2D>(0x2B0);
		
		/// <summary>
		/// Name: MaterialParams
		/// Type: ObjectProperty
		/// Offset: 0x2B8
		/// Size: 0x08
		/// </summary>
		public UMaterialParameterCollection MaterialParams => ReadUObject<UMaterialParameterCollection>(0x2B8);
		
		/// <summary>
		/// Name: MaterialParameterName
		/// Type: NameProperty
		/// Offset: 0x2C0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: MaterialParameterName2
		/// Type: NameProperty
		/// Offset: 0x2C8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: MaterialParameterName3
		/// Type: NameProperty
		/// Offset: 0x2D0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CameraHeightOffset
		/// Type: FloatProperty
		/// Offset: 0x2D8
		/// Size: 0x04
		/// </summary>
		public float CameraHeightOffset
		{
			get
			{
				return ReadSingle(0x2D8);
			}
			set
			{
				WriteSingle(0x2D8,value);
			}
		}
		
		/// <summary>
		/// Name: ImprintHeight
		/// Type: FloatProperty
		/// Offset: 0x2DC
		/// Size: 0x04
		/// </summary>
		public float ImprintHeight
		{
			get
			{
				return ReadSingle(0x2DC);
			}
			set
			{
				WriteSingle(0x2DC,value);
			}
		}
		
		/// <summary>
		/// Name: ImprintFade
		/// Type: FloatProperty
		/// Offset: 0x2E4
		/// Size: 0x04
		/// </summary>
		public float ImprintFade
		{
			get
			{
				return ReadSingle(0x2E4);
			}
			set
			{
				WriteSingle(0x2E4,value);
			}
		}
		
		/// <summary>
		/// Name: QualitySettings
		/// Type: TArray<FImprintQualitySettings>
		/// Offset: 0x2E8
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FImprintQualitySettings> QualitySettings => new TArray<FImprintQualitySettings>(BaseAddress+0x2E8);
		
		/// <summary>
		/// Name: MaskTexture
		/// Type: ObjectProperty
		/// Offset: 0x2F8
		/// Size: 0x08
		/// </summary>
		public UTexture MaskTexture => ReadUObject<UTexture>(0x2F8);
		
		/// <summary>
		/// Name: MaskResolution
		/// Type: StructProperty
		/// Offset: 0x300
		/// Size: 0x08
		/// </summary>
		public FVector2D MaskResolution => ReadStruct<FVector2D>(0x300);
		
		/// <summary>
		/// Name: MaskUVOffset
		/// Type: StructProperty
		/// Offset: 0x308
		/// Size: 0x08
		/// </summary>
		public FVector2D MaskUVOffset => ReadStruct<FVector2D>(0x308);
		
	}


	/// <summary>
	/// USceneCaptureComponentSand:USceneCaptureComponentImprints
	/// Size: 0x380
	/// Properties: 23
	/// </summary>
	public class USceneCaptureComponentSand:USceneCaptureComponentImprints
	{
		public override int ObjectSize => 896;
		/// <summary>
		/// Name: FluidColourMap
		/// Type: ObjectProperty
		/// Offset: 0x318
		/// Size: 0x08
		/// </summary>
		public UTextureRenderTarget2D FluidColourMap => ReadUObject<UTextureRenderTarget2D>(0x318);
		
		/// <summary>
		/// Name: FluidNormalMap
		/// Type: ObjectProperty
		/// Offset: 0x320
		/// Size: 0x08
		/// </summary>
		public UTextureRenderTarget2D FluidNormalMap => ReadUObject<UTextureRenderTarget2D>(0x320);
		
		/// <summary>
		/// Name: ForcesTexture
		/// Type: ObjectProperty
		/// Offset: 0x328
		/// Size: 0x08
		/// </summary>
		public UTexture ForcesTexture => ReadUObject<UTexture>(0x328);
		
		/// <summary>
		/// Name: ForcesTextureTiling
		/// Type: FloatProperty
		/// Offset: 0x330
		/// Size: 0x04
		/// </summary>
		public float ForcesTextureTiling
		{
			get
			{
				return ReadSingle(0x330);
			}
			set
			{
				WriteSingle(0x330,value);
			}
		}
		
		/// <summary>
		/// Name: VorticityAmount
		/// Type: FloatProperty
		/// Offset: 0x334
		/// Size: 0x04
		/// </summary>
		public float VorticityAmount
		{
			get
			{
				return ReadSingle(0x334);
			}
			set
			{
				WriteSingle(0x334,value);
			}
		}
		
		/// <summary>
		/// Name: ColourDecay
		/// Type: FloatProperty
		/// Offset: 0x338
		/// Size: 0x04
		/// </summary>
		public float ColourDecay
		{
			get
			{
				return ReadSingle(0x338);
			}
			set
			{
				WriteSingle(0x338,value);
			}
		}
		
		/// <summary>
		/// Name: DensityDecay
		/// Type: FloatProperty
		/// Offset: 0x33C
		/// Size: 0x04
		/// </summary>
		public float DensityDecay
		{
			get
			{
				return ReadSingle(0x33C);
			}
			set
			{
				WriteSingle(0x33C,value);
			}
		}
		
		/// <summary>
		/// Name: VelocityDecay
		/// Type: FloatProperty
		/// Offset: 0x340
		/// Size: 0x04
		/// </summary>
		public float VelocityDecay
		{
			get
			{
				return ReadSingle(0x340);
			}
			set
			{
				WriteSingle(0x340,value);
			}
		}
		
		/// <summary>
		/// Name: Wrapping
		/// Type: BoolProperty
		/// Offset: 0x344
		/// Size: 0x01
		/// </summary>
		public bool Wrapping => (ReadByte(0x0344) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: OutputNormals
		/// Type: BoolProperty
		/// Offset: 0x344
		/// Size: 0x01
		/// </summary>
		public bool OutputNormals => (ReadByte(0x0344) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: OutputColour
		/// Type: BoolProperty
		/// Offset: 0x344
		/// Size: 0x01
		/// </summary>
		public bool OutputColour => (ReadByte(0x0344) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: UseUniqueTextureSet
		/// Type: BoolProperty
		/// Offset: 0x344
		/// Size: 0x01
		/// </summary>
		public bool UseUniqueTextureSet => (ReadByte(0x0344) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: WindA
		/// Type: StructProperty
		/// Offset: 0x348
		/// Size: 0x08
		/// </summary>
		public FVector2D WindA => ReadStruct<FVector2D>(0x348);
		
		/// <summary>
		/// Name: WindB
		/// Type: StructProperty
		/// Offset: 0x350
		/// Size: 0x08
		/// </summary>
		public FVector2D WindB => ReadStruct<FVector2D>(0x350);
		
		/// <summary>
		/// Name: InjectionColourA
		/// Type: StructProperty
		/// Offset: 0x358
		/// Size: 0x04
		/// </summary>
		public FColor InjectionColourA => ReadStruct<FColor>(0x358);
		
		/// <summary>
		/// Name: ColourScaleA
		/// Type: FloatProperty
		/// Offset: 0x35C
		/// Size: 0x04
		/// </summary>
		public float ColourScaleA
		{
			get
			{
				return ReadSingle(0x35C);
			}
			set
			{
				WriteSingle(0x35C,value);
			}
		}
		
		/// <summary>
		/// Name: InjectionColourB
		/// Type: StructProperty
		/// Offset: 0x360
		/// Size: 0x04
		/// </summary>
		public FColor InjectionColourB => ReadStruct<FColor>(0x360);
		
		/// <summary>
		/// Name: ColourScaleB
		/// Type: FloatProperty
		/// Offset: 0x364
		/// Size: 0x04
		/// </summary>
		public float ColourScaleB
		{
			get
			{
				return ReadSingle(0x364);
			}
			set
			{
				WriteSingle(0x364,value);
			}
		}
		
		/// <summary>
		/// Name: PressureScaleA
		/// Type: FloatProperty
		/// Offset: 0x368
		/// Size: 0x04
		/// </summary>
		public float PressureScaleA
		{
			get
			{
				return ReadSingle(0x368);
			}
			set
			{
				WriteSingle(0x368,value);
			}
		}
		
		/// <summary>
		/// Name: PressureScaleB
		/// Type: FloatProperty
		/// Offset: 0x36C
		/// Size: 0x04
		/// </summary>
		public float PressureScaleB
		{
			get
			{
				return ReadSingle(0x36C);
			}
			set
			{
				WriteSingle(0x36C,value);
			}
		}
		
		/// <summary>
		/// Name: WindScale
		/// Type: FloatProperty
		/// Offset: 0x370
		/// Size: 0x04
		/// </summary>
		public float WindScale
		{
			get
			{
				return ReadSingle(0x370);
			}
			set
			{
				WriteSingle(0x370,value);
			}
		}
		
		/// <summary>
		/// Name: WindGustFactorA
		/// Type: FloatProperty
		/// Offset: 0x374
		/// Size: 0x04
		/// </summary>
		public float WindGustFactorA
		{
			get
			{
				return ReadSingle(0x374);
			}
			set
			{
				WriteSingle(0x374,value);
			}
		}
		
		/// <summary>
		/// Name: WindGustFactorB
		/// Type: FloatProperty
		/// Offset: 0x378
		/// Size: 0x04
		/// </summary>
		public float WindGustFactorB
		{
			get
			{
				return ReadSingle(0x378);
			}
			set
			{
				WriteSingle(0x378,value);
			}
		}
		
	}


	/// <summary>
	/// USceneCaptureComponentWater:USceneCaptureComponentImprints
	/// Size: 0x380
	/// Properties: 21
	/// </summary>
	public class USceneCaptureComponentWater:USceneCaptureComponentImprints
	{
		public override int ObjectSize => 896;
		/// <summary>
		/// Name: FluidNormalMap
		/// Type: ObjectProperty
		/// Offset: 0x318
		/// Size: 0x08
		/// </summary>
		public UTextureRenderTarget2D FluidNormalMap => ReadUObject<UTextureRenderTarget2D>(0x318);
		
		/// <summary>
		/// Name: FlowTexture
		/// Type: ObjectProperty
		/// Offset: 0x320
		/// Size: 0x08
		/// </summary>
		public UTexture FlowTexture => ReadUObject<UTexture>(0x320);
		
		/// <summary>
		/// Name: FlowTextureTiling
		/// Type: FloatProperty
		/// Offset: 0x328
		/// Size: 0x04
		/// </summary>
		public float FlowTextureTiling
		{
			get
			{
				return ReadSingle(0x328);
			}
			set
			{
				WriteSingle(0x328,value);
			}
		}
		
		/// <summary>
		/// Name: VorticityAmount
		/// Type: FloatProperty
		/// Offset: 0x32C
		/// Size: 0x04
		/// </summary>
		public float VorticityAmount
		{
			get
			{
				return ReadSingle(0x32C);
			}
			set
			{
				WriteSingle(0x32C,value);
			}
		}
		
		/// <summary>
		/// Name: ColourDecay
		/// Type: FloatProperty
		/// Offset: 0x330
		/// Size: 0x04
		/// </summary>
		public float ColourDecay
		{
			get
			{
				return ReadSingle(0x330);
			}
			set
			{
				WriteSingle(0x330,value);
			}
		}
		
		/// <summary>
		/// Name: DensityDecay
		/// Type: FloatProperty
		/// Offset: 0x334
		/// Size: 0x04
		/// </summary>
		public float DensityDecay
		{
			get
			{
				return ReadSingle(0x334);
			}
			set
			{
				WriteSingle(0x334,value);
			}
		}
		
		/// <summary>
		/// Name: VelocityDecay
		/// Type: FloatProperty
		/// Offset: 0x338
		/// Size: 0x04
		/// </summary>
		public float VelocityDecay
		{
			get
			{
				return ReadSingle(0x338);
			}
			set
			{
				WriteSingle(0x338,value);
			}
		}
		
		/// <summary>
		/// Name: Wrapping
		/// Type: BoolProperty
		/// Offset: 0x33C
		/// Size: 0x01
		/// </summary>
		public bool Wrapping => (ReadByte(0x033C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: OutputNormals
		/// Type: BoolProperty
		/// Offset: 0x33C
		/// Size: 0x01
		/// </summary>
		public bool OutputNormals => (ReadByte(0x033C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: UseUniqueTextureSet
		/// Type: BoolProperty
		/// Offset: 0x33C
		/// Size: 0x01
		/// </summary>
		public bool UseUniqueTextureSet => (ReadByte(0x033C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: WindA
		/// Type: StructProperty
		/// Offset: 0x340
		/// Size: 0x08
		/// </summary>
		public FVector2D WindA => ReadStruct<FVector2D>(0x340);
		
		/// <summary>
		/// Name: WindB
		/// Type: StructProperty
		/// Offset: 0x348
		/// Size: 0x08
		/// </summary>
		public FVector2D WindB => ReadStruct<FVector2D>(0x348);
		
		/// <summary>
		/// Name: InjectionColourA
		/// Type: StructProperty
		/// Offset: 0x350
		/// Size: 0x04
		/// </summary>
		public FColor InjectionColourA => ReadStruct<FColor>(0x350);
		
		/// <summary>
		/// Name: ColourScaleA
		/// Type: FloatProperty
		/// Offset: 0x354
		/// Size: 0x04
		/// </summary>
		public float ColourScaleA
		{
			get
			{
				return ReadSingle(0x354);
			}
			set
			{
				WriteSingle(0x354,value);
			}
		}
		
		/// <summary>
		/// Name: InjectionColourB
		/// Type: StructProperty
		/// Offset: 0x358
		/// Size: 0x04
		/// </summary>
		public FColor InjectionColourB => ReadStruct<FColor>(0x358);
		
		/// <summary>
		/// Name: ColourScaleB
		/// Type: FloatProperty
		/// Offset: 0x35C
		/// Size: 0x04
		/// </summary>
		public float ColourScaleB
		{
			get
			{
				return ReadSingle(0x35C);
			}
			set
			{
				WriteSingle(0x35C,value);
			}
		}
		
		/// <summary>
		/// Name: PressureScaleA
		/// Type: FloatProperty
		/// Offset: 0x360
		/// Size: 0x04
		/// </summary>
		public float PressureScaleA
		{
			get
			{
				return ReadSingle(0x360);
			}
			set
			{
				WriteSingle(0x360,value);
			}
		}
		
		/// <summary>
		/// Name: PressureScaleB
		/// Type: FloatProperty
		/// Offset: 0x364
		/// Size: 0x04
		/// </summary>
		public float PressureScaleB
		{
			get
			{
				return ReadSingle(0x364);
			}
			set
			{
				WriteSingle(0x364,value);
			}
		}
		
		/// <summary>
		/// Name: WindScale
		/// Type: FloatProperty
		/// Offset: 0x368
		/// Size: 0x04
		/// </summary>
		public float WindScale
		{
			get
			{
				return ReadSingle(0x368);
			}
			set
			{
				WriteSingle(0x368,value);
			}
		}
		
		/// <summary>
		/// Name: WindGustFactorA
		/// Type: FloatProperty
		/// Offset: 0x36C
		/// Size: 0x04
		/// </summary>
		public float WindGustFactorA
		{
			get
			{
				return ReadSingle(0x36C);
			}
			set
			{
				WriteSingle(0x36C,value);
			}
		}
		
		/// <summary>
		/// Name: WindGustFactorB
		/// Type: FloatProperty
		/// Offset: 0x370
		/// Size: 0x04
		/// </summary>
		public float WindGustFactorB
		{
			get
			{
				return ReadSingle(0x370);
			}
			set
			{
				WriteSingle(0x370,value);
			}
		}
		
	}


	/// <summary>
	/// UDirectionalLightComponent:ULightComponent
	/// Size: 0x400
	/// Properties: 21
	/// </summary>
	public class UDirectionalLightComponent:ULightComponent
	{
		public override int ObjectSize => 1024;
		/// <summary>
		/// Name: bEnableLightShaftOcclusion
		/// Type: BoolProperty
		/// Offset: 0x398
		/// Size: 0x01
		/// </summary>
		public bool bEnableLightShaftOcclusion => (ReadByte(0x0398) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: OcclusionMaskDarkness
		/// Type: FloatProperty
		/// Offset: 0x39C
		/// Size: 0x04
		/// </summary>
		public float OcclusionMaskDarkness
		{
			get
			{
				return ReadSingle(0x39C);
			}
			set
			{
				WriteSingle(0x39C,value);
			}
		}
		
		/// <summary>
		/// Name: OcclusionDepthRange
		/// Type: FloatProperty
		/// Offset: 0x3A0
		/// Size: 0x04
		/// </summary>
		public float OcclusionDepthRange
		{
			get
			{
				return ReadSingle(0x3A0);
			}
			set
			{
				WriteSingle(0x3A0,value);
			}
		}
		
		/// <summary>
		/// Name: LightShaftOverrideDirection
		/// Type: StructProperty
		/// Offset: 0x3A4
		/// Size: 0x0C
		/// </summary>
		public FVector LightShaftOverrideDirection => ReadStruct<FVector>(0x3A4);
		
		/// <summary>
		/// Name: WholeSceneDynamicShadowRadius
		/// Type: FloatProperty
		/// Offset: 0x3B0
		/// Size: 0x04
		/// </summary>
		public float WholeSceneDynamicShadowRadius
		{
			get
			{
				return ReadSingle(0x3B0);
			}
			set
			{
				WriteSingle(0x3B0,value);
			}
		}
		
		/// <summary>
		/// Name: DynamicShadowDistanceMovableLight
		/// Type: FloatProperty
		/// Offset: 0x3B4
		/// Size: 0x04
		/// </summary>
		public float DynamicShadowDistanceMovableLight
		{
			get
			{
				return ReadSingle(0x3B4);
			}
			set
			{
				WriteSingle(0x3B4,value);
			}
		}
		
		/// <summary>
		/// Name: DynamicShadowDistanceStationaryLight
		/// Type: FloatProperty
		/// Offset: 0x3B8
		/// Size: 0x04
		/// </summary>
		public float DynamicShadowDistanceStationaryLight
		{
			get
			{
				return ReadSingle(0x3B8);
			}
			set
			{
				WriteSingle(0x3B8,value);
			}
		}
		
		/// <summary>
		/// Name: DynamicShadowCascades
		/// Type: IntProperty
		/// Offset: 0x3BC
		/// Size: 0x04
		/// </summary>
		public int DynamicShadowCascades
		{
			get
			{
				return ReadInt32(0x3BC);
			}
			set
			{
				WriteInt32(0x3BC,value);
			}
		}
		
		/// <summary>
		/// Name: CascadeDistributionExponent
		/// Type: FloatProperty
		/// Offset: 0x3C0
		/// Size: 0x04
		/// </summary>
		public float CascadeDistributionExponent
		{
			get
			{
				return ReadSingle(0x3C0);
			}
			set
			{
				WriteSingle(0x3C0,value);
			}
		}
		
		/// <summary>
		/// Name: CascadeTransitionFraction
		/// Type: FloatProperty
		/// Offset: 0x3C4
		/// Size: 0x04
		/// </summary>
		public float CascadeTransitionFraction
		{
			get
			{
				return ReadSingle(0x3C4);
			}
			set
			{
				WriteSingle(0x3C4,value);
			}
		}
		
		/// <summary>
		/// Name: ShadowDistanceFadeoutFraction
		/// Type: FloatProperty
		/// Offset: 0x3C8
		/// Size: 0x04
		/// </summary>
		public float ShadowDistanceFadeoutFraction
		{
			get
			{
				return ReadSingle(0x3C8);
			}
			set
			{
				WriteSingle(0x3C8,value);
			}
		}
		
		/// <summary>
		/// Name: bUseInsetShadowsForMovableObjects
		/// Type: BoolProperty
		/// Offset: 0x3CC
		/// Size: 0x01
		/// </summary>
		public bool bUseInsetShadowsForMovableObjects => (ReadByte(0x03CC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: FarShadowCascadeCount
		/// Type: IntProperty
		/// Offset: 0x3D0
		/// Size: 0x04
		/// </summary>
		public int FarShadowCascadeCount
		{
			get
			{
				return ReadInt32(0x3D0);
			}
			set
			{
				WriteInt32(0x3D0,value);
			}
		}
		
		/// <summary>
		/// Name: FarShadowDistance
		/// Type: FloatProperty
		/// Offset: 0x3D4
		/// Size: 0x04
		/// </summary>
		public float FarShadowDistance
		{
			get
			{
				return ReadSingle(0x3D4);
			}
			set
			{
				WriteSingle(0x3D4,value);
			}
		}
		
		/// <summary>
		/// Name: DistanceFieldShadowDistance
		/// Type: FloatProperty
		/// Offset: 0x3D8
		/// Size: 0x04
		/// </summary>
		public float DistanceFieldShadowDistance
		{
			get
			{
				return ReadSingle(0x3D8);
			}
			set
			{
				WriteSingle(0x3D8,value);
			}
		}
		
		/// <summary>
		/// Name: LightSourceAngle
		/// Type: FloatProperty
		/// Offset: 0x3DC
		/// Size: 0x04
		/// </summary>
		public float LightSourceAngle
		{
			get
			{
				return ReadSingle(0x3DC);
			}
			set
			{
				WriteSingle(0x3DC,value);
			}
		}
		
		/// <summary>
		/// Name: TraceDistance
		/// Type: FloatProperty
		/// Offset: 0x3E0
		/// Size: 0x04
		/// </summary>
		public float TraceDistance
		{
			get
			{
				return ReadSingle(0x3E0);
			}
			set
			{
				WriteSingle(0x3E0,value);
			}
		}
		
		/// <summary>
		/// Name: LightmassSettings
		/// Type: StructProperty
		/// Offset: 0x3E4
		/// Size: 0x10
		/// </summary>
		public FLightmassDirectionalLightSettings LightmassSettings => ReadStruct<FLightmassDirectionalLightSettings>(0x3E4);
		
		/// <summary>
		/// Name: bCastModulatedShadows
		/// Type: BoolProperty
		/// Offset: 0x3F4
		/// Size: 0x01
		/// </summary>
		public bool bCastModulatedShadows => (ReadByte(0x03F4) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ModulatedShadowColor
		/// Type: StructProperty
		/// Offset: 0x3F8
		/// Size: 0x04
		/// </summary>
		public FColor ModulatedShadowColor => ReadStruct<FColor>(0x3F8);
		
		/// <summary>
		/// Name: bUsedAsAtmosphereSunLight
		/// Type: BoolProperty
		/// Offset: 0x3FC
		/// Size: 0x01
		/// </summary>
		public bool bUsedAsAtmosphereSunLight => (ReadByte(0x03FC) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UPointLightComponent:ULightComponent
	/// Size: 0x3C0
	/// Properties: 7
	/// </summary>
	public class UPointLightComponent:ULightComponent
	{
		public override int ObjectSize => 960;
		/// <summary>
		/// Name: Radius
		/// Type: FloatProperty
		/// Offset: 0x398
		/// Size: 0x04
		/// </summary>
		public float Radius
		{
			get
			{
				return ReadSingle(0x398);
			}
			set
			{
				WriteSingle(0x398,value);
			}
		}
		
		/// <summary>
		/// Name: AttenuationRadius
		/// Type: FloatProperty
		/// Offset: 0x39C
		/// Size: 0x04
		/// </summary>
		public float AttenuationRadius
		{
			get
			{
				return ReadSingle(0x39C);
			}
			set
			{
				WriteSingle(0x39C,value);
			}
		}
		
		/// <summary>
		/// Name: bUseInverseSquaredFalloff
		/// Type: BoolProperty
		/// Offset: 0x3A0
		/// Size: 0x01
		/// </summary>
		public bool bUseInverseSquaredFalloff => (ReadByte(0x03A0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LightFalloffExponent
		/// Type: FloatProperty
		/// Offset: 0x3A4
		/// Size: 0x04
		/// </summary>
		public float LightFalloffExponent
		{
			get
			{
				return ReadSingle(0x3A4);
			}
			set
			{
				WriteSingle(0x3A4,value);
			}
		}
		
		/// <summary>
		/// Name: SourceRadius
		/// Type: FloatProperty
		/// Offset: 0x3A8
		/// Size: 0x04
		/// </summary>
		public float SourceRadius
		{
			get
			{
				return ReadSingle(0x3A8);
			}
			set
			{
				WriteSingle(0x3A8,value);
			}
		}
		
		/// <summary>
		/// Name: SourceLength
		/// Type: FloatProperty
		/// Offset: 0x3AC
		/// Size: 0x04
		/// </summary>
		public float SourceLength
		{
			get
			{
				return ReadSingle(0x3AC);
			}
			set
			{
				WriteSingle(0x3AC,value);
			}
		}
		
		/// <summary>
		/// Name: LightmassSettings
		/// Type: StructProperty
		/// Offset: 0x3B0
		/// Size: 0x0C
		/// </summary>
		public FLightmassPointLightSettings LightmassSettings => ReadStruct<FLightmassPointLightSettings>(0x3B0);
		
	}


	/// <summary>
	/// USpotLightComponent:UPointLightComponent
	/// Size: 0x3D0
	/// Properties: 3
	/// </summary>
	public class USpotLightComponent:UPointLightComponent
	{
		public override int ObjectSize => 976;
		/// <summary>
		/// Name: InnerConeAngle
		/// Type: FloatProperty
		/// Offset: 0x3C0
		/// Size: 0x04
		/// </summary>
		public float InnerConeAngle
		{
			get
			{
				return ReadSingle(0x3C0);
			}
			set
			{
				WriteSingle(0x3C0,value);
			}
		}
		
		/// <summary>
		/// Name: OuterConeAngle
		/// Type: FloatProperty
		/// Offset: 0x3C4
		/// Size: 0x04
		/// </summary>
		public float OuterConeAngle
		{
			get
			{
				return ReadSingle(0x3C4);
			}
			set
			{
				WriteSingle(0x3C4,value);
			}
		}
		
		/// <summary>
		/// Name: LightShaftConeAngle
		/// Type: FloatProperty
		/// Offset: 0x3C8
		/// Size: 0x04
		/// </summary>
		public float LightShaftConeAngle
		{
			get
			{
				return ReadSingle(0x3C8);
			}
			set
			{
				WriteSingle(0x3C8,value);
			}
		}
		
	}


	/// <summary>
	/// USkyLightComponent:ULightComponentBase
	/// Size: 0x3E0
	/// Properties: 11
	/// </summary>
	public class USkyLightComponent:ULightComponentBase
	{
		public override int ObjectSize => 992;
		/// <summary>
		/// Name: SourceType
		/// Type: ByteProperty
		/// Offset: 0x240
		/// Size: 0x01
		/// </summary>
		public byte SourceType
		{
			get
			{
				return ReadByte(0x240);
			}
			set
			{
				WriteByte(0x240,value);
			}
		}
		
		/// <summary>
		/// Name: Cubemap
		/// Type: ObjectProperty
		/// Offset: 0x248
		/// Size: 0x08
		/// </summary>
		public UTextureCube Cubemap => ReadUObject<UTextureCube>(0x248);
		
		/// <summary>
		/// Name: SourceCubemapAngle
		/// Type: FloatProperty
		/// Offset: 0x250
		/// Size: 0x04
		/// </summary>
		public float SourceCubemapAngle
		{
			get
			{
				return ReadSingle(0x250);
			}
			set
			{
				WriteSingle(0x250,value);
			}
		}
		
		/// <summary>
		/// Name: CubemapResolution
		/// Type: IntProperty
		/// Offset: 0x254
		/// Size: 0x04
		/// </summary>
		public int CubemapResolution
		{
			get
			{
				return ReadInt32(0x254);
			}
			set
			{
				WriteInt32(0x254,value);
			}
		}
		
		/// <summary>
		/// Name: SkyDistanceThreshold
		/// Type: FloatProperty
		/// Offset: 0x258
		/// Size: 0x04
		/// </summary>
		public float SkyDistanceThreshold
		{
			get
			{
				return ReadSingle(0x258);
			}
			set
			{
				WriteSingle(0x258,value);
			}
		}
		
		/// <summary>
		/// Name: bLowerHemisphereIsBlack
		/// Type: BoolProperty
		/// Offset: 0x25C
		/// Size: 0x01
		/// </summary>
		public bool bLowerHemisphereIsBlack
		{
			get
			{
				return ReadBool(0x25C);
			}
			set
			{
				WriteBool(0x25C,value);
			}
		}
		
		/// <summary>
		/// Name: OcclusionMaxDistance
		/// Type: FloatProperty
		/// Offset: 0x260
		/// Size: 0x04
		/// </summary>
		public float OcclusionMaxDistance
		{
			get
			{
				return ReadSingle(0x260);
			}
			set
			{
				WriteSingle(0x260,value);
			}
		}
		
		/// <summary>
		/// Name: Contrast
		/// Type: FloatProperty
		/// Offset: 0x264
		/// Size: 0x04
		/// </summary>
		public float Contrast
		{
			get
			{
				return ReadSingle(0x264);
			}
			set
			{
				WriteSingle(0x264,value);
			}
		}
		
		/// <summary>
		/// Name: MinOcclusion
		/// Type: FloatProperty
		/// Offset: 0x268
		/// Size: 0x04
		/// </summary>
		public float MinOcclusion
		{
			get
			{
				return ReadSingle(0x268);
			}
			set
			{
				WriteSingle(0x268,value);
			}
		}
		
		/// <summary>
		/// Name: OcclusionTint
		/// Type: StructProperty
		/// Offset: 0x26C
		/// Size: 0x04
		/// </summary>
		public FColor OcclusionTint => ReadStruct<FColor>(0x26C);
		
		/// <summary>
		/// Name: BlendDestinationCubemap
		/// Type: ObjectProperty
		/// Offset: 0x318
		/// Size: 0x08
		/// </summary>
		public UTextureCube BlendDestinationCubemap => ReadUObject<UTextureCube>(0x318);
		
	}


	/// <summary>
	/// ULightmassPortalComponent:USceneComponent
	/// Size: 0x220
	/// Properties: 1
	/// </summary>
	public class ULightmassPortalComponent:USceneComponent
	{
		public override int ObjectSize => 544;
		/// <summary>
		/// Name: PreviewBox
		/// Type: ObjectProperty
		/// Offset: 0x218
		/// Size: 0x08
		/// </summary>
		public UBoxComponent PreviewBox => ReadUObject<UBoxComponent>(0x218);
		
	}


	/// <summary>
	/// UNavigationGraphNodeComponent:USceneComponent
	/// Size: 0x240
	/// Properties: 3
	/// </summary>
	public class UNavigationGraphNodeComponent:USceneComponent
	{
		public override int ObjectSize => 576;
		/// <summary>
		/// Name: Node
		/// Type: StructProperty
		/// Offset: 0x218
		/// Size: 0x18
		/// </summary>
		public FNavGraphNode Node => ReadStruct<FNavGraphNode>(0x218);
		
		/// <summary>
		/// Name: NextNodeComponent
		/// Type: ObjectProperty
		/// Offset: 0x230
		/// Size: 0x08
		/// </summary>
		public UNavigationGraphNodeComponent NextNodeComponent => ReadUObject<UNavigationGraphNodeComponent>(0x230);
		
		/// <summary>
		/// Name: PrevNodeComponent
		/// Type: ObjectProperty
		/// Offset: 0x238
		/// Size: 0x08
		/// </summary>
		public UNavigationGraphNodeComponent PrevNodeComponent => ReadUObject<UNavigationGraphNodeComponent>(0x238);
		
	}


	/// <summary>
	/// UPhysicsSpringComponent:USceneComponent
	/// Size: 0x240
	/// Properties: 7
	/// </summary>
	public class UPhysicsSpringComponent:USceneComponent
	{
		public override int ObjectSize => 576;
		/// <summary>
		/// Name: SpringStiffness
		/// Type: FloatProperty
		/// Offset: 0x218
		/// Size: 0x04
		/// </summary>
		public float SpringStiffness
		{
			get
			{
				return ReadSingle(0x218);
			}
			set
			{
				WriteSingle(0x218,value);
			}
		}
		
		/// <summary>
		/// Name: SpringDamping
		/// Type: FloatProperty
		/// Offset: 0x21C
		/// Size: 0x04
		/// </summary>
		public float SpringDamping
		{
			get
			{
				return ReadSingle(0x21C);
			}
			set
			{
				WriteSingle(0x21C,value);
			}
		}
		
		/// <summary>
		/// Name: SpringLengthAtRest
		/// Type: FloatProperty
		/// Offset: 0x220
		/// Size: 0x04
		/// </summary>
		public float SpringLengthAtRest
		{
			get
			{
				return ReadSingle(0x220);
			}
			set
			{
				WriteSingle(0x220,value);
			}
		}
		
		/// <summary>
		/// Name: SpringRadius
		/// Type: FloatProperty
		/// Offset: 0x224
		/// Size: 0x04
		/// </summary>
		public float SpringRadius
		{
			get
			{
				return ReadSingle(0x224);
			}
			set
			{
				WriteSingle(0x224,value);
			}
		}
		
		/// <summary>
		/// Name: SpringChannel
		/// Type: ByteProperty
		/// Offset: 0x228
		/// Size: 0x01
		/// </summary>
		public byte SpringChannel
		{
			get
			{
				return ReadByte(0x228);
			}
			set
			{
				WriteByte(0x228,value);
			}
		}
		
		/// <summary>
		/// Name: bIgnoreSelf
		/// Type: BoolProperty
		/// Offset: 0x229
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreSelf
		{
			get
			{
				return ReadBool(0x229);
			}
			set
			{
				WriteBool(0x229,value);
			}
		}
		
		/// <summary>
		/// Name: SpringCompression
		/// Type: FloatProperty
		/// Offset: 0x22C
		/// Size: 0x04
		/// </summary>
		public float SpringCompression
		{
			get
			{
				return ReadSingle(0x22C);
			}
			set
			{
				WriteSingle(0x22C,value);
			}
		}
		
	}


	/// <summary>
	/// UPhysicsThrusterComponent:USceneComponent
	/// Size: 0x220
	/// Properties: 1
	/// </summary>
	public class UPhysicsThrusterComponent:USceneComponent
	{
		public override int ObjectSize => 544;
		/// <summary>
		/// Name: ThrustStrength
		/// Type: FloatProperty
		/// Offset: 0x218
		/// Size: 0x04
		/// </summary>
		public float ThrustStrength
		{
			get
			{
				return ReadSingle(0x218);
			}
			set
			{
				WriteSingle(0x218,value);
			}
		}
		
	}


	/// <summary>
	/// UPostProcessComponent:USceneComponent
	/// Size: 0x5D0
	/// Properties: 6
	/// </summary>
	public class UPostProcessComponent:USceneComponent
	{
		public override int ObjectSize => 1488;
		/// <summary>
		/// Name: Settings
		/// Type: StructProperty
		/// Offset: 0x220
		/// Size: 0x3A0
		/// </summary>
		public FPostProcessSettings Settings => ReadStruct<FPostProcessSettings>(0x220);
		
		/// <summary>
		/// Name: Priority
		/// Type: FloatProperty
		/// Offset: 0x5C0
		/// Size: 0x04
		/// </summary>
		public float Priority
		{
			get
			{
				return ReadSingle(0x5C0);
			}
			set
			{
				WriteSingle(0x5C0,value);
			}
		}
		
		/// <summary>
		/// Name: BlendRadius
		/// Type: FloatProperty
		/// Offset: 0x5C4
		/// Size: 0x04
		/// </summary>
		public float BlendRadius
		{
			get
			{
				return ReadSingle(0x5C4);
			}
			set
			{
				WriteSingle(0x5C4,value);
			}
		}
		
		/// <summary>
		/// Name: BlendWeight
		/// Type: FloatProperty
		/// Offset: 0x5C8
		/// Size: 0x04
		/// </summary>
		public float BlendWeight
		{
			get
			{
				return ReadSingle(0x5C8);
			}
			set
			{
				WriteSingle(0x5C8,value);
			}
		}
		
		/// <summary>
		/// Name: bEnabled
		/// Type: BoolProperty
		/// Offset: 0x5CC
		/// Size: 0x01
		/// </summary>
		public bool bEnabled => (ReadByte(0x05CC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUnbound
		/// Type: BoolProperty
		/// Offset: 0x5CC
		/// Size: 0x01
		/// </summary>
		public bool bUnbound => (ReadByte(0x05CC) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// UArrowComponent:UPrimitiveComponent
	/// Size: 0x5C0
	/// Properties: 5
	/// </summary>
	public class UArrowComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1472;
		/// <summary>
		/// Name: ArrowColor
		/// Type: StructProperty
		/// Offset: 0x5A0
		/// Size: 0x04
		/// </summary>
		public FColor ArrowColor => ReadStruct<FColor>(0x5A0);
		
		/// <summary>
		/// Name: ArrowSize
		/// Type: FloatProperty
		/// Offset: 0x5A4
		/// Size: 0x04
		/// </summary>
		public float ArrowSize
		{
			get
			{
				return ReadSingle(0x5A4);
			}
			set
			{
				WriteSingle(0x5A4,value);
			}
		}
		
		/// <summary>
		/// Name: bIsScreenSizeScaled
		/// Type: BoolProperty
		/// Offset: 0x5A8
		/// Size: 0x01
		/// </summary>
		public bool bIsScreenSizeScaled
		{
			get
			{
				return ReadBool(0x5A8);
			}
			set
			{
				WriteBool(0x5A8,value);
			}
		}
		
		/// <summary>
		/// Name: ScreenSize
		/// Type: FloatProperty
		/// Offset: 0x5AC
		/// Size: 0x04
		/// </summary>
		public float ScreenSize
		{
			get
			{
				return ReadSingle(0x5AC);
			}
			set
			{
				WriteSingle(0x5AC,value);
			}
		}
		
		/// <summary>
		/// Name: bTreatAsASprite
		/// Type: BoolProperty
		/// Offset: 0x5B0
		/// Size: 0x01
		/// </summary>
		public bool bTreatAsASprite => (ReadByte(0x05B0) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UBillboardComponent:UPrimitiveComponent
	/// Size: 0x5C0
	/// Properties: 7
	/// </summary>
	public class UBillboardComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1472;
		/// <summary>
		/// Name: Sprite
		/// Type: ObjectProperty
		/// Offset: 0x5A0
		/// Size: 0x08
		/// </summary>
		public UTexture2D Sprite => ReadUObject<UTexture2D>(0x5A0);
		
		/// <summary>
		/// Name: bIsScreenSizeScaled
		/// Type: BoolProperty
		/// Offset: 0x5A8
		/// Size: 0x01
		/// </summary>
		public bool bIsScreenSizeScaled => (ReadByte(0x05A8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ScreenSize
		/// Type: FloatProperty
		/// Offset: 0x5AC
		/// Size: 0x04
		/// </summary>
		public float ScreenSize
		{
			get
			{
				return ReadSingle(0x5AC);
			}
			set
			{
				WriteSingle(0x5AC,value);
			}
		}
		
		/// <summary>
		/// Name: U
		/// Type: FloatProperty
		/// Offset: 0x5B0
		/// Size: 0x04
		/// </summary>
		public float U
		{
			get
			{
				return ReadSingle(0x5B0);
			}
			set
			{
				WriteSingle(0x5B0,value);
			}
		}
		
		/// <summary>
		/// Name: UL
		/// Type: FloatProperty
		/// Offset: 0x5B4
		/// Size: 0x04
		/// </summary>
		public float UL
		{
			get
			{
				return ReadSingle(0x5B4);
			}
			set
			{
				WriteSingle(0x5B4,value);
			}
		}
		
		/// <summary>
		/// Name: V
		/// Type: FloatProperty
		/// Offset: 0x5B8
		/// Size: 0x04
		/// </summary>
		public float V
		{
			get
			{
				return ReadSingle(0x5B8);
			}
			set
			{
				WriteSingle(0x5B8,value);
			}
		}
		
		/// <summary>
		/// Name: VL
		/// Type: FloatProperty
		/// Offset: 0x5BC
		/// Size: 0x04
		/// </summary>
		public float VL
		{
			get
			{
				return ReadSingle(0x5BC);
			}
			set
			{
				WriteSingle(0x5BC,value);
			}
		}
		
	}


	/// <summary>
	/// UBrushComponent:UPrimitiveComponent
	/// Size: 0x5C0
	/// Properties: 3
	/// </summary>
	public class UBrushComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1472;
		/// <summary>
		/// Name: Brush
		/// Type: ObjectProperty
		/// Offset: 0x5A0
		/// Size: 0x08
		/// </summary>
		public UModel Brush => ReadUObject<UModel>(0x5A0);
		
		/// <summary>
		/// Name: BrushBodySetup
		/// Type: ObjectProperty
		/// Offset: 0x5A8
		/// Size: 0x08
		/// </summary>
		public UBodySetup BrushBodySetup => ReadUObject<UBodySetup>(0x5A8);
		
		/// <summary>
		/// Name: PrePivot
		/// Type: StructProperty
		/// Offset: 0x5B0
		/// Size: 0x0C
		/// </summary>
		public FVector PrePivot => ReadStruct<FVector>(0x5B0);
		
	}


	/// <summary>
	/// UDrawFrustumComponent:UPrimitiveComponent
	/// Size: 0x5C0
	/// Properties: 6
	/// </summary>
	public class UDrawFrustumComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1472;
		/// <summary>
		/// Name: FrustumColor
		/// Type: StructProperty
		/// Offset: 0x5A0
		/// Size: 0x04
		/// </summary>
		public FColor FrustumColor => ReadStruct<FColor>(0x5A0);
		
		/// <summary>
		/// Name: FrustumAngle
		/// Type: FloatProperty
		/// Offset: 0x5A4
		/// Size: 0x04
		/// </summary>
		public float FrustumAngle
		{
			get
			{
				return ReadSingle(0x5A4);
			}
			set
			{
				WriteSingle(0x5A4,value);
			}
		}
		
		/// <summary>
		/// Name: FrustumAspectRatio
		/// Type: FloatProperty
		/// Offset: 0x5A8
		/// Size: 0x04
		/// </summary>
		public float FrustumAspectRatio
		{
			get
			{
				return ReadSingle(0x5A8);
			}
			set
			{
				WriteSingle(0x5A8,value);
			}
		}
		
		/// <summary>
		/// Name: FrustumStartDist
		/// Type: FloatProperty
		/// Offset: 0x5AC
		/// Size: 0x04
		/// </summary>
		public float FrustumStartDist
		{
			get
			{
				return ReadSingle(0x5AC);
			}
			set
			{
				WriteSingle(0x5AC,value);
			}
		}
		
		/// <summary>
		/// Name: FrustumEndDist
		/// Type: FloatProperty
		/// Offset: 0x5B0
		/// Size: 0x04
		/// </summary>
		public float FrustumEndDist
		{
			get
			{
				return ReadSingle(0x5B0);
			}
			set
			{
				WriteSingle(0x5B0,value);
			}
		}
		
		/// <summary>
		/// Name: Texture
		/// Type: ObjectProperty
		/// Offset: 0x5B8
		/// Size: 0x08
		/// </summary>
		public UTexture Texture => ReadUObject<UTexture>(0x5B8);
		
	}


	/// <summary>
	/// ULineBatchComponent:UPrimitiveComponent
	/// Size: 0x5E0
	/// Properties: 0
	/// </summary>
	public class ULineBatchComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1504;
	}


	/// <summary>
	/// UMaterialBillboardComponent:UPrimitiveComponent
	/// Size: 0x5B0
	/// Properties: 1
	/// </summary>
	public class UMaterialBillboardComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1456;
		/// <summary>
		/// Name: Elements
		/// Type: TArray<FMaterialSpriteElement>
		/// Offset: 0x5A0
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FMaterialSpriteElement> Elements => new TArray<FMaterialSpriteElement>(BaseAddress+0x5A0);
		
	}


	/// <summary>
	/// UDestructibleComponent:USkinnedMeshComponent
	/// Size: 0x880
	/// Properties: 4
	/// </summary>
	public class UDestructibleComponent:USkinnedMeshComponent
	{
		public override int ObjectSize => 2176;
		/// <summary>
		/// Name: bFractureEffectOverride
		/// Type: BoolProperty
		/// Offset: 0x7B0
		/// Size: 0x01
		/// </summary>
		public bool bFractureEffectOverride => (ReadByte(0x07B0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: FractureEffects
		/// Type: TArray<FFractureEffect>
		/// Offset: 0x7B8
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FFractureEffect> FractureEffects => new TArray<FFractureEffect>(BaseAddress+0x7B8);
		
		/// <summary>
		/// Name: bEnableHardSleeping
		/// Type: BoolProperty
		/// Offset: 0x7C8
		/// Size: 0x01
		/// </summary>
		public bool bEnableHardSleeping
		{
			get
			{
				return ReadBool(0x7C8);
			}
			set
			{
				WriteBool(0x7C8,value);
			}
		}
		
		/// <summary>
		/// Name: LargeChunkThreshold
		/// Type: FloatProperty
		/// Offset: 0x7CC
		/// Size: 0x04
		/// </summary>
		public float LargeChunkThreshold
		{
			get
			{
				return ReadSingle(0x7CC);
			}
			set
			{
				WriteSingle(0x7CC,value);
			}
		}
		
	}


	/// <summary>
	/// UPoseableMeshComponent:USkinnedMeshComponent
	/// Size: 0x880
	/// Properties: 0
	/// </summary>
	public class UPoseableMeshComponent:USkinnedMeshComponent
	{
		public override int ObjectSize => 2176;
	}


	/// <summary>
	/// USplineMeshComponent:UStaticMeshComponent
	/// Size: 0x780
	/// Properties: 10
	/// </summary>
	public class USplineMeshComponent:UStaticMeshComponent
	{
		public override int ObjectSize => 1920;
		/// <summary>
		/// Name: SplineParams
		/// Type: StructProperty
		/// Offset: 0x6E8
		/// Size: 0x58
		/// </summary>
		public FSplineMeshParams SplineParams => ReadStruct<FSplineMeshParams>(0x6E8);
		
		/// <summary>
		/// Name: SplineUpDir
		/// Type: StructProperty
		/// Offset: 0x740
		/// Size: 0x0C
		/// </summary>
		public FVector SplineUpDir => ReadStruct<FVector>(0x740);
		
		/// <summary>
		/// Name: bAllowSplineEditingPerInstance
		/// Type: BoolProperty
		/// Offset: 0x74C
		/// Size: 0x01
		/// </summary>
		public bool bAllowSplineEditingPerInstance => (ReadByte(0x074C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSmoothInterpRollScale
		/// Type: BoolProperty
		/// Offset: 0x74C
		/// Size: 0x01
		/// </summary>
		public bool bSmoothInterpRollScale => (ReadByte(0x074C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: ForwardAxis
		/// Type: ByteProperty
		/// Offset: 0x750
		/// Size: 0x01
		/// </summary>
		public byte ForwardAxis
		{
			get
			{
				return ReadByte(0x750);
			}
			set
			{
				WriteByte(0x750,value);
			}
		}
		
		/// <summary>
		/// Name: SplineBoundaryMin
		/// Type: FloatProperty
		/// Offset: 0x754
		/// Size: 0x04
		/// </summary>
		public float SplineBoundaryMin
		{
			get
			{
				return ReadSingle(0x754);
			}
			set
			{
				WriteSingle(0x754,value);
			}
		}
		
		/// <summary>
		/// Name: SplineBoundaryMax
		/// Type: FloatProperty
		/// Offset: 0x758
		/// Size: 0x04
		/// </summary>
		public float SplineBoundaryMax
		{
			get
			{
				return ReadSingle(0x758);
			}
			set
			{
				WriteSingle(0x758,value);
			}
		}
		
		/// <summary>
		/// Name: BodySetup
		/// Type: ObjectProperty
		/// Offset: 0x760
		/// Size: 0x08
		/// </summary>
		public UBodySetup BodySetup => ReadUObject<UBodySetup>(0x760);
		
		/// <summary>
		/// Name: CachedMeshBodySetupGuid
		/// Type: StructProperty
		/// Offset: 0x768
		/// Size: 0x10
		/// </summary>
		public FGuid CachedMeshBodySetupGuid => ReadStruct<FGuid>(0x768);
		
		/// <summary>
		/// Name: bMeshDirty
		/// Type: BoolProperty
		/// Offset: 0x778
		/// Size: 0x01
		/// </summary>
		public bool bMeshDirty => (ReadByte(0x0778) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UModelComponent:UPrimitiveComponent
	/// Size: 0x5E0
	/// Properties: 1
	/// </summary>
	public class UModelComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1504;
		/// <summary>
		/// Name: ModelBodySetup
		/// Type: ObjectProperty
		/// Offset: 0x5B8
		/// Size: 0x08
		/// </summary>
		public UBodySetup ModelBodySetup => ReadUObject<UBodySetup>(0x5B8);
		
	}


	/// <summary>
	/// UNavLinkRenderingComponent:UPrimitiveComponent
	/// Size: 0x5A0
	/// Properties: 0
	/// </summary>
	public class UNavLinkRenderingComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1440;
	}


	/// <summary>
	/// UNavMeshRenderingComponent:UPrimitiveComponent
	/// Size: 0x5B0
	/// Properties: 0
	/// </summary>
	public class UNavMeshRenderingComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1456;
	}


	/// <summary>
	/// UNavTestRenderingComponent:UPrimitiveComponent
	/// Size: 0x5A0
	/// Properties: 0
	/// </summary>
	public class UNavTestRenderingComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1440;
	}


	/// <summary>
	/// UParticleSystem:UObject
	/// Size: 0x138
	/// Properties: 35
	/// </summary>
	public class UParticleSystem:UObject
	{
		public override int ObjectSize => 312;
		/// <summary>
		/// Name: SystemUpdateMode
		/// Type: ByteProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public byte SystemUpdateMode
		{
			get
			{
				return ReadByte(0x28);
			}
			set
			{
				WriteByte(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: UpdateTime_FPS
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float UpdateTime_FPS
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: UpdateTime_Delta
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float UpdateTime_Delta
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: WarmupTime
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float WarmupTime
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: WarmupTickRate
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float WarmupTickRate
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: Emitters
		/// Type: TArray<UParticleEmitter>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x160
		/// </summary>
		public TArray<UParticleEmitter> Emitters => new TArray<UParticleEmitter>(BaseAddress+0x40);
		
		/// <summary>
		/// Name: PreviewComponent
		/// Type: ObjectProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public UParticleSystemComponent PreviewComponent => ReadUObject<UParticleSystemComponent>(0x50);
		
		/// <summary>
		/// Name: CurveEdSetup
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UInterpCurveEdSetup CurveEdSetup => ReadUObject<UInterpCurveEdSetup>(0x58);
		
		/// <summary>
		/// Name: bOrientZAxisTowardCamera
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bOrientZAxisTowardCamera => (ReadByte(0x0060) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LODDistanceCheckTime
		/// Type: FloatProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public float LODDistanceCheckTime
		{
			get
			{
				return ReadSingle(0x64);
			}
			set
			{
				WriteSingle(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: LODMethod
		/// Type: ByteProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public byte LODMethod
		{
			get
			{
				return ReadByte(0x68);
			}
			set
			{
				WriteByte(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: LODDistances
		/// Type: TArray<>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: bRegenerateLODDuplicate
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bRegenerateLODDuplicate => (ReadByte(0x0080) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LODSettings
		/// Type: TArray<FParticleSystemLOD>
		/// Offset: 0x88
		/// Size: 0x10
		/// SubElement Size: 0x01
		/// </summary>
		public TArray<FParticleSystemLOD> LODSettings => new TArray<FParticleSystemLOD>(BaseAddress+0x88);
		
		/// <summary>
		/// Name: bUseFixedRelativeBoundingBox
		/// Type: BoolProperty
		/// Offset: 0x98
		/// Size: 0x01
		/// </summary>
		public bool bUseFixedRelativeBoundingBox => (ReadByte(0x0098) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: FixedRelativeBoundingBox
		/// Type: StructProperty
		/// Offset: 0x9C
		/// Size: 0x1C
		/// </summary>
		public FBox FixedRelativeBoundingBox => ReadStruct<FBox>(0x9C);
		
		/// <summary>
		/// Name: SecondsBeforeInactive
		/// Type: FloatProperty
		/// Offset: 0xB8
		/// Size: 0x04
		/// </summary>
		public float SecondsBeforeInactive
		{
			get
			{
				return ReadSingle(0xB8);
			}
			set
			{
				WriteSingle(0xB8,value);
			}
		}
		
		/// <summary>
		/// Name: bShouldResetPeakCounts
		/// Type: BoolProperty
		/// Offset: 0xBC
		/// Size: 0x01
		/// </summary>
		public bool bShouldResetPeakCounts => (ReadByte(0x00BC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bHasPhysics
		/// Type: BoolProperty
		/// Offset: 0xBC
		/// Size: 0x01
		/// </summary>
		public bool bHasPhysics => (ReadByte(0x00BC) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bUseRealtimeThumbnail
		/// Type: BoolProperty
		/// Offset: 0xBC
		/// Size: 0x01
		/// </summary>
		public bool bUseRealtimeThumbnail => (ReadByte(0x00BC) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: ThumbnailImageOutOfDate
		/// Type: BoolProperty
		/// Offset: 0xBC
		/// Size: 0x01
		/// </summary>
		public bool ThumbnailImageOutOfDate => (ReadByte(0x00BC) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: Delay
		/// Type: FloatProperty
		/// Offset: 0xC0
		/// Size: 0x04
		/// </summary>
		public float Delay
		{
			get
			{
				return ReadSingle(0xC0);
			}
			set
			{
				WriteSingle(0xC0,value);
			}
		}
		
		/// <summary>
		/// Name: DelayLow
		/// Type: FloatProperty
		/// Offset: 0xC4
		/// Size: 0x04
		/// </summary>
		public float DelayLow
		{
			get
			{
				return ReadSingle(0xC4);
			}
			set
			{
				WriteSingle(0xC4,value);
			}
		}
		
		/// <summary>
		/// Name: bUseDelayRange
		/// Type: BoolProperty
		/// Offset: 0xC8
		/// Size: 0x01
		/// </summary>
		public bool bUseDelayRange => (ReadByte(0x00C8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bAutoDeactivate
		/// Type: BoolProperty
		/// Offset: 0xCC
		/// Size: 0x01
		/// </summary>
		public bool bAutoDeactivate
		{
			get
			{
				return ReadBool(0xCC);
			}
			set
			{
				WriteBool(0xCC,value);
			}
		}
		
		/// <summary>
		/// Name: MinTimeBetweenTicks
		/// Type: UInt32Property
		/// Offset: 0xD0
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: InsignificantReaction
		/// Type: ByteProperty
		/// Offset: 0xD4
		/// Size: 0x01
		/// </summary>
		public byte InsignificantReaction
		{
			get
			{
				return ReadByte(0xD4);
			}
			set
			{
				WriteByte(0xD4,value);
			}
		}
		
		/// <summary>
		/// Name: InsignificanceDelay
		/// Type: FloatProperty
		/// Offset: 0xD8
		/// Size: 0x04
		/// </summary>
		public float InsignificanceDelay
		{
			get
			{
				return ReadSingle(0xD8);
			}
			set
			{
				WriteSingle(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: MaxSignificanceLevel
		/// Type: ByteProperty
		/// Offset: 0xDC
		/// Size: 0x01
		/// </summary>
		public byte MaxSignificanceLevel
		{
			get
			{
				return ReadByte(0xDC);
			}
			set
			{
				WriteByte(0xDC,value);
			}
		}
		
		/// <summary>
		/// Name: MacroUVPosition
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x0C
		/// </summary>
		public FVector MacroUVPosition => ReadStruct<FVector>(0xE0);
		
		/// <summary>
		/// Name: MacroUVRadius
		/// Type: FloatProperty
		/// Offset: 0xEC
		/// Size: 0x04
		/// </summary>
		public float MacroUVRadius
		{
			get
			{
				return ReadSingle(0xEC);
			}
			set
			{
				WriteSingle(0xEC,value);
			}
		}
		
		/// <summary>
		/// Name: OcclusionBoundsMethod
		/// Type: ByteProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public byte OcclusionBoundsMethod
		{
			get
			{
				return ReadByte(0xF0);
			}
			set
			{
				WriteByte(0xF0,value);
			}
		}
		
		/// <summary>
		/// Name: CustomOcclusionBounds
		/// Type: StructProperty
		/// Offset: 0xF4
		/// Size: 0x1C
		/// </summary>
		public FBox CustomOcclusionBounds => ReadStruct<FBox>(0xF4);
		
		/// <summary>
		/// Name: SoloTracking
		/// Type: TArray<FLODSoloTrack>
		/// Offset: 0x110
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FLODSoloTrack> SoloTracking => new TArray<FLODSoloTrack>(BaseAddress+0x110);
		
		/// <summary>
		/// Name: NamedMaterialSlots
		/// Type: TArray<FNamedEmitterMaterial>
		/// Offset: 0x120
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FNamedEmitterMaterial> NamedMaterialSlots => new TArray<FNamedEmitterMaterial>(BaseAddress+0x120);
		
	}


	/// <summary>
	/// UParticleEmitter:UObject
	/// Size: 0x160
	/// Properties: 15
	/// </summary>
	public class UParticleEmitter:UObject
	{
		public override int ObjectSize => 352;
		/// <summary>
		/// Name: EmitterName
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SubUVDataOffset
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int SubUVDataOffset
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: EmitterRenderMode
		/// Type: ByteProperty
		/// Offset: 0x34
		/// Size: 0x01
		/// </summary>
		public byte EmitterRenderMode
		{
			get
			{
				return ReadByte(0x34);
			}
			set
			{
				WriteByte(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: LODLevels
		/// Type: TArray<UParticleLODLevel>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0xB8
		/// </summary>
		public TArray<UParticleLODLevel> LODLevels => new TArray<UParticleLODLevel>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: ConvertedModules
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool ConvertedModules => (ReadByte(0x0048) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: PeakActiveParticles
		/// Type: IntProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public int PeakActiveParticles
		{
			get
			{
				return ReadInt32(0x4C);
			}
			set
			{
				WriteInt32(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: InitialAllocationCount
		/// Type: IntProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public int InitialAllocationCount
		{
			get
			{
				return ReadInt32(0x50);
			}
			set
			{
				WriteInt32(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: MediumDetailSpawnRateScale
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float MediumDetailSpawnRateScale
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: QualityLevelSpawnRateScale
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float QualityLevelSpawnRateScale
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: DetailMode
		/// Type: ByteProperty
		/// Offset: 0x5C
		/// Size: 0x01
		/// </summary>
		public byte DetailMode
		{
			get
			{
				return ReadByte(0x5C);
			}
			set
			{
				WriteByte(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: bIsSoloing
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bIsSoloing => (ReadByte(0x0060) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bCookedOut
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bCookedOut => (ReadByte(0x0060) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bDisabledLODsKeepEmitterAlive
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bDisabledLODsKeepEmitterAlive => (ReadByte(0x0060) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bDisableWhenInsignficant
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bDisableWhenInsignficant => (ReadByte(0x0060) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: SignificanceLevel
		/// Type: ByteProperty
		/// Offset: 0x64
		/// Size: 0x01
		/// </summary>
		public byte SignificanceLevel
		{
			get
			{
				return ReadByte(0x64);
			}
			set
			{
				WriteByte(0x64,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleSystemComponent:UPrimitiveComponent
	/// Size: 0x820
	/// Properties: 27
	/// </summary>
	public class UParticleSystemComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 2080;
		/// <summary>
		/// Name: Template
		/// Type: ObjectProperty
		/// Offset: 0x5A0
		/// Size: 0x08
		/// </summary>
		public UParticleSystem Template => ReadUObject<UParticleSystem>(0x5A0);
		
		/// <summary>
		/// Name: EmitterMaterials
		/// Type: TArray<UMaterialInterface>
		/// Offset: 0x5A8
		/// Size: 0x10
		/// SubElement Size: 0x58
		/// </summary>
		public TArray<UMaterialInterface> EmitterMaterials => new TArray<UMaterialInterface>(BaseAddress+0x5A8);
		
		/// <summary>
		/// Name: SkelMeshComponents
		/// Type: TArray<USkeletalMeshComponent>
		/// Offset: 0x5B8
		/// Size: 0x10
		/// SubElement Size: 0xD20
		/// </summary>
		public TArray<USkeletalMeshComponent> SkelMeshComponents => new TArray<USkeletalMeshComponent>(BaseAddress+0x5B8);
		
		/// <summary>
		/// Name: bResetOnDetach
		/// Type: BoolProperty
		/// Offset: 0x5C8
		/// Size: 0x01
		/// </summary>
		public bool bResetOnDetach => (ReadByte(0x05C8) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bUpdateOnDedicatedServer
		/// Type: BoolProperty
		/// Offset: 0x5C9
		/// Size: 0x01
		/// </summary>
		public bool bUpdateOnDedicatedServer => (ReadByte(0x05C9) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bAllowRecycling
		/// Type: BoolProperty
		/// Offset: 0x5C9
		/// Size: 0x01
		/// </summary>
		public bool bAllowRecycling => (ReadByte(0x05C9) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bAutoManageAttachment
		/// Type: BoolProperty
		/// Offset: 0x5C9
		/// Size: 0x01
		/// </summary>
		public bool bAutoManageAttachment => (ReadByte(0x05C9) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: RequiredSignificance
		/// Type: ByteProperty
		/// Offset: 0x5CC
		/// Size: 0x01
		/// </summary>
		public byte RequiredSignificance
		{
			get
			{
				return ReadByte(0x5CC);
			}
			set
			{
				WriteByte(0x5CC,value);
			}
		}
		
		/// <summary>
		/// Name: InstanceParameters
		/// Type: TArray<FParticleSysParam>
		/// Offset: 0x5D8
		/// Size: 0x10
		/// SubElement Size: 0x80
		/// </summary>
		public TArray<FParticleSysParam> InstanceParameters => new TArray<FParticleSysParam>(BaseAddress+0x5D8);
		
		/// <summary>
		/// Name: OldPosition
		/// Type: StructProperty
		/// Offset: 0x628
		/// Size: 0x0C
		/// </summary>
		public FVector OldPosition => ReadStruct<FVector>(0x628);
		
		/// <summary>
		/// Name: PartSysVelocity
		/// Type: StructProperty
		/// Offset: 0x634
		/// Size: 0x0C
		/// </summary>
		public FVector PartSysVelocity => ReadStruct<FVector>(0x634);
		
		/// <summary>
		/// Name: WarmupTime
		/// Type: FloatProperty
		/// Offset: 0x640
		/// Size: 0x04
		/// </summary>
		public float WarmupTime
		{
			get
			{
				return ReadSingle(0x640);
			}
			set
			{
				WriteSingle(0x640,value);
			}
		}
		
		/// <summary>
		/// Name: WarmupTickRate
		/// Type: FloatProperty
		/// Offset: 0x644
		/// Size: 0x04
		/// </summary>
		public float WarmupTickRate
		{
			get
			{
				return ReadSingle(0x644);
			}
			set
			{
				WriteSingle(0x644,value);
			}
		}
		
		/// <summary>
		/// Name: bWarmingUp
		/// Type: BoolProperty
		/// Offset: 0x648
		/// Size: 0x01
		/// </summary>
		public bool bWarmingUp => (ReadByte(0x0648) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: SecondsBeforeInactive
		/// Type: FloatProperty
		/// Offset: 0x654
		/// Size: 0x04
		/// </summary>
		public float SecondsBeforeInactive
		{
			get
			{
				return ReadSingle(0x654);
			}
			set
			{
				WriteSingle(0x654,value);
			}
		}
		
		/// <summary>
		/// Name: MaxTimeBeforeForceUpdateTransform
		/// Type: FloatProperty
		/// Offset: 0x660
		/// Size: 0x04
		/// </summary>
		public float MaxTimeBeforeForceUpdateTransform
		{
			get
			{
				return ReadSingle(0x660);
			}
			set
			{
				WriteSingle(0x660,value);
			}
		}
		
		/// <summary>
		/// Name: bOverrideLODMethod
		/// Type: BoolProperty
		/// Offset: 0x668
		/// Size: 0x01
		/// </summary>
		public bool bOverrideLODMethod => (ReadByte(0x0668) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LODMethod
		/// Type: ByteProperty
		/// Offset: 0x66C
		/// Size: 0x01
		/// </summary>
		public byte LODMethod
		{
			get
			{
				return ReadByte(0x66C);
			}
			set
			{
				WriteByte(0x66C,value);
			}
		}
		
		/// <summary>
		/// Name: bSkipUpdateDynamicDataDuringTick
		/// Type: BoolProperty
		/// Offset: 0x670
		/// Size: 0x01
		/// </summary>
		public bool bSkipUpdateDynamicDataDuringTick => (ReadByte(0x0670) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CachedViewRelevanceFlags
		/// Type: TArray<FMaterialRelevance>
		/// Offset: 0x678
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FMaterialRelevance> CachedViewRelevanceFlags => new TArray<FMaterialRelevance>(BaseAddress+0x678);
		
		/// <summary>
		/// Name: ReplayClips
		/// Type: TArray<UParticleSystemReplay>
		/// Offset: 0x690
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UParticleSystemReplay> ReplayClips => new TArray<UParticleSystemReplay>(BaseAddress+0x690);
		
		/// <summary>
		/// Name: CustomTimeDilation
		/// Type: FloatProperty
		/// Offset: 0x700
		/// Size: 0x04
		/// </summary>
		public float CustomTimeDilation
		{
			get
			{
				return ReadSingle(0x700);
			}
			set
			{
				WriteSingle(0x700,value);
			}
		}
		
		/// <summary>
		/// Name: AutoAttachSocketName
		/// Type: NameProperty
		/// Offset: 0x720
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AutoAttachLocationType
		/// Type: ByteProperty
		/// Offset: 0x728
		/// Size: 0x01
		/// </summary>
		public byte AutoAttachLocationType
		{
			get
			{
				return ReadByte(0x728);
			}
			set
			{
				WriteByte(0x728,value);
			}
		}
		
		/// <summary>
		/// Name: AutoAttachLocationRule
		/// Type: ByteProperty
		/// Offset: 0x729
		/// Size: 0x01
		/// </summary>
		public byte AutoAttachLocationRule
		{
			get
			{
				return ReadByte(0x729);
			}
			set
			{
				WriteByte(0x729,value);
			}
		}
		
		/// <summary>
		/// Name: AutoAttachRotationRule
		/// Type: ByteProperty
		/// Offset: 0x72A
		/// Size: 0x01
		/// </summary>
		public byte AutoAttachRotationRule
		{
			get
			{
				return ReadByte(0x72A);
			}
			set
			{
				WriteByte(0x72A,value);
			}
		}
		
		/// <summary>
		/// Name: AutoAttachScaleRule
		/// Type: ByteProperty
		/// Offset: 0x72B
		/// Size: 0x01
		/// </summary>
		public byte AutoAttachScaleRule
		{
			get
			{
				return ReadByte(0x72B);
			}
			set
			{
				WriteByte(0x72B,value);
			}
		}
		
	}


	/// <summary>
	/// UBoxComponent:UShapeComponent
	/// Size: 0x5E0
	/// Properties: 1
	/// </summary>
	public class UBoxComponent:UShapeComponent
	{
		public override int ObjectSize => 1504;
		/// <summary>
		/// Name: BoxExtent
		/// Type: StructProperty
		/// Offset: 0x5C8
		/// Size: 0x0C
		/// </summary>
		public FVector BoxExtent => ReadStruct<FVector>(0x5C8);
		
	}


	/// <summary>
	/// UCapsuleComponent:UShapeComponent
	/// Size: 0x5E0
	/// Properties: 3
	/// </summary>
	public class UCapsuleComponent:UShapeComponent
	{
		public override int ObjectSize => 1504;
		/// <summary>
		/// Name: CapsuleHalfHeight
		/// Type: FloatProperty
		/// Offset: 0x5C8
		/// Size: 0x04
		/// </summary>
		public float CapsuleHalfHeight
		{
			get
			{
				return ReadSingle(0x5C8);
			}
			set
			{
				WriteSingle(0x5C8,value);
			}
		}
		
		/// <summary>
		/// Name: CapsuleRadius
		/// Type: FloatProperty
		/// Offset: 0x5CC
		/// Size: 0x04
		/// </summary>
		public float CapsuleRadius
		{
			get
			{
				return ReadSingle(0x5CC);
			}
			set
			{
				WriteSingle(0x5CC,value);
			}
		}
		
		/// <summary>
		/// Name: CapsuleHeight
		/// Type: FloatProperty
		/// Offset: 0x5D0
		/// Size: 0x04
		/// </summary>
		public float CapsuleHeight
		{
			get
			{
				return ReadSingle(0x5D0);
			}
			set
			{
				WriteSingle(0x5D0,value);
			}
		}
		
	}


	/// <summary>
	/// USphereComponent:UShapeComponent
	/// Size: 0x5D0
	/// Properties: 1
	/// </summary>
	public class USphereComponent:UShapeComponent
	{
		public override int ObjectSize => 1488;
		/// <summary>
		/// Name: SphereRadius
		/// Type: FloatProperty
		/// Offset: 0x5C8
		/// Size: 0x04
		/// </summary>
		public float SphereRadius
		{
			get
			{
				return ReadSingle(0x5C8);
			}
			set
			{
				WriteSingle(0x5C8,value);
			}
		}
		
	}


	/// <summary>
	/// UDrawSphereComponent:USphereComponent
	/// Size: 0x5D0
	/// Properties: 0
	/// </summary>
	public class UDrawSphereComponent:USphereComponent
	{
		public override int ObjectSize => 1488;
	}


	/// <summary>
	/// UTextRenderComponent:UPrimitiveComponent
	/// Size: 0x5F0
	/// Properties: 13
	/// </summary>
	public class UTextRenderComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1520;
		/// <summary>
		/// Name: Text
		/// Type: TextProperty
		/// Offset: 0x5A0
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: TextMaterial
		/// Type: ObjectProperty
		/// Offset: 0x5B8
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface TextMaterial => ReadUObject<UMaterialInterface>(0x5B8);
		
		/// <summary>
		/// Name: Font
		/// Type: ObjectProperty
		/// Offset: 0x5C0
		/// Size: 0x08
		/// </summary>
		public UFont Font => ReadUObject<UFont>(0x5C0);
		
		/// <summary>
		/// Name: HorizontalAlignment
		/// Type: ByteProperty
		/// Offset: 0x5C8
		/// Size: 0x01
		/// </summary>
		public byte HorizontalAlignment
		{
			get
			{
				return ReadByte(0x5C8);
			}
			set
			{
				WriteByte(0x5C8,value);
			}
		}
		
		/// <summary>
		/// Name: VerticalAlignment
		/// Type: ByteProperty
		/// Offset: 0x5C9
		/// Size: 0x01
		/// </summary>
		public byte VerticalAlignment
		{
			get
			{
				return ReadByte(0x5C9);
			}
			set
			{
				WriteByte(0x5C9,value);
			}
		}
		
		/// <summary>
		/// Name: TextRenderColor
		/// Type: StructProperty
		/// Offset: 0x5CC
		/// Size: 0x04
		/// </summary>
		public FColor TextRenderColor => ReadStruct<FColor>(0x5CC);
		
		/// <summary>
		/// Name: XScale
		/// Type: FloatProperty
		/// Offset: 0x5D0
		/// Size: 0x04
		/// </summary>
		public float XScale
		{
			get
			{
				return ReadSingle(0x5D0);
			}
			set
			{
				WriteSingle(0x5D0,value);
			}
		}
		
		/// <summary>
		/// Name: YScale
		/// Type: FloatProperty
		/// Offset: 0x5D4
		/// Size: 0x04
		/// </summary>
		public float YScale
		{
			get
			{
				return ReadSingle(0x5D4);
			}
			set
			{
				WriteSingle(0x5D4,value);
			}
		}
		
		/// <summary>
		/// Name: WorldSize
		/// Type: FloatProperty
		/// Offset: 0x5D8
		/// Size: 0x04
		/// </summary>
		public float WorldSize
		{
			get
			{
				return ReadSingle(0x5D8);
			}
			set
			{
				WriteSingle(0x5D8,value);
			}
		}
		
		/// <summary>
		/// Name: InvDefaultSize
		/// Type: FloatProperty
		/// Offset: 0x5DC
		/// Size: 0x04
		/// </summary>
		public float InvDefaultSize
		{
			get
			{
				return ReadSingle(0x5DC);
			}
			set
			{
				WriteSingle(0x5DC,value);
			}
		}
		
		/// <summary>
		/// Name: HorizSpacingAdjust
		/// Type: FloatProperty
		/// Offset: 0x5E0
		/// Size: 0x04
		/// </summary>
		public float HorizSpacingAdjust
		{
			get
			{
				return ReadSingle(0x5E0);
			}
			set
			{
				WriteSingle(0x5E0,value);
			}
		}
		
		/// <summary>
		/// Name: VertSpacingAdjust
		/// Type: FloatProperty
		/// Offset: 0x5E4
		/// Size: 0x04
		/// </summary>
		public float VertSpacingAdjust
		{
			get
			{
				return ReadSingle(0x5E4);
			}
			set
			{
				WriteSingle(0x5E4,value);
			}
		}
		
		/// <summary>
		/// Name: bAlwaysRenderAsText
		/// Type: BoolProperty
		/// Offset: 0x5E8
		/// Size: 0x01
		/// </summary>
		public bool bAlwaysRenderAsText => (ReadByte(0x05E8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UVectorFieldComponent:UPrimitiveComponent
	/// Size: 0x5D0
	/// Properties: 4
	/// </summary>
	public class UVectorFieldComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1488;
		/// <summary>
		/// Name: VectorField
		/// Type: ObjectProperty
		/// Offset: 0x5A0
		/// Size: 0x08
		/// </summary>
		public UVectorField VectorField => ReadUObject<UVectorField>(0x5A0);
		
		/// <summary>
		/// Name: Intensity
		/// Type: FloatProperty
		/// Offset: 0x5A8
		/// Size: 0x04
		/// </summary>
		public float Intensity
		{
			get
			{
				return ReadSingle(0x5A8);
			}
			set
			{
				WriteSingle(0x5A8,value);
			}
		}
		
		/// <summary>
		/// Name: Tightness
		/// Type: FloatProperty
		/// Offset: 0x5AC
		/// Size: 0x04
		/// </summary>
		public float Tightness
		{
			get
			{
				return ReadSingle(0x5AC);
			}
			set
			{
				WriteSingle(0x5AC,value);
			}
		}
		
		/// <summary>
		/// Name: bPreviewVectorField
		/// Type: BoolProperty
		/// Offset: 0x5B0
		/// Size: 0x01
		/// </summary>
		public bool bPreviewVectorField => (ReadByte(0x05B0) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// URadialForceComponent:USceneComponent
	/// Size: 0x250
	/// Properties: 8
	/// </summary>
	public class URadialForceComponent:USceneComponent
	{
		public override int ObjectSize => 592;
		/// <summary>
		/// Name: Radius
		/// Type: FloatProperty
		/// Offset: 0x218
		/// Size: 0x04
		/// </summary>
		public float Radius
		{
			get
			{
				return ReadSingle(0x218);
			}
			set
			{
				WriteSingle(0x218,value);
			}
		}
		
		/// <summary>
		/// Name: Falloff
		/// Type: ByteProperty
		/// Offset: 0x21C
		/// Size: 0x01
		/// </summary>
		public byte Falloff
		{
			get
			{
				return ReadByte(0x21C);
			}
			set
			{
				WriteByte(0x21C,value);
			}
		}
		
		/// <summary>
		/// Name: ImpulseStrength
		/// Type: FloatProperty
		/// Offset: 0x220
		/// Size: 0x04
		/// </summary>
		public float ImpulseStrength
		{
			get
			{
				return ReadSingle(0x220);
			}
			set
			{
				WriteSingle(0x220,value);
			}
		}
		
		/// <summary>
		/// Name: bImpulseVelChange
		/// Type: BoolProperty
		/// Offset: 0x224
		/// Size: 0x01
		/// </summary>
		public bool bImpulseVelChange => (ReadByte(0x0224) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bIgnoreOwningActor
		/// Type: BoolProperty
		/// Offset: 0x224
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreOwningActor => (ReadByte(0x0224) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: ForceStrength
		/// Type: FloatProperty
		/// Offset: 0x228
		/// Size: 0x04
		/// </summary>
		public float ForceStrength
		{
			get
			{
				return ReadSingle(0x228);
			}
			set
			{
				WriteSingle(0x228,value);
			}
		}
		
		/// <summary>
		/// Name: DestructibleDamage
		/// Type: FloatProperty
		/// Offset: 0x22C
		/// Size: 0x04
		/// </summary>
		public float DestructibleDamage
		{
			get
			{
				return ReadSingle(0x22C);
			}
			set
			{
				WriteSingle(0x22C,value);
			}
		}
		
		/// <summary>
		/// Name: ObjectTypesToAffect
		/// Type: TArray<>
		/// Offset: 0x230
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// UReflectionCaptureComponent:USceneComponent
	/// Size: 0x290
	/// Properties: 7
	/// </summary>
	public class UReflectionCaptureComponent:USceneComponent
	{
		public override int ObjectSize => 656;
		/// <summary>
		/// Name: CaptureOffsetComponent
		/// Type: ObjectProperty
		/// Offset: 0x218
		/// Size: 0x08
		/// </summary>
		public UBillboardComponent CaptureOffsetComponent => ReadUObject<UBillboardComponent>(0x218);
		
		/// <summary>
		/// Name: ReflectionSourceType
		/// Type: ByteProperty
		/// Offset: 0x220
		/// Size: 0x01
		/// </summary>
		public byte ReflectionSourceType
		{
			get
			{
				return ReadByte(0x220);
			}
			set
			{
				WriteByte(0x220,value);
			}
		}
		
		/// <summary>
		/// Name: Cubemap
		/// Type: ObjectProperty
		/// Offset: 0x228
		/// Size: 0x08
		/// </summary>
		public UTextureCube Cubemap => ReadUObject<UTextureCube>(0x228);
		
		/// <summary>
		/// Name: SourceCubemapAngle
		/// Type: FloatProperty
		/// Offset: 0x230
		/// Size: 0x04
		/// </summary>
		public float SourceCubemapAngle
		{
			get
			{
				return ReadSingle(0x230);
			}
			set
			{
				WriteSingle(0x230,value);
			}
		}
		
		/// <summary>
		/// Name: Brightness
		/// Type: FloatProperty
		/// Offset: 0x234
		/// Size: 0x04
		/// </summary>
		public float Brightness
		{
			get
			{
				return ReadSingle(0x234);
			}
			set
			{
				WriteSingle(0x234,value);
			}
		}
		
		/// <summary>
		/// Name: CaptureOffset
		/// Type: StructProperty
		/// Offset: 0x238
		/// Size: 0x0C
		/// </summary>
		public FVector CaptureOffset => ReadStruct<FVector>(0x238);
		
		/// <summary>
		/// Name: StateId
		/// Type: StructProperty
		/// Offset: 0x254
		/// Size: 0x10
		/// </summary>
		public FGuid StateId => ReadStruct<FGuid>(0x254);
		
	}


	/// <summary>
	/// UBoxReflectionCaptureComponent:UReflectionCaptureComponent
	/// Size: 0x2B0
	/// Properties: 3
	/// </summary>
	public class UBoxReflectionCaptureComponent:UReflectionCaptureComponent
	{
		public override int ObjectSize => 688;
		/// <summary>
		/// Name: BoxTransitionDistance
		/// Type: FloatProperty
		/// Offset: 0x290
		/// Size: 0x04
		/// </summary>
		public float BoxTransitionDistance
		{
			get
			{
				return ReadSingle(0x290);
			}
			set
			{
				WriteSingle(0x290,value);
			}
		}
		
		/// <summary>
		/// Name: PreviewInfluenceBox
		/// Type: ObjectProperty
		/// Offset: 0x298
		/// Size: 0x08
		/// </summary>
		public UBoxComponent PreviewInfluenceBox => ReadUObject<UBoxComponent>(0x298);
		
		/// <summary>
		/// Name: PreviewCaptureBox
		/// Type: ObjectProperty
		/// Offset: 0x2A0
		/// Size: 0x08
		/// </summary>
		public UBoxComponent PreviewCaptureBox => ReadUObject<UBoxComponent>(0x2A0);
		
	}


	/// <summary>
	/// UPlaneReflectionCaptureComponent:UReflectionCaptureComponent
	/// Size: 0x2B0
	/// Properties: 3
	/// </summary>
	public class UPlaneReflectionCaptureComponent:UReflectionCaptureComponent
	{
		public override int ObjectSize => 688;
		/// <summary>
		/// Name: InfluenceRadiusScale
		/// Type: FloatProperty
		/// Offset: 0x290
		/// Size: 0x04
		/// </summary>
		public float InfluenceRadiusScale
		{
			get
			{
				return ReadSingle(0x290);
			}
			set
			{
				WriteSingle(0x290,value);
			}
		}
		
		/// <summary>
		/// Name: PreviewInfluenceRadius
		/// Type: ObjectProperty
		/// Offset: 0x298
		/// Size: 0x08
		/// </summary>
		public UDrawSphereComponent PreviewInfluenceRadius => ReadUObject<UDrawSphereComponent>(0x298);
		
		/// <summary>
		/// Name: PreviewCaptureBox
		/// Type: ObjectProperty
		/// Offset: 0x2A0
		/// Size: 0x08
		/// </summary>
		public UBoxComponent PreviewCaptureBox => ReadUObject<UBoxComponent>(0x2A0);
		
	}


	/// <summary>
	/// USphereReflectionCaptureComponent:UReflectionCaptureComponent
	/// Size: 0x2A0
	/// Properties: 3
	/// </summary>
	public class USphereReflectionCaptureComponent:UReflectionCaptureComponent
	{
		public override int ObjectSize => 672;
		/// <summary>
		/// Name: InfluenceRadius
		/// Type: FloatProperty
		/// Offset: 0x290
		/// Size: 0x04
		/// </summary>
		public float InfluenceRadius
		{
			get
			{
				return ReadSingle(0x290);
			}
			set
			{
				WriteSingle(0x290,value);
			}
		}
		
		/// <summary>
		/// Name: CaptureDistanceScale
		/// Type: FloatProperty
		/// Offset: 0x294
		/// Size: 0x04
		/// </summary>
		public float CaptureDistanceScale
		{
			get
			{
				return ReadSingle(0x294);
			}
			set
			{
				WriteSingle(0x294,value);
			}
		}
		
		/// <summary>
		/// Name: PreviewInfluenceRadius
		/// Type: ObjectProperty
		/// Offset: 0x298
		/// Size: 0x08
		/// </summary>
		public UDrawSphereComponent PreviewInfluenceRadius => ReadUObject<UDrawSphereComponent>(0x298);
		
	}


	/// <summary>
	/// UPlanarReflectionComponent:USceneCaptureComponent
	/// Size: 0x330
	/// Properties: 10
	/// </summary>
	public class UPlanarReflectionComponent:USceneCaptureComponent
	{
		public override int ObjectSize => 816;
		/// <summary>
		/// Name: PreviewBox
		/// Type: ObjectProperty
		/// Offset: 0x298
		/// Size: 0x08
		/// </summary>
		public UBoxComponent PreviewBox => ReadUObject<UBoxComponent>(0x298);
		
		/// <summary>
		/// Name: NormalDistortionStrength
		/// Type: FloatProperty
		/// Offset: 0x2A0
		/// Size: 0x04
		/// </summary>
		public float NormalDistortionStrength
		{
			get
			{
				return ReadSingle(0x2A0);
			}
			set
			{
				WriteSingle(0x2A0,value);
			}
		}
		
		/// <summary>
		/// Name: PrefilterRoughness
		/// Type: FloatProperty
		/// Offset: 0x2A4
		/// Size: 0x04
		/// </summary>
		public float PrefilterRoughness
		{
			get
			{
				return ReadSingle(0x2A4);
			}
			set
			{
				WriteSingle(0x2A4,value);
			}
		}
		
		/// <summary>
		/// Name: PrefilterRoughnessDistance
		/// Type: FloatProperty
		/// Offset: 0x2A8
		/// Size: 0x04
		/// </summary>
		public float PrefilterRoughnessDistance
		{
			get
			{
				return ReadSingle(0x2A8);
			}
			set
			{
				WriteSingle(0x2A8,value);
			}
		}
		
		/// <summary>
		/// Name: ScreenPercentage
		/// Type: IntProperty
		/// Offset: 0x2AC
		/// Size: 0x04
		/// </summary>
		public int ScreenPercentage
		{
			get
			{
				return ReadInt32(0x2AC);
			}
			set
			{
				WriteInt32(0x2AC,value);
			}
		}
		
		/// <summary>
		/// Name: ExtraFOV
		/// Type: FloatProperty
		/// Offset: 0x2B0
		/// Size: 0x04
		/// </summary>
		public float ExtraFOV
		{
			get
			{
				return ReadSingle(0x2B0);
			}
			set
			{
				WriteSingle(0x2B0,value);
			}
		}
		
		/// <summary>
		/// Name: DistanceFromPlaneFadeStart
		/// Type: FloatProperty
		/// Offset: 0x2B4
		/// Size: 0x04
		/// </summary>
		public float DistanceFromPlaneFadeStart
		{
			get
			{
				return ReadSingle(0x2B4);
			}
			set
			{
				WriteSingle(0x2B4,value);
			}
		}
		
		/// <summary>
		/// Name: DistanceFromPlaneFadeEnd
		/// Type: FloatProperty
		/// Offset: 0x2B8
		/// Size: 0x04
		/// </summary>
		public float DistanceFromPlaneFadeEnd
		{
			get
			{
				return ReadSingle(0x2B8);
			}
			set
			{
				WriteSingle(0x2B8,value);
			}
		}
		
		/// <summary>
		/// Name: AngleFromPlaneFadeStart
		/// Type: FloatProperty
		/// Offset: 0x2BC
		/// Size: 0x04
		/// </summary>
		public float AngleFromPlaneFadeStart
		{
			get
			{
				return ReadSingle(0x2BC);
			}
			set
			{
				WriteSingle(0x2BC,value);
			}
		}
		
		/// <summary>
		/// Name: AngleFromPlaneFadeEnd
		/// Type: FloatProperty
		/// Offset: 0x2C0
		/// Size: 0x04
		/// </summary>
		public float AngleFromPlaneFadeEnd
		{
			get
			{
				return ReadSingle(0x2C0);
			}
			set
			{
				WriteSingle(0x2C0,value);
			}
		}
		
	}


	/// <summary>
	/// USceneCaptureComponent2D:USceneCaptureComponent
	/// Size: 0x660
	/// Properties: 5
	/// </summary>
	public class USceneCaptureComponent2D:USceneCaptureComponent
	{
		public override int ObjectSize => 1632;
		/// <summary>
		/// Name: FOVAngle
		/// Type: FloatProperty
		/// Offset: 0x298
		/// Size: 0x04
		/// </summary>
		public float FOVAngle
		{
			get
			{
				return ReadSingle(0x298);
			}
			set
			{
				WriteSingle(0x298,value);
			}
		}
		
		/// <summary>
		/// Name: TextureTarget
		/// Type: ObjectProperty
		/// Offset: 0x2A0
		/// Size: 0x08
		/// </summary>
		public UTextureRenderTarget2D TextureTarget => ReadUObject<UTextureRenderTarget2D>(0x2A0);
		
		/// <summary>
		/// Name: CaptureSource
		/// Type: ByteProperty
		/// Offset: 0x2A8
		/// Size: 0x01
		/// </summary>
		public byte CaptureSource
		{
			get
			{
				return ReadByte(0x2A8);
			}
			set
			{
				WriteByte(0x2A8,value);
			}
		}
		
		/// <summary>
		/// Name: PostProcessSettings
		/// Type: StructProperty
		/// Offset: 0x2B0
		/// Size: 0x3A0
		/// </summary>
		public FPostProcessSettings PostProcessSettings => ReadStruct<FPostProcessSettings>(0x2B0);
		
		/// <summary>
		/// Name: PostProcessBlendWeight
		/// Type: FloatProperty
		/// Offset: 0x650
		/// Size: 0x04
		/// </summary>
		public float PostProcessBlendWeight
		{
			get
			{
				return ReadSingle(0x650);
			}
			set
			{
				WriteSingle(0x650,value);
			}
		}
		
	}


	/// <summary>
	/// USceneCaptureComponentCube:USceneCaptureComponent
	/// Size: 0x2A0
	/// Properties: 1
	/// </summary>
	public class USceneCaptureComponentCube:USceneCaptureComponent
	{
		public override int ObjectSize => 672;
		/// <summary>
		/// Name: TextureTarget
		/// Type: ObjectProperty
		/// Offset: 0x298
		/// Size: 0x08
		/// </summary>
		public UTextureRenderTargetCube TextureTarget => ReadUObject<UTextureRenderTargetCube>(0x298);
		
	}


	/// <summary>
	/// USpringArmComponent:USceneComponent
	/// Size: 0x2A0
	/// Properties: 18
	/// </summary>
	public class USpringArmComponent:USceneComponent
	{
		public override int ObjectSize => 672;
		/// <summary>
		/// Name: TargetArmLength
		/// Type: FloatProperty
		/// Offset: 0x218
		/// Size: 0x04
		/// </summary>
		public float TargetArmLength
		{
			get
			{
				return ReadSingle(0x218);
			}
			set
			{
				WriteSingle(0x218,value);
			}
		}
		
		/// <summary>
		/// Name: SocketOffset
		/// Type: StructProperty
		/// Offset: 0x21C
		/// Size: 0x0C
		/// </summary>
		public FVector SocketOffset => ReadStruct<FVector>(0x21C);
		
		/// <summary>
		/// Name: TargetOffset
		/// Type: StructProperty
		/// Offset: 0x228
		/// Size: 0x0C
		/// </summary>
		public FVector TargetOffset => ReadStruct<FVector>(0x228);
		
		/// <summary>
		/// Name: ProbeSize
		/// Type: FloatProperty
		/// Offset: 0x234
		/// Size: 0x04
		/// </summary>
		public float ProbeSize
		{
			get
			{
				return ReadSingle(0x234);
			}
			set
			{
				WriteSingle(0x234,value);
			}
		}
		
		/// <summary>
		/// Name: ProbeChannel
		/// Type: ByteProperty
		/// Offset: 0x238
		/// Size: 0x01
		/// </summary>
		public byte ProbeChannel
		{
			get
			{
				return ReadByte(0x238);
			}
			set
			{
				WriteByte(0x238,value);
			}
		}
		
		/// <summary>
		/// Name: bDoCollisionTest
		/// Type: BoolProperty
		/// Offset: 0x23C
		/// Size: 0x01
		/// </summary>
		public bool bDoCollisionTest => (ReadByte(0x023C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUsePawnControlRotation
		/// Type: BoolProperty
		/// Offset: 0x23C
		/// Size: 0x01
		/// </summary>
		public bool bUsePawnControlRotation => (ReadByte(0x023C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bInheritPitch
		/// Type: BoolProperty
		/// Offset: 0x23C
		/// Size: 0x01
		/// </summary>
		public bool bInheritPitch => (ReadByte(0x023C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bInheritYaw
		/// Type: BoolProperty
		/// Offset: 0x23C
		/// Size: 0x01
		/// </summary>
		public bool bInheritYaw => (ReadByte(0x023C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bInheritRoll
		/// Type: BoolProperty
		/// Offset: 0x23C
		/// Size: 0x01
		/// </summary>
		public bool bInheritRoll => (ReadByte(0x023C) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bEnableCameraLag
		/// Type: BoolProperty
		/// Offset: 0x23C
		/// Size: 0x01
		/// </summary>
		public bool bEnableCameraLag => (ReadByte(0x023C) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bEnableCameraRotationLag
		/// Type: BoolProperty
		/// Offset: 0x23C
		/// Size: 0x01
		/// </summary>
		public bool bEnableCameraRotationLag => (ReadByte(0x023C) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bUseCameraLagSubstepping
		/// Type: BoolProperty
		/// Offset: 0x23C
		/// Size: 0x01
		/// </summary>
		public bool bUseCameraLagSubstepping => (ReadByte(0x023C) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bDrawDebugLagMarkers
		/// Type: BoolProperty
		/// Offset: 0x23D
		/// Size: 0x01
		/// </summary>
		public bool bDrawDebugLagMarkers => (ReadByte(0x023D) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CameraLagSpeed
		/// Type: FloatProperty
		/// Offset: 0x240
		/// Size: 0x04
		/// </summary>
		public float CameraLagSpeed
		{
			get
			{
				return ReadSingle(0x240);
			}
			set
			{
				WriteSingle(0x240,value);
			}
		}
		
		/// <summary>
		/// Name: CameraRotationLagSpeed
		/// Type: FloatProperty
		/// Offset: 0x244
		/// Size: 0x04
		/// </summary>
		public float CameraRotationLagSpeed
		{
			get
			{
				return ReadSingle(0x244);
			}
			set
			{
				WriteSingle(0x244,value);
			}
		}
		
		/// <summary>
		/// Name: CameraLagMaxTimeStep
		/// Type: FloatProperty
		/// Offset: 0x248
		/// Size: 0x04
		/// </summary>
		public float CameraLagMaxTimeStep
		{
			get
			{
				return ReadSingle(0x248);
			}
			set
			{
				WriteSingle(0x248,value);
			}
		}
		
		/// <summary>
		/// Name: CameraLagMaxDistance
		/// Type: FloatProperty
		/// Offset: 0x24C
		/// Size: 0x04
		/// </summary>
		public float CameraLagMaxDistance
		{
			get
			{
				return ReadSingle(0x24C);
			}
			set
			{
				WriteSingle(0x24C,value);
			}
		}
		
	}


	/// <summary>
	/// UStereoLayerComponent:USceneComponent
	/// Size: 0x2A0
	/// Properties: 8
	/// </summary>
	public class UStereoLayerComponent:USceneComponent
	{
		public override int ObjectSize => 672;
		/// <summary>
		/// Name: bLiveTexture
		/// Type: BoolProperty
		/// Offset: 0x218
		/// Size: 0x01
		/// </summary>
		public bool bLiveTexture => (ReadByte(0x0218) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bNoAlphaChannel
		/// Type: BoolProperty
		/// Offset: 0x218
		/// Size: 0x01
		/// </summary>
		public bool bNoAlphaChannel => (ReadByte(0x0218) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: Texture
		/// Type: ObjectProperty
		/// Offset: 0x220
		/// Size: 0x08
		/// </summary>
		public UTexture Texture => ReadUObject<UTexture>(0x220);
		
		/// <summary>
		/// Name: bQuadPreserveTextureRatio
		/// Type: BoolProperty
		/// Offset: 0x228
		/// Size: 0x01
		/// </summary>
		public bool bQuadPreserveTextureRatio => (ReadByte(0x0228) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: QuadSize
		/// Type: StructProperty
		/// Offset: 0x22C
		/// Size: 0x08
		/// </summary>
		public FVector2D QuadSize => ReadStruct<FVector2D>(0x22C);
		
		/// <summary>
		/// Name: UVRect
		/// Type: StructProperty
		/// Offset: 0x234
		/// Size: 0x14
		/// </summary>
		public FBox2D UVRect => ReadStruct<FBox2D>(0x234);
		
		/// <summary>
		/// Name: StereoLayerType
		/// Type: ByteProperty
		/// Offset: 0x248
		/// Size: 0x01
		/// </summary>
		public byte StereoLayerType
		{
			get
			{
				return ReadByte(0x248);
			}
			set
			{
				WriteByte(0x248,value);
			}
		}
		
		/// <summary>
		/// Name: Priority
		/// Type: IntProperty
		/// Offset: 0x24C
		/// Size: 0x04
		/// </summary>
		public int Priority
		{
			get
			{
				return ReadInt32(0x24C);
			}
			set
			{
				WriteInt32(0x24C,value);
			}
		}
		
	}


	/// <summary>
	/// UWindDirectionalSourceComponent:USceneComponent
	/// Size: 0x240
	/// Properties: 6
	/// </summary>
	public class UWindDirectionalSourceComponent:USceneComponent
	{
		public override int ObjectSize => 576;
		/// <summary>
		/// Name: Strength
		/// Type: FloatProperty
		/// Offset: 0x218
		/// Size: 0x04
		/// </summary>
		public float Strength
		{
			get
			{
				return ReadSingle(0x218);
			}
			set
			{
				WriteSingle(0x218,value);
			}
		}
		
		/// <summary>
		/// Name: Speed
		/// Type: FloatProperty
		/// Offset: 0x21C
		/// Size: 0x04
		/// </summary>
		public float Speed
		{
			get
			{
				return ReadSingle(0x21C);
			}
			set
			{
				WriteSingle(0x21C,value);
			}
		}
		
		/// <summary>
		/// Name: MinGustAmount
		/// Type: FloatProperty
		/// Offset: 0x220
		/// Size: 0x04
		/// </summary>
		public float MinGustAmount
		{
			get
			{
				return ReadSingle(0x220);
			}
			set
			{
				WriteSingle(0x220,value);
			}
		}
		
		/// <summary>
		/// Name: MaxGustAmount
		/// Type: FloatProperty
		/// Offset: 0x224
		/// Size: 0x04
		/// </summary>
		public float MaxGustAmount
		{
			get
			{
				return ReadSingle(0x224);
			}
			set
			{
				WriteSingle(0x224,value);
			}
		}
		
		/// <summary>
		/// Name: Radius
		/// Type: FloatProperty
		/// Offset: 0x228
		/// Size: 0x04
		/// </summary>
		public float Radius
		{
			get
			{
				return ReadSingle(0x228);
			}
			set
			{
				WriteSingle(0x228,value);
			}
		}
		
		/// <summary>
		/// Name: bPointWind
		/// Type: BoolProperty
		/// Offset: 0x22C
		/// Size: 0x01
		/// </summary>
		public bool bPointWind => (ReadByte(0x022C) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UTimelineComponent:UActorComponent
	/// Size: 0x1C0
	/// Properties: 1
	/// </summary>
	public class UTimelineComponent:UActorComponent
	{
		public override int ObjectSize => 448;
		/// <summary>
		/// Name: TheTimeline
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0xE0
		/// </summary>
		public FTimeline TheTimeline => ReadStruct<FTimeline>(0xE0);
		
	}


	/// <summary>
	/// UAnimSequenceBase:UAnimationAsset
	/// Size: 0x90
	/// Properties: 4
	/// </summary>
	public class UAnimSequenceBase:UAnimationAsset
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: Notifies
		/// Type: TArray<FAnimNotifyEvent>
		/// Offset: 0x68
		/// Size: 0x10
		/// SubElement Size: 0xA8
		/// </summary>
		public TArray<FAnimNotifyEvent> Notifies => new TArray<FAnimNotifyEvent>(BaseAddress+0x68);
		
		/// <summary>
		/// Name: SequenceLength
		/// Type: FloatProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public float SequenceLength
		{
			get
			{
				return ReadSingle(0x78);
			}
			set
			{
				WriteSingle(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: RateScale
		/// Type: FloatProperty
		/// Offset: 0x7C
		/// Size: 0x04
		/// </summary>
		public float RateScale
		{
			get
			{
				return ReadSingle(0x7C);
			}
			set
			{
				WriteSingle(0x7C,value);
			}
		}
		
		/// <summary>
		/// Name: RawCurveData
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FRawCurveTracks RawCurveData => ReadStruct<FRawCurveTracks>(0x80);
		
	}


	/// <summary>
	/// UAnimCompositeBase:UAnimSequenceBase
	/// Size: 0x90
	/// Properties: 0
	/// </summary>
	public class UAnimCompositeBase:UAnimSequenceBase
	{
		public override int ObjectSize => 144;
	}


	/// <summary>
	/// UAnimComposite:UAnimCompositeBase
	/// Size: 0xA0
	/// Properties: 1
	/// </summary>
	public class UAnimComposite:UAnimCompositeBase
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: AnimationTrack
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x10
		/// </summary>
		public FAnimTrack AnimationTrack => ReadStruct<FAnimTrack>(0x90);
		
	}


	/// <summary>
	/// UAnimStateMachineTypes:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UAnimStateMachineTypes:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAnimClassInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UAnimClassInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAnimInstance:UObject
	/// Size: 0x480
	/// Properties: 8
	/// </summary>
	public class UAnimInstance:UObject
	{
		public override int ObjectSize => 1152;
		/// <summary>
		/// Name: DeltaTime
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float DeltaTime
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentSkeleton
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public USkeleton CurrentSkeleton => ReadUObject<USkeleton>(0x30);
		
		/// <summary>
		/// Name: RootMotionMode
		/// Type: ByteProperty
		/// Offset: 0x88
		/// Size: 0x01
		/// </summary>
		public byte RootMotionMode
		{
			get
			{
				return ReadByte(0x88);
			}
			set
			{
				WriteByte(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: bRunUpdatesInWorkerThreads
		/// Type: BoolProperty
		/// Offset: 0x89
		/// Size: 0x01
		/// </summary>
		public bool bRunUpdatesInWorkerThreads
		{
			get
			{
				return ReadBool(0x89);
			}
			set
			{
				WriteBool(0x89,value);
			}
		}
		
		/// <summary>
		/// Name: bCanUseParallelUpdateAnimation
		/// Type: BoolProperty
		/// Offset: 0x8A
		/// Size: 0x01
		/// </summary>
		public bool bCanUseParallelUpdateAnimation
		{
			get
			{
				return ReadBool(0x8A);
			}
			set
			{
				WriteBool(0x8A,value);
			}
		}
		
		/// <summary>
		/// Name: bWarnAboutBlueprintUsage
		/// Type: BoolProperty
		/// Offset: 0x8B
		/// Size: 0x01
		/// </summary>
		public bool bWarnAboutBlueprintUsage
		{
			get
			{
				return ReadBool(0x8B);
			}
			set
			{
				WriteBool(0x8B,value);
			}
		}
		
		/// <summary>
		/// Name: bQueueMontageEvents
		/// Type: BoolProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public bool bQueueMontageEvents
		{
			get
			{
				return ReadBool(0x130);
			}
			set
			{
				WriteBool(0x130,value);
			}
		}
		
		/// <summary>
		/// Name: ActiveAnimNotifyState
		/// Type: TArray<FAnimNotifyEvent>
		/// Offset: 0x298
		/// Size: 0x10
		/// SubElement Size: 0xA8
		/// </summary>
		public TArray<FAnimNotifyEvent> ActiveAnimNotifyState => new TArray<FAnimNotifyEvent>(BaseAddress+0x298);
		
	}


	/// <summary>
	/// UAnimMontage:UAnimCompositeBase
	/// Size: 0x198
	/// Properties: 16
	/// </summary>
	public class UAnimMontage:UAnimCompositeBase
	{
		public override int ObjectSize => 408;
		/// <summary>
		/// Name: BlendIn
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x38
		/// </summary>
		public FAlphaBlend BlendIn => ReadStruct<FAlphaBlend>(0x90);
		
		/// <summary>
		/// Name: BlendInTime
		/// Type: FloatProperty
		/// Offset: 0xC8
		/// Size: 0x04
		/// </summary>
		public float BlendInTime
		{
			get
			{
				return ReadSingle(0xC8);
			}
			set
			{
				WriteSingle(0xC8,value);
			}
		}
		
		/// <summary>
		/// Name: BlendOut
		/// Type: StructProperty
		/// Offset: 0xD0
		/// Size: 0x38
		/// </summary>
		public FAlphaBlend BlendOut => ReadStruct<FAlphaBlend>(0xD0);
		
		/// <summary>
		/// Name: BlendOutTime
		/// Type: FloatProperty
		/// Offset: 0x108
		/// Size: 0x04
		/// </summary>
		public float BlendOutTime
		{
			get
			{
				return ReadSingle(0x108);
			}
			set
			{
				WriteSingle(0x108,value);
			}
		}
		
		/// <summary>
		/// Name: BlendOutTriggerTime
		/// Type: FloatProperty
		/// Offset: 0x10C
		/// Size: 0x04
		/// </summary>
		public float BlendOutTriggerTime
		{
			get
			{
				return ReadSingle(0x10C);
			}
			set
			{
				WriteSingle(0x10C,value);
			}
		}
		
		/// <summary>
		/// Name: SyncGroup
		/// Type: NameProperty
		/// Offset: 0x110
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SyncSlotIndex
		/// Type: IntProperty
		/// Offset: 0x118
		/// Size: 0x04
		/// </summary>
		public int SyncSlotIndex
		{
			get
			{
				return ReadInt32(0x118);
			}
			set
			{
				WriteInt32(0x118,value);
			}
		}
		
		/// <summary>
		/// Name: MarkerData
		/// Type: StructProperty
		/// Offset: 0x120
		/// Size: 0x20
		/// </summary>
		public FMarkerSyncData MarkerData => ReadStruct<FMarkerSyncData>(0x120);
		
		/// <summary>
		/// Name: CompositeSections
		/// Type: TArray<FCompositeSection>
		/// Offset: 0x140
		/// Size: 0x10
		/// SubElement Size: 0x58
		/// </summary>
		public TArray<FCompositeSection> CompositeSections => new TArray<FCompositeSection>(BaseAddress+0x140);
		
		/// <summary>
		/// Name: SlotAnimTracks
		/// Type: TArray<FSlotAnimationTrack>
		/// Offset: 0x150
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FSlotAnimationTrack> SlotAnimTracks => new TArray<FSlotAnimationTrack>(BaseAddress+0x150);
		
		/// <summary>
		/// Name: BranchingPoints
		/// Type: TArray<FBranchingPoint>
		/// Offset: 0x160
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FBranchingPoint> BranchingPoints => new TArray<FBranchingPoint>(BaseAddress+0x160);
		
		/// <summary>
		/// Name: bEnableRootMotionTranslation
		/// Type: BoolProperty
		/// Offset: 0x170
		/// Size: 0x01
		/// </summary>
		public bool bEnableRootMotionTranslation
		{
			get
			{
				return ReadBool(0x170);
			}
			set
			{
				WriteBool(0x170,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableRootMotionRotation
		/// Type: BoolProperty
		/// Offset: 0x171
		/// Size: 0x01
		/// </summary>
		public bool bEnableRootMotionRotation
		{
			get
			{
				return ReadBool(0x171);
			}
			set
			{
				WriteBool(0x171,value);
			}
		}
		
		/// <summary>
		/// Name: RootMotionRootLock
		/// Type: ByteProperty
		/// Offset: 0x172
		/// Size: 0x01
		/// </summary>
		public byte RootMotionRootLock
		{
			get
			{
				return ReadByte(0x172);
			}
			set
			{
				WriteByte(0x172,value);
			}
		}
		
		/// <summary>
		/// Name: BranchingPointMarkers
		/// Type: TArray<FBranchingPointMarker>
		/// Offset: 0x178
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FBranchingPointMarker> BranchingPointMarkers => new TArray<FBranchingPointMarker>(BaseAddress+0x178);
		
		/// <summary>
		/// Name: BranchingPointStateNotifyIndices
		/// Type: TArray<>
		/// Offset: 0x188
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// UAnimSequence:UAnimSequenceBase
	/// Size: 0x188
	/// Properties: 13
	/// </summary>
	public class UAnimSequence:UAnimSequenceBase
	{
		public override int ObjectSize => 392;
		/// <summary>
		/// Name: NumFrames
		/// Type: IntProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public int NumFrames
		{
			get
			{
				return ReadInt32(0x90);
			}
			set
			{
				WriteInt32(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: TrackToSkeletonMapTable
		/// Type: TArray<FTrackToSkeletonMap>
		/// Offset: 0x98
		/// Size: 0x10
		/// SubElement Size: 0x04
		/// </summary>
		public TArray<FTrackToSkeletonMap> TrackToSkeletonMapTable => new TArray<FTrackToSkeletonMap>(BaseAddress+0x98);
		
		/// <summary>
		/// Name: AdditiveAnimType
		/// Type: ByteProperty
		/// Offset: 0x138
		/// Size: 0x01
		/// </summary>
		public byte AdditiveAnimType
		{
			get
			{
				return ReadByte(0x138);
			}
			set
			{
				WriteByte(0x138,value);
			}
		}
		
		/// <summary>
		/// Name: RefPoseType
		/// Type: ByteProperty
		/// Offset: 0x139
		/// Size: 0x01
		/// </summary>
		public byte RefPoseType
		{
			get
			{
				return ReadByte(0x139);
			}
			set
			{
				WriteByte(0x139,value);
			}
		}
		
		/// <summary>
		/// Name: RefPoseSeq
		/// Type: ObjectProperty
		/// Offset: 0x140
		/// Size: 0x08
		/// </summary>
		public UAnimSequence RefPoseSeq => ReadUObject<UAnimSequence>(0x140);
		
		/// <summary>
		/// Name: RefFrameIndex
		/// Type: IntProperty
		/// Offset: 0x148
		/// Size: 0x04
		/// </summary>
		public int RefFrameIndex
		{
			get
			{
				return ReadInt32(0x148);
			}
			set
			{
				WriteInt32(0x148,value);
			}
		}
		
		/// <summary>
		/// Name: EncodingPkgVersion
		/// Type: IntProperty
		/// Offset: 0x14C
		/// Size: 0x04
		/// </summary>
		public int EncodingPkgVersion
		{
			get
			{
				return ReadInt32(0x14C);
			}
			set
			{
				WriteInt32(0x14C,value);
			}
		}
		
		/// <summary>
		/// Name: RetargetSource
		/// Type: NameProperty
		/// Offset: 0x150
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bEnableRootMotion
		/// Type: BoolProperty
		/// Offset: 0x158
		/// Size: 0x01
		/// </summary>
		public bool bEnableRootMotion
		{
			get
			{
				return ReadBool(0x158);
			}
			set
			{
				WriteBool(0x158,value);
			}
		}
		
		/// <summary>
		/// Name: RootMotionRootLock
		/// Type: ByteProperty
		/// Offset: 0x159
		/// Size: 0x01
		/// </summary>
		public byte RootMotionRootLock
		{
			get
			{
				return ReadByte(0x159);
			}
			set
			{
				WriteByte(0x159,value);
			}
		}
		
		/// <summary>
		/// Name: bForceRootLock
		/// Type: BoolProperty
		/// Offset: 0x15A
		/// Size: 0x01
		/// </summary>
		public bool bForceRootLock
		{
			get
			{
				return ReadBool(0x15A);
			}
			set
			{
				WriteBool(0x15A,value);
			}
		}
		
		/// <summary>
		/// Name: bRootMotionSettingsCopiedFromMontage
		/// Type: BoolProperty
		/// Offset: 0x15B
		/// Size: 0x01
		/// </summary>
		public bool bRootMotionSettingsCopiedFromMontage
		{
			get
			{
				return ReadBool(0x15B);
			}
			set
			{
				WriteBool(0x15B,value);
			}
		}
		
		/// <summary>
		/// Name: AuthoredSyncMarkers
		/// Type: TArray<FAnimSyncMarker>
		/// Offset: 0x160
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FAnimSyncMarker> AuthoredSyncMarkers => new TArray<FAnimSyncMarker>(BaseAddress+0x160);
		
	}


	/// <summary>
	/// UBlendSpaceBase:UAnimationAsset
	/// Size: 0x130
	/// Properties: 10
	/// </summary>
	public class UBlendSpaceBase:UAnimationAsset
	{
		public override int ObjectSize => 304;
		/// <summary>
		/// Name: BlendParameters
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x20
		/// </summary>
		public FBlendParameter BlendParameters => ReadStruct<FBlendParameter>(0x70);
		
		/// <summary>
		/// Name: InterpolationParam
		/// Type: StructProperty
		/// Offset: 0xD0
		/// Size: 0x08
		/// </summary>
		public FInterpolationParameter InterpolationParam => ReadStruct<FInterpolationParameter>(0xD0);
		
		/// <summary>
		/// Name: TargetWeightInterpolationSpeedPerSec
		/// Type: FloatProperty
		/// Offset: 0xE8
		/// Size: 0x04
		/// </summary>
		public float TargetWeightInterpolationSpeedPerSec
		{
			get
			{
				return ReadSingle(0xE8);
			}
			set
			{
				WriteSingle(0xE8,value);
			}
		}
		
		/// <summary>
		/// Name: NotifyTriggerMode
		/// Type: ByteProperty
		/// Offset: 0xEC
		/// Size: 0x01
		/// </summary>
		public byte NotifyTriggerMode
		{
			get
			{
				return ReadByte(0xEC);
			}
			set
			{
				WriteByte(0xEC,value);
			}
		}
		
		/// <summary>
		/// Name: bRotationBlendInMeshSpace
		/// Type: BoolProperty
		/// Offset: 0xED
		/// Size: 0x01
		/// </summary>
		public bool bRotationBlendInMeshSpace
		{
			get
			{
				return ReadBool(0xED);
			}
			set
			{
				WriteBool(0xED,value);
			}
		}
		
		/// <summary>
		/// Name: NumOfDimension
		/// Type: IntProperty
		/// Offset: 0xF0
		/// Size: 0x04
		/// </summary>
		public int NumOfDimension
		{
			get
			{
				return ReadInt32(0xF0);
			}
			set
			{
				WriteInt32(0xF0,value);
			}
		}
		
		/// <summary>
		/// Name: AnimLength
		/// Type: FloatProperty
		/// Offset: 0xF4
		/// Size: 0x04
		/// </summary>
		public float AnimLength
		{
			get
			{
				return ReadSingle(0xF4);
			}
			set
			{
				WriteSingle(0xF4,value);
			}
		}
		
		/// <summary>
		/// Name: PerBoneBlend
		/// Type: TArray<FPerBoneInterpolation>
		/// Offset: 0xF8
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FPerBoneInterpolation> PerBoneBlend => new TArray<FPerBoneInterpolation>(BaseAddress+0xF8);
		
		/// <summary>
		/// Name: SampleData
		/// Type: TArray<FBlendSample>
		/// Offset: 0x110
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FBlendSample> SampleData => new TArray<FBlendSample>(BaseAddress+0x110);
		
		/// <summary>
		/// Name: GridSamples
		/// Type: TArray<FEditorElement>
		/// Offset: 0x120
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FEditorElement> GridSamples => new TArray<FEditorElement>(BaseAddress+0x120);
		
	}


	/// <summary>
	/// UBlendSpace:UBlendSpaceBase
	/// Size: 0x138
	/// Properties: 1
	/// </summary>
	public class UBlendSpace:UBlendSpaceBase
	{
		public override int ObjectSize => 312;
		/// <summary>
		/// Name: AxisToScaleAnimation
		/// Type: ByteProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public byte AxisToScaleAnimation
		{
			get
			{
				return ReadByte(0x130);
			}
			set
			{
				WriteByte(0x130,value);
			}
		}
		
	}


	/// <summary>
	/// UAimOffsetBlendSpace:UBlendSpace
	/// Size: 0x138
	/// Properties: 0
	/// </summary>
	public class UAimOffsetBlendSpace:UBlendSpace
	{
		public override int ObjectSize => 312;
	}


	/// <summary>
	/// UBlendSpace1D:UBlendSpaceBase
	/// Size: 0x138
	/// Properties: 1
	/// </summary>
	public class UBlendSpace1D:UBlendSpaceBase
	{
		public override int ObjectSize => 312;
		/// <summary>
		/// Name: bScaleAnimation
		/// Type: BoolProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public bool bScaleAnimation
		{
			get
			{
				return ReadBool(0x130);
			}
			set
			{
				WriteBool(0x130,value);
			}
		}
		
	}


	/// <summary>
	/// UAimOffsetBlendSpace1D:UBlendSpace1D
	/// Size: 0x138
	/// Properties: 0
	/// </summary>
	public class UAimOffsetBlendSpace1D:UBlendSpace1D
	{
		public override int ObjectSize => 312;
	}


	/// <summary>
	/// UAnimClassData:UObject
	/// Size: 0x88
	/// Properties: 7
	/// </summary>
	public class UAnimClassData:UObject
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: BakedStateMachines
		/// Type: TArray<FBakedAnimationStateMachine>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FBakedAnimationStateMachine> BakedStateMachines => new TArray<FBakedAnimationStateMachine>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: TargetSkeleton
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public USkeleton TargetSkeleton => ReadUObject<USkeleton>(0x40);
		
		/// <summary>
		/// Name: AnimNotifies
		/// Type: TArray<FAnimNotifyEvent>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0xA8
		/// </summary>
		public TArray<FAnimNotifyEvent> AnimNotifies => new TArray<FAnimNotifyEvent>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: RootAnimNodeIndex
		/// Type: IntProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public int RootAnimNodeIndex
		{
			get
			{
				return ReadInt32(0x58);
			}
			set
			{
				WriteInt32(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: RootAnimNodeProperty
		/// Type: ObjectProperty
		/// Offset: 0x60
		/// Size: 0x08
		/// </summary>
		public UStructProperty RootAnimNodeProperty => ReadUObject<UStructProperty>(0x60);
		
		/// <summary>
		/// Name: AnimNodeProperties
		/// Type: TArray<UStructProperty>
		/// Offset: 0x68
		/// Size: 0x10
		/// SubElement Size: 0x80
		/// </summary>
		public TArray<UStructProperty> AnimNodeProperties => new TArray<UStructProperty>(BaseAddress+0x68);
		
		/// <summary>
		/// Name: SyncGroupNames
		/// Type: TArray<FName>
		/// Offset: 0x78
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> SyncGroupNames => new TArray<FName>(BaseAddress+0x78);
		
	}


	/// <summary>
	/// UAnimCompress:UObject
	/// Size: 0x40
	/// Properties: 5
	/// </summary>
	public class UAnimCompress:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Description
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString Description => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: bNeedsSkeleton
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bNeedsSkeleton => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: TranslationCompressionFormat
		/// Type: ByteProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public byte TranslationCompressionFormat
		{
			get
			{
				return ReadByte(0x3C);
			}
			set
			{
				WriteByte(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: RotationCompressionFormat
		/// Type: ByteProperty
		/// Offset: 0x3D
		/// Size: 0x01
		/// </summary>
		public byte RotationCompressionFormat
		{
			get
			{
				return ReadByte(0x3D);
			}
			set
			{
				WriteByte(0x3D,value);
			}
		}
		
		/// <summary>
		/// Name: ScaleCompressionFormat
		/// Type: ByteProperty
		/// Offset: 0x3E
		/// Size: 0x01
		/// </summary>
		public byte ScaleCompressionFormat
		{
			get
			{
				return ReadByte(0x3E);
			}
			set
			{
				WriteByte(0x3E,value);
			}
		}
		
	}


	/// <summary>
	/// UAnimCompress_Automatic:UAnimCompress
	/// Size: 0x48
	/// Properties: 8
	/// </summary>
	public class UAnimCompress_Automatic:UAnimCompress
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: MaxEndEffectorError
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float MaxEndEffectorError
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: bTryFixedBitwiseCompression
		/// Type: BoolProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public bool bTryFixedBitwiseCompression => (ReadByte(0x0044) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bTryPerTrackBitwiseCompression
		/// Type: BoolProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public bool bTryPerTrackBitwiseCompression => (ReadByte(0x0044) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bTryLinearKeyRemovalCompression
		/// Type: BoolProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public bool bTryLinearKeyRemovalCompression => (ReadByte(0x0044) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bTryIntervalKeyRemoval
		/// Type: BoolProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public bool bTryIntervalKeyRemoval => (ReadByte(0x0044) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bRunCurrentDefaultCompressor
		/// Type: BoolProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public bool bRunCurrentDefaultCompressor => (ReadByte(0x0044) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bAutoReplaceIfExistingErrorTooGreat
		/// Type: BoolProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public bool bAutoReplaceIfExistingErrorTooGreat => (ReadByte(0x0044) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bRaiseMaxErrorToExisting
		/// Type: BoolProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public bool bRaiseMaxErrorToExisting => (ReadByte(0x0044) & 0x40) == 0x40;
		
	}


	/// <summary>
	/// UAnimCompress_BitwiseCompressOnly:UAnimCompress
	/// Size: 0x40
	/// Properties: 0
	/// </summary>
	public class UAnimCompress_BitwiseCompressOnly:UAnimCompress
	{
		public override int ObjectSize => 64;
	}


	/// <summary>
	/// UAnimCompress_LeastDestructive:UAnimCompress
	/// Size: 0x40
	/// Properties: 0
	/// </summary>
	public class UAnimCompress_LeastDestructive:UAnimCompress
	{
		public override int ObjectSize => 64;
	}


	/// <summary>
	/// UAnimCompress_RemoveEverySecondKey:UAnimCompress
	/// Size: 0x48
	/// Properties: 2
	/// </summary>
	public class UAnimCompress_RemoveEverySecondKey:UAnimCompress
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: MinKeys
		/// Type: IntProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public int MinKeys
		{
			get
			{
				return ReadInt32(0x40);
			}
			set
			{
				WriteInt32(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: bStartAtSecondKey
		/// Type: BoolProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public bool bStartAtSecondKey => (ReadByte(0x0044) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UAnimCompress_RemoveLinearKeys:UAnimCompress
	/// Size: 0x60
	/// Properties: 9
	/// </summary>
	public class UAnimCompress_RemoveLinearKeys:UAnimCompress
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: MaxPosDiff
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float MaxPosDiff
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: MaxAngleDiff
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float MaxAngleDiff
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: MaxScaleDiff
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float MaxScaleDiff
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: MaxEffectorDiff
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float MaxEffectorDiff
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: MinEffectorDiff
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float MinEffectorDiff
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: EffectorDiffSocket
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float EffectorDiffSocket
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: ParentKeyScale
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float ParentKeyScale
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: bRetarget
		/// Type: BoolProperty
		/// Offset: 0x5C
		/// Size: 0x01
		/// </summary>
		public bool bRetarget => (ReadByte(0x005C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bActuallyFilterLinearKeys
		/// Type: BoolProperty
		/// Offset: 0x5C
		/// Size: 0x01
		/// </summary>
		public bool bActuallyFilterLinearKeys => (ReadByte(0x005C) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// UAnimCompress_PerTrackCompression:UAnimCompress_RemoveLinearKeys
	/// Size: 0xE0
	/// Properties: 21
	/// </summary>
	public class UAnimCompress_PerTrackCompression:UAnimCompress_RemoveLinearKeys
	{
		public override int ObjectSize => 224;
		/// <summary>
		/// Name: MaxZeroingThreshold
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float MaxZeroingThreshold
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: MaxPosDiffBitwise
		/// Type: FloatProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public float MaxPosDiffBitwise
		{
			get
			{
				return ReadSingle(0x64);
			}
			set
			{
				WriteSingle(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: MaxAngleDiffBitwise
		/// Type: FloatProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public float MaxAngleDiffBitwise
		{
			get
			{
				return ReadSingle(0x68);
			}
			set
			{
				WriteSingle(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: MaxScaleDiffBitwise
		/// Type: FloatProperty
		/// Offset: 0x6C
		/// Size: 0x04
		/// </summary>
		public float MaxScaleDiffBitwise
		{
			get
			{
				return ReadSingle(0x6C);
			}
			set
			{
				WriteSingle(0x6C,value);
			}
		}
		
		/// <summary>
		/// Name: AllowedRotationFormats
		/// Type: TArray<>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: AllowedTranslationFormats
		/// Type: TArray<>
		/// Offset: 0x80
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: AllowedScaleFormats
		/// Type: TArray<>
		/// Offset: 0x90
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: bResampleAnimation
		/// Type: BoolProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public bool bResampleAnimation => (ReadByte(0x00A0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ResampledFramerate
		/// Type: FloatProperty
		/// Offset: 0xA4
		/// Size: 0x04
		/// </summary>
		public float ResampledFramerate
		{
			get
			{
				return ReadSingle(0xA4);
			}
			set
			{
				WriteSingle(0xA4,value);
			}
		}
		
		/// <summary>
		/// Name: MinKeysForResampling
		/// Type: IntProperty
		/// Offset: 0xA8
		/// Size: 0x04
		/// </summary>
		public int MinKeysForResampling
		{
			get
			{
				return ReadInt32(0xA8);
			}
			set
			{
				WriteInt32(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: bUseAdaptiveError
		/// Type: BoolProperty
		/// Offset: 0xAC
		/// Size: 0x01
		/// </summary>
		public bool bUseAdaptiveError => (ReadByte(0x00AC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUseOverrideForEndEffectors
		/// Type: BoolProperty
		/// Offset: 0xAC
		/// Size: 0x01
		/// </summary>
		public bool bUseOverrideForEndEffectors => (ReadByte(0x00AC) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: TrackHeightBias
		/// Type: IntProperty
		/// Offset: 0xB0
		/// Size: 0x04
		/// </summary>
		public int TrackHeightBias
		{
			get
			{
				return ReadInt32(0xB0);
			}
			set
			{
				WriteInt32(0xB0,value);
			}
		}
		
		/// <summary>
		/// Name: ParentingDivisor
		/// Type: FloatProperty
		/// Offset: 0xB4
		/// Size: 0x04
		/// </summary>
		public float ParentingDivisor
		{
			get
			{
				return ReadSingle(0xB4);
			}
			set
			{
				WriteSingle(0xB4,value);
			}
		}
		
		/// <summary>
		/// Name: ParentingDivisorExponent
		/// Type: FloatProperty
		/// Offset: 0xB8
		/// Size: 0x04
		/// </summary>
		public float ParentingDivisorExponent
		{
			get
			{
				return ReadSingle(0xB8);
			}
			set
			{
				WriteSingle(0xB8,value);
			}
		}
		
		/// <summary>
		/// Name: bUseAdaptiveError2
		/// Type: BoolProperty
		/// Offset: 0xBC
		/// Size: 0x01
		/// </summary>
		public bool bUseAdaptiveError2 => (ReadByte(0x00BC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: RotationErrorSourceRatio
		/// Type: FloatProperty
		/// Offset: 0xC0
		/// Size: 0x04
		/// </summary>
		public float RotationErrorSourceRatio
		{
			get
			{
				return ReadSingle(0xC0);
			}
			set
			{
				WriteSingle(0xC0,value);
			}
		}
		
		/// <summary>
		/// Name: TranslationErrorSourceRatio
		/// Type: FloatProperty
		/// Offset: 0xC4
		/// Size: 0x04
		/// </summary>
		public float TranslationErrorSourceRatio
		{
			get
			{
				return ReadSingle(0xC4);
			}
			set
			{
				WriteSingle(0xC4,value);
			}
		}
		
		/// <summary>
		/// Name: ScaleErrorSourceRatio
		/// Type: FloatProperty
		/// Offset: 0xC8
		/// Size: 0x04
		/// </summary>
		public float ScaleErrorSourceRatio
		{
			get
			{
				return ReadSingle(0xC8);
			}
			set
			{
				WriteSingle(0xC8,value);
			}
		}
		
		/// <summary>
		/// Name: MaxErrorPerTrackRatio
		/// Type: FloatProperty
		/// Offset: 0xCC
		/// Size: 0x04
		/// </summary>
		public float MaxErrorPerTrackRatio
		{
			get
			{
				return ReadSingle(0xCC);
			}
			set
			{
				WriteSingle(0xCC,value);
			}
		}
		
		/// <summary>
		/// Name: PerturbationProbeSize
		/// Type: FloatProperty
		/// Offset: 0xD0
		/// Size: 0x04
		/// </summary>
		public float PerturbationProbeSize
		{
			get
			{
				return ReadSingle(0xD0);
			}
			set
			{
				WriteSingle(0xD0,value);
			}
		}
		
	}


	/// <summary>
	/// UAnimCompress_RemoveTrivialKeys:UAnimCompress
	/// Size: 0x50
	/// Properties: 3
	/// </summary>
	public class UAnimCompress_RemoveTrivialKeys:UAnimCompress
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: MaxPosDiff
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float MaxPosDiff
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: MaxAngleDiff
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float MaxAngleDiff
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: MaxScaleDiff
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float MaxScaleDiff
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
	}


	/// <summary>
	/// UAnimSingleNodeInstance:UAnimInstance
	/// Size: 0x570
	/// Properties: 3
	/// </summary>
	public class UAnimSingleNodeInstance:UAnimInstance
	{
		public override int ObjectSize => 1392;
		/// <summary>
		/// Name: CurrentAsset
		/// Type: ObjectProperty
		/// Offset: 0x480
		/// Size: 0x08
		/// </summary>
		public UAnimationAsset CurrentAsset => ReadUObject<UAnimationAsset>(0x480);
		
		/// <summary>
		/// Name: CurrentVertexAnim
		/// Type: ObjectProperty
		/// Offset: 0x488
		/// Size: 0x08
		/// </summary>
		public UVertexAnimation CurrentVertexAnim => ReadUObject<UVertexAnimation>(0x488);
		
		/// <summary>
		/// Name: PostEvaluateAnimEvent
		/// Type: DelegateProperty
		/// Offset: 0x558
		/// Size: 0x10
		/// </summary>
		
	}


	/// <summary>
	/// UVehicleAnimInstance:UAnimInstance
	/// Size: 0x480
	/// Properties: 0
	/// </summary>
	public class UVehicleAnimInstance:UAnimInstance
	{
		public override int ObjectSize => 1152;
	}


	/// <summary>
	/// UAnimMetaData:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UAnimMetaData:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAnimNotify:UObject
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class UAnimNotify:UObject
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UAnimNotify_PlayParticleEffect:UAnimNotify
	/// Size: 0x80
	/// Properties: 5
	/// </summary>
	public class UAnimNotify_PlayParticleEffect:UAnimNotify
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: PSTemplate
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UParticleSystem PSTemplate => ReadUObject<UParticleSystem>(0x38);
		
		/// <summary>
		/// Name: LocationOffset
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x0C
		/// </summary>
		public FVector LocationOffset => ReadStruct<FVector>(0x40);
		
		/// <summary>
		/// Name: RotationOffset
		/// Type: StructProperty
		/// Offset: 0x4C
		/// Size: 0x0C
		/// </summary>
		public FRotator RotationOffset => ReadStruct<FRotator>(0x4C);
		
		/// <summary>
		/// Name: Attached
		/// Type: BoolProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public bool Attached => (ReadByte(0x0070) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: SocketName
		/// Type: NameProperty
		/// Offset: 0x78
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UAnimNotify_PlaySound:UAnimNotify
	/// Size: 0x58
	/// Properties: 5
	/// </summary>
	public class UAnimNotify_PlaySound:UAnimNotify
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: Sound
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public USoundBase Sound => ReadUObject<USoundBase>(0x38);
		
		/// <summary>
		/// Name: VolumeMultiplier
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float VolumeMultiplier
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: PitchMultiplier
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float PitchMultiplier
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: bFollow
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool bFollow => (ReadByte(0x0048) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: AttachName
		/// Type: NameProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UAnimNotifyState_TimedParticleEffect:UAnimNotifyState
	/// Size: 0x60
	/// Properties: 5
	/// </summary>
	public class UAnimNotifyState_TimedParticleEffect:UAnimNotifyState
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: PSTemplate
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UParticleSystem PSTemplate => ReadUObject<UParticleSystem>(0x30);
		
		/// <summary>
		/// Name: SocketName
		/// Type: NameProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: LocationOffset
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x0C
		/// </summary>
		public FVector LocationOffset => ReadStruct<FVector>(0x40);
		
		/// <summary>
		/// Name: RotationOffset
		/// Type: StructProperty
		/// Offset: 0x4C
		/// Size: 0x0C
		/// </summary>
		public FRotator RotationOffset => ReadStruct<FRotator>(0x4C);
		
		/// <summary>
		/// Name: bDestroyAtEnd
		/// Type: BoolProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public bool bDestroyAtEnd
		{
			get
			{
				return ReadBool(0x58);
			}
			set
			{
				WriteBool(0x58,value);
			}
		}
		
	}


	/// <summary>
	/// UAnimNotifyState_Trail:UAnimNotifyState
	/// Size: 0x60
	/// Properties: 6
	/// </summary>
	public class UAnimNotifyState_Trail:UAnimNotifyState
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: PSTemplate
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UParticleSystem PSTemplate => ReadUObject<UParticleSystem>(0x30);
		
		/// <summary>
		/// Name: FirstSocketName
		/// Type: NameProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SecondSocketName
		/// Type: NameProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: WidthScaleMode
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte WidthScaleMode
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: WidthScaleCurve
		/// Type: NameProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bRecycleSpawnedSystems
		/// Type: BoolProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public bool bRecycleSpawnedSystems => (ReadByte(0x0058) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UAnimSet:UObject
	/// Size: 0xF0
	/// Properties: 9
	/// </summary>
	public class UAnimSet:UObject
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: bAnimRotationOnly
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bAnimRotationOnly => (ReadByte(0x0028) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: TrackBoneNames
		/// Type: TArray<FName>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> TrackBoneNames => new TArray<FName>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: LinkupCache
		/// Type: TArray<FAnimSetMeshLinkup>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FAnimSetMeshLinkup> LinkupCache => new TArray<FAnimSetMeshLinkup>(BaseAddress+0x40);
		
		/// <summary>
		/// Name: BoneUseAnimTranslation
		/// Type: TArray<>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: ForceUseMeshTranslation
		/// Type: TArray<>
		/// Offset: 0x60
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: UseTranslationBoneNames
		/// Type: TArray<FName>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> UseTranslationBoneNames => new TArray<FName>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: ForceMeshTranslationBoneNames
		/// Type: TArray<FName>
		/// Offset: 0x80
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> ForceMeshTranslationBoneNames => new TArray<FName>(BaseAddress+0x80);
		
		/// <summary>
		/// Name: PreviewSkelMeshName
		/// Type: NameProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: BestRatioSkelMeshName
		/// Type: NameProperty
		/// Offset: 0x98
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UAssetImportData:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UAssetImportData:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAssetUserData:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UAssetUserData:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAutomationTestSettings:UObject
	/// Size: 0x318
	/// Properties: 13
	/// </summary>
	public class UAutomationTestSettings:UObject
	{
		public override int ObjectSize => 792;
		/// <summary>
		/// Name: AutomationTestmap
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FFilePath AutomationTestmap => ReadStruct<FFilePath>(0x28);
		
		/// <summary>
		/// Name: EditorPerformanceTestMaps
		/// Type: TArray<FEditorMapPerformanceTestDefinition>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FEditorMapPerformanceTestDefinition> EditorPerformanceTestMaps => new TArray<FEditorMapPerformanceTestDefinition>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: BuildPromotionTest
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x1F0
		/// </summary>
		public FBuildPromotionTestSettings BuildPromotionTest => ReadStruct<FBuildPromotionTestSettings>(0x48);
		
		/// <summary>
		/// Name: MaterialEditorPromotionTest
		/// Type: StructProperty
		/// Offset: 0x238
		/// Size: 0x30
		/// </summary>
		public FMaterialEditorPromotionSettings MaterialEditorPromotionTest => ReadStruct<FMaterialEditorPromotionSettings>(0x238);
		
		/// <summary>
		/// Name: ParticleEditorPromotionTest
		/// Type: StructProperty
		/// Offset: 0x268
		/// Size: 0x10
		/// </summary>
		public FParticleEditorPromotionSettings ParticleEditorPromotionTest => ReadStruct<FParticleEditorPromotionSettings>(0x268);
		
		/// <summary>
		/// Name: BlueprintEditorPromotionTest
		/// Type: StructProperty
		/// Offset: 0x278
		/// Size: 0x30
		/// </summary>
		public FBlueprintEditorPromotionSettings BlueprintEditorPromotionTest => ReadStruct<FBlueprintEditorPromotionSettings>(0x278);
		
		/// <summary>
		/// Name: EngineTestModules
		/// Type: TArray<>
		/// Offset: 0x2A8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: EditorTestModules
		/// Type: TArray<>
		/// Offset: 0x2B8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: TestLevelFolders
		/// Type: TArray<>
		/// Offset: 0x2C8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: TestAssetsToOpen
		/// Type: TArray<FOpenTestAsset>
		/// Offset: 0x2D8
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FOpenTestAsset> TestAssetsToOpen => new TArray<FOpenTestAsset>(BaseAddress+0x2D8);
		
		/// <summary>
		/// Name: ExternalTools
		/// Type: TArray<FExternalToolDefinition>
		/// Offset: 0x2E8
		/// Size: 0x10
		/// SubElement Size: 0x60
		/// </summary>
		public TArray<FExternalToolDefinition> ExternalTools => new TArray<FExternalToolDefinition>(BaseAddress+0x2E8);
		
		/// <summary>
		/// Name: ImportExportTestDefinitions
		/// Type: TArray<FEditorImportExportTestDefinition>
		/// Offset: 0x2F8
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FEditorImportExportTestDefinition> ImportExportTestDefinitions => new TArray<FEditorImportExportTestDefinition>(BaseAddress+0x2F8);
		
		/// <summary>
		/// Name: LaunchOnSettings
		/// Type: TArray<FLaunchOnTestSettings>
		/// Offset: 0x308
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FLaunchOnTestSettings> LaunchOnSettings => new TArray<FLaunchOnTestSettings>(BaseAddress+0x308);
		
	}


	/// <summary>
	/// UNavEdgeProviderInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNavEdgeProviderInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAvoidanceManager:UObject
	/// Size: 0xE0
	/// Properties: 7
	/// </summary>
	public class UAvoidanceManager:UObject
	{
		public override int ObjectSize => 224;
		/// <summary>
		/// Name: DefaultTimeToLive
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float DefaultTimeToLive
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: LockTimeAfterAvoid
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float LockTimeAfterAvoid
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: LockTimeAfterClean
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float LockTimeAfterClean
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: DeltaTimeToPredict
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float DeltaTimeToPredict
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: ArtificialRadiusExpansion
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float ArtificialRadiusExpansion
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: TestHeightDifference
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float TestHeightDifference
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: HeightCheckMargin
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float HeightCheckMargin
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
	}


	/// <summary>
	/// UBlendProfile:UObject
	/// Size: 0x48
	/// Properties: 2
	/// </summary>
	public class UBlendProfile:UObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: OwningSkeleton
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public USkeleton OwningSkeleton => ReadUObject<USkeleton>(0x30);
		
		/// <summary>
		/// Name: ProfileEntries
		/// Type: TArray<FBlendProfileBoneEntry>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FBlendProfileBoneEntry> ProfileEntries => new TArray<FBlendProfileBoneEntry>(BaseAddress+0x38);
		
	}


	/// <summary>
	/// UAnimBlueprint:UBlueprint
	/// Size: 0x1B0
	/// Properties: 2
	/// </summary>
	public class UAnimBlueprint:UBlueprint
	{
		public override int ObjectSize => 432;
		/// <summary>
		/// Name: TargetSkeleton
		/// Type: ObjectProperty
		/// Offset: 0x190
		/// Size: 0x08
		/// </summary>
		public USkeleton TargetSkeleton => ReadUObject<USkeleton>(0x190);
		
		/// <summary>
		/// Name: Groups
		/// Type: TArray<FAnimGroupInfo>
		/// Offset: 0x198
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FAnimGroupInfo> Groups => new TArray<FAnimGroupInfo>(BaseAddress+0x198);
		
	}


	/// <summary>
	/// ULevelScriptBlueprint:UBlueprint
	/// Size: 0x190
	/// Properties: 0
	/// </summary>
	public class ULevelScriptBlueprint:UBlueprint
	{
		public override int ObjectSize => 400;
	}


	/// <summary>
	/// UDataTable:UObject
	/// Size: 0x80
	/// Properties: 1
	/// </summary>
	public class UDataTable:UObject
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: RowStruct
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UScriptStruct RowStruct => ReadUObject<UScriptStruct>(0x28);
		
	}


	/// <summary>
	/// UDataTableFunctionLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UDataTableFunctionLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UDebugDrawService:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UDebugDrawService:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UDialogueTypes:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UDialogueTypes:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UGameplayStatics:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UGameplayStatics:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UGraniteBlueprintLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UGraniteBlueprintLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UHeadMountedDisplayFunctionLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UHeadMountedDisplayFunctionLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UKismetArrayLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UKismetArrayLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UKismetGuidLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UKismetGuidLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UKismetInputLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UKismetInputLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UKismetMaterialLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UKismetMaterialLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UKismetMathLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UKismetMathLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UKismetNodeHelperLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UKismetNodeHelperLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UKismetStringLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UKismetStringLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UCollisionProfile:UDeveloperSettings
	/// Size: 0x158
	/// Properties: 5
	/// </summary>
	public class UCollisionProfile:UDeveloperSettings
	{
		public override int ObjectSize => 344;
		/// <summary>
		/// Name: Profiles
		/// Type: TArray<FCollisionResponseTemplate>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x60
		/// </summary>
		public TArray<FCollisionResponseTemplate> Profiles => new TArray<FCollisionResponseTemplate>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: DefaultChannelResponses
		/// Type: TArray<FCustomChannelSetup>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FCustomChannelSetup> DefaultChannelResponses => new TArray<FCustomChannelSetup>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: EditProfiles
		/// Type: TArray<FCustomProfile>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FCustomProfile> EditProfiles => new TArray<FCustomProfile>(BaseAddress+0x58);
		
		/// <summary>
		/// Name: ProfileRedirects
		/// Type: TArray<FRedirector>
		/// Offset: 0x68
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FRedirector> ProfileRedirects => new TArray<FRedirector>(BaseAddress+0x68);
		
		/// <summary>
		/// Name: CollisionChannelRedirects
		/// Type: TArray<FRedirector>
		/// Offset: 0x78
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FRedirector> CollisionChannelRedirects => new TArray<FRedirector>(BaseAddress+0x78);
		
	}


	/// <summary>
	/// UKismetSystemLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UKismetSystemLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UKismetTextLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UKismetTextLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UMeshVertexPainterKismetLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UMeshVertexPainterKismetLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UVisualLoggerKismetLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UVisualLoggerKismetLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UAnimBlueprintGeneratedClass:UBlueprintGeneratedClass
	/// Size: 0x348
	/// Properties: 5
	/// </summary>
	public class UAnimBlueprintGeneratedClass:UBlueprintGeneratedClass
	{
		public override int ObjectSize => 840;
		/// <summary>
		/// Name: BakedStateMachines
		/// Type: TArray<FBakedAnimationStateMachine>
		/// Offset: 0x2F0
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FBakedAnimationStateMachine> BakedStateMachines => new TArray<FBakedAnimationStateMachine>(BaseAddress+0x2F0);
		
		/// <summary>
		/// Name: TargetSkeleton
		/// Type: ObjectProperty
		/// Offset: 0x300
		/// Size: 0x08
		/// </summary>
		public USkeleton TargetSkeleton => ReadUObject<USkeleton>(0x300);
		
		/// <summary>
		/// Name: AnimNotifies
		/// Type: TArray<FAnimNotifyEvent>
		/// Offset: 0x308
		/// Size: 0x10
		/// SubElement Size: 0xA8
		/// </summary>
		public TArray<FAnimNotifyEvent> AnimNotifies => new TArray<FAnimNotifyEvent>(BaseAddress+0x308);
		
		/// <summary>
		/// Name: RootAnimNodeIndex
		/// Type: IntProperty
		/// Offset: 0x318
		/// Size: 0x04
		/// </summary>
		public int RootAnimNodeIndex
		{
			get
			{
				return ReadInt32(0x318);
			}
			set
			{
				WriteInt32(0x318,value);
			}
		}
		
		/// <summary>
		/// Name: SyncGroupNames
		/// Type: TArray<FName>
		/// Offset: 0x338
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> SyncGroupNames => new TArray<FName>(BaseAddress+0x338);
		
	}


	/// <summary>
	/// UBodySetup:UObject
	/// Size: 0x2E0
	/// Properties: 17
	/// </summary>
	public class UBodySetup:UObject
	{
		public override int ObjectSize => 736;
		/// <summary>
		/// Name: AggGeom
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x48
		/// </summary>
		public FKAggregateGeom AggGeom => ReadStruct<FKAggregateGeom>(0x28);
		
		/// <summary>
		/// Name: BoneName
		/// Type: NameProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PhysicsType
		/// Type: ByteProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public byte PhysicsType
		{
			get
			{
				return ReadByte(0x78);
			}
			set
			{
				WriteByte(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: bAlwaysFullAnimWeight
		/// Type: BoolProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public bool bAlwaysFullAnimWeight => (ReadByte(0x007C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bConsiderForBounds
		/// Type: BoolProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public bool bConsiderForBounds => (ReadByte(0x007C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bMeshCollideAll
		/// Type: BoolProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public bool bMeshCollideAll => (ReadByte(0x007C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bDoubleSidedGeometry
		/// Type: BoolProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public bool bDoubleSidedGeometry => (ReadByte(0x007C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bGenerateNonMirroredCollision
		/// Type: BoolProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public bool bGenerateNonMirroredCollision => (ReadByte(0x007C) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bSharedCookedData
		/// Type: BoolProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public bool bSharedCookedData => (ReadByte(0x007C) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bGenerateMirroredCollision
		/// Type: BoolProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public bool bGenerateMirroredCollision => (ReadByte(0x007C) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: PhysMaterial
		/// Type: ObjectProperty
		/// Offset: 0x80
		/// Size: 0x08
		/// </summary>
		public UPhysicalMaterial PhysMaterial => ReadUObject<UPhysicalMaterial>(0x80);
		
		/// <summary>
		/// Name: CollisionReponse
		/// Type: ByteProperty
		/// Offset: 0x88
		/// Size: 0x01
		/// </summary>
		public byte CollisionReponse
		{
			get
			{
				return ReadByte(0x88);
			}
			set
			{
				WriteByte(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: CollisionTraceFlag
		/// Type: ByteProperty
		/// Offset: 0x89
		/// Size: 0x01
		/// </summary>
		public byte CollisionTraceFlag
		{
			get
			{
				return ReadByte(0x89);
			}
			set
			{
				WriteByte(0x89,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultInstance
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x1B0
		/// </summary>
		public FBodyInstance DefaultInstance => ReadStruct<FBodyInstance>(0x90);
		
		/// <summary>
		/// Name: WalkableSlopeOverride
		/// Type: StructProperty
		/// Offset: 0x240
		/// Size: 0x08
		/// </summary>
		public FWalkableSlopeOverride WalkableSlopeOverride => ReadStruct<FWalkableSlopeOverride>(0x240);
		
		/// <summary>
		/// Name: BuildScale
		/// Type: FloatProperty
		/// Offset: 0x248
		/// Size: 0x04
		/// </summary>
		public float BuildScale
		{
			get
			{
				return ReadSingle(0x248);
			}
			set
			{
				WriteSingle(0x248,value);
			}
		}
		
		/// <summary>
		/// Name: BuildScale3D
		/// Type: StructProperty
		/// Offset: 0x24C
		/// Size: 0x0C
		/// </summary>
		public FVector BuildScale3D => ReadStruct<FVector>(0x24C);
		
	}


	/// <summary>
	/// UBodySetup2D:UBodySetup
	/// Size: 0x310
	/// Properties: 1
	/// </summary>
	public class UBodySetup2D:UBodySetup
	{
		public override int ObjectSize => 784;
		/// <summary>
		/// Name: AggGeom2D
		/// Type: StructProperty
		/// Offset: 0x2E0
		/// Size: 0x30
		/// </summary>
		public FAggregateGeometry2D AggGeom2D => ReadStruct<FAggregateGeometry2D>(0x2E0);
		
	}


	/// <summary>
	/// UBoneMaskFilter:UObject
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UBoneMaskFilter:UObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: BlendPoses
		/// Type: TArray<FInputBlendPose>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FInputBlendPose> BlendPoses => new TArray<FInputBlendPose>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UBookMark:UObject
	/// Size: 0x50
	/// Properties: 3
	/// </summary>
	public class UBookMark:UObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x0C
		/// </summary>
		public FVector Location => ReadStruct<FVector>(0x28);
		
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x34
		/// Size: 0x0C
		/// </summary>
		public FRotator Rotation => ReadStruct<FRotator>(0x34);
		
		/// <summary>
		/// Name: HiddenLevels
		/// Type: TArray<>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// UBookMark2D:UObject
	/// Size: 0x38
	/// Properties: 2
	/// </summary>
	public class UBookMark2D:UObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Zoom2D
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float Zoom2D
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x2C
		/// Size: 0x08
		/// </summary>
		public FIntPoint Location => ReadStruct<FIntPoint>(0x2C);
		
	}


	/// <summary>
	/// UBreakpoint:UObject
	/// Size: 0x40
	/// Properties: 5
	/// </summary>
	public class UBreakpoint:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: bEnabled
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bEnabled => (ReadByte(0x0028) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Node
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UEdGraphNode Node => ReadUObject<UEdGraphNode>(0x30);
		
		/// <summary>
		/// Name: bStepOnce
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bStepOnce => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bStepOnce_WasPreviouslyDisabled
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bStepOnce_WasPreviouslyDisabled => (ReadByte(0x0038) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bStepOnce_RemoveAfterHit
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bStepOnce_RemoveAfterHit => (ReadByte(0x0038) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// UBrushBuilder:UObject
	/// Size: 0x80
	/// Properties: 7
	/// </summary>
	public class UBrushBuilder:UObject
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: BitmapFilename
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString BitmapFilename => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: ToolTip
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString ToolTip => new FString(BaseAddress+0x38);
		
		/// <summary>
		/// Name: NotifyBadParams
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool NotifyBadParams => (ReadByte(0x0048) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Vertices
		/// Type: TArray<FVector>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> Vertices => new TArray<FVector>(BaseAddress+0x50);
		
		/// <summary>
		/// Name: Polys
		/// Type: TArray<FBuilderPoly>
		/// Offset: 0x60
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FBuilderPoly> Polys => new TArray<FBuilderPoly>(BaseAddress+0x60);
		
		/// <summary>
		/// Name: Layer
		/// Type: NameProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: MergeCoplanars
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool MergeCoplanars => (ReadByte(0x0078) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UButtonStyleAsset:UObject
	/// Size: 0x2D0
	/// Properties: 1
	/// </summary>
	public class UButtonStyleAsset:UObject
	{
		public override int ObjectSize => 720;
		/// <summary>
		/// Name: ButtonStyle
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x2A8
		/// </summary>
		public FButtonStyle ButtonStyle => ReadStruct<FButtonStyle>(0x28);
		
	}


	/// <summary>
	/// UCameraAnim:UObject
	/// Size: 0x400
	/// Properties: 7
	/// </summary>
	public class UCameraAnim:UObject
	{
		public override int ObjectSize => 1024;
		/// <summary>
		/// Name: CameraInterpGroup
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UInterpGroup CameraInterpGroup => ReadUObject<UInterpGroup>(0x28);
		
		/// <summary>
		/// Name: AnimLength
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float AnimLength
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: BoundingBox
		/// Type: StructProperty
		/// Offset: 0x34
		/// Size: 0x1C
		/// </summary>
		public FBox BoundingBox => ReadStruct<FBox>(0x34);
		
		/// <summary>
		/// Name: bRelativeToInitialTransform
		/// Type: BoolProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public bool bRelativeToInitialTransform => (ReadByte(0x0050) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: BaseFOV
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float BaseFOV
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: BasePostProcessSettings
		/// Type: StructProperty
		/// Offset: 0x58
		/// Size: 0x3A0
		/// </summary>
		public FPostProcessSettings BasePostProcessSettings => ReadStruct<FPostProcessSettings>(0x58);
		
		/// <summary>
		/// Name: BasePostProcessBlendWeight
		/// Type: FloatProperty
		/// Offset: 0x3F8
		/// Size: 0x04
		/// </summary>
		public float BasePostProcessBlendWeight
		{
			get
			{
				return ReadSingle(0x3F8);
			}
			set
			{
				WriteSingle(0x3F8,value);
			}
		}
		
	}


	/// <summary>
	/// UCameraAnimInst:UObject
	/// Size: 0x110
	/// Properties: 6
	/// </summary>
	public class UCameraAnimInst:UObject
	{
		public override int ObjectSize => 272;
		/// <summary>
		/// Name: CamAnim
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UCameraAnim CamAnim => ReadUObject<UCameraAnim>(0x28);
		
		/// <summary>
		/// Name: InterpGroupInst
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UInterpGroupInst InterpGroupInst => ReadUObject<UInterpGroupInst>(0x30);
		
		/// <summary>
		/// Name: PlayRate
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float PlayRate
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: MoveTrack
		/// Type: ObjectProperty
		/// Offset: 0x68
		/// Size: 0x08
		/// </summary>
		public UInterpTrackMove MoveTrack => ReadUObject<UInterpTrackMove>(0x68);
		
		/// <summary>
		/// Name: MoveInst
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public UInterpTrackInstMove MoveInst => ReadUObject<UInterpTrackInstMove>(0x70);
		
		/// <summary>
		/// Name: PlaySpace
		/// Type: ByteProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public byte PlaySpace
		{
			get
			{
				return ReadByte(0x78);
			}
			set
			{
				WriteByte(0x78,value);
			}
		}
		
	}


	/// <summary>
	/// UCameraModifier:UObject
	/// Size: 0x48
	/// Properties: 7
	/// </summary>
	public class UCameraModifier:UObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: bDebug
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bDebug => (ReadByte(0x0028) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bExclusive
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bExclusive => (ReadByte(0x0028) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: Priority
		/// Type: ByteProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public byte Priority
		{
			get
			{
				return ReadByte(0x2C);
			}
			set
			{
				WriteByte(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: CameraOwner
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public APlayerCameraManager CameraOwner => ReadUObject<APlayerCameraManager>(0x30);
		
		/// <summary>
		/// Name: AlphaInTime
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float AlphaInTime
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: AlphaOutTime
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float AlphaOutTime
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: Alpha
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float Alpha
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
	}


	/// <summary>
	/// UCameraModifier_CameraShake:UCameraModifier
	/// Size: 0x60
	/// Properties: 2
	/// </summary>
	public class UCameraModifier_CameraShake:UCameraModifier
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: ActiveShakes
		/// Type: TArray<UCameraShake>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x160
		/// </summary>
		public TArray<UCameraShake> ActiveShakes => new TArray<UCameraShake>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: SplitScreenShakeScale
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float SplitScreenShakeScale
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
	}


	/// <summary>
	/// UCanvas:UObject
	/// Size: 0x2C0
	/// Properties: 14
	/// </summary>
	public class UCanvas:UObject
	{
		public override int ObjectSize => 704;
		/// <summary>
		/// Name: OrgX
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float OrgX
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: OrgY
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float OrgY
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: ClipX
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float ClipX
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: ClipY
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float ClipY
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: DrawColor
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public FColor DrawColor => ReadStruct<FColor>(0x38);
		
		/// <summary>
		/// Name: bCenterX
		/// Type: BoolProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public bool bCenterX => (ReadByte(0x003C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bCenterY
		/// Type: BoolProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public bool bCenterY => (ReadByte(0x003C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bNoSmooth
		/// Type: BoolProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public bool bNoSmooth => (ReadByte(0x003C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: SizeX
		/// Type: IntProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public int SizeX
		{
			get
			{
				return ReadInt32(0x40);
			}
			set
			{
				WriteInt32(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: SizeY
		/// Type: IntProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public int SizeY
		{
			get
			{
				return ReadInt32(0x44);
			}
			set
			{
				WriteInt32(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: ColorModulate
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FPlane ColorModulate => ReadStruct<FPlane>(0x50);
		
		/// <summary>
		/// Name: DefaultTexture
		/// Type: ObjectProperty
		/// Offset: 0x60
		/// Size: 0x08
		/// </summary>
		public UTexture2D DefaultTexture => ReadUObject<UTexture2D>(0x60);
		
		/// <summary>
		/// Name: GradientTexture0
		/// Type: ObjectProperty
		/// Offset: 0x68
		/// Size: 0x08
		/// </summary>
		public UTexture2D GradientTexture0 => ReadUObject<UTexture2D>(0x68);
		
		/// <summary>
		/// Name: ReporterGraph
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public UReporterGraph ReporterGraph => ReadUObject<UReporterGraph>(0x70);
		
	}


	/// <summary>
	/// UChannel:UObject
	/// Size: 0x68
	/// Properties: 1
	/// </summary>
	public class UChannel:UObject
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: Connection
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UNetConnection Connection => ReadUObject<UNetConnection>(0x28);
		
	}


	/// <summary>
	/// UActorChannel:UChannel
	/// Size: 0x230
	/// Properties: 1
	/// </summary>
	public class UActorChannel:UChannel
	{
		public override int ObjectSize => 560;
		/// <summary>
		/// Name: Actor
		/// Type: ObjectProperty
		/// Offset: 0x68
		/// Size: 0x08
		/// </summary>
		public AActor Actor => ReadUObject<AActor>(0x68);
		
	}


	/// <summary>
	/// UControlChannel:UChannel
	/// Size: 0x80
	/// Properties: 0
	/// </summary>
	public class UControlChannel:UChannel
	{
		public override int ObjectSize => 128;
	}


	/// <summary>
	/// UCheckBoxStyleAsset:UObject
	/// Size: 0x608
	/// Properties: 1
	/// </summary>
	public class UCheckBoxStyleAsset:UObject
	{
		public override int ObjectSize => 1544;
		/// <summary>
		/// Name: CheckBoxStyle
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x5E0
		/// </summary>
		public FCheckBoxStyle CheckBoxStyle => ReadStruct<FCheckBoxStyle>(0x28);
		
	}


	/// <summary>
	/// UCommandlet:UObject
	/// Size: 0x80
	/// Properties: 10
	/// </summary>
	public class UCommandlet:UObject
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: HelpDescription
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString HelpDescription => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: HelpUsage
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString HelpUsage => new FString(BaseAddress+0x38);
		
		/// <summary>
		/// Name: HelpWebLink
		/// Type: StrProperty
		/// Offset: 0x48
		/// Size: 0x10
		/// </summary>
		public FString HelpWebLink => new FString(BaseAddress+0x48);
		
		/// <summary>
		/// Name: HelpParamNames
		/// Type: TArray<>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: HelpParamDescriptions
		/// Type: TArray<>
		/// Offset: 0x68
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: IsServer
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool IsServer => (ReadByte(0x0078) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: IsClient
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool IsClient => (ReadByte(0x0078) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: IsEditor
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool IsEditor => (ReadByte(0x0078) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: LogToConsole
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool LogToConsole => (ReadByte(0x0078) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: ShowErrorCount
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool ShowErrorCount => (ReadByte(0x0078) & 0x10) == 0x10;
		
	}


	/// <summary>
	/// UPluginCommandlet:UCommandlet
	/// Size: 0xA0
	/// Properties: 0
	/// </summary>
	public class UPluginCommandlet:UCommandlet
	{
		public override int ObjectSize => 160;
	}


	/// <summary>
	/// USmokeTestCommandlet:UCommandlet
	/// Size: 0x80
	/// Properties: 0
	/// </summary>
	public class USmokeTestCommandlet:UCommandlet
	{
		public override int ObjectSize => 128;
	}


	/// <summary>
	/// UConsole:UObject
	/// Size: 0x130
	/// Properties: 4
	/// </summary>
	public class UConsole:UObject
	{
		public override int ObjectSize => 304;
		/// <summary>
		/// Name: ConsoleTargetPlayer
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public ULocalPlayer ConsoleTargetPlayer => ReadUObject<ULocalPlayer>(0x38);
		
		/// <summary>
		/// Name: DefaultTexture_Black
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UTexture2D DefaultTexture_Black => ReadUObject<UTexture2D>(0x40);
		
		/// <summary>
		/// Name: DefaultTexture_White
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public UTexture2D DefaultTexture_White => ReadUObject<UTexture2D>(0x48);
		
		/// <summary>
		/// Name: HistoryBuffer
		/// Type: TArray<>
		/// Offset: 0x68
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// UCurveLinearColor:UCurveBase
	/// Size: 0x210
	/// Properties: 1
	/// </summary>
	public class UCurveLinearColor:UCurveBase
	{
		public override int ObjectSize => 528;
		/// <summary>
		/// Name: FloatCurves
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x78
		/// </summary>
		public FRichCurve FloatCurves => ReadStruct<FRichCurve>(0x30);
		
	}


	/// <summary>
	/// UCurveVector:UCurveBase
	/// Size: 0x198
	/// Properties: 1
	/// </summary>
	public class UCurveVector:UCurveBase
	{
		public override int ObjectSize => 408;
		/// <summary>
		/// Name: FloatCurves
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x78
		/// </summary>
		public FRichCurve FloatCurves => ReadStruct<FRichCurve>(0x30);
		
	}


	/// <summary>
	/// UCurveEdPresetCurve:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UCurveEdPresetCurve:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UCurveTable:UObject
	/// Size: 0x78
	/// Properties: 0
	/// </summary>
	public class UCurveTable:UObject
	{
		public override int ObjectSize => 120;
	}


	/// <summary>
	/// UTireType:UDataAsset
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class UTireType:UDataAsset
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: FrictionScale
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float FrictionScale
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// UDestructibleFractureSettings:UObject
	/// Size: 0xB8
	/// Properties: 7
	/// </summary>
	public class UDestructibleFractureSettings:UObject
	{
		public override int ObjectSize => 184;
		/// <summary>
		/// Name: CellSiteCount
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int CellSiteCount
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: FractureMaterialDesc
		/// Type: StructProperty
		/// Offset: 0x2C
		/// Size: 0x24
		/// </summary>
		public FFractureMaterial FractureMaterialDesc => ReadStruct<FFractureMaterial>(0x2C);
		
		/// <summary>
		/// Name: RandomSeed
		/// Type: IntProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public int RandomSeed
		{
			get
			{
				return ReadInt32(0x50);
			}
			set
			{
				WriteInt32(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: VoronoiSites
		/// Type: TArray<FVector>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> VoronoiSites => new TArray<FVector>(BaseAddress+0x58);
		
		/// <summary>
		/// Name: OriginalSubmeshCount
		/// Type: IntProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public int OriginalSubmeshCount
		{
			get
			{
				return ReadInt32(0x68);
			}
			set
			{
				WriteInt32(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: Materials
		/// Type: TArray<UMaterialInterface>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x58
		/// </summary>
		public TArray<UMaterialInterface> Materials => new TArray<UMaterialInterface>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: ChunkParameters
		/// Type: TArray<FDestructibleChunkParameters>
		/// Offset: 0x80
		/// Size: 0x10
		/// SubElement Size: 0x04
		/// </summary>
		public TArray<FDestructibleChunkParameters> ChunkParameters => new TArray<FDestructibleChunkParameters>(BaseAddress+0x80);
		
	}


	/// <summary>
	/// UAnimationSettings:UDeveloperSettings
	/// Size: 0x70
	/// Properties: 16
	/// </summary>
	public class UAnimationSettings:UDeveloperSettings
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: CompressCommandletVersion
		/// Type: IntProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public int CompressCommandletVersion
		{
			get
			{
				return ReadInt32(0x38);
			}
			set
			{
				WriteInt32(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: KeyEndEffectorsMatchNameArray
		/// Type: TArray<>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: DefaultCompressionAlgorithm
		/// Type: ClassProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: RotationCompressionFormat
		/// Type: ByteProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public byte RotationCompressionFormat
		{
			get
			{
				return ReadByte(0x58);
			}
			set
			{
				WriteByte(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: TranslationCompressionFormat
		/// Type: ByteProperty
		/// Offset: 0x59
		/// Size: 0x01
		/// </summary>
		public byte TranslationCompressionFormat
		{
			get
			{
				return ReadByte(0x59);
			}
			set
			{
				WriteByte(0x59,value);
			}
		}
		
		/// <summary>
		/// Name: AlternativeCompressionThreshold
		/// Type: FloatProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public float AlternativeCompressionThreshold
		{
			get
			{
				return ReadSingle(0x5C);
			}
			set
			{
				WriteSingle(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: ForceRecompression
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool ForceRecompression
		{
			get
			{
				return ReadBool(0x60);
			}
			set
			{
				WriteBool(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: bOnlyCheckForMissingSkeletalMeshes
		/// Type: BoolProperty
		/// Offset: 0x61
		/// Size: 0x01
		/// </summary>
		public bool bOnlyCheckForMissingSkeletalMeshes
		{
			get
			{
				return ReadBool(0x61);
			}
			set
			{
				WriteBool(0x61,value);
			}
		}
		
		/// <summary>
		/// Name: bForceBelowThreshold
		/// Type: BoolProperty
		/// Offset: 0x62
		/// Size: 0x01
		/// </summary>
		public bool bForceBelowThreshold
		{
			get
			{
				return ReadBool(0x62);
			}
			set
			{
				WriteBool(0x62,value);
			}
		}
		
		/// <summary>
		/// Name: bFirstRecompressUsingCurrentOrDefault
		/// Type: BoolProperty
		/// Offset: 0x63
		/// Size: 0x01
		/// </summary>
		public bool bFirstRecompressUsingCurrentOrDefault
		{
			get
			{
				return ReadBool(0x63);
			}
			set
			{
				WriteBool(0x63,value);
			}
		}
		
		/// <summary>
		/// Name: bRaiseMaxErrorToExisting
		/// Type: BoolProperty
		/// Offset: 0x64
		/// Size: 0x01
		/// </summary>
		public bool bRaiseMaxErrorToExisting
		{
			get
			{
				return ReadBool(0x64);
			}
			set
			{
				WriteBool(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: bTryFixedBitwiseCompression
		/// Type: BoolProperty
		/// Offset: 0x65
		/// Size: 0x01
		/// </summary>
		public bool bTryFixedBitwiseCompression
		{
			get
			{
				return ReadBool(0x65);
			}
			set
			{
				WriteBool(0x65,value);
			}
		}
		
		/// <summary>
		/// Name: bTryPerTrackBitwiseCompression
		/// Type: BoolProperty
		/// Offset: 0x66
		/// Size: 0x01
		/// </summary>
		public bool bTryPerTrackBitwiseCompression
		{
			get
			{
				return ReadBool(0x66);
			}
			set
			{
				WriteBool(0x66,value);
			}
		}
		
		/// <summary>
		/// Name: bTryLinearKeyRemovalCompression
		/// Type: BoolProperty
		/// Offset: 0x67
		/// Size: 0x01
		/// </summary>
		public bool bTryLinearKeyRemovalCompression
		{
			get
			{
				return ReadBool(0x67);
			}
			set
			{
				WriteBool(0x67,value);
			}
		}
		
		/// <summary>
		/// Name: bTryIntervalKeyRemoval
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bTryIntervalKeyRemoval
		{
			get
			{
				return ReadBool(0x68);
			}
			set
			{
				WriteBool(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: bEnablePerformanceLog
		/// Type: BoolProperty
		/// Offset: 0x69
		/// Size: 0x01
		/// </summary>
		public bool bEnablePerformanceLog
		{
			get
			{
				return ReadBool(0x69);
			}
			set
			{
				WriteBool(0x69,value);
			}
		}
		
	}


	/// <summary>
	/// UAudioSettings:UDeveloperSettings
	/// Size: 0x90
	/// Properties: 7
	/// </summary>
	public class UAudioSettings:UDeveloperSettings
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: DefaultSoundClassName
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference DefaultSoundClassName => ReadStruct<FStringAssetReference>(0x38);
		
		/// <summary>
		/// Name: DefaultSoundConcurrencyName
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference DefaultSoundConcurrencyName => ReadStruct<FStringAssetReference>(0x48);
		
		/// <summary>
		/// Name: DefaultBaseSoundMix
		/// Type: StructProperty
		/// Offset: 0x58
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference DefaultBaseSoundMix => ReadStruct<FStringAssetReference>(0x58);
		
		/// <summary>
		/// Name: VoiPSoundClass
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference VoiPSoundClass => ReadStruct<FStringAssetReference>(0x68);
		
		/// <summary>
		/// Name: LowPassFilterResonance
		/// Type: FloatProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public float LowPassFilterResonance
		{
			get
			{
				return ReadSingle(0x78);
			}
			set
			{
				WriteSingle(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: MaximumConcurrentStreams
		/// Type: IntProperty
		/// Offset: 0x7C
		/// Size: 0x04
		/// </summary>
		public int MaximumConcurrentStreams
		{
			get
			{
				return ReadInt32(0x7C);
			}
			set
			{
				WriteInt32(0x7C,value);
			}
		}
		
		/// <summary>
		/// Name: QualityLevels
		/// Type: TArray<FAudioQualitySettings>
		/// Offset: 0x80
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FAudioQualitySettings> QualityLevels => new TArray<FAudioQualitySettings>(BaseAddress+0x80);
		
	}


	/// <summary>
	/// UUserInterfaceSettings:UDeveloperSettings
	/// Size: 0x168
	/// Properties: 15
	/// </summary>
	public class UUserInterfaceSettings:UDeveloperSettings
	{
		public override int ObjectSize => 360;
		/// <summary>
		/// Name: RenderFocusRule
		/// Type: ByteProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public byte RenderFocusRule
		{
			get
			{
				return ReadByte(0x38);
			}
			set
			{
				WriteByte(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultCursor
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FStringClassReference DefaultCursor => ReadStruct<FStringClassReference>(0x40);
		
		/// <summary>
		/// Name: TextEditBeamCursor
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FStringClassReference TextEditBeamCursor => ReadStruct<FStringClassReference>(0x50);
		
		/// <summary>
		/// Name: CrosshairsCursor
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x10
		/// </summary>
		public FStringClassReference CrosshairsCursor => ReadStruct<FStringClassReference>(0x60);
		
		/// <summary>
		/// Name: HandCursor
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FStringClassReference HandCursor => ReadStruct<FStringClassReference>(0x70);
		
		/// <summary>
		/// Name: GrabHandCursor
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FStringClassReference GrabHandCursor => ReadStruct<FStringClassReference>(0x80);
		
		/// <summary>
		/// Name: GrabHandClosedCursor
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x10
		/// </summary>
		public FStringClassReference GrabHandClosedCursor => ReadStruct<FStringClassReference>(0x90);
		
		/// <summary>
		/// Name: SlashedCircleCursor
		/// Type: StructProperty
		/// Offset: 0xA0
		/// Size: 0x10
		/// </summary>
		public FStringClassReference SlashedCircleCursor => ReadStruct<FStringClassReference>(0xA0);
		
		/// <summary>
		/// Name: ApplicationScale
		/// Type: FloatProperty
		/// Offset: 0xB0
		/// Size: 0x04
		/// </summary>
		public float ApplicationScale
		{
			get
			{
				return ReadSingle(0xB0);
			}
			set
			{
				WriteSingle(0xB0,value);
			}
		}
		
		/// <summary>
		/// Name: UIScaleRule
		/// Type: ByteProperty
		/// Offset: 0xB4
		/// Size: 0x01
		/// </summary>
		public byte UIScaleRule
		{
			get
			{
				return ReadByte(0xB4);
			}
			set
			{
				WriteByte(0xB4,value);
			}
		}
		
		/// <summary>
		/// Name: CustomScalingRuleClass
		/// Type: StructProperty
		/// Offset: 0xB8
		/// Size: 0x10
		/// </summary>
		public FStringClassReference CustomScalingRuleClass => ReadStruct<FStringClassReference>(0xB8);
		
		/// <summary>
		/// Name: UIScaleCurve
		/// Type: StructProperty
		/// Offset: 0xC8
		/// Size: 0x80
		/// </summary>
		public FRuntimeFloatCurve UIScaleCurve => ReadStruct<FRuntimeFloatCurve>(0xC8);
		
		/// <summary>
		/// Name: CursorClasses
		/// Type: TArray<UObject>
		/// Offset: 0x148
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UObject> CursorClasses => new TArray<UObject>(BaseAddress+0x148);
		
		/// <summary>
		/// Name: CustomScalingRuleClassInstance
		/// Type: ClassProperty
		/// Offset: 0x158
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CustomScalingRule
		/// Type: ObjectProperty
		/// Offset: 0x160
		/// Size: 0x08
		/// </summary>
		public UDPICustomScalingRule CustomScalingRule => ReadUObject<UDPICustomScalingRule>(0x160);
		
	}


	/// <summary>
	/// UStreamingSettings:UDeveloperSettings
	/// Size: 0x60
	/// Properties: 12
	/// </summary>
	public class UStreamingSettings:UDeveloperSettings
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: AsyncLoadingThreadEnabled
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool AsyncLoadingThreadEnabled => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: WarnIfTimeLimitExceeded
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool WarnIfTimeLimitExceeded => (ReadByte(0x0038) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: TimeLimitExceededMultiplier
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float TimeLimitExceededMultiplier
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: TimeLimitExceededMinTime
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float TimeLimitExceededMinTime
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: MinBulkDataSizeForAsyncLoading
		/// Type: IntProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public int MinBulkDataSizeForAsyncLoading
		{
			get
			{
				return ReadInt32(0x44);
			}
			set
			{
				WriteInt32(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: AsyncIOBandwidthLimit
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float AsyncIOBandwidthLimit
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: UseBackgroundLevelStreaming
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool UseBackgroundLevelStreaming => (ReadByte(0x004C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: AsyncLoadingUseFullTimeLimit
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool AsyncLoadingUseFullTimeLimit => (ReadByte(0x004C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: AsyncLoadingTimeLimit
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float AsyncLoadingTimeLimit
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: PriorityAsyncLoadingExtraTime
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float PriorityAsyncLoadingExtraTime
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: LevelStreamingActorsUpdateTimeLimit
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float LevelStreamingActorsUpdateTimeLimit
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: LevelStreamingComponentsRegistrationGranularity
		/// Type: IntProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public int LevelStreamingComponentsRegistrationGranularity
		{
			get
			{
				return ReadInt32(0x5C);
			}
			set
			{
				WriteInt32(0x5C,value);
			}
		}
		
	}


	/// <summary>
	/// UGarbageCollectionSettings:UDeveloperSettings
	/// Size: 0x58
	/// Properties: 10
	/// </summary>
	public class UGarbageCollectionSettings:UDeveloperSettings
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: TimeBetweenPurgingPendingKillObjects
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float TimeBetweenPurgingPendingKillObjects
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: FlushStreamingOnGC
		/// Type: BoolProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public bool FlushStreamingOnGC => (ReadByte(0x003C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: AllowParallelGC
		/// Type: BoolProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public bool AllowParallelGC => (ReadByte(0x003C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: CreateGCClusters
		/// Type: BoolProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public bool CreateGCClusters => (ReadByte(0x003C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: MergeGCClusters
		/// Type: BoolProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public bool MergeGCClusters => (ReadByte(0x003C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: NumRetriesBeforeForcingGC
		/// Type: IntProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public int NumRetriesBeforeForcingGC
		{
			get
			{
				return ReadInt32(0x40);
			}
			set
			{
				WriteInt32(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: MaxObjectsNotConsideredByGC
		/// Type: IntProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public int MaxObjectsNotConsideredByGC
		{
			get
			{
				return ReadInt32(0x44);
			}
			set
			{
				WriteInt32(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: SizeOfPermanentObjectPool
		/// Type: IntProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public int SizeOfPermanentObjectPool
		{
			get
			{
				return ReadInt32(0x48);
			}
			set
			{
				WriteInt32(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: MaxObjectsInGame
		/// Type: IntProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public int MaxObjectsInGame
		{
			get
			{
				return ReadInt32(0x4C);
			}
			set
			{
				WriteInt32(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxObjectsInEditor
		/// Type: IntProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public int MaxObjectsInEditor
		{
			get
			{
				return ReadInt32(0x50);
			}
			set
			{
				WriteInt32(0x50,value);
			}
		}
		
	}


	/// <summary>
	/// UNetworkSettings:UDeveloperSettings
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class UNetworkSettings:UDeveloperSettings
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: bVerifyPeer
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bVerifyPeer => (ReadByte(0x0038) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UPhysicsSettings:UDeveloperSettings
	/// Size: 0xA8
	/// Properties: 35
	/// </summary>
	public class UPhysicsSettings:UDeveloperSettings
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: DefaultGravityZ
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float DefaultGravityZ
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultTerminalVelocity
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float DefaultTerminalVelocity
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultFluidFriction
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float DefaultFluidFriction
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: RagdollAggregateThreshold
		/// Type: IntProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public int RagdollAggregateThreshold
		{
			get
			{
				return ReadInt32(0x44);
			}
			set
			{
				WriteInt32(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: TriangleMeshTriangleMinAreaThreshold
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float TriangleMeshTriangleMinAreaThreshold
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableAsyncScene
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bEnableAsyncScene
		{
			get
			{
				return ReadBool(0x4C);
			}
			set
			{
				WriteBool(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableShapeSharing
		/// Type: BoolProperty
		/// Offset: 0x4D
		/// Size: 0x01
		/// </summary>
		public bool bEnableShapeSharing
		{
			get
			{
				return ReadBool(0x4D);
			}
			set
			{
				WriteBool(0x4D,value);
			}
		}
		
		/// <summary>
		/// Name: bEnablePCM
		/// Type: BoolProperty
		/// Offset: 0x4E
		/// Size: 0x01
		/// </summary>
		public bool bEnablePCM
		{
			get
			{
				return ReadBool(0x4E);
			}
			set
			{
				WriteBool(0x4E,value);
			}
		}
		
		/// <summary>
		/// Name: bForceMultithread
		/// Type: BoolProperty
		/// Offset: 0x4F
		/// Size: 0x01
		/// </summary>
		public bool bForceMultithread
		{
			get
			{
				return ReadBool(0x4F);
			}
			set
			{
				WriteBool(0x4F,value);
			}
		}
		
		/// <summary>
		/// Name: bWarnMissingLocks
		/// Type: BoolProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public bool bWarnMissingLocks
		{
			get
			{
				return ReadBool(0x50);
			}
			set
			{
				WriteBool(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: bEnable2DPhysics
		/// Type: BoolProperty
		/// Offset: 0x51
		/// Size: 0x01
		/// </summary>
		public bool bEnable2DPhysics
		{
			get
			{
				return ReadBool(0x51);
			}
			set
			{
				WriteBool(0x51,value);
			}
		}
		
		/// <summary>
		/// Name: LockedAxis
		/// Type: ByteProperty
		/// Offset: 0x52
		/// Size: 0x01
		/// </summary>
		public byte LockedAxis
		{
			get
			{
				return ReadByte(0x52);
			}
			set
			{
				WriteByte(0x52,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultDegreesOfFreedom
		/// Type: ByteProperty
		/// Offset: 0x53
		/// Size: 0x01
		/// </summary>
		public byte DefaultDegreesOfFreedom
		{
			get
			{
				return ReadByte(0x53);
			}
			set
			{
				WriteByte(0x53,value);
			}
		}
		
		/// <summary>
		/// Name: BounceThresholdVelocity
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float BounceThresholdVelocity
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: FrictionCombineMode
		/// Type: ByteProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public byte FrictionCombineMode
		{
			get
			{
				return ReadByte(0x58);
			}
			set
			{
				WriteByte(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: RestitutionCombineMode
		/// Type: ByteProperty
		/// Offset: 0x59
		/// Size: 0x01
		/// </summary>
		public byte RestitutionCombineMode
		{
			get
			{
				return ReadByte(0x59);
			}
			set
			{
				WriteByte(0x59,value);
			}
		}
		
		/// <summary>
		/// Name: MaxAngularVelocity
		/// Type: FloatProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public float MaxAngularVelocity
		{
			get
			{
				return ReadSingle(0x5C);
			}
			set
			{
				WriteSingle(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxDepenetrationVelocity
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float MaxDepenetrationVelocity
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: ContactOffsetMultiplier
		/// Type: FloatProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public float ContactOffsetMultiplier
		{
			get
			{
				return ReadSingle(0x64);
			}
			set
			{
				WriteSingle(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: MinContactOffset
		/// Type: FloatProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public float MinContactOffset
		{
			get
			{
				return ReadSingle(0x68);
			}
			set
			{
				WriteSingle(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: MaxContactOffset
		/// Type: FloatProperty
		/// Offset: 0x6C
		/// Size: 0x04
		/// </summary>
		public float MaxContactOffset
		{
			get
			{
				return ReadSingle(0x6C);
			}
			set
			{
				WriteSingle(0x6C,value);
			}
		}
		
		/// <summary>
		/// Name: bSimulateSkeletalMeshOnDedicatedServer
		/// Type: BoolProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public bool bSimulateSkeletalMeshOnDedicatedServer
		{
			get
			{
				return ReadBool(0x70);
			}
			set
			{
				WriteBool(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: bDefaultHasComplexCollision
		/// Type: BoolProperty
		/// Offset: 0x71
		/// Size: 0x01
		/// </summary>
		public bool bDefaultHasComplexCollision
		{
			get
			{
				return ReadBool(0x71);
			}
			set
			{
				WriteBool(0x71,value);
			}
		}
		
		/// <summary>
		/// Name: bSuppressFaceRemapTable
		/// Type: BoolProperty
		/// Offset: 0x72
		/// Size: 0x01
		/// </summary>
		public bool bSuppressFaceRemapTable
		{
			get
			{
				return ReadBool(0x72);
			}
			set
			{
				WriteBool(0x72,value);
			}
		}
		
		/// <summary>
		/// Name: bDisableActiveTransforms
		/// Type: BoolProperty
		/// Offset: 0x73
		/// Size: 0x01
		/// </summary>
		public bool bDisableActiveTransforms
		{
			get
			{
				return ReadBool(0x73);
			}
			set
			{
				WriteBool(0x73,value);
			}
		}
		
		/// <summary>
		/// Name: bDisableCCD
		/// Type: BoolProperty
		/// Offset: 0x74
		/// Size: 0x01
		/// </summary>
		public bool bDisableCCD
		{
			get
			{
				return ReadBool(0x74);
			}
			set
			{
				WriteBool(0x74,value);
			}
		}
		
		/// <summary>
		/// Name: MaxPhysicsDeltaTime
		/// Type: FloatProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public float MaxPhysicsDeltaTime
		{
			get
			{
				return ReadSingle(0x78);
			}
			set
			{
				WriteSingle(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: bSubstepping
		/// Type: BoolProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public bool bSubstepping
		{
			get
			{
				return ReadBool(0x7C);
			}
			set
			{
				WriteBool(0x7C,value);
			}
		}
		
		/// <summary>
		/// Name: bSubsteppingAsync
		/// Type: BoolProperty
		/// Offset: 0x7D
		/// Size: 0x01
		/// </summary>
		public bool bSubsteppingAsync
		{
			get
			{
				return ReadBool(0x7D);
			}
			set
			{
				WriteBool(0x7D,value);
			}
		}
		
		/// <summary>
		/// Name: MaxSubstepDeltaTime
		/// Type: FloatProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public float MaxSubstepDeltaTime
		{
			get
			{
				return ReadSingle(0x80);
			}
			set
			{
				WriteSingle(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: MaxSubsteps
		/// Type: IntProperty
		/// Offset: 0x84
		/// Size: 0x04
		/// </summary>
		public int MaxSubsteps
		{
			get
			{
				return ReadInt32(0x84);
			}
			set
			{
				WriteInt32(0x84,value);
			}
		}
		
		/// <summary>
		/// Name: SyncSceneSmoothingFactor
		/// Type: FloatProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public float SyncSceneSmoothingFactor
		{
			get
			{
				return ReadSingle(0x88);
			}
			set
			{
				WriteSingle(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: AsyncSceneSmoothingFactor
		/// Type: FloatProperty
		/// Offset: 0x8C
		/// Size: 0x04
		/// </summary>
		public float AsyncSceneSmoothingFactor
		{
			get
			{
				return ReadSingle(0x8C);
			}
			set
			{
				WriteSingle(0x8C,value);
			}
		}
		
		/// <summary>
		/// Name: InitialAverageFrameRate
		/// Type: FloatProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public float InitialAverageFrameRate
		{
			get
			{
				return ReadSingle(0x90);
			}
			set
			{
				WriteSingle(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: PhysicalSurfaces
		/// Type: TArray<FPhysicalSurfaceName>
		/// Offset: 0x98
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FPhysicalSurfaceName> PhysicalSurfaces => new TArray<FPhysicalSurfaceName>(BaseAddress+0x98);
		
	}


	/// <summary>
	/// URendererSettings:UDeveloperSettings
	/// Size: 0x128
	/// Properties: 43
	/// </summary>
	public class URendererSettings:UDeveloperSettings
	{
		public override int ObjectSize => 296;
		/// <summary>
		/// Name: bMobileHDR
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bMobileHDR => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: MobileNumDynamicPointLights
		/// Type: UInt32Property
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: bMobileDynamicPointLightsUseStaticBranch
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bMobileDynamicPointLightsUseStaticBranch => (ReadByte(0x0040) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bMobileEnableStaticAndCSMShadowReceivers
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bMobileEnableStaticAndCSMShadowReceivers => (ReadByte(0x0040) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bDiscardUnusedQualityLevels
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bDiscardUnusedQualityLevels => (ReadByte(0x0040) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOcclusionCulling
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bOcclusionCulling => (ReadByte(0x0040) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: MinScreenRadiusForLights
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float MinScreenRadiusForLights
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: MinScreenRadiusForEarlyZPass
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float MinScreenRadiusForEarlyZPass
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: MinScreenRadiusForCSMdepth
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float MinScreenRadiusForCSMdepth
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: bPrecomputedVisibilityWarning
		/// Type: BoolProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public bool bPrecomputedVisibilityWarning => (ReadByte(0x0050) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bTextureStreaming
		/// Type: BoolProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public bool bTextureStreaming => (ReadByte(0x0050) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bUseDXT5NormalMaps
		/// Type: BoolProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public bool bUseDXT5NormalMaps => (ReadByte(0x0050) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bClearCoatEnableSecondNormal
		/// Type: BoolProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public bool bClearCoatEnableSecondNormal => (ReadByte(0x0050) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: ReflectionCaptureResolution
		/// Type: IntProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public int ReflectionCaptureResolution
		{
			get
			{
				return ReadInt32(0x54);
			}
			set
			{
				WriteInt32(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: bAllowStaticLighting
		/// Type: BoolProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public bool bAllowStaticLighting => (ReadByte(0x0058) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUseNormalMapsForStaticLighting
		/// Type: BoolProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public bool bUseNormalMapsForStaticLighting => (ReadByte(0x0058) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bGenerateMeshDistanceFields
		/// Type: BoolProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public bool bGenerateMeshDistanceFields => (ReadByte(0x0058) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bGenerateLandscapeGIData
		/// Type: BoolProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public bool bGenerateLandscapeGIData => (ReadByte(0x0058) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: TessellationAdaptivePixelsPerTriangle
		/// Type: FloatProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public float TessellationAdaptivePixelsPerTriangle
		{
			get
			{
				return ReadSingle(0x5C);
			}
			set
			{
				WriteSingle(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: bSeparateTranslucency
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bSeparateTranslucency => (ReadByte(0x0060) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: TranslucentSortPolicy
		/// Type: ByteProperty
		/// Offset: 0x64
		/// Size: 0x01
		/// </summary>
		public byte TranslucentSortPolicy
		{
			get
			{
				return ReadByte(0x64);
			}
			set
			{
				WriteByte(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: TranslucentSortAxis
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x0C
		/// </summary>
		public FVector TranslucentSortAxis => ReadStruct<FVector>(0x68);
		
		/// <summary>
		/// Name: CustomDepthStencil
		/// Type: ByteProperty
		/// Offset: 0x74
		/// Size: 0x01
		/// </summary>
		public byte CustomDepthStencil
		{
			get
			{
				return ReadByte(0x74);
			}
			set
			{
				WriteByte(0x74,value);
			}
		}
		
		/// <summary>
		/// Name: bDefaultFeatureBloom
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bDefaultFeatureBloom => (ReadByte(0x0078) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDefaultFeatureAmbientOcclusion
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bDefaultFeatureAmbientOcclusion => (ReadByte(0x0078) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bDefaultFeatureAmbientOcclusionStaticFraction
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bDefaultFeatureAmbientOcclusionStaticFraction => (ReadByte(0x0078) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bDefaultFeatureAutoExposure
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bDefaultFeatureAutoExposure => (ReadByte(0x0078) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: DefaultFeatureAutoExposure
		/// Type: ByteProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public byte DefaultFeatureAutoExposure
		{
			get
			{
				return ReadByte(0x7C);
			}
			set
			{
				WriteByte(0x7C,value);
			}
		}
		
		/// <summary>
		/// Name: bDefaultFeatureMotionBlur
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bDefaultFeatureMotionBlur => (ReadByte(0x0080) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDefaultFeatureLensFlare
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bDefaultFeatureLensFlare => (ReadByte(0x0080) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: DefaultFeatureAntiAliasing
		/// Type: ByteProperty
		/// Offset: 0x84
		/// Size: 0x01
		/// </summary>
		public byte DefaultFeatureAntiAliasing
		{
			get
			{
				return ReadByte(0x84);
			}
			set
			{
				WriteByte(0x84,value);
			}
		}
		
		/// <summary>
		/// Name: EarlyZPass
		/// Type: ByteProperty
		/// Offset: 0x85
		/// Size: 0x01
		/// </summary>
		public byte EarlyZPass
		{
			get
			{
				return ReadByte(0x85);
			}
			set
			{
				WriteByte(0x85,value);
			}
		}
		
		/// <summary>
		/// Name: bEarlyZPassMovable
		/// Type: BoolProperty
		/// Offset: 0x88
		/// Size: 0x01
		/// </summary>
		public bool bEarlyZPassMovable => (ReadByte(0x0088) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDBuffer
		/// Type: BoolProperty
		/// Offset: 0x88
		/// Size: 0x01
		/// </summary>
		public bool bDBuffer => (ReadByte(0x0088) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: ClearSceneMethod
		/// Type: ByteProperty
		/// Offset: 0x8C
		/// Size: 0x01
		/// </summary>
		public byte ClearSceneMethod
		{
			get
			{
				return ReadByte(0x8C);
			}
			set
			{
				WriteByte(0x8C,value);
			}
		}
		
		/// <summary>
		/// Name: bBasePassOutputsVelocity
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool bBasePassOutputsVelocity => (ReadByte(0x0090) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSelectiveBasePassOutputs
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool bSelectiveBasePassOutputs => (ReadByte(0x0090) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bGlobalClipPlane
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool bGlobalClipPlane => (ReadByte(0x0090) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: GBufferFormat
		/// Type: ByteProperty
		/// Offset: 0x94
		/// Size: 0x01
		/// </summary>
		public byte GBufferFormat
		{
			get
			{
				return ReadByte(0x94);
			}
			set
			{
				WriteByte(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: bInstancedStereo
		/// Type: BoolProperty
		/// Offset: 0x98
		/// Size: 0x01
		/// </summary>
		public bool bInstancedStereo => (ReadByte(0x0098) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: WireframeCullThreshold
		/// Type: FloatProperty
		/// Offset: 0x9C
		/// Size: 0x04
		/// </summary>
		public float WireframeCullThreshold
		{
			get
			{
				return ReadSingle(0x9C);
			}
			set
			{
				WriteSingle(0x9C,value);
			}
		}
		
		/// <summary>
		/// Name: UIScaleRule
		/// Type: ByteProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public byte UIScaleRule
		{
			get
			{
				return ReadByte(0xA0);
			}
			set
			{
				WriteByte(0xA0,value);
			}
		}
		
		/// <summary>
		/// Name: UIScaleCurve
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x80
		/// </summary>
		public FRuntimeFloatCurve UIScaleCurve => ReadStruct<FRuntimeFloatCurve>(0xA8);
		
	}


	/// <summary>
	/// UTextureLODSettings:UObject
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UTextureLODSettings:UObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: TextureLODGroups
		/// Type: TArray<FTextureLODGroup>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FTextureLODGroup> TextureLODGroups => new TArray<FTextureLODGroup>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UDeviceProfile:UTextureLODSettings
	/// Size: 0xC0
	/// Properties: 4
	/// </summary>
	public class UDeviceProfile:UTextureLODSettings
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: DeviceType
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString DeviceType => new FString(BaseAddress+0x38);
		
		/// <summary>
		/// Name: BaseProfileName
		/// Type: StrProperty
		/// Offset: 0x48
		/// Size: 0x10
		/// </summary>
		public FString BaseProfileName => new FString(BaseAddress+0x48);
		
		/// <summary>
		/// Name: Parent
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UObject Parent => ReadUObject<UObject>(0x58);
		
		/// <summary>
		/// Name: CVars
		/// Type: TArray<>
		/// Offset: 0x68
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// UDeviceProfileManager:UObject
	/// Size: 0xC0
	/// Properties: 1
	/// </summary>
	public class UDeviceProfileManager:UObject
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: Profiles
		/// Type: TArray<UObject>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UObject> Profiles => new TArray<UObject>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UDialogueVoice:UObject
	/// Size: 0x40
	/// Properties: 3
	/// </summary>
	public class UDialogueVoice:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Gender
		/// Type: ByteProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public byte Gender
		{
			get
			{
				return ReadByte(0x28);
			}
			set
			{
				WriteByte(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: Plurality
		/// Type: ByteProperty
		/// Offset: 0x29
		/// Size: 0x01
		/// </summary>
		public byte Plurality
		{
			get
			{
				return ReadByte(0x29);
			}
			set
			{
				WriteByte(0x29,value);
			}
		}
		
		/// <summary>
		/// Name: LocalizationGUID
		/// Type: StructProperty
		/// Offset: 0x2C
		/// Size: 0x10
		/// </summary>
		public FGuid LocalizationGUID => ReadStruct<FGuid>(0x2C);
		
	}


	/// <summary>
	/// UDialogueWave:UObject
	/// Size: 0x60
	/// Properties: 4
	/// </summary>
	public class UDialogueWave:UObject
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: bMature
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bMature => (ReadByte(0x0028) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: SpokenText
		/// Type: StrProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FString SpokenText => new FString(BaseAddress+0x30);
		
		/// <summary>
		/// Name: ContextMappings
		/// Type: TArray<FDialogueContextMapping>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FDialogueContextMapping> ContextMappings => new TArray<FDialogueContextMapping>(BaseAddress+0x40);
		
		/// <summary>
		/// Name: LocalizationGUID
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FGuid LocalizationGUID => ReadStruct<FGuid>(0x50);
		
	}


	/// <summary>
	/// UDistribution:UObject
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UDistribution:UObject
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UDistributionFloat:UDistribution
	/// Size: 0x38
	/// Properties: 2
	/// </summary>
	public class UDistributionFloat:UDistribution
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: bCanBeBaked
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bCanBeBaked => (ReadByte(0x0030) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bBakedDataSuccesfully
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bBakedDataSuccesfully => (ReadByte(0x0030) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// UDistributionFloatConstant:UDistributionFloat
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class UDistributionFloatConstant:UDistributionFloat
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Constant
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float Constant
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// UDistributionFloatParameterBase:UDistributionFloatConstant
	/// Size: 0x60
	/// Properties: 6
	/// </summary>
	public class UDistributionFloatParameterBase:UDistributionFloatConstant
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: MinInput
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float MinInput
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: MaxInput
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float MaxInput
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: MinOutput
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float MinOutput
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: MaxOutput
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float MaxOutput
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: ParamMode
		/// Type: ByteProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public byte ParamMode
		{
			get
			{
				return ReadByte(0x58);
			}
			set
			{
				WriteByte(0x58,value);
			}
		}
		
	}


	/// <summary>
	/// UDistributionFloatParticleParameter:UDistributionFloatParameterBase
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class UDistributionFloatParticleParameter:UDistributionFloatParameterBase
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// UDistributionFloatConstantCurve:UDistributionFloat
	/// Size: 0x50
	/// Properties: 1
	/// </summary>
	public class UDistributionFloatConstantCurve:UDistributionFloat
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: ConstantCurve
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x18
		/// </summary>
		public FInterpCurveFloat ConstantCurve => ReadStruct<FInterpCurveFloat>(0x38);
		
	}


	/// <summary>
	/// UDistributionFloatUniform:UDistributionFloat
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class UDistributionFloatUniform:UDistributionFloat
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Min
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float Min
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: Max
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float Max
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
	}


	/// <summary>
	/// UDistributionFloatUniformCurve:UDistributionFloat
	/// Size: 0x50
	/// Properties: 1
	/// </summary>
	public class UDistributionFloatUniformCurve:UDistributionFloat
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: ConstantCurve
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x18
		/// </summary>
		public FInterpCurveVector2D ConstantCurve => ReadStruct<FInterpCurveVector2D>(0x38);
		
	}


	/// <summary>
	/// UDistributionVector:UDistribution
	/// Size: 0x38
	/// Properties: 3
	/// </summary>
	public class UDistributionVector:UDistribution
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: bCanBeBaked
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bCanBeBaked => (ReadByte(0x0030) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bIsDirty
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bIsDirty => (ReadByte(0x0030) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bBakedDataSuccesfully
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bBakedDataSuccesfully => (ReadByte(0x0030) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// UDistributionVectorConstant:UDistributionVector
	/// Size: 0x50
	/// Properties: 3
	/// </summary>
	public class UDistributionVectorConstant:UDistributionVector
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: Constant
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x0C
		/// </summary>
		public FVector Constant => ReadStruct<FVector>(0x38);
		
		/// <summary>
		/// Name: bLockAxes
		/// Type: BoolProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public bool bLockAxes => (ReadByte(0x0044) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LockedAxes
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte LockedAxes
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
	}


	/// <summary>
	/// UDistributionVectorParameterBase:UDistributionVectorConstant
	/// Size: 0x90
	/// Properties: 6
	/// </summary>
	public class UDistributionVectorParameterBase:UDistributionVectorConstant
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: MinInput
		/// Type: StructProperty
		/// Offset: 0x58
		/// Size: 0x0C
		/// </summary>
		public FVector MinInput => ReadStruct<FVector>(0x58);
		
		/// <summary>
		/// Name: MaxInput
		/// Type: StructProperty
		/// Offset: 0x64
		/// Size: 0x0C
		/// </summary>
		public FVector MaxInput => ReadStruct<FVector>(0x64);
		
		/// <summary>
		/// Name: MinOutput
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x0C
		/// </summary>
		public FVector MinOutput => ReadStruct<FVector>(0x70);
		
		/// <summary>
		/// Name: MaxOutput
		/// Type: StructProperty
		/// Offset: 0x7C
		/// Size: 0x0C
		/// </summary>
		public FVector MaxOutput => ReadStruct<FVector>(0x7C);
		
		/// <summary>
		/// Name: ParamModes
		/// Type: ByteProperty
		/// Offset: 0x88
		/// Size: 0x01
		/// </summary>
		public byte ParamModes
		{
			get
			{
				return ReadByte(0x88);
			}
			set
			{
				WriteByte(0x88,value);
			}
		}
		
	}


	/// <summary>
	/// UDistributionVectorParticleParameter:UDistributionVectorParameterBase
	/// Size: 0x90
	/// Properties: 0
	/// </summary>
	public class UDistributionVectorParticleParameter:UDistributionVectorParameterBase
	{
		public override int ObjectSize => 144;
	}


	/// <summary>
	/// UDistributionVectorConstantCurve:UDistributionVector
	/// Size: 0x58
	/// Properties: 3
	/// </summary>
	public class UDistributionVectorConstantCurve:UDistributionVector
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: ConstantCurve
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x18
		/// </summary>
		public FInterpCurveVector ConstantCurve => ReadStruct<FInterpCurveVector>(0x38);
		
		/// <summary>
		/// Name: bLockAxes
		/// Type: BoolProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public bool bLockAxes => (ReadByte(0x0050) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LockedAxes
		/// Type: ByteProperty
		/// Offset: 0x54
		/// Size: 0x01
		/// </summary>
		public byte LockedAxes
		{
			get
			{
				return ReadByte(0x54);
			}
			set
			{
				WriteByte(0x54,value);
			}
		}
		
	}


	/// <summary>
	/// UDistributionVectorUniform:UDistributionVector
	/// Size: 0x60
	/// Properties: 6
	/// </summary>
	public class UDistributionVectorUniform:UDistributionVector
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: Max
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x0C
		/// </summary>
		public FVector Max => ReadStruct<FVector>(0x38);
		
		/// <summary>
		/// Name: Min
		/// Type: StructProperty
		/// Offset: 0x44
		/// Size: 0x0C
		/// </summary>
		public FVector Min => ReadStruct<FVector>(0x44);
		
		/// <summary>
		/// Name: bLockAxes
		/// Type: BoolProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public bool bLockAxes => (ReadByte(0x0050) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LockedAxes
		/// Type: ByteProperty
		/// Offset: 0x54
		/// Size: 0x01
		/// </summary>
		public byte LockedAxes
		{
			get
			{
				return ReadByte(0x54);
			}
			set
			{
				WriteByte(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: MirrorFlags
		/// Type: ByteProperty
		/// Offset: 0x55
		/// Size: 0x01
		/// </summary>
		public byte MirrorFlags
		{
			get
			{
				return ReadByte(0x55);
			}
			set
			{
				WriteByte(0x55,value);
			}
		}
		
		/// <summary>
		/// Name: bUseExtremes
		/// Type: BoolProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public bool bUseExtremes => (ReadByte(0x0058) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UDistributionVectorUniformCurve:UDistributionVector
	/// Size: 0x60
	/// Properties: 6
	/// </summary>
	public class UDistributionVectorUniformCurve:UDistributionVector
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: ConstantCurve
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x18
		/// </summary>
		public FInterpCurveTwoVectors ConstantCurve => ReadStruct<FInterpCurveTwoVectors>(0x38);
		
		/// <summary>
		/// Name: bLockAxes1
		/// Type: BoolProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public bool bLockAxes1 => (ReadByte(0x0050) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bLockAxes2
		/// Type: BoolProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public bool bLockAxes2 => (ReadByte(0x0050) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: LockedAxes
		/// Type: ByteProperty
		/// Offset: 0x54
		/// Size: 0x01
		/// </summary>
		public byte LockedAxes
		{
			get
			{
				return ReadByte(0x54);
			}
			set
			{
				WriteByte(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: MirrorFlags
		/// Type: ByteProperty
		/// Offset: 0x56
		/// Size: 0x01
		/// </summary>
		public byte MirrorFlags
		{
			get
			{
				return ReadByte(0x56);
			}
			set
			{
				WriteByte(0x56,value);
			}
		}
		
		/// <summary>
		/// Name: bUseExtremes
		/// Type: BoolProperty
		/// Offset: 0x5C
		/// Size: 0x01
		/// </summary>
		public bool bUseExtremes => (ReadByte(0x005C) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UDPICustomScalingRule:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UDPICustomScalingRule:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UDynamicBlueprintBinding:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UDynamicBlueprintBinding:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UComponentDelegateBinding:UDynamicBlueprintBinding
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UComponentDelegateBinding:UDynamicBlueprintBinding
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: ComponentDelegateBindings
		/// Type: TArray<FBlueprintComponentDelegateBinding>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FBlueprintComponentDelegateBinding> ComponentDelegateBindings => new TArray<FBlueprintComponentDelegateBinding>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UInputDelegateBinding:UDynamicBlueprintBinding
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UInputDelegateBinding:UDynamicBlueprintBinding
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UInputActionDelegateBinding:UInputDelegateBinding
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UInputActionDelegateBinding:UInputDelegateBinding
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: InputActionDelegateBindings
		/// Type: TArray<FBlueprintInputActionDelegateBinding>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FBlueprintInputActionDelegateBinding> InputActionDelegateBindings => new TArray<FBlueprintInputActionDelegateBinding>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UInputAxisDelegateBinding:UInputDelegateBinding
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UInputAxisDelegateBinding:UInputDelegateBinding
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: InputAxisDelegateBindings
		/// Type: TArray<FBlueprintInputAxisDelegateBinding>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FBlueprintInputAxisDelegateBinding> InputAxisDelegateBindings => new TArray<FBlueprintInputAxisDelegateBinding>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UInputAxisKeyDelegateBinding:UInputDelegateBinding
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UInputAxisKeyDelegateBinding:UInputDelegateBinding
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: InputAxisKeyDelegateBindings
		/// Type: TArray<FBlueprintInputAxisKeyDelegateBinding>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FBlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings => new TArray<FBlueprintInputAxisKeyDelegateBinding>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UInputVectorAxisDelegateBinding:UInputAxisKeyDelegateBinding
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class UInputVectorAxisDelegateBinding:UInputAxisKeyDelegateBinding
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UInputKeyDelegateBinding:UInputDelegateBinding
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UInputKeyDelegateBinding:UInputDelegateBinding
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: InputKeyDelegateBindings
		/// Type: TArray<FBlueprintInputKeyDelegateBinding>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FBlueprintInputKeyDelegateBinding> InputKeyDelegateBindings => new TArray<FBlueprintInputKeyDelegateBinding>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UInputTouchDelegateBinding:UInputDelegateBinding
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UInputTouchDelegateBinding:UInputDelegateBinding
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: InputTouchDelegateBindings
		/// Type: TArray<FBlueprintInputTouchDelegateBinding>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FBlueprintInputTouchDelegateBinding> InputTouchDelegateBindings => new TArray<FBlueprintInputTouchDelegateBinding>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UEdGraph:UObject
	/// Size: 0xC0
	/// Properties: 5
	/// </summary>
	public class UEdGraph:UObject
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: Schema
		/// Type: ClassProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Nodes
		/// Type: TArray<UEdGraphNode>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x90
		/// </summary>
		public TArray<UEdGraphNode> Nodes => new TArray<UEdGraphNode>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: bEditable
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bEditable => (ReadByte(0x0040) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bAllowDeletion
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bAllowDeletion => (ReadByte(0x0040) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bAllowRenaming
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bAllowRenaming => (ReadByte(0x0040) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// UEdGraphNode_Documentation:UEdGraphNode
	/// Size: 0xB0
	/// Properties: 2
	/// </summary>
	public class UEdGraphNode_Documentation:UEdGraphNode
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: Link
		/// Type: StrProperty
		/// Offset: 0x90
		/// Size: 0x10
		/// </summary>
		public FString Link => new FString(BaseAddress+0x90);
		
		/// <summary>
		/// Name: Excerpt
		/// Type: StrProperty
		/// Offset: 0xA0
		/// Size: 0x10
		/// </summary>
		public FString Excerpt => new FString(BaseAddress+0xA0);
		
	}


	/// <summary>
	/// UEdGraphSchema:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UEdGraphSchema:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UImportantToggleSettingInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UImportantToggleSettingInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UEndUserSettings:UObject
	/// Size: 0x38
	/// Properties: 3
	/// </summary>
	public class UEndUserSettings:UObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: bSendAnonymousUsageDataToEpic
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bSendAnonymousUsageDataToEpic
		{
			get
			{
				return ReadBool(0x30);
			}
			set
			{
				WriteBool(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: bSendMeanTimeBetweenFailureDataToEpic
		/// Type: BoolProperty
		/// Offset: 0x31
		/// Size: 0x01
		/// </summary>
		public bool bSendMeanTimeBetweenFailureDataToEpic
		{
			get
			{
				return ReadBool(0x31);
			}
			set
			{
				WriteBool(0x31,value);
			}
		}
		
		/// <summary>
		/// Name: bAllowUserIdInUsageData
		/// Type: BoolProperty
		/// Offset: 0x32
		/// Size: 0x01
		/// </summary>
		public bool bAllowUserIdInUsageData
		{
			get
			{
				return ReadBool(0x32);
			}
			set
			{
				WriteBool(0x32,value);
			}
		}
		
	}


	/// <summary>
	/// UGameEngine:UEngine
	/// Size: 0xC00
	/// Properties: 3
	/// </summary>
	public class UGameEngine:UEngine
	{
		public override int ObjectSize => 3072;
		/// <summary>
		/// Name: MaxDeltaTime
		/// Type: FloatProperty
		/// Offset: 0xBA8
		/// Size: 0x04
		/// </summary>
		public float MaxDeltaTime
		{
			get
			{
				return ReadSingle(0xBA8);
			}
			set
			{
				WriteSingle(0xBA8,value);
			}
		}
		
		/// <summary>
		/// Name: ServerFlushLogInterval
		/// Type: FloatProperty
		/// Offset: 0xBAC
		/// Size: 0x04
		/// </summary>
		public float ServerFlushLogInterval
		{
			get
			{
				return ReadSingle(0xBAC);
			}
			set
			{
				WriteSingle(0xBAC,value);
			}
		}
		
		/// <summary>
		/// Name: GameInstance
		/// Type: ObjectProperty
		/// Offset: 0xBB0
		/// Size: 0x08
		/// </summary>
		public UGameInstance GameInstance => ReadUObject<UGameInstance>(0xBB0);
		
	}


	/// <summary>
	/// UEngineHandlerComponentFactory:UHandlerComponentFactory
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UEngineHandlerComponentFactory:UHandlerComponentFactory
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UExporter:UObject
	/// Size: 0x68
	/// Properties: 9
	/// </summary>
	public class UExporter:UObject
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: SupportedClass
		/// Type: ClassProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ExportRootScope
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UObject ExportRootScope => ReadUObject<UObject>(0x30);
		
		/// <summary>
		/// Name: FormatExtension
		/// Type: TArray<>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: FormatDescription
		/// Type: TArray<>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: PreferredFormatIndex
		/// Type: IntProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public int PreferredFormatIndex
		{
			get
			{
				return ReadInt32(0x58);
			}
			set
			{
				WriteInt32(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: TextIndent
		/// Type: IntProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public int TextIndent
		{
			get
			{
				return ReadInt32(0x5C);
			}
			set
			{
				WriteInt32(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: bText
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bText => (ReadByte(0x0060) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSelectedOnly
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bSelectedOnly => (ReadByte(0x0060) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bForceFileOperations
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bForceFileOperations => (ReadByte(0x0060) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// UFontImportOptions:UObject
	/// Size: 0xD8
	/// Properties: 1
	/// </summary>
	public class UFontImportOptions:UObject
	{
		public override int ObjectSize => 216;
		/// <summary>
		/// Name: Data
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0xB0
		/// </summary>
		public FFontImportOptionsData Data => ReadStruct<FFontImportOptionsData>(0x28);
		
	}


	/// <summary>
	/// UFont:UObject
	/// Size: 0x1C0
	/// Properties: 16
	/// </summary>
	public class UFont:UObject
	{
		public override int ObjectSize => 448;
		/// <summary>
		/// Name: FontCacheType
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte FontCacheType
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: Characters
		/// Type: TArray<FFontCharacter>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FFontCharacter> Characters => new TArray<FFontCharacter>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: Textures
		/// Type: TArray<UTexture2D>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x100
		/// </summary>
		public TArray<UTexture2D> Textures => new TArray<UTexture2D>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: IsRemapped
		/// Type: IntProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public int IsRemapped
		{
			get
			{
				return ReadInt32(0x58);
			}
			set
			{
				WriteInt32(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: EmScale
		/// Type: FloatProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public float EmScale
		{
			get
			{
				return ReadSingle(0x5C);
			}
			set
			{
				WriteSingle(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: Ascent
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float Ascent
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: Descent
		/// Type: FloatProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public float Descent
		{
			get
			{
				return ReadSingle(0x64);
			}
			set
			{
				WriteSingle(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: Leading
		/// Type: FloatProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public float Leading
		{
			get
			{
				return ReadSingle(0x68);
			}
			set
			{
				WriteSingle(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: Kerning
		/// Type: IntProperty
		/// Offset: 0x6C
		/// Size: 0x04
		/// </summary>
		public int Kerning
		{
			get
			{
				return ReadInt32(0x6C);
			}
			set
			{
				WriteInt32(0x6C,value);
			}
		}
		
		/// <summary>
		/// Name: ImportOptions
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0xB0
		/// </summary>
		public FFontImportOptionsData ImportOptions => ReadStruct<FFontImportOptionsData>(0x70);
		
		/// <summary>
		/// Name: NumCharacters
		/// Type: IntProperty
		/// Offset: 0x120
		/// Size: 0x04
		/// </summary>
		public int NumCharacters
		{
			get
			{
				return ReadInt32(0x120);
			}
			set
			{
				WriteInt32(0x120,value);
			}
		}
		
		/// <summary>
		/// Name: MaxCharHeight
		/// Type: TArray<>
		/// Offset: 0x128
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: ScalingFactor
		/// Type: FloatProperty
		/// Offset: 0x138
		/// Size: 0x04
		/// </summary>
		public float ScalingFactor
		{
			get
			{
				return ReadSingle(0x138);
			}
			set
			{
				WriteSingle(0x138,value);
			}
		}
		
		/// <summary>
		/// Name: LegacyFontSize
		/// Type: IntProperty
		/// Offset: 0x13C
		/// Size: 0x04
		/// </summary>
		public int LegacyFontSize
		{
			get
			{
				return ReadInt32(0x13C);
			}
			set
			{
				WriteInt32(0x13C,value);
			}
		}
		
		/// <summary>
		/// Name: LegacyFontName
		/// Type: NameProperty
		/// Offset: 0x140
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CompositeFont
		/// Type: StructProperty
		/// Offset: 0x148
		/// Size: 0x28
		/// </summary>
		public FCompositeFont CompositeFont => ReadStruct<FCompositeFont>(0x148);
		
	}


	/// <summary>
	/// UGameUserSettings:UObject
	/// Size: 0xB8
	/// Properties: 19
	/// </summary>
	public class UGameUserSettings:UObject
	{
		public override int ObjectSize => 184;
		/// <summary>
		/// Name: bUseVSync
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bUseVSync
		{
			get
			{
				return ReadBool(0x28);
			}
			set
			{
				WriteBool(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: ResolutionSizeX
		/// Type: UInt32Property
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: ResolutionSizeY
		/// Type: UInt32Property
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: LastUserConfirmedResolutionSizeX
		/// Type: UInt32Property
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: LastUserConfirmedResolutionSizeY
		/// Type: UInt32Property
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: WindowPosX
		/// Type: IntProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public int WindowPosX
		{
			get
			{
				return ReadInt32(0x68);
			}
			set
			{
				WriteInt32(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: WindowPosY
		/// Type: IntProperty
		/// Offset: 0x6C
		/// Size: 0x04
		/// </summary>
		public int WindowPosY
		{
			get
			{
				return ReadInt32(0x6C);
			}
			set
			{
				WriteInt32(0x6C,value);
			}
		}
		
		/// <summary>
		/// Name: bUseDesktopResolutionForFullscreen
		/// Type: BoolProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public bool bUseDesktopResolutionForFullscreen
		{
			get
			{
				return ReadBool(0x70);
			}
			set
			{
				WriteBool(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: FullscreenMode
		/// Type: IntProperty
		/// Offset: 0x74
		/// Size: 0x04
		/// </summary>
		public int FullscreenMode
		{
			get
			{
				return ReadInt32(0x74);
			}
			set
			{
				WriteInt32(0x74,value);
			}
		}
		
		/// <summary>
		/// Name: LastConfirmedFullscreenMode
		/// Type: IntProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public int LastConfirmedFullscreenMode
		{
			get
			{
				return ReadInt32(0x78);
			}
			set
			{
				WriteInt32(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: PreferredFullscreenMode
		/// Type: IntProperty
		/// Offset: 0x7C
		/// Size: 0x04
		/// </summary>
		public int PreferredFullscreenMode
		{
			get
			{
				return ReadInt32(0x7C);
			}
			set
			{
				WriteInt32(0x7C,value);
			}
		}
		
		/// <summary>
		/// Name: Version
		/// Type: UInt32Property
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: AudioQualityLevel
		/// Type: IntProperty
		/// Offset: 0x84
		/// Size: 0x04
		/// </summary>
		public int AudioQualityLevel
		{
			get
			{
				return ReadInt32(0x84);
			}
			set
			{
				WriteInt32(0x84,value);
			}
		}
		
		/// <summary>
		/// Name: FrameRateLimit
		/// Type: FloatProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public float FrameRateLimit
		{
			get
			{
				return ReadSingle(0x88);
			}
			set
			{
				WriteSingle(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: bUseDesiredScreenHeight
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool bUseDesiredScreenHeight
		{
			get
			{
				return ReadBool(0x90);
			}
			set
			{
				WriteBool(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: DesiredScreenWidth
		/// Type: IntProperty
		/// Offset: 0x94
		/// Size: 0x04
		/// </summary>
		public int DesiredScreenWidth
		{
			get
			{
				return ReadInt32(0x94);
			}
			set
			{
				WriteInt32(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: DesiredScreenHeight
		/// Type: IntProperty
		/// Offset: 0x98
		/// Size: 0x04
		/// </summary>
		public int DesiredScreenHeight
		{
			get
			{
				return ReadInt32(0x98);
			}
			set
			{
				WriteInt32(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: LastRecommendedScreenWidth
		/// Type: FloatProperty
		/// Offset: 0x9C
		/// Size: 0x04
		/// </summary>
		public float LastRecommendedScreenWidth
		{
			get
			{
				return ReadSingle(0x9C);
			}
			set
			{
				WriteSingle(0x9C,value);
			}
		}
		
		/// <summary>
		/// Name: LastRecommendedScreenHeight
		/// Type: FloatProperty
		/// Offset: 0xA0
		/// Size: 0x04
		/// </summary>
		public float LastRecommendedScreenHeight
		{
			get
			{
				return ReadSingle(0xA0);
			}
			set
			{
				WriteSingle(0xA0,value);
			}
		}
		
	}


	/// <summary>
	/// UGraniteCookedSettings:UObject
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UGraniteCookedSettings:UObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: DeletedTexturesInCookedBuild
		/// Type: TArray<FName>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> DeletedTexturesInCookedBuild => new TArray<FName>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UGraniteCookedModSettings:UObject
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UGraniteCookedModSettings:UObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: DeletedTexturesInCookedBuild
		/// Type: TArray<FName>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> DeletedTexturesInCookedBuild => new TArray<FName>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UMaterialExpressionTextureBase:UMaterialExpression
	/// Size: 0x80
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionTextureBase:UMaterialExpression
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: Texture
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public UTexture Texture => ReadUObject<UTexture>(0x70);
		
		/// <summary>
		/// Name: SamplerType
		/// Type: ByteProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public byte SamplerType
		{
			get
			{
				return ReadByte(0x78);
			}
			set
			{
				WriteByte(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: IsDefaultMeshpaintTexture
		/// Type: BoolProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public bool IsDefaultMeshpaintTexture => (ReadByte(0x007C) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UMaterialExpressionTextureSample:UMaterialExpressionTextureBase
	/// Size: 0x1A8
	/// Properties: 9
	/// </summary>
	public class UMaterialExpressionTextureSample:UMaterialExpressionTextureBase
	{
		public override int ObjectSize => 424;
		/// <summary>
		/// Name: Coordinates
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Coordinates => ReadStruct<FExpressionInput>(0x80);
		
		/// <summary>
		/// Name: TextureObject
		/// Type: StructProperty
		/// Offset: 0xB8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput TextureObject => ReadStruct<FExpressionInput>(0xB8);
		
		/// <summary>
		/// Name: MipValue
		/// Type: StructProperty
		/// Offset: 0xF0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput MipValue => ReadStruct<FExpressionInput>(0xF0);
		
		/// <summary>
		/// Name: CoordinatesDX
		/// Type: StructProperty
		/// Offset: 0x128
		/// Size: 0x38
		/// </summary>
		public FExpressionInput CoordinatesDX => ReadStruct<FExpressionInput>(0x128);
		
		/// <summary>
		/// Name: CoordinatesDY
		/// Type: StructProperty
		/// Offset: 0x160
		/// Size: 0x38
		/// </summary>
		public FExpressionInput CoordinatesDY => ReadStruct<FExpressionInput>(0x160);
		
		/// <summary>
		/// Name: MipValueMode
		/// Type: ByteProperty
		/// Offset: 0x198
		/// Size: 0x01
		/// </summary>
		public byte MipValueMode
		{
			get
			{
				return ReadByte(0x198);
			}
			set
			{
				WriteByte(0x198,value);
			}
		}
		
		/// <summary>
		/// Name: SamplerSource
		/// Type: ByteProperty
		/// Offset: 0x199
		/// Size: 0x01
		/// </summary>
		public byte SamplerSource
		{
			get
			{
				return ReadByte(0x199);
			}
			set
			{
				WriteByte(0x199,value);
			}
		}
		
		/// <summary>
		/// Name: ConstCoordinate
		/// Type: UInt32Property
		/// Offset: 0x19C
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: ConstMipValue
		/// Type: IntProperty
		/// Offset: 0x1A0
		/// Size: 0x04
		/// </summary>
		public int ConstMipValue
		{
			get
			{
				return ReadInt32(0x1A0);
			}
			set
			{
				WriteInt32(0x1A0,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionGraniteTextureBase:UMaterialExpression
	/// Size: 0x80
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionGraniteTextureBase:UMaterialExpression
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: Texture
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public UGraniteTexture Texture => ReadUObject<UGraniteTexture>(0x70);
		
		/// <summary>
		/// Name: PreviewLayer
		/// Type: IntProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public int PreviewLayer
		{
			get
			{
				return ReadInt32(0x78);
			}
			set
			{
				WriteInt32(0x78,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionGraniteTexture:UMaterialExpressionGraniteTextureBase
	/// Size: 0x1A0
	/// Properties: 8
	/// </summary>
	public class UMaterialExpressionGraniteTexture:UMaterialExpressionGraniteTextureBase
	{
		public override int ObjectSize => 416;
		/// <summary>
		/// Name: Coordinates
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Coordinates => ReadStruct<FExpressionInput>(0x80);
		
		/// <summary>
		/// Name: TextureObject
		/// Type: StructProperty
		/// Offset: 0xB8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput TextureObject => ReadStruct<FExpressionInput>(0xB8);
		
		/// <summary>
		/// Name: MipValue
		/// Type: StructProperty
		/// Offset: 0xF0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput MipValue => ReadStruct<FExpressionInput>(0xF0);
		
		/// <summary>
		/// Name: CoordinatesDX
		/// Type: StructProperty
		/// Offset: 0x128
		/// Size: 0x38
		/// </summary>
		public FExpressionInput CoordinatesDX => ReadStruct<FExpressionInput>(0x128);
		
		/// <summary>
		/// Name: CoordinatesDY
		/// Type: StructProperty
		/// Offset: 0x160
		/// Size: 0x38
		/// </summary>
		public FExpressionInput CoordinatesDY => ReadStruct<FExpressionInput>(0x160);
		
		/// <summary>
		/// Name: MipValueMode
		/// Type: ByteProperty
		/// Offset: 0x198
		/// Size: 0x01
		/// </summary>
		public byte MipValueMode
		{
			get
			{
				return ReadByte(0x198);
			}
			set
			{
				WriteByte(0x198,value);
			}
		}
		
		/// <summary>
		/// Name: AnisotropyRatio
		/// Type: ByteProperty
		/// Offset: 0x199
		/// Size: 0x01
		/// </summary>
		public byte AnisotropyRatio
		{
			get
			{
				return ReadByte(0x199);
			}
			set
			{
				WriteByte(0x199,value);
			}
		}
		
		/// <summary>
		/// Name: SampleQuality
		/// Type: ByteProperty
		/// Offset: 0x19A
		/// Size: 0x01
		/// </summary>
		public byte SampleQuality
		{
			get
			{
				return ReadByte(0x19A);
			}
			set
			{
				WriteByte(0x19A,value);
			}
		}
		
	}


	/// <summary>
	/// UGraniteSettings:UObject
	/// Size: 0x80
	/// Properties: 12
	/// </summary>
	public class UGraniteSettings:UObject
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: CPUCaches
		/// Type: TArray<FGraniteCpuCache>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FGraniteCpuCache> CPUCaches => new TArray<FGraniteCpuCache>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: GPUCaches
		/// Type: TArray<FGraniteGpuCache>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FGraniteGpuCache> GPUCaches => new TArray<FGraniteGpuCache>(BaseAddress+0x40);
		
		/// <summary>
		/// Name: MaximumTileDataUpload
		/// Type: IntProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public int MaximumTileDataUpload
		{
			get
			{
				return ReadInt32(0x50);
			}
			set
			{
				WriteInt32(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: MaximumResolves
		/// Type: IntProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public int MaximumResolves
		{
			get
			{
				return ReadInt32(0x54);
			}
			set
			{
				WriteInt32(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: GpuMemorySizeInMegabyte
		/// Type: IntProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public int GpuMemorySizeInMegabyte
		{
			get
			{
				return ReadInt32(0x58);
			}
			set
			{
				WriteInt32(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: CpuMemorySizeInMegabyte
		/// Type: IntProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public int CpuMemorySizeInMegabyte
		{
			get
			{
				return ReadInt32(0x5C);
			}
			set
			{
				WriteInt32(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: bAdvanced
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bAdvanced => (ReadByte(0x0060) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ReservedRatio
		/// Type: FloatProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public float ReservedRatio
		{
			get
			{
				return ReadSingle(0x64);
			}
			set
			{
				WriteSingle(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: TileSetDirectories
		/// Type: TArray<FDirectoryPath>
		/// Offset: 0x68
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FDirectoryPath> TileSetDirectories => new TArray<FDirectoryPath>(BaseAddress+0x68);
		
		/// <summary>
		/// Name: bGraniteStreamLightMaps
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bGraniteStreamLightMaps => (ReadByte(0x0078) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bGraniteNoTrilinear
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bGraniteNoTrilinear => (ReadByte(0x0078) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bCachesNeedRestart
		/// Type: BoolProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public bool bCachesNeedRestart
		{
			get
			{
				return ReadBool(0x7C);
			}
			set
			{
				WriteBool(0x7C,value);
			}
		}
		
	}


	/// <summary>
	/// UPS4GraniteSettings:UObject
	/// Size: 0x68
	/// Properties: 8
	/// </summary>
	public class UPS4GraniteSettings:UObject
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: CPUCaches
		/// Type: TArray<FGraniteCpuCache>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FGraniteCpuCache> CPUCaches => new TArray<FGraniteCpuCache>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: GPUCaches
		/// Type: TArray<FGraniteGpuCache>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FGraniteGpuCache> GPUCaches => new TArray<FGraniteGpuCache>(BaseAddress+0x40);
		
		/// <summary>
		/// Name: MaximumTileDataUpload
		/// Type: IntProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public int MaximumTileDataUpload
		{
			get
			{
				return ReadInt32(0x50);
			}
			set
			{
				WriteInt32(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: MaximumResolves
		/// Type: IntProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public int MaximumResolves
		{
			get
			{
				return ReadInt32(0x54);
			}
			set
			{
				WriteInt32(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: GpuMemorySizeInMegabyte
		/// Type: IntProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public int GpuMemorySizeInMegabyte
		{
			get
			{
				return ReadInt32(0x58);
			}
			set
			{
				WriteInt32(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: CpuMemorySizeInMegabyte
		/// Type: IntProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public int CpuMemorySizeInMegabyte
		{
			get
			{
				return ReadInt32(0x5C);
			}
			set
			{
				WriteInt32(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: bAdvanced
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bAdvanced => (ReadByte(0x0060) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ReservedRatio
		/// Type: FloatProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public float ReservedRatio
		{
			get
			{
				return ReadSingle(0x64);
			}
			set
			{
				WriteSingle(0x64,value);
			}
		}
		
	}


	/// <summary>
	/// UXbox1GraniteSettings:UObject
	/// Size: 0x68
	/// Properties: 8
	/// </summary>
	public class UXbox1GraniteSettings:UObject
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: CPUCaches
		/// Type: TArray<FGraniteCpuCache>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FGraniteCpuCache> CPUCaches => new TArray<FGraniteCpuCache>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: GPUCaches
		/// Type: TArray<FGraniteGpuCache>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FGraniteGpuCache> GPUCaches => new TArray<FGraniteGpuCache>(BaseAddress+0x40);
		
		/// <summary>
		/// Name: MaximumTileDataUpload
		/// Type: IntProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public int MaximumTileDataUpload
		{
			get
			{
				return ReadInt32(0x50);
			}
			set
			{
				WriteInt32(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: MaximumResolves
		/// Type: IntProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public int MaximumResolves
		{
			get
			{
				return ReadInt32(0x54);
			}
			set
			{
				WriteInt32(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: GpuMemorySizeInMegabyte
		/// Type: IntProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public int GpuMemorySizeInMegabyte
		{
			get
			{
				return ReadInt32(0x58);
			}
			set
			{
				WriteInt32(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: CpuMemorySizeInMegabyte
		/// Type: IntProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public int CpuMemorySizeInMegabyte
		{
			get
			{
				return ReadInt32(0x5C);
			}
			set
			{
				WriteInt32(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: bAdvanced
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bAdvanced => (ReadByte(0x0060) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ReservedRatio
		/// Type: FloatProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public float ReservedRatio
		{
			get
			{
				return ReadSingle(0x64);
			}
			set
			{
				WriteSingle(0x64,value);
			}
		}
		
	}


	/// <summary>
	/// UGraniteTileSet:UObject
	/// Size: 0xA8
	/// Properties: 8
	/// </summary>
	public class UGraniteTileSet:UObject
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: GTSFileName
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString GTSFileName => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: LODBias
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float LODBias
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: TranscoderQuality
		/// Type: ByteProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public byte TranscoderQuality
		{
			get
			{
				return ReadByte(0x3C);
			}
			set
			{
				WriteByte(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: NumberOfMipsToPrefetch
		/// Type: IntProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public int NumberOfMipsToPrefetch
		{
			get
			{
				return ReadInt32(0x40);
			}
			set
			{
				WriteInt32(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: NumberOfMipsToPin
		/// Type: IntProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public int NumberOfMipsToPin
		{
			get
			{
				return ReadInt32(0x44);
			}
			set
			{
				WriteInt32(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: NumLayers
		/// Type: UInt32Property
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: NumTextures
		/// Type: UInt32Property
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: gpuCacheGroup
		/// Type: ByteProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public byte gpuCacheGroup
		{
			get
			{
				return ReadByte(0x50);
			}
			set
			{
				WriteByte(0x50,value);
			}
		}
		
	}


	/// <summary>
	/// UGraniteTexture:UObject
	/// Size: 0xF8
	/// Properties: 6
	/// </summary>
	public class UGraniteTexture:UObject
	{
		public override int ObjectSize => 248;
		/// <summary>
		/// Name: StreamingBias
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float StreamingBias
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: TileSet
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UGraniteTileSet TileSet => ReadUObject<UGraniteTileSet>(0x30);
		
		/// <summary>
		/// Name: StreamingTexture
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString StreamingTexture => new FString(BaseAddress+0x38);
		
		/// <summary>
		/// Name: LODBias
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float LODBias
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: lightMapFlags
		/// Type: StructProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public FGraniteLightmapFlags lightMapFlags => ReadStruct<FGraniteLightmapFlags>(0x4C);
		
		/// <summary>
		/// Name: GTSFileName
		/// Type: StrProperty
		/// Offset: 0xE8
		/// Size: 0x10
		/// </summary>
		public FString GTSFileName => new FString(BaseAddress+0xE8);
		
	}


	/// <summary>
	/// UGraniteTextureCube:UGraniteTexture
	/// Size: 0xF8
	/// Properties: 0
	/// </summary>
	public class UGraniteTextureCube:UGraniteTexture
	{
		public override int ObjectSize => 248;
	}


	/// <summary>
	/// UHapticFeedbackEffect:UObject
	/// Size: 0x128
	/// Properties: 1
	/// </summary>
	public class UHapticFeedbackEffect:UObject
	{
		public override int ObjectSize => 296;
		/// <summary>
		/// Name: HapticDetails
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x100
		/// </summary>
		public FHapticFeedbackDetails HapticDetails => ReadStruct<FHapticFeedbackDetails>(0x28);
		
	}


	/// <summary>
	/// UInheritableComponentHandler:UObject
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UInheritableComponentHandler:UObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Records
		/// Type: TArray<FComponentOverrideRecord>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x78
		/// </summary>
		public TArray<FComponentOverrideRecord> Records => new TArray<FComponentOverrideRecord>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UPlayerInput:UObject
	/// Size: 0x380
	/// Properties: 2
	/// </summary>
	public class UPlayerInput:UObject
	{
		public override int ObjectSize => 896;
		/// <summary>
		/// Name: DebugExecBindings
		/// Type: TArray<FKeyBind>
		/// Offset: 0x120
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FKeyBind> DebugExecBindings => new TArray<FKeyBind>(BaseAddress+0x120);
		
		/// <summary>
		/// Name: InvertedAxis
		/// Type: TArray<FName>
		/// Offset: 0x160
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> InvertedAxis => new TArray<FName>(BaseAddress+0x160);
		
	}


	/// <summary>
	/// UInputSettings:UObject
	/// Size: 0xA8
	/// Properties: 17
	/// </summary>
	public class UInputSettings:UObject
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: AxisConfig
		/// Type: TArray<FInputAxisConfigEntry>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FInputAxisConfigEntry> AxisConfig => new TArray<FInputAxisConfigEntry>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: bAltEnterTogglesFullscreen
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bAltEnterTogglesFullscreen => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUseMouseForTouch
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bUseMouseForTouch => (ReadByte(0x0038) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bEnableMouseSmoothing
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bEnableMouseSmoothing => (ReadByte(0x0038) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bEnableFOVScaling
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bEnableFOVScaling => (ReadByte(0x0038) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: FOVScale
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float FOVScale
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: DoubleClickTime
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float DoubleClickTime
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: bCaptureMouseOnLaunch
		/// Type: BoolProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public bool bCaptureMouseOnLaunch
		{
			get
			{
				return ReadBool(0x44);
			}
			set
			{
				WriteBool(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultViewportMouseCaptureMode
		/// Type: ByteProperty
		/// Offset: 0x45
		/// Size: 0x01
		/// </summary>
		public byte DefaultViewportMouseCaptureMode
		{
			get
			{
				return ReadByte(0x45);
			}
			set
			{
				WriteByte(0x45,value);
			}
		}
		
		/// <summary>
		/// Name: bDefaultViewportMouseLock
		/// Type: BoolProperty
		/// Offset: 0x46
		/// Size: 0x01
		/// </summary>
		public bool bDefaultViewportMouseLock
		{
			get
			{
				return ReadBool(0x46);
			}
			set
			{
				WriteBool(0x46,value);
			}
		}
		
		/// <summary>
		/// Name: ActionMappings
		/// Type: TArray<FInputActionKeyMapping>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FInputActionKeyMapping> ActionMappings => new TArray<FInputActionKeyMapping>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: AxisMappings
		/// Type: TArray<FInputAxisKeyMapping>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FInputAxisKeyMapping> AxisMappings => new TArray<FInputAxisKeyMapping>(BaseAddress+0x58);
		
		/// <summary>
		/// Name: bAlwaysShowTouchInterface
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bAlwaysShowTouchInterface
		{
			get
			{
				return ReadBool(0x68);
			}
			set
			{
				WriteBool(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: bShowConsoleOnFourFingerTap
		/// Type: BoolProperty
		/// Offset: 0x69
		/// Size: 0x01
		/// </summary>
		public bool bShowConsoleOnFourFingerTap
		{
			get
			{
				return ReadBool(0x69);
			}
			set
			{
				WriteBool(0x69,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultTouchInterface
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference DefaultTouchInterface => ReadStruct<FStringAssetReference>(0x70);
		
		/// <summary>
		/// Name: ConsoleKey
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x18
		/// </summary>
		public FKey ConsoleKey => ReadStruct<FKey>(0x80);
		
		/// <summary>
		/// Name: ConsoleKeys
		/// Type: TArray<FKey>
		/// Offset: 0x98
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FKey> ConsoleKeys => new TArray<FKey>(BaseAddress+0x98);
		
	}


	/// <summary>
	/// UInterpCurveEdSetup:UObject
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class UInterpCurveEdSetup:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Tabs
		/// Type: TArray<FCurveEdTab>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FCurveEdTab> Tabs => new TArray<FCurveEdTab>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: ActiveTab
		/// Type: IntProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public int ActiveTab
		{
			get
			{
				return ReadInt32(0x38);
			}
			set
			{
				WriteInt32(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// UInterpData:UObject
	/// Size: 0x70
	/// Properties: 9
	/// </summary>
	public class UInterpData:UObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: InterpLength
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float InterpLength
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: PathBuildTime
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float PathBuildTime
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: InterpGroups
		/// Type: TArray<UInterpGroup>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x50
		/// </summary>
		public TArray<UInterpGroup> InterpGroups => new TArray<UInterpGroup>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: CurveEdSetup
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UInterpCurveEdSetup CurveEdSetup => ReadUObject<UInterpCurveEdSetup>(0x40);
		
		/// <summary>
		/// Name: EdSectionStart
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float EdSectionStart
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: EdSectionEnd
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float EdSectionEnd
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: bShouldBakeAndPrune
		/// Type: BoolProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public bool bShouldBakeAndPrune => (ReadByte(0x0050) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CachedDirectorGroup
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UInterpGroupDirector CachedDirectorGroup => ReadUObject<UInterpGroupDirector>(0x58);
		
		/// <summary>
		/// Name: AllEventNames
		/// Type: TArray<FName>
		/// Offset: 0x60
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> AllEventNames => new TArray<FName>(BaseAddress+0x60);
		
	}


	/// <summary>
	/// UInterpFilter:UObject
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UInterpFilter:UObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Caption
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString Caption => new FString(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UInterpFilter_Classes:UInterpFilter
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class UInterpFilter_Classes:UInterpFilter
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UInterpFilter_Custom:UInterpFilter
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class UInterpFilter_Custom:UInterpFilter
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UInterpGroup:UObject
	/// Size: 0x50
	/// Properties: 8
	/// </summary>
	public class UInterpGroup:UObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: InterpTracks
		/// Type: TArray<UInterpTrack>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x70
		/// </summary>
		public TArray<UInterpTrack> InterpTracks => new TArray<UInterpTrack>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: GroupName
		/// Type: NameProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: GroupColor
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public FColor GroupColor => ReadStruct<FColor>(0x48);
		
		/// <summary>
		/// Name: bCollapsed
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bCollapsed => (ReadByte(0x004C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bVisible
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bVisible => (ReadByte(0x004C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bIsFolder
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bIsFolder => (ReadByte(0x004C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bIsParented
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bIsParented => (ReadByte(0x004C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bIsSelected
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bIsSelected => (ReadByte(0x004C) & 0x10) == 0x10;
		
	}


	/// <summary>
	/// UInterpGroupCamera:UInterpGroup
	/// Size: 0x60
	/// Properties: 2
	/// </summary>
	public class UInterpGroupCamera:UInterpGroup
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: CameraAnimInst
		/// Type: ObjectProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public UCameraAnim CameraAnimInst => ReadUObject<UCameraAnim>(0x50);
		
		/// <summary>
		/// Name: CompressTolerance
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float CompressTolerance
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
	}


	/// <summary>
	/// UInterpGroupDirector:UInterpGroup
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UInterpGroupDirector:UInterpGroup
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UInterpGroupInst:UObject
	/// Size: 0x48
	/// Properties: 3
	/// </summary>
	public class UInterpGroupInst:UObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: Group
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UInterpGroup Group => ReadUObject<UInterpGroup>(0x28);
		
		/// <summary>
		/// Name: GroupActor
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public AActor GroupActor => ReadUObject<AActor>(0x30);
		
		/// <summary>
		/// Name: TrackInst
		/// Type: TArray<UInterpTrackInst>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UInterpTrackInst> TrackInst => new TArray<UInterpTrackInst>(BaseAddress+0x38);
		
	}


	/// <summary>
	/// UInterpGroupInstCamera:UInterpGroupInst
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class UInterpGroupInstCamera:UInterpGroupInst
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// UInterpGroupInstDirector:UInterpGroupInst
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class UInterpGroupInstDirector:UInterpGroupInst
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// UInterpTrack:UObject
	/// Size: 0x70
	/// Properties: 12
	/// </summary>
	public class UInterpTrack:UObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: SubTracks
		/// Type: TArray<UInterpTrack>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x70
		/// </summary>
		public TArray<UInterpTrack> SubTracks => new TArray<UInterpTrack>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: TrackInstClass
		/// Type: ClassProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ActiveCondition
		/// Type: ByteProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public byte ActiveCondition
		{
			get
			{
				return ReadByte(0x50);
			}
			set
			{
				WriteByte(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: TrackTitle
		/// Type: StrProperty
		/// Offset: 0x58
		/// Size: 0x10
		/// </summary>
		public FString TrackTitle => new FString(BaseAddress+0x58);
		
		/// <summary>
		/// Name: bOnePerGroup
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bOnePerGroup => (ReadByte(0x0068) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDirGroupOnly
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bDirGroupOnly => (ReadByte(0x0068) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bDisableTrack
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bDisableTrack => (ReadByte(0x0068) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bIsSelected
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bIsSelected => (ReadByte(0x0068) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bIsAnimControlTrack
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bIsAnimControlTrack => (ReadByte(0x0068) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bSubTrackOnly
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bSubTrackOnly => (ReadByte(0x0068) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bVisible
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bVisible => (ReadByte(0x0068) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bIsRecording
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bIsRecording => (ReadByte(0x0068) & 0x80) == 0x80;
		
	}


	/// <summary>
	/// UInterpTrackBoolProp:UInterpTrack
	/// Size: 0x88
	/// Properties: 2
	/// </summary>
	public class UInterpTrackBoolProp:UInterpTrack
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: BoolTrack
		/// Type: TArray<FBoolTrackKey>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FBoolTrackKey> BoolTrack => new TArray<FBoolTrackKey>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: PropertyName
		/// Type: NameProperty
		/// Offset: 0x80
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UInterpTrackDirector:UInterpTrack
	/// Size: 0x88
	/// Properties: 2
	/// </summary>
	public class UInterpTrackDirector:UInterpTrack
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: CutTrack
		/// Type: TArray<FDirectorTrackCut>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FDirectorTrackCut> CutTrack => new TArray<FDirectorTrackCut>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: bSimulateCameraCutsOnClients
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bSimulateCameraCutsOnClients => (ReadByte(0x0080) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UInterpTrackEvent:UInterpTrack
	/// Size: 0x88
	/// Properties: 5
	/// </summary>
	public class UInterpTrackEvent:UInterpTrack
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: EventTrack
		/// Type: TArray<FEventTrackKey>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FEventTrackKey> EventTrack => new TArray<FEventTrackKey>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: bFireEventsWhenForwards
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bFireEventsWhenForwards => (ReadByte(0x0080) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bFireEventsWhenBackwards
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bFireEventsWhenBackwards => (ReadByte(0x0080) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bFireEventsWhenJumpingForwards
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bFireEventsWhenJumpingForwards => (ReadByte(0x0080) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bUseCustomEventName
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bUseCustomEventName => (ReadByte(0x0080) & 0x08) == 0x08;
		
	}


	/// <summary>
	/// UInterpTrackFloatBase:UInterpTrack
	/// Size: 0x90
	/// Properties: 2
	/// </summary>
	public class UInterpTrackFloatBase:UInterpTrack
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: FloatTrack
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x18
		/// </summary>
		public FInterpCurveFloat FloatTrack => ReadStruct<FInterpCurveFloat>(0x70);
		
		/// <summary>
		/// Name: CurveTension
		/// Type: FloatProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public float CurveTension
		{
			get
			{
				return ReadSingle(0x88);
			}
			set
			{
				WriteSingle(0x88,value);
			}
		}
		
	}


	/// <summary>
	/// UInterpTrackAnimControl:UInterpTrackFloatBase
	/// Size: 0xB0
	/// Properties: 3
	/// </summary>
	public class UInterpTrackAnimControl:UInterpTrackFloatBase
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: SlotName
		/// Type: NameProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AnimSeqs
		/// Type: TArray<FAnimControlTrackKey>
		/// Offset: 0x98
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FAnimControlTrackKey> AnimSeqs => new TArray<FAnimControlTrackKey>(BaseAddress+0x98);
		
		/// <summary>
		/// Name: bSkipAnimNotifiers
		/// Type: BoolProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public bool bSkipAnimNotifiers => (ReadByte(0x00A8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UInterpTrackFade:UInterpTrackFloatBase
	/// Size: 0xA8
	/// Properties: 3
	/// </summary>
	public class UInterpTrackFade:UInterpTrackFloatBase
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: bPersistFade
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool bPersistFade => (ReadByte(0x0090) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bFadeAudio
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool bFadeAudio => (ReadByte(0x0090) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: FadeColor
		/// Type: StructProperty
		/// Offset: 0x94
		/// Size: 0x10
		/// </summary>
		public FLinearColor FadeColor => ReadStruct<FLinearColor>(0x94);
		
	}


	/// <summary>
	/// UInterpTrackFloatAnimBPParam:UInterpTrackFloatBase
	/// Size: 0xB0
	/// Properties: 3
	/// </summary>
	public class UInterpTrackFloatAnimBPParam:UInterpTrackFloatBase
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: AnimBlueprintClass
		/// Type: ClassProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AnimClass
		/// Type: ClassProperty
		/// Offset: 0x98
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ParamName
		/// Type: NameProperty
		/// Offset: 0xA0
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UInterpTrackFloatMaterialParam:UInterpTrackFloatBase
	/// Size: 0xA8
	/// Properties: 2
	/// </summary>
	public class UInterpTrackFloatMaterialParam:UInterpTrackFloatBase
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: TargetMaterials
		/// Type: TArray<UMaterialInterface>
		/// Offset: 0x90
		/// Size: 0x10
		/// SubElement Size: 0x58
		/// </summary>
		public TArray<UMaterialInterface> TargetMaterials => new TArray<UMaterialInterface>(BaseAddress+0x90);
		
		/// <summary>
		/// Name: ParamName
		/// Type: NameProperty
		/// Offset: 0xA0
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UInterpTrackFloatParticleParam:UInterpTrackFloatBase
	/// Size: 0x98
	/// Properties: 1
	/// </summary>
	public class UInterpTrackFloatParticleParam:UInterpTrackFloatBase
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: ParamName
		/// Type: NameProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UInterpTrackFloatProp:UInterpTrackFloatBase
	/// Size: 0x98
	/// Properties: 1
	/// </summary>
	public class UInterpTrackFloatProp:UInterpTrackFloatBase
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: PropertyName
		/// Type: NameProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UInterpTrackMove:UInterpTrack
	/// Size: 0xC8
	/// Properties: 13
	/// </summary>
	public class UInterpTrackMove:UInterpTrack
	{
		public override int ObjectSize => 200;
		/// <summary>
		/// Name: PosTrack
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x18
		/// </summary>
		public FInterpCurveVector PosTrack => ReadStruct<FInterpCurveVector>(0x70);
		
		/// <summary>
		/// Name: EulerTrack
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0x18
		/// </summary>
		public FInterpCurveVector EulerTrack => ReadStruct<FInterpCurveVector>(0x88);
		
		/// <summary>
		/// Name: LookupTrack
		/// Type: StructProperty
		/// Offset: 0xA0
		/// Size: 0x10
		/// </summary>
		public FInterpLookupTrack LookupTrack => ReadStruct<FInterpLookupTrack>(0xA0);
		
		/// <summary>
		/// Name: LookAtGroupName
		/// Type: NameProperty
		/// Offset: 0xB0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: LinCurveTension
		/// Type: FloatProperty
		/// Offset: 0xB8
		/// Size: 0x04
		/// </summary>
		public float LinCurveTension
		{
			get
			{
				return ReadSingle(0xB8);
			}
			set
			{
				WriteSingle(0xB8,value);
			}
		}
		
		/// <summary>
		/// Name: AngCurveTension
		/// Type: FloatProperty
		/// Offset: 0xBC
		/// Size: 0x04
		/// </summary>
		public float AngCurveTension
		{
			get
			{
				return ReadSingle(0xBC);
			}
			set
			{
				WriteSingle(0xBC,value);
			}
		}
		
		/// <summary>
		/// Name: bUseQuatInterpolation
		/// Type: BoolProperty
		/// Offset: 0xC0
		/// Size: 0x01
		/// </summary>
		public bool bUseQuatInterpolation => (ReadByte(0x00C0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bShowArrowAtKeys
		/// Type: BoolProperty
		/// Offset: 0xC0
		/// Size: 0x01
		/// </summary>
		public bool bShowArrowAtKeys => (ReadByte(0x00C0) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bDisableMovement
		/// Type: BoolProperty
		/// Offset: 0xC0
		/// Size: 0x01
		/// </summary>
		public bool bDisableMovement => (ReadByte(0x00C0) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bShowTranslationOnCurveEd
		/// Type: BoolProperty
		/// Offset: 0xC0
		/// Size: 0x01
		/// </summary>
		public bool bShowTranslationOnCurveEd => (ReadByte(0x00C0) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bShowRotationOnCurveEd
		/// Type: BoolProperty
		/// Offset: 0xC0
		/// Size: 0x01
		/// </summary>
		public bool bShowRotationOnCurveEd => (ReadByte(0x00C0) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bHide3DTrack
		/// Type: BoolProperty
		/// Offset: 0xC0
		/// Size: 0x01
		/// </summary>
		public bool bHide3DTrack => (ReadByte(0x00C0) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: RotMode
		/// Type: ByteProperty
		/// Offset: 0xC4
		/// Size: 0x01
		/// </summary>
		public byte RotMode
		{
			get
			{
				return ReadByte(0xC4);
			}
			set
			{
				WriteByte(0xC4,value);
			}
		}
		
	}


	/// <summary>
	/// UInterpTrackMoveAxis:UInterpTrackFloatBase
	/// Size: 0xA8
	/// Properties: 2
	/// </summary>
	public class UInterpTrackMoveAxis:UInterpTrackFloatBase
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: MoveAxis
		/// Type: ByteProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public byte MoveAxis
		{
			get
			{
				return ReadByte(0x90);
			}
			set
			{
				WriteByte(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: LookupTrack
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x10
		/// </summary>
		public FInterpLookupTrack LookupTrack => ReadStruct<FInterpLookupTrack>(0x98);
		
	}


	/// <summary>
	/// UInterpTrackSlomo:UInterpTrackFloatBase
	/// Size: 0x90
	/// Properties: 0
	/// </summary>
	public class UInterpTrackSlomo:UInterpTrackFloatBase
	{
		public override int ObjectSize => 144;
	}


	/// <summary>
	/// UInterpTrackLinearColorBase:UInterpTrack
	/// Size: 0x90
	/// Properties: 2
	/// </summary>
	public class UInterpTrackLinearColorBase:UInterpTrack
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: LinearColorTrack
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x18
		/// </summary>
		public FInterpCurveLinearColor LinearColorTrack => ReadStruct<FInterpCurveLinearColor>(0x70);
		
		/// <summary>
		/// Name: CurveTension
		/// Type: FloatProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public float CurveTension
		{
			get
			{
				return ReadSingle(0x88);
			}
			set
			{
				WriteSingle(0x88,value);
			}
		}
		
	}


	/// <summary>
	/// UInterpTrackLinearColorProp:UInterpTrackLinearColorBase
	/// Size: 0x98
	/// Properties: 1
	/// </summary>
	public class UInterpTrackLinearColorProp:UInterpTrackLinearColorBase
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: PropertyName
		/// Type: NameProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UInterpTrackParticleReplay:UInterpTrack
	/// Size: 0x80
	/// Properties: 1
	/// </summary>
	public class UInterpTrackParticleReplay:UInterpTrack
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: TrackKeys
		/// Type: TArray<FParticleReplayTrackKey>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FParticleReplayTrackKey> TrackKeys => new TArray<FParticleReplayTrackKey>(BaseAddress+0x70);
		
	}


	/// <summary>
	/// UInterpTrackToggle:UInterpTrack
	/// Size: 0x88
	/// Properties: 6
	/// </summary>
	public class UInterpTrackToggle:UInterpTrack
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: ToggleTrack
		/// Type: TArray<FToggleTrackKey>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FToggleTrackKey> ToggleTrack => new TArray<FToggleTrackKey>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: bActivateSystemEachUpdate
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bActivateSystemEachUpdate => (ReadByte(0x0080) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bActivateWithJustAttachedFlag
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bActivateWithJustAttachedFlag => (ReadByte(0x0080) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bFireEventsWhenForwards
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bFireEventsWhenForwards => (ReadByte(0x0080) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bFireEventsWhenBackwards
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bFireEventsWhenBackwards => (ReadByte(0x0080) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bFireEventsWhenJumpingForwards
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bFireEventsWhenJumpingForwards => (ReadByte(0x0080) & 0x10) == 0x10;
		
	}


	/// <summary>
	/// UInterpTrackVectorBase:UInterpTrack
	/// Size: 0x90
	/// Properties: 2
	/// </summary>
	public class UInterpTrackVectorBase:UInterpTrack
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: VectorTrack
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x18
		/// </summary>
		public FInterpCurveVector VectorTrack => ReadStruct<FInterpCurveVector>(0x70);
		
		/// <summary>
		/// Name: CurveTension
		/// Type: FloatProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public float CurveTension
		{
			get
			{
				return ReadSingle(0x88);
			}
			set
			{
				WriteSingle(0x88,value);
			}
		}
		
	}


	/// <summary>
	/// UInterpTrackAudioMaster:UInterpTrackVectorBase
	/// Size: 0x90
	/// Properties: 0
	/// </summary>
	public class UInterpTrackAudioMaster:UInterpTrackVectorBase
	{
		public override int ObjectSize => 144;
	}


	/// <summary>
	/// UInterpTrackColorProp:UInterpTrackVectorBase
	/// Size: 0x98
	/// Properties: 1
	/// </summary>
	public class UInterpTrackColorProp:UInterpTrackVectorBase
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: PropertyName
		/// Type: NameProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UInterpTrackColorScale:UInterpTrackVectorBase
	/// Size: 0x90
	/// Properties: 0
	/// </summary>
	public class UInterpTrackColorScale:UInterpTrackVectorBase
	{
		public override int ObjectSize => 144;
	}


	/// <summary>
	/// UInterpTrackSound:UInterpTrackVectorBase
	/// Size: 0xA8
	/// Properties: 6
	/// </summary>
	public class UInterpTrackSound:UInterpTrackVectorBase
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Sounds
		/// Type: TArray<FSoundTrackKey>
		/// Offset: 0x90
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FSoundTrackKey> Sounds => new TArray<FSoundTrackKey>(BaseAddress+0x90);
		
		/// <summary>
		/// Name: bPlayOnReverse
		/// Type: BoolProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public bool bPlayOnReverse => (ReadByte(0x00A0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bContinueSoundOnMatineeEnd
		/// Type: BoolProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public bool bContinueSoundOnMatineeEnd => (ReadByte(0x00A0) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bSuppressSubtitles
		/// Type: BoolProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public bool bSuppressSubtitles => (ReadByte(0x00A0) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bTreatAsDialogue
		/// Type: BoolProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public bool bTreatAsDialogue => (ReadByte(0x00A0) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bAttach
		/// Type: BoolProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public bool bAttach => (ReadByte(0x00A0) & 0x10) == 0x10;
		
	}


	/// <summary>
	/// UInterpTrackVectorMaterialParam:UInterpTrackVectorBase
	/// Size: 0xA8
	/// Properties: 2
	/// </summary>
	public class UInterpTrackVectorMaterialParam:UInterpTrackVectorBase
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: TargetMaterials
		/// Type: TArray<UMaterialInterface>
		/// Offset: 0x90
		/// Size: 0x10
		/// SubElement Size: 0x58
		/// </summary>
		public TArray<UMaterialInterface> TargetMaterials => new TArray<UMaterialInterface>(BaseAddress+0x90);
		
		/// <summary>
		/// Name: ParamName
		/// Type: NameProperty
		/// Offset: 0xA0
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UInterpTrackVectorProp:UInterpTrackVectorBase
	/// Size: 0x98
	/// Properties: 1
	/// </summary>
	public class UInterpTrackVectorProp:UInterpTrackVectorBase
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: PropertyName
		/// Type: NameProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UInterpTrackVisibility:UInterpTrack
	/// Size: 0x88
	/// Properties: 4
	/// </summary>
	public class UInterpTrackVisibility:UInterpTrack
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: VisibilityTrack
		/// Type: TArray<FVisibilityTrackKey>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FVisibilityTrackKey> VisibilityTrack => new TArray<FVisibilityTrackKey>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: bFireEventsWhenForwards
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bFireEventsWhenForwards => (ReadByte(0x0080) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bFireEventsWhenBackwards
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bFireEventsWhenBackwards => (ReadByte(0x0080) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bFireEventsWhenJumpingForwards
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bFireEventsWhenJumpingForwards => (ReadByte(0x0080) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// UInterpTrackInst:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UInterpTrackInst:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UInterpTrackInstAnimControl:UInterpTrackInst
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class UInterpTrackInstAnimControl:UInterpTrackInst
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: LastUpdatePosition
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float LastUpdatePosition
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// UInterpTrackInstAudioMaster:UInterpTrackInst
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UInterpTrackInstAudioMaster:UInterpTrackInst
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UInterpTrackInstColorScale:UInterpTrackInst
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UInterpTrackInstColorScale:UInterpTrackInst
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UInterpTrackInstDirector:UInterpTrackInst
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class UInterpTrackInstDirector:UInterpTrackInst
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: OldViewTarget
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public AActor OldViewTarget => ReadUObject<AActor>(0x28);
		
	}


	/// <summary>
	/// UInterpTrackInstEvent:UInterpTrackInst
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class UInterpTrackInstEvent:UInterpTrackInst
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: LastUpdatePosition
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float LastUpdatePosition
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// UInterpTrackInstFade:UInterpTrackInst
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UInterpTrackInstFade:UInterpTrackInst
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UInterpTrackInstFloatAnimBPParam:UInterpTrackInst
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class UInterpTrackInstFloatAnimBPParam:UInterpTrackInst
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: AnimScriptInstance
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UAnimInstance AnimScriptInstance => ReadUObject<UAnimInstance>(0x28);
		
		/// <summary>
		/// Name: ResetFloat
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float ResetFloat
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
	}


	/// <summary>
	/// UInterpTrackInstFloatMaterialParam:UInterpTrackInst
	/// Size: 0x60
	/// Properties: 4
	/// </summary>
	public class UInterpTrackInstFloatMaterialParam:UInterpTrackInst
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: MaterialInstances
		/// Type: TArray<UMaterialInstanceDynamic>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x1C8
		/// </summary>
		public TArray<UMaterialInstanceDynamic> MaterialInstances => new TArray<UMaterialInstanceDynamic>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: ResetFloats
		/// Type: TArray<>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: PrimitiveMaterialRefs
		/// Type: TArray<FPrimitiveMaterialRef>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FPrimitiveMaterialRef> PrimitiveMaterialRefs => new TArray<FPrimitiveMaterialRef>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: InstancedTrack
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UInterpTrackFloatMaterialParam InstancedTrack => ReadUObject<UInterpTrackFloatMaterialParam>(0x58);
		
	}


	/// <summary>
	/// UInterpTrackInstFloatParticleParam:UInterpTrackInst
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class UInterpTrackInstFloatParticleParam:UInterpTrackInst
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: ResetFloat
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float ResetFloat
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// UInterpTrackInstMove:UInterpTrackInst
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class UInterpTrackInstMove:UInterpTrackInst
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: ResetLocation
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x0C
		/// </summary>
		public FVector ResetLocation => ReadStruct<FVector>(0x28);
		
		/// <summary>
		/// Name: ResetRotation
		/// Type: StructProperty
		/// Offset: 0x34
		/// Size: 0x0C
		/// </summary>
		public FRotator ResetRotation => ReadStruct<FRotator>(0x34);
		
	}


	/// <summary>
	/// UInterpTrackInstParticleReplay:UInterpTrackInst
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class UInterpTrackInstParticleReplay:UInterpTrackInst
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: LastUpdatePosition
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float LastUpdatePosition
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// UInterpTrackInstProperty:UInterpTrackInst
	/// Size: 0x38
	/// Properties: 2
	/// </summary>
	public class UInterpTrackInstProperty:UInterpTrackInst
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: InterpProperty
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UProperty InterpProperty => ReadUObject<UProperty>(0x28);
		
		/// <summary>
		/// Name: PropertyOuterObjectInst
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UObject PropertyOuterObjectInst => ReadUObject<UObject>(0x30);
		
	}


	/// <summary>
	/// UInterpTrackInstBoolProp:UInterpTrackInstProperty
	/// Size: 0x50
	/// Properties: 2
	/// </summary>
	public class UInterpTrackInstBoolProp:UInterpTrackInstProperty
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: BoolProperty
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UBoolProperty BoolProperty => ReadUObject<UBoolProperty>(0x40);
		
		/// <summary>
		/// Name: ResetBool
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool ResetBool
		{
			get
			{
				return ReadBool(0x48);
			}
			set
			{
				WriteBool(0x48,value);
			}
		}
		
	}


	/// <summary>
	/// UInterpTrackInstColorProp:UInterpTrackInstProperty
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class UInterpTrackInstColorProp:UInterpTrackInstProperty
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: ResetColor
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public FColor ResetColor => ReadStruct<FColor>(0x40);
		
	}


	/// <summary>
	/// UInterpTrackInstFloatProp:UInterpTrackInstProperty
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class UInterpTrackInstFloatProp:UInterpTrackInstProperty
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: ResetFloat
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float ResetFloat
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
	}


	/// <summary>
	/// UInterpTrackInstLinearColorProp:UInterpTrackInstProperty
	/// Size: 0x50
	/// Properties: 1
	/// </summary>
	public class UInterpTrackInstLinearColorProp:UInterpTrackInstProperty
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: ResetColor
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FLinearColor ResetColor => ReadStruct<FLinearColor>(0x40);
		
	}


	/// <summary>
	/// UInterpTrackInstVectorProp:UInterpTrackInstProperty
	/// Size: 0x50
	/// Properties: 1
	/// </summary>
	public class UInterpTrackInstVectorProp:UInterpTrackInstProperty
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: ResetVector
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x0C
		/// </summary>
		public FVector ResetVector => ReadStruct<FVector>(0x40);
		
	}


	/// <summary>
	/// UInterpTrackInstSlomo:UInterpTrackInst
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class UInterpTrackInstSlomo:UInterpTrackInst
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: OldTimeDilation
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float OldTimeDilation
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// UInterpTrackInstSound:UInterpTrackInst
	/// Size: 0x38
	/// Properties: 2
	/// </summary>
	public class UInterpTrackInstSound:UInterpTrackInst
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: LastUpdatePosition
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float LastUpdatePosition
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: PlayAudioComp
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UAudioComponent PlayAudioComp => ReadUObject<UAudioComponent>(0x30);
		
	}


	/// <summary>
	/// UInterpTrackInstToggle:UInterpTrackInst
	/// Size: 0x38
	/// Properties: 3
	/// </summary>
	public class UInterpTrackInstToggle:UInterpTrackInst
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Action
		/// Type: ByteProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public byte Action
		{
			get
			{
				return ReadByte(0x28);
			}
			set
			{
				WriteByte(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: LastUpdatePosition
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float LastUpdatePosition
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: bSavedActiveState
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bSavedActiveState => (ReadByte(0x0030) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UInterpTrackInstVectorMaterialParam:UInterpTrackInst
	/// Size: 0x60
	/// Properties: 4
	/// </summary>
	public class UInterpTrackInstVectorMaterialParam:UInterpTrackInst
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: MaterialInstances
		/// Type: TArray<UMaterialInstanceDynamic>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x1C8
		/// </summary>
		public TArray<UMaterialInstanceDynamic> MaterialInstances => new TArray<UMaterialInstanceDynamic>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: ResetVectors
		/// Type: TArray<FVector>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> ResetVectors => new TArray<FVector>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: PrimitiveMaterialRefs
		/// Type: TArray<FPrimitiveMaterialRef>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FPrimitiveMaterialRef> PrimitiveMaterialRefs => new TArray<FPrimitiveMaterialRef>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: InstancedTrack
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UInterpTrackVectorMaterialParam InstancedTrack => ReadUObject<UInterpTrackVectorMaterialParam>(0x58);
		
	}


	/// <summary>
	/// UInterpTrackInstVisibility:UInterpTrackInst
	/// Size: 0x30
	/// Properties: 2
	/// </summary>
	public class UInterpTrackInstVisibility:UInterpTrackInst
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: Action
		/// Type: ByteProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public byte Action
		{
			get
			{
				return ReadByte(0x28);
			}
			set
			{
				WriteByte(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: LastUpdatePosition
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float LastUpdatePosition
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
	}


	/// <summary>
	/// UIntSerialization:UObject
	/// Size: 0x50
	/// Properties: 8
	/// </summary>
	public class UIntSerialization:UObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: UnsignedInt16Variable
		/// Type: UInt16Property
		/// Offset: 0x28
		/// Size: 0x02
		/// </summary>
		public ushort UnsignedInt16Variable
		{
			get
			{
				return ReadUInt16(0x28);
			}
			set
			{
				WriteUInt16(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: UnsignedInt32Variable
		/// Type: UInt32Property
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: UnsignedInt64Variable
		/// Type: UInt64Property
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public ulong UnsignedInt64Variable
		{
			get
			{
				return ReadUInt64(0x30);
			}
			set
			{
				WriteUInt64(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: SignedInt8Variable
		/// Type: Int8Property
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		
		/// <summary>
		/// Name: SignedInt16Variable
		/// Type: Int16Property
		/// Offset: 0x3A
		/// Size: 0x02
		/// </summary>
		public short SignedInt16Variable
		{
			get
			{
				return ReadInt16(0x3A);
			}
			set
			{
				WriteInt16(0x3A,value);
			}
		}
		
		/// <summary>
		/// Name: SignedInt64Variable
		/// Type: Int64Property
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public long SignedInt64Variable
		{
			get
			{
				return ReadInt64(0x40);
			}
			set
			{
				WriteInt64(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: UnsignedInt8Variable
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte UnsignedInt8Variable
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: SignedInt32Variable
		/// Type: IntProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public int SignedInt32Variable
		{
			get
			{
				return ReadInt32(0x4C);
			}
			set
			{
				WriteInt32(0x4C,value);
			}
		}
		
	}


	/// <summary>
	/// ULayer:UObject
	/// Size: 0x48
	/// Properties: 3
	/// </summary>
	public class ULayer:UObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: LayerName
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bIsVisible
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bIsVisible => (ReadByte(0x0030) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ActorStats
		/// Type: TArray<FLayerActorStats>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FLayerActorStats> ActorStats => new TArray<FLayerActorStats>(BaseAddress+0x38);
		
	}


	/// <summary>
	/// ULevelStreaming:UObject
	/// Size: 0x160
	/// Properties: 19
	/// </summary>
	public class ULevelStreaming:UObject
	{
		public override int ObjectSize => 352;
		/// <summary>
		/// Name: PackageName
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PackageNameToLoad
		/// Type: NameProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: LODPackageNames
		/// Type: TArray<FName>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> LODPackageNames => new TArray<FName>(BaseAddress+0x58);
		
		/// <summary>
		/// Name: LevelTransform
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x30
		/// </summary>
		public FTransform LevelTransform => ReadStruct<FTransform>(0x80);
		
		/// <summary>
		/// Name: bShouldBeVisibleInEditor
		/// Type: BoolProperty
		/// Offset: 0xB0
		/// Size: 0x01
		/// </summary>
		public bool bShouldBeVisibleInEditor => (ReadByte(0x00B0) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bLocked
		/// Type: BoolProperty
		/// Offset: 0xB0
		/// Size: 0x01
		/// </summary>
		public bool bLocked => (ReadByte(0x00B0) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bShouldBeLoaded
		/// Type: BoolProperty
		/// Offset: 0xB0
		/// Size: 0x01
		/// </summary>
		public bool bShouldBeLoaded => (ReadByte(0x00B0) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bShouldBeVisible
		/// Type: BoolProperty
		/// Offset: 0xB0
		/// Size: 0x01
		/// </summary>
		public bool bShouldBeVisible => (ReadByte(0x00B0) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bShouldBlockOnLoad
		/// Type: BoolProperty
		/// Offset: 0xB0
		/// Size: 0x01
		/// </summary>
		public bool bShouldBlockOnLoad => (ReadByte(0x00B0) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: LevelLODIndex
		/// Type: IntProperty
		/// Offset: 0xB4
		/// Size: 0x04
		/// </summary>
		public int LevelLODIndex
		{
			get
			{
				return ReadInt32(0xB4);
			}
			set
			{
				WriteInt32(0xB4,value);
			}
		}
		
		/// <summary>
		/// Name: bDisableDistanceStreaming
		/// Type: BoolProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public bool bDisableDistanceStreaming => (ReadByte(0x00B8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDrawOnLevelStatusMap
		/// Type: BoolProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public bool bDrawOnLevelStatusMap => (ReadByte(0x00B8) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: DrawColor
		/// Type: StructProperty
		/// Offset: 0xBC
		/// Size: 0x04
		/// </summary>
		public FColor DrawColor => ReadStruct<FColor>(0xBC);
		
		/// <summary>
		/// Name: LevelColor
		/// Type: StructProperty
		/// Offset: 0xC0
		/// Size: 0x10
		/// </summary>
		public FLinearColor LevelColor => ReadStruct<FLinearColor>(0xC0);
		
		/// <summary>
		/// Name: EditorStreamingVolumes
		/// Type: TArray<ALevelStreamingVolume>
		/// Offset: 0xD0
		/// Size: 0x10
		/// SubElement Size: 0x420
		/// </summary>
		public TArray<ALevelStreamingVolume> EditorStreamingVolumes => new TArray<ALevelStreamingVolume>(BaseAddress+0xD0);
		
		/// <summary>
		/// Name: MinTimeBetweenVolumeUnloadRequests
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float MinTimeBetweenVolumeUnloadRequests
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: Keywords
		/// Type: TArray<>
		/// Offset: 0xE8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: LoadedLevel
		/// Type: ObjectProperty
		/// Offset: 0x138
		/// Size: 0x08
		/// </summary>
		public ULevel LoadedLevel => ReadUObject<ULevel>(0x138);
		
		/// <summary>
		/// Name: PendingUnloadLevel
		/// Type: ObjectProperty
		/// Offset: 0x140
		/// Size: 0x08
		/// </summary>
		public ULevel PendingUnloadLevel => ReadUObject<ULevel>(0x140);
		
	}


	/// <summary>
	/// ULevelStreamingAlwaysLoaded:ULevelStreaming
	/// Size: 0x160
	/// Properties: 0
	/// </summary>
	public class ULevelStreamingAlwaysLoaded:ULevelStreaming
	{
		public override int ObjectSize => 352;
	}


	/// <summary>
	/// ULevelStreamingKismet:ULevelStreaming
	/// Size: 0x160
	/// Properties: 2
	/// </summary>
	public class ULevelStreamingKismet:ULevelStreaming
	{
		public override int ObjectSize => 352;
		/// <summary>
		/// Name: bInitiallyLoaded
		/// Type: BoolProperty
		/// Offset: 0x158
		/// Size: 0x01
		/// </summary>
		public bool bInitiallyLoaded => (ReadByte(0x0158) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bInitiallyVisible
		/// Type: BoolProperty
		/// Offset: 0x158
		/// Size: 0x01
		/// </summary>
		public bool bInitiallyVisible => (ReadByte(0x0158) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// ULevelStreamingPersistent:ULevelStreaming
	/// Size: 0x160
	/// Properties: 0
	/// </summary>
	public class ULevelStreamingPersistent:ULevelStreaming
	{
		public override int ObjectSize => 352;
	}


	/// <summary>
	/// ULightmappedSurfaceCollection:UObject
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class ULightmappedSurfaceCollection:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: SourceModel
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UModel SourceModel => ReadUObject<UModel>(0x28);
		
		/// <summary>
		/// Name: Surfaces
		/// Type: TArray<>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// ULightmassPrimitiveSettingsObject:UObject
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class ULightmassPrimitiveSettingsObject:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: LightmassSettings
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x18
		/// </summary>
		public FLightmassPrimitiveSettings LightmassSettings => ReadStruct<FLightmassPrimitiveSettings>(0x28);
		
	}


	/// <summary>
	/// ULocalMessage:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class ULocalMessage:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UEngineMessage:ULocalMessage
	/// Size: 0xA8
	/// Properties: 8
	/// </summary>
	public class UEngineMessage:ULocalMessage
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: FailedPlaceMessage
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString FailedPlaceMessage => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: MaxedOutMessage
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString MaxedOutMessage => new FString(BaseAddress+0x38);
		
		/// <summary>
		/// Name: EnteredMessage
		/// Type: StrProperty
		/// Offset: 0x48
		/// Size: 0x10
		/// </summary>
		public FString EnteredMessage => new FString(BaseAddress+0x48);
		
		/// <summary>
		/// Name: LeftMessage
		/// Type: StrProperty
		/// Offset: 0x58
		/// Size: 0x10
		/// </summary>
		public FString LeftMessage => new FString(BaseAddress+0x58);
		
		/// <summary>
		/// Name: GlobalNameChange
		/// Type: StrProperty
		/// Offset: 0x68
		/// Size: 0x10
		/// </summary>
		public FString GlobalNameChange => new FString(BaseAddress+0x68);
		
		/// <summary>
		/// Name: SpecEnteredMessage
		/// Type: StrProperty
		/// Offset: 0x78
		/// Size: 0x10
		/// </summary>
		public FString SpecEnteredMessage => new FString(BaseAddress+0x78);
		
		/// <summary>
		/// Name: NewPlayerMessage
		/// Type: StrProperty
		/// Offset: 0x88
		/// Size: 0x10
		/// </summary>
		public FString NewPlayerMessage => new FString(BaseAddress+0x88);
		
		/// <summary>
		/// Name: NewSpecMessage
		/// Type: StrProperty
		/// Offset: 0x98
		/// Size: 0x10
		/// </summary>
		public FString NewSpecMessage => new FString(BaseAddress+0x98);
		
	}


	/// <summary>
	/// UMaterialExpressionAbs:UMaterialExpression
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionAbs:UMaterialExpression
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionActorPositionWS:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionActorPositionWS:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionAdd:UMaterialExpression
	/// Size: 0xE8
	/// Properties: 4
	/// </summary>
	public class UMaterialExpressionAdd:UMaterialExpression
	{
		public override int ObjectSize => 232;
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput B => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: ConstA
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float ConstA
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: ConstB
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float ConstB
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionAppendVector:UMaterialExpression
	/// Size: 0xE0
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionAppendVector:UMaterialExpression
	{
		public override int ObjectSize => 224;
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput B => ReadStruct<FExpressionInput>(0xA8);
		
	}


	/// <summary>
	/// UMaterialExpressionAtmosphericFogColor:UMaterialExpression
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionAtmosphericFogColor:UMaterialExpression
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: WorldPosition
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput WorldPosition => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionBlackBody:UMaterialExpression
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionBlackBody:UMaterialExpression
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Temp
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Temp => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionBreakMaterialAttributes:UMaterialExpression
	/// Size: 0xE8
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionBreakMaterialAttributes:UMaterialExpression
	{
		public override int ObjectSize => 232;
		/// <summary>
		/// Name: Struct
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Struct => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: MaterialAttributes
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x40
		/// </summary>
		public FMaterialAttributesInput MaterialAttributes => ReadStruct<FMaterialAttributesInput>(0xA8);
		
	}


	/// <summary>
	/// UMaterialExpressionBumpOffset:UMaterialExpression
	/// Size: 0x128
	/// Properties: 6
	/// </summary>
	public class UMaterialExpressionBumpOffset:UMaterialExpression
	{
		public override int ObjectSize => 296;
		/// <summary>
		/// Name: Coordinate
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Coordinate => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: Height
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Height => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: HeightRatioInput
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput HeightRatioInput => ReadStruct<FExpressionInput>(0xE0);
		
		/// <summary>
		/// Name: HeightRatio
		/// Type: FloatProperty
		/// Offset: 0x118
		/// Size: 0x04
		/// </summary>
		public float HeightRatio
		{
			get
			{
				return ReadSingle(0x118);
			}
			set
			{
				WriteSingle(0x118,value);
			}
		}
		
		/// <summary>
		/// Name: ReferencePlane
		/// Type: FloatProperty
		/// Offset: 0x11C
		/// Size: 0x04
		/// </summary>
		public float ReferencePlane
		{
			get
			{
				return ReadSingle(0x11C);
			}
			set
			{
				WriteSingle(0x11C,value);
			}
		}
		
		/// <summary>
		/// Name: ConstCoordinate
		/// Type: UInt32Property
		/// Offset: 0x120
		/// Size: 0x04
		/// </summary>
		
	}


	/// <summary>
	/// UMaterialExpressionCameraPositionWS:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionCameraPositionWS:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionCameraVectorWS:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionCameraVectorWS:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionCeil:UMaterialExpression
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionCeil:UMaterialExpression
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionClamp:UMaterialExpression
	/// Size: 0x128
	/// Properties: 6
	/// </summary>
	public class UMaterialExpressionClamp:UMaterialExpression
	{
		public override int ObjectSize => 296;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: Min
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Min => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: Max
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Max => ReadStruct<FExpressionInput>(0xE0);
		
		/// <summary>
		/// Name: ClampMode
		/// Type: ByteProperty
		/// Offset: 0x118
		/// Size: 0x01
		/// </summary>
		public byte ClampMode
		{
			get
			{
				return ReadByte(0x118);
			}
			set
			{
				WriteByte(0x118,value);
			}
		}
		
		/// <summary>
		/// Name: MinDefault
		/// Type: FloatProperty
		/// Offset: 0x11C
		/// Size: 0x04
		/// </summary>
		public float MinDefault
		{
			get
			{
				return ReadSingle(0x11C);
			}
			set
			{
				WriteSingle(0x11C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxDefault
		/// Type: FloatProperty
		/// Offset: 0x120
		/// Size: 0x04
		/// </summary>
		public float MaxDefault
		{
			get
			{
				return ReadSingle(0x120);
			}
			set
			{
				WriteSingle(0x120,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionCollectionParameter:UMaterialExpression
	/// Size: 0x90
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionCollectionParameter:UMaterialExpression
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: Collection
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public UMaterialParameterCollection Collection => ReadUObject<UMaterialParameterCollection>(0x70);
		
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x78
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ParameterId
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FGuid ParameterId => ReadStruct<FGuid>(0x80);
		
	}


	/// <summary>
	/// UMaterialExpressionComment:UMaterialExpression
	/// Size: 0x98
	/// Properties: 4
	/// </summary>
	public class UMaterialExpressionComment:UMaterialExpression
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: SizeX
		/// Type: IntProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public int SizeX
		{
			get
			{
				return ReadInt32(0x70);
			}
			set
			{
				WriteInt32(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: SizeY
		/// Type: IntProperty
		/// Offset: 0x74
		/// Size: 0x04
		/// </summary>
		public int SizeY
		{
			get
			{
				return ReadInt32(0x74);
			}
			set
			{
				WriteInt32(0x74,value);
			}
		}
		
		/// <summary>
		/// Name: Text
		/// Type: StrProperty
		/// Offset: 0x78
		/// Size: 0x10
		/// </summary>
		public FString Text => new FString(BaseAddress+0x78);
		
		/// <summary>
		/// Name: CommentColor
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0x10
		/// </summary>
		public FLinearColor CommentColor => ReadStruct<FLinearColor>(0x88);
		
	}


	/// <summary>
	/// UMaterialExpressionComponentMask:UMaterialExpression
	/// Size: 0xB0
	/// Properties: 5
	/// </summary>
	public class UMaterialExpressionComponentMask:UMaterialExpression
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: R
		/// Type: BoolProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public bool R => (ReadByte(0x00A8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: G
		/// Type: BoolProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public bool G => (ReadByte(0x00A8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: B
		/// Type: BoolProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public bool B => (ReadByte(0x00A8) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: A
		/// Type: BoolProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public bool A => (ReadByte(0x00A8) & 0x08) == 0x08;
		
	}


	/// <summary>
	/// UMaterialExpressionConstant:UMaterialExpression
	/// Size: 0x78
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionConstant:UMaterialExpression
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: R
		/// Type: FloatProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public float R
		{
			get
			{
				return ReadSingle(0x70);
			}
			set
			{
				WriteSingle(0x70,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionConstant2Vector:UMaterialExpression
	/// Size: 0x78
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionConstant2Vector:UMaterialExpression
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: R
		/// Type: FloatProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public float R
		{
			get
			{
				return ReadSingle(0x70);
			}
			set
			{
				WriteSingle(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: G
		/// Type: FloatProperty
		/// Offset: 0x74
		/// Size: 0x04
		/// </summary>
		public float G
		{
			get
			{
				return ReadSingle(0x74);
			}
			set
			{
				WriteSingle(0x74,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionConstant3Vector:UMaterialExpression
	/// Size: 0x80
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionConstant3Vector:UMaterialExpression
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: Constant
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FLinearColor Constant => ReadStruct<FLinearColor>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionConstant4Vector:UMaterialExpression
	/// Size: 0x80
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionConstant4Vector:UMaterialExpression
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: Constant
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FLinearColor Constant => ReadStruct<FLinearColor>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionConstantBiasScale:UMaterialExpression
	/// Size: 0xB0
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionConstantBiasScale:UMaterialExpression
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: Bias
		/// Type: FloatProperty
		/// Offset: 0xA8
		/// Size: 0x04
		/// </summary>
		public float Bias
		{
			get
			{
				return ReadSingle(0xA8);
			}
			set
			{
				WriteSingle(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: Scale
		/// Type: FloatProperty
		/// Offset: 0xAC
		/// Size: 0x04
		/// </summary>
		public float Scale
		{
			get
			{
				return ReadSingle(0xAC);
			}
			set
			{
				WriteSingle(0xAC,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionCosine:UMaterialExpression
	/// Size: 0xB0
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionCosine:UMaterialExpression
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: Period
		/// Type: FloatProperty
		/// Offset: 0xA8
		/// Size: 0x04
		/// </summary>
		public float Period
		{
			get
			{
				return ReadSingle(0xA8);
			}
			set
			{
				WriteSingle(0xA8,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionCrossProduct:UMaterialExpression
	/// Size: 0xE0
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionCrossProduct:UMaterialExpression
	{
		public override int ObjectSize => 224;
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput B => ReadStruct<FExpressionInput>(0xA8);
		
	}


	/// <summary>
	/// UMaterialExpressionCustom:UMaterialExpression
	/// Size: 0xA8
	/// Properties: 4
	/// </summary>
	public class UMaterialExpressionCustom:UMaterialExpression
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Code
		/// Type: StrProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FString Code => new FString(BaseAddress+0x70);
		
		/// <summary>
		/// Name: OutputType
		/// Type: ByteProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public byte OutputType
		{
			get
			{
				return ReadByte(0x80);
			}
			set
			{
				WriteByte(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: Description
		/// Type: StrProperty
		/// Offset: 0x88
		/// Size: 0x10
		/// </summary>
		public FString Description => new FString(BaseAddress+0x88);
		
		/// <summary>
		/// Name: Inputs
		/// Type: TArray<FCustomInput>
		/// Offset: 0x98
		/// Size: 0x10
		/// SubElement Size: 0x48
		/// </summary>
		public TArray<FCustomInput> Inputs => new TArray<FCustomInput>(BaseAddress+0x98);
		
	}


	/// <summary>
	/// UMaterialExpressionClearCoatNormalCustomOutput:UMaterialExpressionCustomOutput
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionClearCoatNormalCustomOutput:UMaterialExpressionCustomOutput
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionTangentOutput:UMaterialExpressionCustomOutput
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionTangentOutput:UMaterialExpressionCustomOutput
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionDDX:UMaterialExpression
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionDDX:UMaterialExpression
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Value
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Value => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionDDY:UMaterialExpression
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionDDY:UMaterialExpression
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Value
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Value => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionDecalDerivative:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionDecalDerivative:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionDecalLifetimeOpacity:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionDecalLifetimeOpacity:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionDecalMipmapLevel:UMaterialExpression
	/// Size: 0xB0
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionDecalMipmapLevel:UMaterialExpression
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: TextureSize
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput TextureSize => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: ConstWidth
		/// Type: FloatProperty
		/// Offset: 0xA8
		/// Size: 0x04
		/// </summary>
		public float ConstWidth
		{
			get
			{
				return ReadSingle(0xA8);
			}
			set
			{
				WriteSingle(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: ConstHeight
		/// Type: FloatProperty
		/// Offset: 0xAC
		/// Size: 0x04
		/// </summary>
		public float ConstHeight
		{
			get
			{
				return ReadSingle(0xAC);
			}
			set
			{
				WriteSingle(0xAC,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionDepthFade:UMaterialExpression
	/// Size: 0xE8
	/// Properties: 4
	/// </summary>
	public class UMaterialExpressionDepthFade:UMaterialExpression
	{
		public override int ObjectSize => 232;
		/// <summary>
		/// Name: InOpacity
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput InOpacity => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: FadeDistance
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput FadeDistance => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: OpacityDefault
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float OpacityDefault
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: FadeDistanceDefault
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float FadeDistanceDefault
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionDepthOfFieldFunction:UMaterialExpression
	/// Size: 0xB0
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionDepthOfFieldFunction:UMaterialExpression
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: FunctionValue
		/// Type: ByteProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public byte FunctionValue
		{
			get
			{
				return ReadByte(0x70);
			}
			set
			{
				WriteByte(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: Depth
		/// Type: StructProperty
		/// Offset: 0x78
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Depth => ReadStruct<FExpressionInput>(0x78);
		
	}


	/// <summary>
	/// UMaterialExpressionDeriveNormalZ:UMaterialExpression
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionDeriveNormalZ:UMaterialExpression
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: InXY
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput InXY => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionDesaturation:UMaterialExpression
	/// Size: 0xF0
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionDesaturation:UMaterialExpression
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: Fraction
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Fraction => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: LuminanceFactors
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x10
		/// </summary>
		public FLinearColor LuminanceFactors => ReadStruct<FLinearColor>(0xE0);
		
	}


	/// <summary>
	/// UMaterialExpressionDistance:UMaterialExpression
	/// Size: 0xE0
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionDistance:UMaterialExpression
	{
		public override int ObjectSize => 224;
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput B => ReadStruct<FExpressionInput>(0xA8);
		
	}


	/// <summary>
	/// UMaterialExpressionDistanceCullFade:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionDistanceCullFade:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionDistanceFieldGradient:UMaterialExpression
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionDistanceFieldGradient:UMaterialExpression
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Position
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Position => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionDistanceToNearestSurface:UMaterialExpression
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionDistanceToNearestSurface:UMaterialExpression
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Position
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Position => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionDivide:UMaterialExpression
	/// Size: 0xE8
	/// Properties: 4
	/// </summary>
	public class UMaterialExpressionDivide:UMaterialExpression
	{
		public override int ObjectSize => 232;
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput B => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: ConstA
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float ConstA
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: ConstB
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float ConstB
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionDotProduct:UMaterialExpression
	/// Size: 0xE0
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionDotProduct:UMaterialExpression
	{
		public override int ObjectSize => 224;
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput B => ReadStruct<FExpressionInput>(0xA8);
		
	}


	/// <summary>
	/// UMaterialExpressionDynamicParameter:UMaterialExpression
	/// Size: 0x90
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionDynamicParameter:UMaterialExpression
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: ParamNames
		/// Type: TArray<>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: DefaultValue
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FLinearColor DefaultValue => ReadStruct<FLinearColor>(0x80);
		
	}


	/// <summary>
	/// UMaterialExpressionEyeAdaptation:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionEyeAdaptation:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionFeatureLevelSwitch:UMaterialExpression
	/// Size: 0x188
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionFeatureLevelSwitch:UMaterialExpression
	{
		public override int ObjectSize => 392;
		/// <summary>
		/// Name: Default
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Default => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: Inputs
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Inputs => ReadStruct<FExpressionInput>(0xA8);
		
	}


	/// <summary>
	/// UMaterialExpressionFloor:UMaterialExpression
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionFloor:UMaterialExpression
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionFmod:UMaterialExpression
	/// Size: 0xE0
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionFmod:UMaterialExpression
	{
		public override int ObjectSize => 224;
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput B => ReadStruct<FExpressionInput>(0xA8);
		
	}


	/// <summary>
	/// UMaterialExpressionFontSample:UMaterialExpression
	/// Size: 0x80
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionFontSample:UMaterialExpression
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: Font
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public UFont Font => ReadUObject<UFont>(0x70);
		
		/// <summary>
		/// Name: FontTexturePage
		/// Type: IntProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public int FontTexturePage
		{
			get
			{
				return ReadInt32(0x78);
			}
			set
			{
				WriteInt32(0x78,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionFontSampleParameter:UMaterialExpressionFontSample
	/// Size: 0xA0
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionFontSampleParameter:UMaterialExpressionFontSample
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x80
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ExpressionGUID
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0x10
		/// </summary>
		public FGuid ExpressionGUID => ReadStruct<FGuid>(0x88);
		
		/// <summary>
		/// Name: Group
		/// Type: NameProperty
		/// Offset: 0x98
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UMaterialExpressionFrac:UMaterialExpression
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionFrac:UMaterialExpression
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionFresnel:UMaterialExpression
	/// Size: 0x128
	/// Properties: 5
	/// </summary>
	public class UMaterialExpressionFresnel:UMaterialExpression
	{
		public override int ObjectSize => 296;
		/// <summary>
		/// Name: ExponentIn
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput ExponentIn => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: Exponent
		/// Type: FloatProperty
		/// Offset: 0xA8
		/// Size: 0x04
		/// </summary>
		public float Exponent
		{
			get
			{
				return ReadSingle(0xA8);
			}
			set
			{
				WriteSingle(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: BaseReflectFractionIn
		/// Type: StructProperty
		/// Offset: 0xB0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput BaseReflectFractionIn => ReadStruct<FExpressionInput>(0xB0);
		
		/// <summary>
		/// Name: BaseReflectFraction
		/// Type: FloatProperty
		/// Offset: 0xE8
		/// Size: 0x04
		/// </summary>
		public float BaseReflectFraction
		{
			get
			{
				return ReadSingle(0xE8);
			}
			set
			{
				WriteSingle(0xE8,value);
			}
		}
		
		/// <summary>
		/// Name: Normal
		/// Type: StructProperty
		/// Offset: 0xF0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Normal => ReadStruct<FExpressionInput>(0xF0);
		
	}


	/// <summary>
	/// UMaterialExpressionFunctionInput:UMaterialExpression
	/// Size: 0x100
	/// Properties: 9
	/// </summary>
	public class UMaterialExpressionFunctionInput:UMaterialExpression
	{
		public override int ObjectSize => 256;
		/// <summary>
		/// Name: Preview
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Preview => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: InputName
		/// Type: StrProperty
		/// Offset: 0xA8
		/// Size: 0x10
		/// </summary>
		public FString InputName => new FString(BaseAddress+0xA8);
		
		/// <summary>
		/// Name: Description
		/// Type: StrProperty
		/// Offset: 0xB8
		/// Size: 0x10
		/// </summary>
		public FString Description => new FString(BaseAddress+0xB8);
		
		/// <summary>
		/// Name: ID
		/// Type: StructProperty
		/// Offset: 0xC8
		/// Size: 0x10
		/// </summary>
		public FGuid ID => ReadStruct<FGuid>(0xC8);
		
		/// <summary>
		/// Name: InputType
		/// Type: ByteProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public byte InputType
		{
			get
			{
				return ReadByte(0xD8);
			}
			set
			{
				WriteByte(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: PreviewValue
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x10
		/// </summary>
		public FVector4 PreviewValue => ReadStruct<FVector4>(0xE0);
		
		/// <summary>
		/// Name: bUsePreviewValueAsDefault
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool bUsePreviewValueAsDefault => (ReadByte(0x00F0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: SortPriority
		/// Type: IntProperty
		/// Offset: 0xF4
		/// Size: 0x04
		/// </summary>
		public int SortPriority
		{
			get
			{
				return ReadInt32(0xF4);
			}
			set
			{
				WriteInt32(0xF4,value);
			}
		}
		
		/// <summary>
		/// Name: bCompilingFunctionPreview
		/// Type: BoolProperty
		/// Offset: 0xF8
		/// Size: 0x01
		/// </summary>
		public bool bCompilingFunctionPreview => (ReadByte(0x00F8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UMaterialExpressionFunctionOutput:UMaterialExpression
	/// Size: 0xE8
	/// Properties: 6
	/// </summary>
	public class UMaterialExpressionFunctionOutput:UMaterialExpression
	{
		public override int ObjectSize => 232;
		/// <summary>
		/// Name: OutputName
		/// Type: StrProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FString OutputName => new FString(BaseAddress+0x70);
		
		/// <summary>
		/// Name: Description
		/// Type: StrProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FString Description => new FString(BaseAddress+0x80);
		
		/// <summary>
		/// Name: SortPriority
		/// Type: IntProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public int SortPriority
		{
			get
			{
				return ReadInt32(0x90);
			}
			set
			{
				WriteInt32(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x98);
		
		/// <summary>
		/// Name: bLastPreviewed
		/// Type: BoolProperty
		/// Offset: 0xD0
		/// Size: 0x01
		/// </summary>
		public bool bLastPreviewed => (ReadByte(0x00D0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ID
		/// Type: StructProperty
		/// Offset: 0xD4
		/// Size: 0x10
		/// </summary>
		public FGuid ID => ReadStruct<FGuid>(0xD4);
		
	}


	/// <summary>
	/// UMaterialExpressionGIReplace:UMaterialExpression
	/// Size: 0x118
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionGIReplace:UMaterialExpression
	{
		public override int ObjectSize => 280;
		/// <summary>
		/// Name: Default
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Default => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: StaticIndirect
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput StaticIndirect => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: DynamicIndirect
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput DynamicIndirect => ReadStruct<FExpressionInput>(0xE0);
		
	}


	/// <summary>
	/// UMaterialExpressionGraniteTextureParameter:UMaterialExpressionGraniteTexture
	/// Size: 0x1C0
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionGraniteTextureParameter:UMaterialExpressionGraniteTexture
	{
		public override int ObjectSize => 448;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x1A0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ExpressionGUID
		/// Type: StructProperty
		/// Offset: 0x1A8
		/// Size: 0x10
		/// </summary>
		public FGuid ExpressionGUID => ReadStruct<FGuid>(0x1A8);
		
		/// <summary>
		/// Name: Group
		/// Type: NameProperty
		/// Offset: 0x1B8
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UMaterialExpressionGraniteBakeBase:UMaterialExpressionGraniteTextureParameter
	/// Size: 0x418
	/// Properties: 15
	/// </summary>
	public class UMaterialExpressionGraniteBakeBase:UMaterialExpressionGraniteTextureParameter
	{
		public override int ObjectSize => 1048;
		/// <summary>
		/// Name: Originals
		/// Type: StructProperty
		/// Offset: 0x1C0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Originals => ReadStruct<FExpressionInput>(0x1C0);
		
		/// <summary>
		/// Name: SizeInput
		/// Type: StructProperty
		/// Offset: 0x2A0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput SizeInput => ReadStruct<FExpressionInput>(0x2A0);
		
		/// <summary>
		/// Name: bUseBaked
		/// Type: BoolProperty
		/// Offset: 0x2D8
		/// Size: 0x01
		/// </summary>
		public bool bUseBaked => (ReadByte(0x02D8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bIsBakeDirty
		/// Type: BoolProperty
		/// Offset: 0x2D8
		/// Size: 0x01
		/// </summary>
		public bool bIsBakeDirty => (ReadByte(0x02D8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: ShaderGraphHash
		/// Type: UInt64Property
		/// Offset: 0x2E0
		/// Size: 0x08
		/// </summary>
		public ulong ShaderGraphHash
		{
			get
			{
				return ReadUInt64(0x2E0);
			}
			set
			{
				WriteUInt64(0x2E0,value);
			}
		}
		
		/// <summary>
		/// Name: UniformExpressionHash
		/// Type: UInt64Property
		/// Offset: 0x300
		/// Size: 0x08
		/// </summary>
		public ulong UniformExpressionHash
		{
			get
			{
				return ReadUInt64(0x300);
			}
			set
			{
				WriteUInt64(0x300,value);
			}
		}
		
		/// <summary>
		/// Name: BakedShaderGraphHash
		/// Type: UInt64Property
		/// Offset: 0x320
		/// Size: 0x08
		/// </summary>
		public ulong BakedShaderGraphHash
		{
			get
			{
				return ReadUInt64(0x320);
			}
			set
			{
				WriteUInt64(0x320,value);
			}
		}
		
		/// <summary>
		/// Name: BakedUniformExpressionHash
		/// Type: UInt64Property
		/// Offset: 0x340
		/// Size: 0x08
		/// </summary>
		public ulong BakedUniformExpressionHash
		{
			get
			{
				return ReadUInt64(0x340);
			}
			set
			{
				WriteUInt64(0x340,value);
			}
		}
		
		/// <summary>
		/// Name: bAlwaysUseMaxSize
		/// Type: BoolProperty
		/// Offset: 0x360
		/// Size: 0x01
		/// </summary>
		public bool bAlwaysUseMaxSize => (ReadByte(0x0360) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Size
		/// Type: StructProperty
		/// Offset: 0x364
		/// Size: 0x08
		/// </summary>
		public FIntPoint Size => ReadStruct<FIntPoint>(0x364);
		
		/// <summary>
		/// Name: Tiling
		/// Type: ByteProperty
		/// Offset: 0x36C
		/// Size: 0x01
		/// </summary>
		public byte Tiling
		{
			get
			{
				return ReadByte(0x36C);
			}
			set
			{
				WriteByte(0x36C,value);
			}
		}
		
		/// <summary>
		/// Name: LayerPreset
		/// Type: StructProperty
		/// Offset: 0x370
		/// Size: 0x78
		/// </summary>
		public FGraniteBakerLayerLayout LayerPreset => ReadStruct<FGraniteBakerLayerLayout>(0x370);
		
		/// <summary>
		/// Name: bDoRebuild
		/// Type: BoolProperty
		/// Offset: 0x3E8
		/// Size: 0x01
		/// </summary>
		public bool bDoRebuild
		{
			get
			{
				return ReadBool(0x3E8);
			}
			set
			{
				WriteBool(0x3E8,value);
			}
		}
		
		/// <summary>
		/// Name: IndexList
		/// Type: IntProperty
		/// Offset: 0x3EC
		/// Size: 0x04
		/// </summary>
		public int IndexList
		{
			get
			{
				return ReadInt32(0x3EC);
			}
			set
			{
				WriteInt32(0x3EC,value);
			}
		}
		
		/// <summary>
		/// Name: BakeCallStack
		/// Type: TArray<UMaterialExpressionMaterialFunctionCall>
		/// Offset: 0x400
		/// Size: 0x10
		/// SubElement Size: 0x98
		/// </summary>
		public TArray<UMaterialExpressionMaterialFunctionCall> BakeCallStack => new TArray<UMaterialExpressionMaterialFunctionCall>(BaseAddress+0x400);
		
	}


	/// <summary>
	/// UMaterialExpressionGraniteBake:UMaterialExpressionGraniteBakeBase
	/// Size: 0x418
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionGraniteBake:UMaterialExpressionGraniteBakeBase
	{
		public override int ObjectSize => 1048;
	}


	/// <summary>
	/// UMaterialExpressionGraniteStreamTextures:UMaterialExpressionGraniteBakeBase
	/// Size: 0x418
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionGraniteStreamTextures:UMaterialExpressionGraniteBakeBase
	{
		public override int ObjectSize => 1048;
	}


	/// <summary>
	/// UMaterialExpressionGraniteTextureObject:UMaterialExpressionGraniteTextureBase
	/// Size: 0x80
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionGraniteTextureObject:UMaterialExpressionGraniteTextureBase
	{
		public override int ObjectSize => 128;
	}


	/// <summary>
	/// UMaterialExpressionGraniteTextureObjectParameter:UMaterialExpressionGraniteTextureParameter
	/// Size: 0x1C0
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionGraniteTextureObjectParameter:UMaterialExpressionGraniteTextureParameter
	{
		public override int ObjectSize => 448;
	}


	/// <summary>
	/// UMaterialExpressionIf:UMaterialExpression
	/// Size: 0x198
	/// Properties: 8
	/// </summary>
	public class UMaterialExpressionIf:UMaterialExpression
	{
		public override int ObjectSize => 408;
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput B => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: AGreaterThanB
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput AGreaterThanB => ReadStruct<FExpressionInput>(0xE0);
		
		/// <summary>
		/// Name: AEqualsB
		/// Type: StructProperty
		/// Offset: 0x118
		/// Size: 0x38
		/// </summary>
		public FExpressionInput AEqualsB => ReadStruct<FExpressionInput>(0x118);
		
		/// <summary>
		/// Name: ALessThanB
		/// Type: StructProperty
		/// Offset: 0x150
		/// Size: 0x38
		/// </summary>
		public FExpressionInput ALessThanB => ReadStruct<FExpressionInput>(0x150);
		
		/// <summary>
		/// Name: EqualsThreshold
		/// Type: FloatProperty
		/// Offset: 0x188
		/// Size: 0x04
		/// </summary>
		public float EqualsThreshold
		{
			get
			{
				return ReadSingle(0x188);
			}
			set
			{
				WriteSingle(0x188,value);
			}
		}
		
		/// <summary>
		/// Name: ConstB
		/// Type: FloatProperty
		/// Offset: 0x18C
		/// Size: 0x04
		/// </summary>
		public float ConstB
		{
			get
			{
				return ReadSingle(0x18C);
			}
			set
			{
				WriteSingle(0x18C,value);
			}
		}
		
		/// <summary>
		/// Name: ConstAEqualsB
		/// Type: FloatProperty
		/// Offset: 0x190
		/// Size: 0x04
		/// </summary>
		public float ConstAEqualsB
		{
			get
			{
				return ReadSingle(0x190);
			}
			set
			{
				WriteSingle(0x190,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionLightmapUVs:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionLightmapUVs:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionLightmassReplace:UMaterialExpression
	/// Size: 0xE0
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionLightmassReplace:UMaterialExpression
	{
		public override int ObjectSize => 224;
		/// <summary>
		/// Name: Realtime
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Realtime => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: Lightmass
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Lightmass => ReadStruct<FExpressionInput>(0xA8);
		
	}


	/// <summary>
	/// UMaterialExpressionLightVector:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionLightVector:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionLinearInterpolate:UMaterialExpression
	/// Size: 0x128
	/// Properties: 6
	/// </summary>
	public class UMaterialExpressionLinearInterpolate:UMaterialExpression
	{
		public override int ObjectSize => 296;
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput B => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: Alpha
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Alpha => ReadStruct<FExpressionInput>(0xE0);
		
		/// <summary>
		/// Name: ConstA
		/// Type: FloatProperty
		/// Offset: 0x118
		/// Size: 0x04
		/// </summary>
		public float ConstA
		{
			get
			{
				return ReadSingle(0x118);
			}
			set
			{
				WriteSingle(0x118,value);
			}
		}
		
		/// <summary>
		/// Name: ConstB
		/// Type: FloatProperty
		/// Offset: 0x11C
		/// Size: 0x04
		/// </summary>
		public float ConstB
		{
			get
			{
				return ReadSingle(0x11C);
			}
			set
			{
				WriteSingle(0x11C,value);
			}
		}
		
		/// <summary>
		/// Name: ConstAlpha
		/// Type: FloatProperty
		/// Offset: 0x120
		/// Size: 0x04
		/// </summary>
		public float ConstAlpha
		{
			get
			{
				return ReadSingle(0x120);
			}
			set
			{
				WriteSingle(0x120,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionLogarithm2:UMaterialExpression
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionLogarithm2:UMaterialExpression
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: X
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput X => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionMakeMaterialAttributes:UMaterialExpression
	/// Size: 0x5E8
	/// Properties: 18
	/// </summary>
	public class UMaterialExpressionMakeMaterialAttributes:UMaterialExpression
	{
		public override int ObjectSize => 1512;
		/// <summary>
		/// Name: BaseColor
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput BaseColor => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: Metallic
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Metallic => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: Specular
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Specular => ReadStruct<FExpressionInput>(0xE0);
		
		/// <summary>
		/// Name: Roughness
		/// Type: StructProperty
		/// Offset: 0x118
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Roughness => ReadStruct<FExpressionInput>(0x118);
		
		/// <summary>
		/// Name: EmissiveColor
		/// Type: StructProperty
		/// Offset: 0x150
		/// Size: 0x38
		/// </summary>
		public FExpressionInput EmissiveColor => ReadStruct<FExpressionInput>(0x150);
		
		/// <summary>
		/// Name: Opacity
		/// Type: StructProperty
		/// Offset: 0x188
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Opacity => ReadStruct<FExpressionInput>(0x188);
		
		/// <summary>
		/// Name: OpacityMask
		/// Type: StructProperty
		/// Offset: 0x1C0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput OpacityMask => ReadStruct<FExpressionInput>(0x1C0);
		
		/// <summary>
		/// Name: Normal
		/// Type: StructProperty
		/// Offset: 0x1F8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Normal => ReadStruct<FExpressionInput>(0x1F8);
		
		/// <summary>
		/// Name: WorldPositionOffset
		/// Type: StructProperty
		/// Offset: 0x230
		/// Size: 0x38
		/// </summary>
		public FExpressionInput WorldPositionOffset => ReadStruct<FExpressionInput>(0x230);
		
		/// <summary>
		/// Name: WorldDisplacement
		/// Type: StructProperty
		/// Offset: 0x268
		/// Size: 0x38
		/// </summary>
		public FExpressionInput WorldDisplacement => ReadStruct<FExpressionInput>(0x268);
		
		/// <summary>
		/// Name: TessellationMultiplier
		/// Type: StructProperty
		/// Offset: 0x2A0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput TessellationMultiplier => ReadStruct<FExpressionInput>(0x2A0);
		
		/// <summary>
		/// Name: SubsurfaceColor
		/// Type: StructProperty
		/// Offset: 0x2D8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput SubsurfaceColor => ReadStruct<FExpressionInput>(0x2D8);
		
		/// <summary>
		/// Name: ClearCoat
		/// Type: StructProperty
		/// Offset: 0x310
		/// Size: 0x38
		/// </summary>
		public FExpressionInput ClearCoat => ReadStruct<FExpressionInput>(0x310);
		
		/// <summary>
		/// Name: ClearCoatRoughness
		/// Type: StructProperty
		/// Offset: 0x348
		/// Size: 0x38
		/// </summary>
		public FExpressionInput ClearCoatRoughness => ReadStruct<FExpressionInput>(0x348);
		
		/// <summary>
		/// Name: AmbientOcclusion
		/// Type: StructProperty
		/// Offset: 0x380
		/// Size: 0x38
		/// </summary>
		public FExpressionInput AmbientOcclusion => ReadStruct<FExpressionInput>(0x380);
		
		/// <summary>
		/// Name: Refraction
		/// Type: StructProperty
		/// Offset: 0x3B8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Refraction => ReadStruct<FExpressionInput>(0x3B8);
		
		/// <summary>
		/// Name: CustomizedUVs
		/// Type: StructProperty
		/// Offset: 0x3F0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput CustomizedUVs => ReadStruct<FExpressionInput>(0x3F0);
		
		/// <summary>
		/// Name: PixelDepthOffset
		/// Type: StructProperty
		/// Offset: 0x5B0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput PixelDepthOffset => ReadStruct<FExpressionInput>(0x5B0);
		
	}


	/// <summary>
	/// UMaterialExpressionMaterialFunctionCall:UMaterialExpression
	/// Size: 0x98
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionMaterialFunctionCall:UMaterialExpression
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: MaterialFunction
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public UMaterialFunction MaterialFunction => ReadUObject<UMaterialFunction>(0x70);
		
		/// <summary>
		/// Name: FunctionInputs
		/// Type: TArray<FFunctionExpressionInput>
		/// Offset: 0x78
		/// Size: 0x10
		/// SubElement Size: 0x50
		/// </summary>
		public TArray<FFunctionExpressionInput> FunctionInputs => new TArray<FFunctionExpressionInput>(BaseAddress+0x78);
		
		/// <summary>
		/// Name: FunctionOutputs
		/// Type: TArray<FFunctionExpressionOutput>
		/// Offset: 0x88
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FFunctionExpressionOutput> FunctionOutputs => new TArray<FFunctionExpressionOutput>(BaseAddress+0x88);
		
	}


	/// <summary>
	/// UMaterialExpressionMaterialProxyReplace:UMaterialExpression
	/// Size: 0xE0
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionMaterialProxyReplace:UMaterialExpression
	{
		public override int ObjectSize => 224;
		/// <summary>
		/// Name: Realtime
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Realtime => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: MaterialProxy
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput MaterialProxy => ReadStruct<FExpressionInput>(0xA8);
		
	}


	/// <summary>
	/// UMaterialExpressionMax:UMaterialExpression
	/// Size: 0xE8
	/// Properties: 4
	/// </summary>
	public class UMaterialExpressionMax:UMaterialExpression
	{
		public override int ObjectSize => 232;
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput B => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: ConstA
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float ConstA
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: ConstB
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float ConstB
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionMin:UMaterialExpression
	/// Size: 0xE8
	/// Properties: 4
	/// </summary>
	public class UMaterialExpressionMin:UMaterialExpression
	{
		public override int ObjectSize => 232;
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput B => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: ConstA
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float ConstA
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: ConstB
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float ConstB
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionMultiply:UMaterialExpression
	/// Size: 0xE8
	/// Properties: 4
	/// </summary>
	public class UMaterialExpressionMultiply:UMaterialExpression
	{
		public override int ObjectSize => 232;
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput B => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: ConstA
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float ConstA
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: ConstB
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float ConstB
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionNoise:UMaterialExpression
	/// Size: 0x100
	/// Properties: 10
	/// </summary>
	public class UMaterialExpressionNoise:UMaterialExpression
	{
		public override int ObjectSize => 256;
		/// <summary>
		/// Name: Position
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Position => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: FilterWidth
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput FilterWidth => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: Scale
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float Scale
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: quality
		/// Type: IntProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public int quality
		{
			get
			{
				return ReadInt32(0xE4);
			}
			set
			{
				WriteInt32(0xE4,value);
			}
		}
		
		/// <summary>
		/// Name: NoiseFunction
		/// Type: ByteProperty
		/// Offset: 0xE8
		/// Size: 0x01
		/// </summary>
		public byte NoiseFunction
		{
			get
			{
				return ReadByte(0xE8);
			}
			set
			{
				WriteByte(0xE8,value);
			}
		}
		
		/// <summary>
		/// Name: bTurbulence
		/// Type: BoolProperty
		/// Offset: 0xEC
		/// Size: 0x01
		/// </summary>
		public bool bTurbulence => (ReadByte(0x00EC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Levels
		/// Type: IntProperty
		/// Offset: 0xF0
		/// Size: 0x04
		/// </summary>
		public int Levels
		{
			get
			{
				return ReadInt32(0xF0);
			}
			set
			{
				WriteInt32(0xF0,value);
			}
		}
		
		/// <summary>
		/// Name: OutputMin
		/// Type: FloatProperty
		/// Offset: 0xF4
		/// Size: 0x04
		/// </summary>
		public float OutputMin
		{
			get
			{
				return ReadSingle(0xF4);
			}
			set
			{
				WriteSingle(0xF4,value);
			}
		}
		
		/// <summary>
		/// Name: OutputMax
		/// Type: FloatProperty
		/// Offset: 0xF8
		/// Size: 0x04
		/// </summary>
		public float OutputMax
		{
			get
			{
				return ReadSingle(0xF8);
			}
			set
			{
				WriteSingle(0xF8,value);
			}
		}
		
		/// <summary>
		/// Name: LevelScale
		/// Type: FloatProperty
		/// Offset: 0xFC
		/// Size: 0x04
		/// </summary>
		public float LevelScale
		{
			get
			{
				return ReadSingle(0xFC);
			}
			set
			{
				WriteSingle(0xFC,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionGraniteNoise:UMaterialExpressionNoise
	/// Size: 0x110
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionGraniteNoise:UMaterialExpressionNoise
	{
		public override int ObjectSize => 272;
		/// <summary>
		/// Name: VarZ
		/// Type: FloatProperty
		/// Offset: 0x100
		/// Size: 0x04
		/// </summary>
		public float VarZ
		{
			get
			{
				return ReadSingle(0x100);
			}
			set
			{
				WriteSingle(0x100,value);
			}
		}
		
		/// <summary>
		/// Name: UScale
		/// Type: IntProperty
		/// Offset: 0x104
		/// Size: 0x04
		/// </summary>
		public int UScale
		{
			get
			{
				return ReadInt32(0x104);
			}
			set
			{
				WriteInt32(0x104,value);
			}
		}
		
		/// <summary>
		/// Name: VScale
		/// Type: IntProperty
		/// Offset: 0x108
		/// Size: 0x04
		/// </summary>
		public int VScale
		{
			get
			{
				return ReadInt32(0x108);
			}
			set
			{
				WriteInt32(0x108,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionNormalize:UMaterialExpression
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionNormalize:UMaterialExpression
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: VectorInput
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput VectorInput => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionObjectBounds:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionObjectBounds:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionObjectOrientation:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionObjectOrientation:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionObjectPositionWS:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionObjectPositionWS:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionObjectRadius:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionObjectRadius:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionOneMinus:UMaterialExpression
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionOneMinus:UMaterialExpression
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionPanner:UMaterialExpression
	/// Size: 0xF0
	/// Properties: 6
	/// </summary>
	public class UMaterialExpressionPanner:UMaterialExpression
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: Coordinate
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Coordinate => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: Time
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Time => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: SpeedX
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float SpeedX
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: SpeedY
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float SpeedY
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
		/// <summary>
		/// Name: ConstCoordinate
		/// Type: UInt32Property
		/// Offset: 0xE8
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: bFractionalPart
		/// Type: BoolProperty
		/// Offset: 0xEC
		/// Size: 0x01
		/// </summary>
		public bool bFractionalPart
		{
			get
			{
				return ReadBool(0xEC);
			}
			set
			{
				WriteBool(0xEC,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionParameter:UMaterialExpression
	/// Size: 0x90
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionParameter:UMaterialExpression
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ExpressionGUID
		/// Type: StructProperty
		/// Offset: 0x78
		/// Size: 0x10
		/// </summary>
		public FGuid ExpressionGUID => ReadStruct<FGuid>(0x78);
		
		/// <summary>
		/// Name: Group
		/// Type: NameProperty
		/// Offset: 0x88
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UMaterialExpressionScalarParameter:UMaterialExpressionParameter
	/// Size: 0xA0
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionScalarParameter:UMaterialExpressionParameter
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: DefaultValue
		/// Type: FloatProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public float DefaultValue
		{
			get
			{
				return ReadSingle(0x90);
			}
			set
			{
				WriteSingle(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: SliderMin
		/// Type: FloatProperty
		/// Offset: 0x94
		/// Size: 0x04
		/// </summary>
		public float SliderMin
		{
			get
			{
				return ReadSingle(0x94);
			}
			set
			{
				WriteSingle(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: SliderMax
		/// Type: FloatProperty
		/// Offset: 0x98
		/// Size: 0x04
		/// </summary>
		public float SliderMax
		{
			get
			{
				return ReadSingle(0x98);
			}
			set
			{
				WriteSingle(0x98,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionStaticBoolParameter:UMaterialExpressionParameter
	/// Size: 0x98
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionStaticBoolParameter:UMaterialExpressionParameter
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: DefaultValue
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool DefaultValue => (ReadByte(0x0090) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UMaterialExpressionStaticSwitchParameter:UMaterialExpressionStaticBoolParameter
	/// Size: 0x108
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionStaticSwitchParameter:UMaterialExpressionStaticBoolParameter
	{
		public override int ObjectSize => 264;
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x98);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0xD0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput B => ReadStruct<FExpressionInput>(0xD0);
		
	}


	/// <summary>
	/// UMaterialExpressionStaticComponentMaskParameter:UMaterialExpressionParameter
	/// Size: 0xD0
	/// Properties: 5
	/// </summary>
	public class UMaterialExpressionStaticComponentMaskParameter:UMaterialExpressionParameter
	{
		public override int ObjectSize => 208;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x90);
		
		/// <summary>
		/// Name: DefaultR
		/// Type: BoolProperty
		/// Offset: 0xC8
		/// Size: 0x01
		/// </summary>
		public bool DefaultR => (ReadByte(0x00C8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: DefaultG
		/// Type: BoolProperty
		/// Offset: 0xC8
		/// Size: 0x01
		/// </summary>
		public bool DefaultG => (ReadByte(0x00C8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: DefaultB
		/// Type: BoolProperty
		/// Offset: 0xC8
		/// Size: 0x01
		/// </summary>
		public bool DefaultB => (ReadByte(0x00C8) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: DefaultA
		/// Type: BoolProperty
		/// Offset: 0xC8
		/// Size: 0x01
		/// </summary>
		public bool DefaultA => (ReadByte(0x00C8) & 0x08) == 0x08;
		
	}


	/// <summary>
	/// UMaterialExpressionVectorParameter:UMaterialExpressionParameter
	/// Size: 0xA0
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionVectorParameter:UMaterialExpressionParameter
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: DefaultValue
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x10
		/// </summary>
		public FLinearColor DefaultValue => ReadStruct<FLinearColor>(0x90);
		
	}


	/// <summary>
	/// UMaterialExpressionParticleColor:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionParticleColor:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionParticleDirection:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionParticleDirection:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionParticleMacroUV:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionParticleMacroUV:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionParticleMotionBlurFade:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionParticleMotionBlurFade:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionParticlePositionWS:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionParticlePositionWS:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionParticleRadius:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionParticleRadius:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionParticleRandom:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionParticleRandom:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionParticleRelativeTime:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionParticleRelativeTime:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionParticleSize:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionParticleSize:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionParticleSpeed:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionParticleSpeed:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionPerInstanceFadeAmount:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionPerInstanceFadeAmount:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionPerInstanceRandom:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionPerInstanceRandom:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionPixelDepth:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionPixelDepth:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionPixelNormalWS:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionPixelNormalWS:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionPower:UMaterialExpression
	/// Size: 0xE8
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionPower:UMaterialExpression
	{
		public override int ObjectSize => 232;
		/// <summary>
		/// Name: Base
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Base => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: Exponent
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Exponent => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: ConstExponent
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float ConstExponent
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionPrecomputedAOMask:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionPrecomputedAOMask:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionQualitySwitch:UMaterialExpression
	/// Size: 0x190
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionQualitySwitch:UMaterialExpression
	{
		public override int ObjectSize => 400;
		/// <summary>
		/// Name: Default
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Default => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: Inputs
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Inputs => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: XBoxOne
		/// Type: StructProperty
		/// Offset: 0x150
		/// Size: 0x38
		/// </summary>
		public FExpressionInput XBoxOne => ReadStruct<FExpressionInput>(0x150);
		
	}


	/// <summary>
	/// UMaterialExpressionReflectionVectorWS:UMaterialExpression
	/// Size: 0xB0
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionReflectionVectorWS:UMaterialExpression
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: CustomWorldNormal
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput CustomWorldNormal => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: bNormalizeCustomWorldNormal
		/// Type: BoolProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public bool bNormalizeCustomWorldNormal => (ReadByte(0x00A8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UMaterialExpressionRotateAboutAxis:UMaterialExpression
	/// Size: 0x158
	/// Properties: 5
	/// </summary>
	public class UMaterialExpressionRotateAboutAxis:UMaterialExpression
	{
		public override int ObjectSize => 344;
		/// <summary>
		/// Name: NormalizedRotationAxis
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput NormalizedRotationAxis => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: RotationAngle
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput RotationAngle => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: PivotPoint
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput PivotPoint => ReadStruct<FExpressionInput>(0xE0);
		
		/// <summary>
		/// Name: Position
		/// Type: StructProperty
		/// Offset: 0x118
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Position => ReadStruct<FExpressionInput>(0x118);
		
		/// <summary>
		/// Name: Period
		/// Type: FloatProperty
		/// Offset: 0x150
		/// Size: 0x04
		/// </summary>
		public float Period
		{
			get
			{
				return ReadSingle(0x150);
			}
			set
			{
				WriteSingle(0x150,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionRotator:UMaterialExpression
	/// Size: 0xF0
	/// Properties: 6
	/// </summary>
	public class UMaterialExpressionRotator:UMaterialExpression
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: Coordinate
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Coordinate => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: Time
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Time => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: CenterX
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float CenterX
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: CenterY
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float CenterY
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
		/// <summary>
		/// Name: Speed
		/// Type: FloatProperty
		/// Offset: 0xE8
		/// Size: 0x04
		/// </summary>
		public float Speed
		{
			get
			{
				return ReadSingle(0xE8);
			}
			set
			{
				WriteSingle(0xE8,value);
			}
		}
		
		/// <summary>
		/// Name: ConstCoordinate
		/// Type: UInt32Property
		/// Offset: 0xEC
		/// Size: 0x04
		/// </summary>
		
	}


	/// <summary>
	/// UMaterialExpressionSceneColor:UMaterialExpression
	/// Size: 0xF0
	/// Properties: 4
	/// </summary>
	public class UMaterialExpressionSceneColor:UMaterialExpression
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: InputMode
		/// Type: ByteProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public byte InputMode
		{
			get
			{
				return ReadByte(0x70);
			}
			set
			{
				WriteByte(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x78
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x78);
		
		/// <summary>
		/// Name: OffsetFraction
		/// Type: StructProperty
		/// Offset: 0xB0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput OffsetFraction => ReadStruct<FExpressionInput>(0xB0);
		
		/// <summary>
		/// Name: ConstInput
		/// Type: StructProperty
		/// Offset: 0xE8
		/// Size: 0x08
		/// </summary>
		public FVector2D ConstInput => ReadStruct<FVector2D>(0xE8);
		
	}


	/// <summary>
	/// UMaterialExpressionSceneDepth:UMaterialExpression
	/// Size: 0xF0
	/// Properties: 4
	/// </summary>
	public class UMaterialExpressionSceneDepth:UMaterialExpression
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: InputMode
		/// Type: ByteProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public byte InputMode
		{
			get
			{
				return ReadByte(0x70);
			}
			set
			{
				WriteByte(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x78
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x78);
		
		/// <summary>
		/// Name: Coordinates
		/// Type: StructProperty
		/// Offset: 0xB0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Coordinates => ReadStruct<FExpressionInput>(0xB0);
		
		/// <summary>
		/// Name: ConstInput
		/// Type: StructProperty
		/// Offset: 0xE8
		/// Size: 0x08
		/// </summary>
		public FVector2D ConstInput => ReadStruct<FVector2D>(0xE8);
		
	}


	/// <summary>
	/// UMaterialExpressionSceneTexelSize:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionSceneTexelSize:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionSceneTexture:UMaterialExpression
	/// Size: 0xB0
	/// Properties: 4
	/// </summary>
	public class UMaterialExpressionSceneTexture:UMaterialExpression
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: Coordinates
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Coordinates => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: SceneTextureId
		/// Type: ByteProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public byte SceneTextureId
		{
			get
			{
				return ReadByte(0xA8);
			}
			set
			{
				WriteByte(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: bClampUVs
		/// Type: BoolProperty
		/// Offset: 0xA9
		/// Size: 0x01
		/// </summary>
		public bool bClampUVs
		{
			get
			{
				return ReadBool(0xA9);
			}
			set
			{
				WriteBool(0xA9,value);
			}
		}
		
		/// <summary>
		/// Name: bFiltered
		/// Type: BoolProperty
		/// Offset: 0xAA
		/// Size: 0x01
		/// </summary>
		public bool bFiltered
		{
			get
			{
				return ReadBool(0xAA);
			}
			set
			{
				WriteBool(0xAA,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionScreenPosition:UMaterialExpression
	/// Size: 0x78
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionScreenPosition:UMaterialExpression
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: Mapping
		/// Type: ByteProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public byte Mapping
		{
			get
			{
				return ReadByte(0x70);
			}
			set
			{
				WriteByte(0x70,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionSine:UMaterialExpression
	/// Size: 0xB0
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionSine:UMaterialExpression
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: Period
		/// Type: FloatProperty
		/// Offset: 0xA8
		/// Size: 0x04
		/// </summary>
		public float Period
		{
			get
			{
				return ReadSingle(0xA8);
			}
			set
			{
				WriteSingle(0xA8,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionSpeedTree:UMaterialExpression
	/// Size: 0x80
	/// Properties: 5
	/// </summary>
	public class UMaterialExpressionSpeedTree:UMaterialExpression
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: GeometryType
		/// Type: ByteProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public byte GeometryType
		{
			get
			{
				return ReadByte(0x70);
			}
			set
			{
				WriteByte(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: WindType
		/// Type: ByteProperty
		/// Offset: 0x71
		/// Size: 0x01
		/// </summary>
		public byte WindType
		{
			get
			{
				return ReadByte(0x71);
			}
			set
			{
				WriteByte(0x71,value);
			}
		}
		
		/// <summary>
		/// Name: LODType
		/// Type: ByteProperty
		/// Offset: 0x72
		/// Size: 0x01
		/// </summary>
		public byte LODType
		{
			get
			{
				return ReadByte(0x72);
			}
			set
			{
				WriteByte(0x72,value);
			}
		}
		
		/// <summary>
		/// Name: BillboardThreshold
		/// Type: FloatProperty
		/// Offset: 0x74
		/// Size: 0x04
		/// </summary>
		public float BillboardThreshold
		{
			get
			{
				return ReadSingle(0x74);
			}
			set
			{
				WriteSingle(0x74,value);
			}
		}
		
		/// <summary>
		/// Name: bAccurateWindVelocities
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bAccurateWindVelocities
		{
			get
			{
				return ReadBool(0x78);
			}
			set
			{
				WriteBool(0x78,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionSphereMask:UMaterialExpression
	/// Size: 0x158
	/// Properties: 6
	/// </summary>
	public class UMaterialExpressionSphereMask:UMaterialExpression
	{
		public override int ObjectSize => 344;
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput B => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: Radius
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Radius => ReadStruct<FExpressionInput>(0xE0);
		
		/// <summary>
		/// Name: Hardness
		/// Type: StructProperty
		/// Offset: 0x118
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Hardness => ReadStruct<FExpressionInput>(0x118);
		
		/// <summary>
		/// Name: AttenuationRadius
		/// Type: FloatProperty
		/// Offset: 0x150
		/// Size: 0x04
		/// </summary>
		public float AttenuationRadius
		{
			get
			{
				return ReadSingle(0x150);
			}
			set
			{
				WriteSingle(0x150,value);
			}
		}
		
		/// <summary>
		/// Name: HardnessPercent
		/// Type: FloatProperty
		/// Offset: 0x154
		/// Size: 0x04
		/// </summary>
		public float HardnessPercent
		{
			get
			{
				return ReadSingle(0x154);
			}
			set
			{
				WriteSingle(0x154,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionSphericalParticleOpacity:UMaterialExpression
	/// Size: 0xB0
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionSphericalParticleOpacity:UMaterialExpression
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: Density
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Density => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: ConstantDensity
		/// Type: FloatProperty
		/// Offset: 0xA8
		/// Size: 0x04
		/// </summary>
		public float ConstantDensity
		{
			get
			{
				return ReadSingle(0xA8);
			}
			set
			{
				WriteSingle(0xA8,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionSquareRoot:UMaterialExpression
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionSquareRoot:UMaterialExpression
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x70);
		
	}


	/// <summary>
	/// UMaterialExpressionStaticBool:UMaterialExpression
	/// Size: 0x78
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionStaticBool:UMaterialExpression
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: Value
		/// Type: BoolProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public bool Value => (ReadByte(0x0070) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UMaterialExpressionStaticSwitch:UMaterialExpression
	/// Size: 0x120
	/// Properties: 4
	/// </summary>
	public class UMaterialExpressionStaticSwitch:UMaterialExpression
	{
		public override int ObjectSize => 288;
		/// <summary>
		/// Name: DefaultValue
		/// Type: BoolProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public bool DefaultValue => (ReadByte(0x0070) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x78
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x78);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0xB0
		/// Size: 0x38
		/// </summary>
		public FExpressionInput B => ReadStruct<FExpressionInput>(0xB0);
		
		/// <summary>
		/// Name: Value
		/// Type: StructProperty
		/// Offset: 0xE8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Value => ReadStruct<FExpressionInput>(0xE8);
		
	}


	/// <summary>
	/// UMaterialExpressionSubtract:UMaterialExpression
	/// Size: 0xE8
	/// Properties: 4
	/// </summary>
	public class UMaterialExpressionSubtract:UMaterialExpression
	{
		public override int ObjectSize => 232;
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput A => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x38
		/// </summary>
		public FExpressionInput B => ReadStruct<FExpressionInput>(0xA8);
		
		/// <summary>
		/// Name: ConstA
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float ConstA
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: ConstB
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float ConstB
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionTextureObject:UMaterialExpressionTextureBase
	/// Size: 0x80
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionTextureObject:UMaterialExpressionTextureBase
	{
		public override int ObjectSize => 128;
	}


	/// <summary>
	/// UMaterialExpressionParticleSubUV:UMaterialExpressionTextureSample
	/// Size: 0x1B0
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionParticleSubUV:UMaterialExpressionTextureSample
	{
		public override int ObjectSize => 432;
		/// <summary>
		/// Name: bBlend
		/// Type: BoolProperty
		/// Offset: 0x1A8
		/// Size: 0x01
		/// </summary>
		public bool bBlend => (ReadByte(0x01A8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UMaterialExpressionTextureSampleParameter:UMaterialExpressionTextureSample
	/// Size: 0x1C8
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionTextureSampleParameter:UMaterialExpressionTextureSample
	{
		public override int ObjectSize => 456;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x1A8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ExpressionGUID
		/// Type: StructProperty
		/// Offset: 0x1B0
		/// Size: 0x10
		/// </summary>
		public FGuid ExpressionGUID => ReadStruct<FGuid>(0x1B0);
		
		/// <summary>
		/// Name: Group
		/// Type: NameProperty
		/// Offset: 0x1C0
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UMaterialExpressionTextureObjectParameter:UMaterialExpressionTextureSampleParameter
	/// Size: 0x1C8
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionTextureObjectParameter:UMaterialExpressionTextureSampleParameter
	{
		public override int ObjectSize => 456;
	}


	/// <summary>
	/// UMaterialExpressionTextureSampleParameter2D:UMaterialExpressionTextureSampleParameter
	/// Size: 0x1C8
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionTextureSampleParameter2D:UMaterialExpressionTextureSampleParameter
	{
		public override int ObjectSize => 456;
	}


	/// <summary>
	/// UMaterialExpressionAntialiasedTextureMask:UMaterialExpressionTextureSampleParameter2D
	/// Size: 0x1D0
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionAntialiasedTextureMask:UMaterialExpressionTextureSampleParameter2D
	{
		public override int ObjectSize => 464;
		/// <summary>
		/// Name: Threshold
		/// Type: FloatProperty
		/// Offset: 0x1C8
		/// Size: 0x04
		/// </summary>
		public float Threshold
		{
			get
			{
				return ReadSingle(0x1C8);
			}
			set
			{
				WriteSingle(0x1C8,value);
			}
		}
		
		/// <summary>
		/// Name: Channel
		/// Type: ByteProperty
		/// Offset: 0x1CC
		/// Size: 0x01
		/// </summary>
		public byte Channel
		{
			get
			{
				return ReadByte(0x1CC);
			}
			set
			{
				WriteByte(0x1CC,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionTextureSampleParameterSubUV:UMaterialExpressionTextureSampleParameter2D
	/// Size: 0x1D0
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionTextureSampleParameterSubUV:UMaterialExpressionTextureSampleParameter2D
	{
		public override int ObjectSize => 464;
		/// <summary>
		/// Name: bBlend
		/// Type: BoolProperty
		/// Offset: 0x1C8
		/// Size: 0x01
		/// </summary>
		public bool bBlend => (ReadByte(0x01C8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UMaterialExpressionTextureSampleParameterCube:UMaterialExpressionTextureSampleParameter
	/// Size: 0x1C8
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionTextureSampleParameterCube:UMaterialExpressionTextureSampleParameter
	{
		public override int ObjectSize => 456;
	}


	/// <summary>
	/// UMaterialExpressionTextureCoordinate:UMaterialExpression
	/// Size: 0x80
	/// Properties: 5
	/// </summary>
	public class UMaterialExpressionTextureCoordinate:UMaterialExpression
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: CoordinateIndex
		/// Type: IntProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public int CoordinateIndex
		{
			get
			{
				return ReadInt32(0x70);
			}
			set
			{
				WriteInt32(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: UTiling
		/// Type: FloatProperty
		/// Offset: 0x74
		/// Size: 0x04
		/// </summary>
		public float UTiling
		{
			get
			{
				return ReadSingle(0x74);
			}
			set
			{
				WriteSingle(0x74,value);
			}
		}
		
		/// <summary>
		/// Name: VTiling
		/// Type: FloatProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public float VTiling
		{
			get
			{
				return ReadSingle(0x78);
			}
			set
			{
				WriteSingle(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: UnMirrorU
		/// Type: BoolProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public bool UnMirrorU => (ReadByte(0x007C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: UnMirrorV
		/// Type: BoolProperty
		/// Offset: 0x7C
		/// Size: 0x01
		/// </summary>
		public bool UnMirrorV => (ReadByte(0x007C) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// UMaterialExpressionTextureProperty:UMaterialExpression
	/// Size: 0xB0
	/// Properties: 2
	/// </summary>
	public class UMaterialExpressionTextureProperty:UMaterialExpression
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: TextureObject
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput TextureObject => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: Property
		/// Type: ByteProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public byte Property
		{
			get
			{
				return ReadByte(0xA8);
			}
			set
			{
				WriteByte(0xA8,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionTime:UMaterialExpression
	/// Size: 0x78
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionTime:UMaterialExpression
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: bIgnorePause
		/// Type: BoolProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public bool bIgnorePause => (ReadByte(0x0070) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_Period
		/// Type: BoolProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public bool bOverride_Period => (ReadByte(0x0070) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: Period
		/// Type: FloatProperty
		/// Offset: 0x74
		/// Size: 0x04
		/// </summary>
		public float Period
		{
			get
			{
				return ReadSingle(0x74);
			}
			set
			{
				WriteSingle(0x74,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionTransform:UMaterialExpression
	/// Size: 0xB0
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionTransform:UMaterialExpression
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: TransformSourceType
		/// Type: ByteProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public byte TransformSourceType
		{
			get
			{
				return ReadByte(0xA8);
			}
			set
			{
				WriteByte(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: TransformType
		/// Type: ByteProperty
		/// Offset: 0xA9
		/// Size: 0x01
		/// </summary>
		public byte TransformType
		{
			get
			{
				return ReadByte(0xA9);
			}
			set
			{
				WriteByte(0xA9,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionTransformPosition:UMaterialExpression
	/// Size: 0xB0
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionTransformPosition:UMaterialExpression
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x70);
		
		/// <summary>
		/// Name: TransformSourceType
		/// Type: ByteProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public byte TransformSourceType
		{
			get
			{
				return ReadByte(0xA8);
			}
			set
			{
				WriteByte(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: TransformType
		/// Type: ByteProperty
		/// Offset: 0xA9
		/// Size: 0x01
		/// </summary>
		public byte TransformType
		{
			get
			{
				return ReadByte(0xA9);
			}
			set
			{
				WriteByte(0xA9,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionTwoSidedSign:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionTwoSidedSign:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionVertexColor:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionVertexColor:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionVertexNormalWS:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionVertexNormalWS:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionViewProperty:UMaterialExpression
	/// Size: 0x78
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionViewProperty:UMaterialExpression
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: Property
		/// Type: ByteProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public byte Property
		{
			get
			{
				return ReadByte(0x70);
			}
			set
			{
				WriteByte(0x70,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialExpressionViewSize:UMaterialExpression
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class UMaterialExpressionViewSize:UMaterialExpression
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// UMaterialExpressionWorldPosition:UMaterialExpression
	/// Size: 0x78
	/// Properties: 1
	/// </summary>
	public class UMaterialExpressionWorldPosition:UMaterialExpression
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: WorldPositionShaderOffset
		/// Type: ByteProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public byte WorldPositionShaderOffset
		{
			get
			{
				return ReadByte(0x70);
			}
			set
			{
				WriteByte(0x70,value);
			}
		}
		
	}


	/// <summary>
	/// UMaterialFunction:UObject
	/// Size: 0x68
	/// Properties: 5
	/// </summary>
	public class UMaterialFunction:UObject
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: StateId
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FGuid StateId => ReadStruct<FGuid>(0x28);
		
		/// <summary>
		/// Name: Description
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString Description => new FString(BaseAddress+0x38);
		
		/// <summary>
		/// Name: bExposeToLibrary
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool bExposeToLibrary => (ReadByte(0x0048) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: FunctionExpressions
		/// Type: TArray<UMaterialExpression>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x70
		/// </summary>
		public TArray<UMaterialExpression> FunctionExpressions => new TArray<UMaterialExpression>(BaseAddress+0x50);
		
		/// <summary>
		/// Name: bReentrantFlag
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bReentrantFlag => (ReadByte(0x0060) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UMaterial:UMaterialInterface
	/// Size: 0x980
	/// Properties: 96
	/// </summary>
	public class UMaterial:UMaterialInterface
	{
		public override int ObjectSize => 2432;
		/// <summary>
		/// Name: PhysMaterial
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UPhysicalMaterial PhysMaterial => ReadUObject<UPhysicalMaterial>(0x58);
		
		/// <summary>
		/// Name: DiffuseColor
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x40
		/// </summary>
		public FColorMaterialInput DiffuseColor => ReadStruct<FColorMaterialInput>(0x60);
		
		/// <summary>
		/// Name: SpecularColor
		/// Type: StructProperty
		/// Offset: 0xA0
		/// Size: 0x40
		/// </summary>
		public FColorMaterialInput SpecularColor => ReadStruct<FColorMaterialInput>(0xA0);
		
		/// <summary>
		/// Name: BaseColor
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x40
		/// </summary>
		public FColorMaterialInput BaseColor => ReadStruct<FColorMaterialInput>(0xE0);
		
		/// <summary>
		/// Name: Metallic
		/// Type: StructProperty
		/// Offset: 0x120
		/// Size: 0x40
		/// </summary>
		public FScalarMaterialInput Metallic => ReadStruct<FScalarMaterialInput>(0x120);
		
		/// <summary>
		/// Name: Specular
		/// Type: StructProperty
		/// Offset: 0x160
		/// Size: 0x40
		/// </summary>
		public FScalarMaterialInput Specular => ReadStruct<FScalarMaterialInput>(0x160);
		
		/// <summary>
		/// Name: Roughness
		/// Type: StructProperty
		/// Offset: 0x1A0
		/// Size: 0x40
		/// </summary>
		public FScalarMaterialInput Roughness => ReadStruct<FScalarMaterialInput>(0x1A0);
		
		/// <summary>
		/// Name: Normal
		/// Type: StructProperty
		/// Offset: 0x1E0
		/// Size: 0x48
		/// </summary>
		public FVectorMaterialInput Normal => ReadStruct<FVectorMaterialInput>(0x1E0);
		
		/// <summary>
		/// Name: EmissiveColor
		/// Type: StructProperty
		/// Offset: 0x228
		/// Size: 0x40
		/// </summary>
		public FColorMaterialInput EmissiveColor => ReadStruct<FColorMaterialInput>(0x228);
		
		/// <summary>
		/// Name: Opacity
		/// Type: StructProperty
		/// Offset: 0x268
		/// Size: 0x40
		/// </summary>
		public FScalarMaterialInput Opacity => ReadStruct<FScalarMaterialInput>(0x268);
		
		/// <summary>
		/// Name: OpacityMask
		/// Type: StructProperty
		/// Offset: 0x2A8
		/// Size: 0x40
		/// </summary>
		public FScalarMaterialInput OpacityMask => ReadStruct<FScalarMaterialInput>(0x2A8);
		
		/// <summary>
		/// Name: MaterialDomain
		/// Type: ByteProperty
		/// Offset: 0x2E8
		/// Size: 0x01
		/// </summary>
		public byte MaterialDomain
		{
			get
			{
				return ReadByte(0x2E8);
			}
			set
			{
				WriteByte(0x2E8,value);
			}
		}
		
		/// <summary>
		/// Name: BlendMode
		/// Type: ByteProperty
		/// Offset: 0x2E9
		/// Size: 0x01
		/// </summary>
		public byte BlendMode
		{
			get
			{
				return ReadByte(0x2E9);
			}
			set
			{
				WriteByte(0x2E9,value);
			}
		}
		
		/// <summary>
		/// Name: DecalBlendMode
		/// Type: ByteProperty
		/// Offset: 0x2EA
		/// Size: 0x01
		/// </summary>
		public byte DecalBlendMode
		{
			get
			{
				return ReadByte(0x2EA);
			}
			set
			{
				WriteByte(0x2EA,value);
			}
		}
		
		/// <summary>
		/// Name: MaterialDecalResponse
		/// Type: ByteProperty
		/// Offset: 0x2EB
		/// Size: 0x01
		/// </summary>
		public byte MaterialDecalResponse
		{
			get
			{
				return ReadByte(0x2EB);
			}
			set
			{
				WriteByte(0x2EB,value);
			}
		}
		
		/// <summary>
		/// Name: ShadingModel
		/// Type: ByteProperty
		/// Offset: 0x2EC
		/// Size: 0x01
		/// </summary>
		public byte ShadingModel
		{
			get
			{
				return ReadByte(0x2EC);
			}
			set
			{
				WriteByte(0x2EC,value);
			}
		}
		
		/// <summary>
		/// Name: OpacityMaskClipValue
		/// Type: FloatProperty
		/// Offset: 0x2F0
		/// Size: 0x04
		/// </summary>
		public float OpacityMaskClipValue
		{
			get
			{
				return ReadSingle(0x2F0);
			}
			set
			{
				WriteSingle(0x2F0,value);
			}
		}
		
		/// <summary>
		/// Name: WorldPositionOffset
		/// Type: StructProperty
		/// Offset: 0x2F8
		/// Size: 0x48
		/// </summary>
		public FVectorMaterialInput WorldPositionOffset => ReadStruct<FVectorMaterialInput>(0x2F8);
		
		/// <summary>
		/// Name: WorldDisplacement
		/// Type: StructProperty
		/// Offset: 0x340
		/// Size: 0x48
		/// </summary>
		public FVectorMaterialInput WorldDisplacement => ReadStruct<FVectorMaterialInput>(0x340);
		
		/// <summary>
		/// Name: TessellationMultiplier
		/// Type: StructProperty
		/// Offset: 0x388
		/// Size: 0x40
		/// </summary>
		public FScalarMaterialInput TessellationMultiplier => ReadStruct<FScalarMaterialInput>(0x388);
		
		/// <summary>
		/// Name: SubsurfaceColor
		/// Type: StructProperty
		/// Offset: 0x3C8
		/// Size: 0x40
		/// </summary>
		public FColorMaterialInput SubsurfaceColor => ReadStruct<FColorMaterialInput>(0x3C8);
		
		/// <summary>
		/// Name: ClearCoat
		/// Type: StructProperty
		/// Offset: 0x408
		/// Size: 0x40
		/// </summary>
		public FScalarMaterialInput ClearCoat => ReadStruct<FScalarMaterialInput>(0x408);
		
		/// <summary>
		/// Name: ClearCoatRoughness
		/// Type: StructProperty
		/// Offset: 0x448
		/// Size: 0x40
		/// </summary>
		public FScalarMaterialInput ClearCoatRoughness => ReadStruct<FScalarMaterialInput>(0x448);
		
		/// <summary>
		/// Name: AmbientOcclusion
		/// Type: StructProperty
		/// Offset: 0x488
		/// Size: 0x40
		/// </summary>
		public FScalarMaterialInput AmbientOcclusion => ReadStruct<FScalarMaterialInput>(0x488);
		
		/// <summary>
		/// Name: Refraction
		/// Type: StructProperty
		/// Offset: 0x4C8
		/// Size: 0x40
		/// </summary>
		public FScalarMaterialInput Refraction => ReadStruct<FScalarMaterialInput>(0x4C8);
		
		/// <summary>
		/// Name: CustomizedUVs
		/// Type: StructProperty
		/// Offset: 0x508
		/// Size: 0x48
		/// </summary>
		public FVector2MaterialInput CustomizedUVs => ReadStruct<FVector2MaterialInput>(0x508);
		
		/// <summary>
		/// Name: MaterialAttributes
		/// Type: StructProperty
		/// Offset: 0x748
		/// Size: 0x40
		/// </summary>
		public FMaterialAttributesInput MaterialAttributes => ReadStruct<FMaterialAttributesInput>(0x748);
		
		/// <summary>
		/// Name: PixelDepthOffset
		/// Type: StructProperty
		/// Offset: 0x788
		/// Size: 0x40
		/// </summary>
		public FScalarMaterialInput PixelDepthOffset => ReadStruct<FScalarMaterialInput>(0x788);
		
		/// <summary>
		/// Name: bEnableSeparateTranslucency
		/// Type: BoolProperty
		/// Offset: 0x7C8
		/// Size: 0x01
		/// </summary>
		public bool bEnableSeparateTranslucency => (ReadByte(0x07C8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bEnableMobileSeparateTranslucency
		/// Type: BoolProperty
		/// Offset: 0x7C8
		/// Size: 0x01
		/// </summary>
		public bool bEnableMobileSeparateTranslucency => (ReadByte(0x07C8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bEnableResponsiveAA
		/// Type: BoolProperty
		/// Offset: 0x7C8
		/// Size: 0x01
		/// </summary>
		public bool bEnableResponsiveAA => (ReadByte(0x07C8) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bScreenSpaceReflections
		/// Type: BoolProperty
		/// Offset: 0x7C8
		/// Size: 0x01
		/// </summary>
		public bool bScreenSpaceReflections => (ReadByte(0x07C8) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: TwoSided
		/// Type: BoolProperty
		/// Offset: 0x7C8
		/// Size: 0x01
		/// </summary>
		public bool TwoSided => (ReadByte(0x07C8) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: DitheredLODTransition
		/// Type: BoolProperty
		/// Offset: 0x7C8
		/// Size: 0x01
		/// </summary>
		public bool DitheredLODTransition => (ReadByte(0x07C8) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: DitherOpacityMask
		/// Type: BoolProperty
		/// Offset: 0x7C8
		/// Size: 0x01
		/// </summary>
		public bool DitherOpacityMask => (ReadByte(0x07C8) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: NumCustomizedUVs
		/// Type: IntProperty
		/// Offset: 0x7CC
		/// Size: 0x04
		/// </summary>
		public int NumCustomizedUVs
		{
			get
			{
				return ReadInt32(0x7CC);
			}
			set
			{
				WriteInt32(0x7CC,value);
			}
		}
		
		/// <summary>
		/// Name: TranslucencyLightingMode
		/// Type: ByteProperty
		/// Offset: 0x7D0
		/// Size: 0x01
		/// </summary>
		public byte TranslucencyLightingMode
		{
			get
			{
				return ReadByte(0x7D0);
			}
			set
			{
				WriteByte(0x7D0,value);
			}
		}
		
		/// <summary>
		/// Name: TranslucencyDirectionalLightingIntensity
		/// Type: FloatProperty
		/// Offset: 0x7D4
		/// Size: 0x04
		/// </summary>
		public float TranslucencyDirectionalLightingIntensity
		{
			get
			{
				return ReadSingle(0x7D4);
			}
			set
			{
				WriteSingle(0x7D4,value);
			}
		}
		
		/// <summary>
		/// Name: TranslucentShadowDensityScale
		/// Type: FloatProperty
		/// Offset: 0x7D8
		/// Size: 0x04
		/// </summary>
		public float TranslucentShadowDensityScale
		{
			get
			{
				return ReadSingle(0x7D8);
			}
			set
			{
				WriteSingle(0x7D8,value);
			}
		}
		
		/// <summary>
		/// Name: TranslucentSelfShadowDensityScale
		/// Type: FloatProperty
		/// Offset: 0x7DC
		/// Size: 0x04
		/// </summary>
		public float TranslucentSelfShadowDensityScale
		{
			get
			{
				return ReadSingle(0x7DC);
			}
			set
			{
				WriteSingle(0x7DC,value);
			}
		}
		
		/// <summary>
		/// Name: TranslucentSelfShadowSecondDensityScale
		/// Type: FloatProperty
		/// Offset: 0x7E0
		/// Size: 0x04
		/// </summary>
		public float TranslucentSelfShadowSecondDensityScale
		{
			get
			{
				return ReadSingle(0x7E0);
			}
			set
			{
				WriteSingle(0x7E0,value);
			}
		}
		
		/// <summary>
		/// Name: TranslucentSelfShadowSecondOpacity
		/// Type: FloatProperty
		/// Offset: 0x7E4
		/// Size: 0x04
		/// </summary>
		public float TranslucentSelfShadowSecondOpacity
		{
			get
			{
				return ReadSingle(0x7E4);
			}
			set
			{
				WriteSingle(0x7E4,value);
			}
		}
		
		/// <summary>
		/// Name: TranslucentBackscatteringExponent
		/// Type: FloatProperty
		/// Offset: 0x7E8
		/// Size: 0x04
		/// </summary>
		public float TranslucentBackscatteringExponent
		{
			get
			{
				return ReadSingle(0x7E8);
			}
			set
			{
				WriteSingle(0x7E8,value);
			}
		}
		
		/// <summary>
		/// Name: TranslucentMultipleScatteringExtinction
		/// Type: StructProperty
		/// Offset: 0x7EC
		/// Size: 0x10
		/// </summary>
		public FLinearColor TranslucentMultipleScatteringExtinction => ReadStruct<FLinearColor>(0x7EC);
		
		/// <summary>
		/// Name: TranslucentShadowStartOffset
		/// Type: FloatProperty
		/// Offset: 0x7FC
		/// Size: 0x04
		/// </summary>
		public float TranslucentShadowStartOffset
		{
			get
			{
				return ReadSingle(0x7FC);
			}
			set
			{
				WriteSingle(0x7FC,value);
			}
		}
		
		/// <summary>
		/// Name: bDisableDepthTest
		/// Type: BoolProperty
		/// Offset: 0x800
		/// Size: 0x01
		/// </summary>
		public bool bDisableDepthTest => (ReadByte(0x0800) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bGenerateSphericalParticleNormals
		/// Type: BoolProperty
		/// Offset: 0x800
		/// Size: 0x01
		/// </summary>
		public bool bGenerateSphericalParticleNormals => (ReadByte(0x0800) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bTangentSpaceNormal
		/// Type: BoolProperty
		/// Offset: 0x800
		/// Size: 0x01
		/// </summary>
		public bool bTangentSpaceNormal => (ReadByte(0x0800) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bUseEmissiveForDynamicAreaLighting
		/// Type: BoolProperty
		/// Offset: 0x800
		/// Size: 0x01
		/// </summary>
		public bool bUseEmissiveForDynamicAreaLighting => (ReadByte(0x0800) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bBlockGI
		/// Type: BoolProperty
		/// Offset: 0x800
		/// Size: 0x01
		/// </summary>
		public bool bBlockGI => (ReadByte(0x0800) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bUsedAsSpecialEngineMaterial
		/// Type: BoolProperty
		/// Offset: 0x800
		/// Size: 0x01
		/// </summary>
		public bool bUsedAsSpecialEngineMaterial => (ReadByte(0x0800) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bUsedWithSkeletalMesh
		/// Type: BoolProperty
		/// Offset: 0x800
		/// Size: 0x01
		/// </summary>
		public bool bUsedWithSkeletalMesh => (ReadByte(0x0800) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bUsedWithEditorCompositing
		/// Type: BoolProperty
		/// Offset: 0x800
		/// Size: 0x01
		/// </summary>
		public bool bUsedWithEditorCompositing => (ReadByte(0x0800) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bUsedWithLandscape
		/// Type: BoolProperty
		/// Offset: 0x801
		/// Size: 0x01
		/// </summary>
		public bool bUsedWithLandscape => (ReadByte(0x0801) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUsedWithParticleSprites
		/// Type: BoolProperty
		/// Offset: 0x801
		/// Size: 0x01
		/// </summary>
		public bool bUsedWithParticleSprites => (ReadByte(0x0801) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bUsedWithBeamTrails
		/// Type: BoolProperty
		/// Offset: 0x801
		/// Size: 0x01
		/// </summary>
		public bool bUsedWithBeamTrails => (ReadByte(0x0801) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bUsedWithMeshParticles
		/// Type: BoolProperty
		/// Offset: 0x801
		/// Size: 0x01
		/// </summary>
		public bool bUsedWithMeshParticles => (ReadByte(0x0801) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bUsedWithStaticLighting
		/// Type: BoolProperty
		/// Offset: 0x801
		/// Size: 0x01
		/// </summary>
		public bool bUsedWithStaticLighting => (ReadByte(0x0801) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bUsedWithMorphTargets
		/// Type: BoolProperty
		/// Offset: 0x801
		/// Size: 0x01
		/// </summary>
		public bool bUsedWithMorphTargets => (ReadByte(0x0801) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bUsedWithSplineMeshes
		/// Type: BoolProperty
		/// Offset: 0x801
		/// Size: 0x01
		/// </summary>
		public bool bUsedWithSplineMeshes => (ReadByte(0x0801) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bUsedWithInstancedStaticMeshes
		/// Type: BoolProperty
		/// Offset: 0x801
		/// Size: 0x01
		/// </summary>
		public bool bUsedWithInstancedStaticMeshes => (ReadByte(0x0801) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bUsesDistortion
		/// Type: BoolProperty
		/// Offset: 0x802
		/// Size: 0x01
		/// </summary>
		public bool bUsesDistortion => (ReadByte(0x0802) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUsedWithClothing
		/// Type: BoolProperty
		/// Offset: 0x802
		/// Size: 0x01
		/// </summary>
		public bool bUsedWithClothing => (ReadByte(0x0802) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bUsedWithUI
		/// Type: BoolProperty
		/// Offset: 0x802
		/// Size: 0x01
		/// </summary>
		public bool bUsedWithUI => (ReadByte(0x0802) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bAutomaticallySetUsageInEditor
		/// Type: BoolProperty
		/// Offset: 0x802
		/// Size: 0x01
		/// </summary>
		public bool bAutomaticallySetUsageInEditor => (ReadByte(0x0802) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bFullyRough
		/// Type: BoolProperty
		/// Offset: 0x802
		/// Size: 0x01
		/// </summary>
		public bool bFullyRough => (ReadByte(0x0802) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bUseLightmapDirectionality
		/// Type: BoolProperty
		/// Offset: 0x802
		/// Size: 0x01
		/// </summary>
		public bool bUseLightmapDirectionality => (ReadByte(0x0802) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bUseHQForwardReflections
		/// Type: BoolProperty
		/// Offset: 0x802
		/// Size: 0x01
		/// </summary>
		public bool bUseHQForwardReflections => (ReadByte(0x0802) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bUsePlanarForwardReflections
		/// Type: BoolProperty
		/// Offset: 0x802
		/// Size: 0x01
		/// </summary>
		public bool bUsePlanarForwardReflections => (ReadByte(0x0802) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: D3D11TessellationMode
		/// Type: ByteProperty
		/// Offset: 0x804
		/// Size: 0x01
		/// </summary>
		public byte D3D11TessellationMode
		{
			get
			{
				return ReadByte(0x804);
			}
			set
			{
				WriteByte(0x804,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableCrackFreeDisplacement
		/// Type: BoolProperty
		/// Offset: 0x808
		/// Size: 0x01
		/// </summary>
		public bool bEnableCrackFreeDisplacement => (ReadByte(0x0808) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bEnableAdaptiveTessellation
		/// Type: BoolProperty
		/// Offset: 0x808
		/// Size: 0x01
		/// </summary>
		public bool bEnableAdaptiveTessellation => (ReadByte(0x0808) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: MaxDisplacement
		/// Type: FloatProperty
		/// Offset: 0x80C
		/// Size: 0x04
		/// </summary>
		public float MaxDisplacement
		{
			get
			{
				return ReadSingle(0x80C);
			}
			set
			{
				WriteSingle(0x80C,value);
			}
		}
		
		/// <summary>
		/// Name: Wireframe
		/// Type: BoolProperty
		/// Offset: 0x810
		/// Size: 0x01
		/// </summary>
		public bool Wireframe => (ReadByte(0x0810) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOutputVelocityOnBasePass
		/// Type: BoolProperty
		/// Offset: 0x810
		/// Size: 0x01
		/// </summary>
		public bool bOutputVelocityOnBasePass => (ReadByte(0x0810) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: EditorX
		/// Type: IntProperty
		/// Offset: 0x814
		/// Size: 0x04
		/// </summary>
		public int EditorX
		{
			get
			{
				return ReadInt32(0x814);
			}
			set
			{
				WriteInt32(0x814,value);
			}
		}
		
		/// <summary>
		/// Name: EditorY
		/// Type: IntProperty
		/// Offset: 0x818
		/// Size: 0x04
		/// </summary>
		public int EditorY
		{
			get
			{
				return ReadInt32(0x818);
			}
			set
			{
				WriteInt32(0x818,value);
			}
		}
		
		/// <summary>
		/// Name: EditorPitch
		/// Type: IntProperty
		/// Offset: 0x81C
		/// Size: 0x04
		/// </summary>
		public int EditorPitch
		{
			get
			{
				return ReadInt32(0x81C);
			}
			set
			{
				WriteInt32(0x81C,value);
			}
		}
		
		/// <summary>
		/// Name: EditorYaw
		/// Type: IntProperty
		/// Offset: 0x820
		/// Size: 0x04
		/// </summary>
		public int EditorYaw
		{
			get
			{
				return ReadInt32(0x820);
			}
			set
			{
				WriteInt32(0x820,value);
			}
		}
		
		/// <summary>
		/// Name: Expressions
		/// Type: TArray<UMaterialExpression>
		/// Offset: 0x828
		/// Size: 0x10
		/// SubElement Size: 0x70
		/// </summary>
		public TArray<UMaterialExpression> Expressions => new TArray<UMaterialExpression>(BaseAddress+0x828);
		
		/// <summary>
		/// Name: MaterialFunctionInfos
		/// Type: TArray<FMaterialFunctionInfo>
		/// Offset: 0x838
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FMaterialFunctionInfo> MaterialFunctionInfos => new TArray<FMaterialFunctionInfo>(BaseAddress+0x838);
		
		/// <summary>
		/// Name: MaterialParameterCollectionInfos
		/// Type: TArray<FMaterialParameterCollectionInfo>
		/// Offset: 0x848
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FMaterialParameterCollectionInfo> MaterialParameterCollectionInfos => new TArray<FMaterialParameterCollectionInfo>(BaseAddress+0x848);
		
		/// <summary>
		/// Name: bCanMaskedBeAssumedOpaque
		/// Type: BoolProperty
		/// Offset: 0x858
		/// Size: 0x01
		/// </summary>
		public bool bCanMaskedBeAssumedOpaque => (ReadByte(0x0858) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bIsMasked
		/// Type: BoolProperty
		/// Offset: 0x858
		/// Size: 0x01
		/// </summary>
		public bool bIsMasked => (ReadByte(0x0858) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bIsPreviewMaterial
		/// Type: BoolProperty
		/// Offset: 0x858
		/// Size: 0x01
		/// </summary>
		public bool bIsPreviewMaterial => (ReadByte(0x0858) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bUseMaterialAttributes
		/// Type: BoolProperty
		/// Offset: 0x858
		/// Size: 0x01
		/// </summary>
		public bool bUseMaterialAttributes => (ReadByte(0x0858) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bUseTranslucencyVertexFog
		/// Type: BoolProperty
		/// Offset: 0x858
		/// Size: 0x01
		/// </summary>
		public bool bUseTranslucencyVertexFog => (ReadByte(0x0858) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bAllowDevelopmentShaderCompile
		/// Type: BoolProperty
		/// Offset: 0x858
		/// Size: 0x01
		/// </summary>
		public bool bAllowDevelopmentShaderCompile => (ReadByte(0x0858) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bIsMaterialEditorStatsMaterial
		/// Type: BoolProperty
		/// Offset: 0x858
		/// Size: 0x01
		/// </summary>
		public bool bIsMaterialEditorStatsMaterial => (ReadByte(0x0858) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: UsageFlagWarnings
		/// Type: UInt32Property
		/// Offset: 0x85C
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: BlendableLocation
		/// Type: ByteProperty
		/// Offset: 0x860
		/// Size: 0x01
		/// </summary>
		public byte BlendableLocation
		{
			get
			{
				return ReadByte(0x860);
			}
			set
			{
				WriteByte(0x860,value);
			}
		}
		
		/// <summary>
		/// Name: BlendablePriority
		/// Type: IntProperty
		/// Offset: 0x864
		/// Size: 0x04
		/// </summary>
		public int BlendablePriority
		{
			get
			{
				return ReadInt32(0x864);
			}
			set
			{
				WriteInt32(0x864,value);
			}
		}
		
		/// <summary>
		/// Name: RefractionDepthBias
		/// Type: FloatProperty
		/// Offset: 0x868
		/// Size: 0x04
		/// </summary>
		public float RefractionDepthBias
		{
			get
			{
				return ReadSingle(0x868);
			}
			set
			{
				WriteSingle(0x868,value);
			}
		}
		
		/// <summary>
		/// Name: StateId
		/// Type: StructProperty
		/// Offset: 0x86C
		/// Size: 0x10
		/// </summary>
		public FGuid StateId => ReadStruct<FGuid>(0x86C);
		
		/// <summary>
		/// Name: ExpressionGraniteTextureReferences
		/// Type: TArray<UGraniteTexture>
		/// Offset: 0x8E8
		/// Size: 0x10
		/// SubElement Size: 0xF8
		/// </summary>
		public TArray<UGraniteTexture> ExpressionGraniteTextureReferences => new TArray<UGraniteTexture>(BaseAddress+0x8E8);
		
		/// <summary>
		/// Name: ExpressionTextureReferences
		/// Type: TArray<UTexture>
		/// Offset: 0x970
		/// Size: 0x10
		/// SubElement Size: 0xB8
		/// </summary>
		public TArray<UTexture> ExpressionTextureReferences => new TArray<UTexture>(BaseAddress+0x970);
		
	}


	/// <summary>
	/// UMaterialInstanceDynamic:UMaterialInstance
	/// Size: 0x1C8
	/// Properties: 0
	/// </summary>
	public class UMaterialInstanceDynamic:UMaterialInstance
	{
		public override int ObjectSize => 456;
	}


	/// <summary>
	/// UMaterialParameterCollection:UObject
	/// Size: 0x68
	/// Properties: 3
	/// </summary>
	public class UMaterialParameterCollection:UObject
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: StateId
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FGuid StateId => ReadStruct<FGuid>(0x28);
		
		/// <summary>
		/// Name: ScalarParameters
		/// Type: TArray<FCollectionScalarParameter>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FCollectionScalarParameter> ScalarParameters => new TArray<FCollectionScalarParameter>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: VectorParameters
		/// Type: TArray<FCollectionVectorParameter>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FCollectionVectorParameter> VectorParameters => new TArray<FCollectionVectorParameter>(BaseAddress+0x48);
		
	}


	/// <summary>
	/// UMaterialParameterCollectionInstance:UObject
	/// Size: 0xE8
	/// Properties: 2
	/// </summary>
	public class UMaterialParameterCollectionInstance:UObject
	{
		public override int ObjectSize => 232;
		/// <summary>
		/// Name: Collection
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UMaterialParameterCollection Collection => ReadUObject<UMaterialParameterCollection>(0x30);
		
		/// <summary>
		/// Name: World
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UWorld World => ReadUObject<UWorld>(0x38);
		
	}


	/// <summary>
	/// UMatineeInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UMatineeInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UNavArea_Default:UNavArea
	/// Size: 0x40
	/// Properties: 0
	/// </summary>
	public class UNavArea_Default:UNavArea
	{
		public override int ObjectSize => 64;
	}


	/// <summary>
	/// UNavArea_LowHeight:UNavArea
	/// Size: 0x40
	/// Properties: 0
	/// </summary>
	public class UNavArea_LowHeight:UNavArea
	{
		public override int ObjectSize => 64;
	}


	/// <summary>
	/// UNavArea_Null:UNavArea
	/// Size: 0x40
	/// Properties: 0
	/// </summary>
	public class UNavArea_Null:UNavArea
	{
		public override int ObjectSize => 64;
	}


	/// <summary>
	/// UNavArea_Obstacle:UNavArea
	/// Size: 0x40
	/// Properties: 0
	/// </summary>
	public class UNavArea_Obstacle:UNavArea
	{
		public override int ObjectSize => 64;
	}


	/// <summary>
	/// UNavAreaMeta:UNavArea
	/// Size: 0x40
	/// Properties: 0
	/// </summary>
	public class UNavAreaMeta:UNavArea
	{
		public override int ObjectSize => 64;
	}


	/// <summary>
	/// UNavAreaMeta_SwitchByAgent:UNavAreaMeta
	/// Size: 0xC0
	/// Properties: 16
	/// </summary>
	public class UNavAreaMeta_SwitchByAgent:UNavAreaMeta
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: Agent0Area
		/// Type: ClassProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Agent1Area
		/// Type: ClassProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Agent2Area
		/// Type: ClassProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Agent3Area
		/// Type: ClassProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Agent4Area
		/// Type: ClassProperty
		/// Offset: 0x60
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Agent5Area
		/// Type: ClassProperty
		/// Offset: 0x68
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Agent6Area
		/// Type: ClassProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Agent7Area
		/// Type: ClassProperty
		/// Offset: 0x78
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Agent8Area
		/// Type: ClassProperty
		/// Offset: 0x80
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Agent9Area
		/// Type: ClassProperty
		/// Offset: 0x88
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Agent10Area
		/// Type: ClassProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Agent11Area
		/// Type: ClassProperty
		/// Offset: 0x98
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Agent12Area
		/// Type: ClassProperty
		/// Offset: 0xA0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Agent13Area
		/// Type: ClassProperty
		/// Offset: 0xA8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Agent14Area
		/// Type: ClassProperty
		/// Offset: 0xB0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Agent15Area
		/// Type: ClassProperty
		/// Offset: 0xB8
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UNavCollision:UObject
	/// Size: 0x110
	/// Properties: 5
	/// </summary>
	public class UNavCollision:UObject
	{
		public override int ObjectSize => 272;
		/// <summary>
		/// Name: CylinderCollision
		/// Type: TArray<FNavCollisionCylinder>
		/// Offset: 0x78
		/// Size: 0x10
		/// SubElement Size: 0x14
		/// </summary>
		public TArray<FNavCollisionCylinder> CylinderCollision => new TArray<FNavCollisionCylinder>(BaseAddress+0x78);
		
		/// <summary>
		/// Name: BoxCollision
		/// Type: TArray<FNavCollisionBox>
		/// Offset: 0x88
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FNavCollisionBox> BoxCollision => new TArray<FNavCollisionBox>(BaseAddress+0x88);
		
		/// <summary>
		/// Name: AreaClass
		/// Type: ClassProperty
		/// Offset: 0x98
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bIsDynamicObstacle
		/// Type: BoolProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public bool bIsDynamicObstacle => (ReadByte(0x00A0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bGatherConvexGeometry
		/// Type: BoolProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public bool bGatherConvexGeometry => (ReadByte(0x00A0) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// UNavigationDataChunk:UObject
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class UNavigationDataChunk:UObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: NavigationDataName
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// URecastNavMeshDataChunk:UNavigationDataChunk
	/// Size: 0x40
	/// Properties: 0
	/// </summary>
	public class URecastNavMeshDataChunk:UNavigationDataChunk
	{
		public override int ObjectSize => 64;
	}


	/// <summary>
	/// UNavigationPath:UObject
	/// Size: 0xC0
	/// Properties: 2
	/// </summary>
	public class UNavigationPath:UObject
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: PathPoints
		/// Type: TArray<FVector>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> PathPoints => new TArray<FVector>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: RecalculateOnInvalidation
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte RecalculateOnInvalidation
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
	}


	/// <summary>
	/// UNavigationPathGenerator:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNavigationPathGenerator:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// URecastFilter_UseDefaultArea:UNavigationQueryFilter
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class URecastFilter_UseDefaultArea:UNavigationQueryFilter
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// UNavLinkTrivial:UNavLinkDefinition
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UNavLinkTrivial:UNavLinkDefinition
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UNavNodeInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UNavNodeInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UDemoNetDriver:UNetDriver
	/// Size: 0x530
	/// Properties: 0
	/// </summary>
	public class UDemoNetDriver:UNetDriver
	{
		public override int ObjectSize => 1328;
	}


	/// <summary>
	/// UNiagaraEffectRendererProperties:UObject
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class UNiagaraEffectRendererProperties:UObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: dummy
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UNiagaraMeshRendererProperties:UNiagaraEffectRendererProperties
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UNiagaraMeshRendererProperties:UNiagaraEffectRendererProperties
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: ParticleMesh
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UStaticMesh ParticleMesh => ReadUObject<UStaticMesh>(0x30);
		
	}


	/// <summary>
	/// UNiagaraRibbonRendererProperties:UNiagaraEffectRendererProperties
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UNiagaraRibbonRendererProperties:UNiagaraEffectRendererProperties
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UNiagaraSpriteRendererProperties:UNiagaraEffectRendererProperties
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class UNiagaraSpriteRendererProperties:UNiagaraEffectRendererProperties
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: SubImageInfo
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public FVector2D SubImageInfo => ReadStruct<FVector2D>(0x30);
		
		/// <summary>
		/// Name: bBVelocityAligned
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bBVelocityAligned
		{
			get
			{
				return ReadBool(0x38);
			}
			set
			{
				WriteBool(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// UObjectLibrary:UObject
	/// Size: 0x70
	/// Properties: 6
	/// </summary>
	public class UObjectLibrary:UObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: ObjectBaseClass
		/// Type: ClassProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bHasBlueprintClasses
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bHasBlueprintClasses
		{
			get
			{
				return ReadBool(0x30);
			}
			set
			{
				WriteBool(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: Objects
		/// Type: TArray<UObject>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UObject> Objects => new TArray<UObject>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: WeakObjects
		/// Type: TArray<>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: bUseWeakReferences
		/// Type: BoolProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public bool bUseWeakReferences
		{
			get
			{
				return ReadBool(0x58);
			}
			set
			{
				WriteBool(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: bIsFullyLoaded
		/// Type: BoolProperty
		/// Offset: 0x59
		/// Size: 0x01
		/// </summary>
		public bool bIsFullyLoaded
		{
			get
			{
				return ReadBool(0x59);
			}
			set
			{
				WriteBool(0x59,value);
			}
		}
		
	}


	/// <summary>
	/// UObjectReferencer:UObject
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UObjectReferencer:UObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: ReferencedObjects
		/// Type: TArray<UObject>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UObject> ReferencedObjects => new TArray<UObject>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UPackageMapClient:UPackageMap
	/// Size: 0x288
	/// Properties: 0
	/// </summary>
	public class UPackageMapClient:UPackageMap
	{
		public override int ObjectSize => 648;
	}


	/// <summary>
	/// UParticleSpriteEmitter:UParticleEmitter
	/// Size: 0x160
	/// Properties: 0
	/// </summary>
	public class UParticleSpriteEmitter:UParticleEmitter
	{
		public override int ObjectSize => 352;
	}


	/// <summary>
	/// UParticleModule:UObject
	/// Size: 0x30
	/// Properties: 13
	/// </summary>
	public class UParticleModule:UObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: bSpawnModule
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bSpawnModule => (ReadByte(0x0028) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUpdateModule
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bUpdateModule => (ReadByte(0x0028) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bFinalUpdateModule
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bFinalUpdateModule => (ReadByte(0x0028) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bUpdateForGPUEmitter
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bUpdateForGPUEmitter => (ReadByte(0x0028) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bCurvesAsColor
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bCurvesAsColor => (ReadByte(0x0028) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: b3DDrawMode
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool b3DDrawMode => (ReadByte(0x0028) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bSupported3DDrawMode
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bSupported3DDrawMode => (ReadByte(0x0028) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bEnabled
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bEnabled => (ReadByte(0x0028) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bEditable
		/// Type: BoolProperty
		/// Offset: 0x29
		/// Size: 0x01
		/// </summary>
		public bool bEditable => (ReadByte(0x0029) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LODDuplicate
		/// Type: BoolProperty
		/// Offset: 0x29
		/// Size: 0x01
		/// </summary>
		public bool LODDuplicate => (ReadByte(0x0029) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bSupportsRandomSeed
		/// Type: BoolProperty
		/// Offset: 0x29
		/// Size: 0x01
		/// </summary>
		public bool bSupportsRandomSeed => (ReadByte(0x0029) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bRequiresLoopingNotification
		/// Type: BoolProperty
		/// Offset: 0x29
		/// Size: 0x01
		/// </summary>
		public bool bRequiresLoopingNotification => (ReadByte(0x0029) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: LODValidity
		/// Type: ByteProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public byte LODValidity
		{
			get
			{
				return ReadByte(0x2C);
			}
			set
			{
				WriteByte(0x2C,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleOrientationBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleOrientationBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleOrientationAxisLock:UParticleModuleOrientationBase
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UParticleModuleOrientationAxisLock:UParticleModuleOrientationBase
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: LockAxisFlags
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte LockAxisFlags
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleLODLevel:UObject
	/// Size: 0xB8
	/// Properties: 14
	/// </summary>
	public class UParticleLODLevel:UObject
	{
		public override int ObjectSize => 184;
		/// <summary>
		/// Name: Level
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int Level
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: bEnabled
		/// Type: BoolProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public bool bEnabled => (ReadByte(0x002C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: RequiredModule
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UParticleModuleRequired RequiredModule => ReadUObject<UParticleModuleRequired>(0x30);
		
		/// <summary>
		/// Name: Modules
		/// Type: TArray<UParticleModule>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<UParticleModule> Modules => new TArray<UParticleModule>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: TypeDataModule
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public UParticleModuleTypeDataBase TypeDataModule => ReadUObject<UParticleModuleTypeDataBase>(0x48);
		
		/// <summary>
		/// Name: SpawnModule
		/// Type: ObjectProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public UParticleModuleSpawn SpawnModule => ReadUObject<UParticleModuleSpawn>(0x50);
		
		/// <summary>
		/// Name: EventGenerator
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UParticleModuleEventGenerator EventGenerator => ReadUObject<UParticleModuleEventGenerator>(0x58);
		
		/// <summary>
		/// Name: SpawningModules
		/// Type: TArray<UParticleModuleSpawnBase>
		/// Offset: 0x60
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<UParticleModuleSpawnBase> SpawningModules => new TArray<UParticleModuleSpawnBase>(BaseAddress+0x60);
		
		/// <summary>
		/// Name: SpawnModules
		/// Type: TArray<UParticleModule>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<UParticleModule> SpawnModules => new TArray<UParticleModule>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: UpdateModules
		/// Type: TArray<UParticleModule>
		/// Offset: 0x80
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<UParticleModule> UpdateModules => new TArray<UParticleModule>(BaseAddress+0x80);
		
		/// <summary>
		/// Name: OrbitModules
		/// Type: TArray<UParticleModuleOrbit>
		/// Offset: 0x90
		/// Size: 0x10
		/// SubElement Size: 0x148
		/// </summary>
		public TArray<UParticleModuleOrbit> OrbitModules => new TArray<UParticleModuleOrbit>(BaseAddress+0x90);
		
		/// <summary>
		/// Name: EventReceiverModules
		/// Type: TArray<UParticleModuleEventReceiverBase>
		/// Offset: 0xA0
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UParticleModuleEventReceiverBase> EventReceiverModules => new TArray<UParticleModuleEventReceiverBase>(BaseAddress+0xA0);
		
		/// <summary>
		/// Name: ConvertedModules
		/// Type: BoolProperty
		/// Offset: 0xB0
		/// Size: 0x01
		/// </summary>
		public bool ConvertedModules => (ReadByte(0x00B0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: PeakActiveParticles
		/// Type: IntProperty
		/// Offset: 0xB4
		/// Size: 0x04
		/// </summary>
		public int PeakActiveParticles
		{
			get
			{
				return ReadInt32(0xB4);
			}
			set
			{
				WriteInt32(0xB4,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleAccelerationBase:UParticleModule
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UParticleModuleAccelerationBase:UParticleModule
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: bAlwaysInWorldSpace
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bAlwaysInWorldSpace => (ReadByte(0x0030) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleAcceleration:UParticleModuleAccelerationBase
	/// Size: 0x90
	/// Properties: 2
	/// </summary>
	public class UParticleModuleAcceleration:UParticleModuleAccelerationBase
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: Acceleration
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector Acceleration => ReadStruct<FRawDistributionVector>(0x38);
		
		/// <summary>
		/// Name: bApplyOwnerScale
		/// Type: BoolProperty
		/// Offset: 0x88
		/// Size: 0x01
		/// </summary>
		public bool bApplyOwnerScale => (ReadByte(0x0088) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleAccelerationConstant:UParticleModuleAccelerationBase
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class UParticleModuleAccelerationConstant:UParticleModuleAccelerationBase
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: Acceleration
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x0C
		/// </summary>
		public FVector Acceleration => ReadStruct<FVector>(0x38);
		
	}


	/// <summary>
	/// UParticleModuleAccelerationDrag:UParticleModuleAccelerationBase
	/// Size: 0x78
	/// Properties: 2
	/// </summary>
	public class UParticleModuleAccelerationDrag:UParticleModuleAccelerationBase
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: DragCoefficient
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UDistributionFloat DragCoefficient => ReadUObject<UDistributionFloat>(0x38);
		
		/// <summary>
		/// Name: DragCoefficientRaw
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat DragCoefficientRaw => ReadStruct<FRawDistributionFloat>(0x40);
		
	}


	/// <summary>
	/// UParticleModuleAccelerationDragScaleOverLife:UParticleModuleAccelerationBase
	/// Size: 0x78
	/// Properties: 2
	/// </summary>
	public class UParticleModuleAccelerationDragScaleOverLife:UParticleModuleAccelerationBase
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: DragScale
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UDistributionFloat DragScale => ReadUObject<UDistributionFloat>(0x38);
		
		/// <summary>
		/// Name: DragScaleRaw
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat DragScaleRaw => ReadStruct<FRawDistributionFloat>(0x40);
		
	}


	/// <summary>
	/// UParticleModuleAccelerationOverLifetime:UParticleModuleAccelerationBase
	/// Size: 0x88
	/// Properties: 1
	/// </summary>
	public class UParticleModuleAccelerationOverLifetime:UParticleModuleAccelerationBase
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: AccelOverLife
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector AccelOverLife => ReadStruct<FRawDistributionVector>(0x38);
		
	}


	/// <summary>
	/// UParticleModuleAttractorBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleAttractorBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleAttractorLine:UParticleModuleAttractorBase
	/// Size: 0xB8
	/// Properties: 4
	/// </summary>
	public class UParticleModuleAttractorLine:UParticleModuleAttractorBase
	{
		public override int ObjectSize => 184;
		/// <summary>
		/// Name: EndPoint0
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x0C
		/// </summary>
		public FVector EndPoint0 => ReadStruct<FVector>(0x30);
		
		/// <summary>
		/// Name: EndPoint1
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x0C
		/// </summary>
		public FVector EndPoint1 => ReadStruct<FVector>(0x3C);
		
		/// <summary>
		/// Name: Range
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat Range => ReadStruct<FRawDistributionFloat>(0x48);
		
		/// <summary>
		/// Name: Strength
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat Strength => ReadStruct<FRawDistributionFloat>(0x80);
		
	}


	/// <summary>
	/// UParticleModuleAttractorParticle:UParticleModuleAttractorBase
	/// Size: 0xC0
	/// Properties: 9
	/// </summary>
	public class UParticleModuleAttractorParticle:UParticleModuleAttractorBase
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: EmitterName
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Range
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat Range => ReadStruct<FRawDistributionFloat>(0x38);
		
		/// <summary>
		/// Name: bStrengthByDistance
		/// Type: BoolProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public bool bStrengthByDistance => (ReadByte(0x0070) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Strength
		/// Type: StructProperty
		/// Offset: 0x78
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat Strength => ReadStruct<FRawDistributionFloat>(0x78);
		
		/// <summary>
		/// Name: bAffectBaseVelocity
		/// Type: BoolProperty
		/// Offset: 0xB0
		/// Size: 0x01
		/// </summary>
		public bool bAffectBaseVelocity => (ReadByte(0x00B0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: SelectionMethod
		/// Type: ByteProperty
		/// Offset: 0xB4
		/// Size: 0x01
		/// </summary>
		public byte SelectionMethod
		{
			get
			{
				return ReadByte(0xB4);
			}
			set
			{
				WriteByte(0xB4,value);
			}
		}
		
		/// <summary>
		/// Name: bRenewSource
		/// Type: BoolProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public bool bRenewSource => (ReadByte(0x00B8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bInheritSourceVel
		/// Type: BoolProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public bool bInheritSourceVel => (ReadByte(0x00B8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: LastSelIndex
		/// Type: IntProperty
		/// Offset: 0xBC
		/// Size: 0x04
		/// </summary>
		public int LastSelIndex
		{
			get
			{
				return ReadInt32(0xBC);
			}
			set
			{
				WriteInt32(0xBC,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleAttractorPoint:UParticleModuleAttractorBase
	/// Size: 0xF8
	/// Properties: 13
	/// </summary>
	public class UParticleModuleAttractorPoint:UParticleModuleAttractorBase
	{
		public override int ObjectSize => 248;
		/// <summary>
		/// Name: Position
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector Position => ReadStruct<FRawDistributionVector>(0x30);
		
		/// <summary>
		/// Name: Range
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat Range => ReadStruct<FRawDistributionFloat>(0x80);
		
		/// <summary>
		/// Name: Strength
		/// Type: StructProperty
		/// Offset: 0xB8
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat Strength => ReadStruct<FRawDistributionFloat>(0xB8);
		
		/// <summary>
		/// Name: StrengthByDistance
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool StrengthByDistance => (ReadByte(0x00F0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bAffectBaseVelocity
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool bAffectBaseVelocity => (ReadByte(0x00F0) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverrideVelocity
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool bOverrideVelocity => (ReadByte(0x00F0) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bUseWorldSpacePosition
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool bUseWorldSpacePosition => (ReadByte(0x00F0) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: Positive_X
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool Positive_X => (ReadByte(0x00F0) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: Positive_Y
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool Positive_Y => (ReadByte(0x00F0) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: Positive_Z
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool Positive_Z => (ReadByte(0x00F0) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: Negative_X
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool Negative_X => (ReadByte(0x00F0) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: Negative_Y
		/// Type: BoolProperty
		/// Offset: 0xF1
		/// Size: 0x01
		/// </summary>
		public bool Negative_Y => (ReadByte(0x00F1) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Negative_Z
		/// Type: BoolProperty
		/// Offset: 0xF1
		/// Size: 0x01
		/// </summary>
		public bool Negative_Z => (ReadByte(0x00F1) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// UParticleModuleAttractorPointGravity:UParticleModuleAttractorBase
	/// Size: 0x80
	/// Properties: 4
	/// </summary>
	public class UParticleModuleAttractorPointGravity:UParticleModuleAttractorBase
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: Position
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x0C
		/// </summary>
		public FVector Position => ReadStruct<FVector>(0x30);
		
		/// <summary>
		/// Name: Radius
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float Radius
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: Strength
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UDistributionFloat Strength => ReadUObject<UDistributionFloat>(0x40);
		
		/// <summary>
		/// Name: StrengthRaw
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat StrengthRaw => ReadStruct<FRawDistributionFloat>(0x48);
		
	}


	/// <summary>
	/// UParticleModuleBeamBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleBeamBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleBeamModifier:UParticleModuleBeamBase
	/// Size: 0x120
	/// Properties: 8
	/// </summary>
	public class UParticleModuleBeamModifier:UParticleModuleBeamBase
	{
		public override int ObjectSize => 288;
		/// <summary>
		/// Name: ModifierType
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte ModifierType
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: PositionOptions
		/// Type: StructProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public FBeamModifierOptions PositionOptions => ReadStruct<FBeamModifierOptions>(0x34);
		
		/// <summary>
		/// Name: Position
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector Position => ReadStruct<FRawDistributionVector>(0x38);
		
		/// <summary>
		/// Name: TangentOptions
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public FBeamModifierOptions TangentOptions => ReadStruct<FBeamModifierOptions>(0x88);
		
		/// <summary>
		/// Name: Tangent
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector Tangent => ReadStruct<FRawDistributionVector>(0x90);
		
		/// <summary>
		/// Name: bAbsoluteTangent
		/// Type: BoolProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public bool bAbsoluteTangent => (ReadByte(0x00E0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: StrengthOptions
		/// Type: StructProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public FBeamModifierOptions StrengthOptions => ReadStruct<FBeamModifierOptions>(0xE4);
		
		/// <summary>
		/// Name: Strength
		/// Type: StructProperty
		/// Offset: 0xE8
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat Strength => ReadStruct<FRawDistributionFloat>(0xE8);
		
	}


	/// <summary>
	/// UParticleModuleBeamNoise:UParticleModuleBeamBase
	/// Size: 0x1B8
	/// Properties: 20
	/// </summary>
	public class UParticleModuleBeamNoise:UParticleModuleBeamBase
	{
		public override int ObjectSize => 440;
		/// <summary>
		/// Name: bLowFreq_Enabled
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bLowFreq_Enabled => (ReadByte(0x0030) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Frequency
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int Frequency
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: Frequency_LowRange
		/// Type: IntProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public int Frequency_LowRange
		{
			get
			{
				return ReadInt32(0x38);
			}
			set
			{
				WriteInt32(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: NoiseRange
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector NoiseRange => ReadStruct<FRawDistributionVector>(0x40);
		
		/// <summary>
		/// Name: NoiseRangeScale
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat NoiseRangeScale => ReadStruct<FRawDistributionFloat>(0x90);
		
		/// <summary>
		/// Name: bNRScaleEmitterTime
		/// Type: BoolProperty
		/// Offset: 0xC8
		/// Size: 0x01
		/// </summary>
		public bool bNRScaleEmitterTime => (ReadByte(0x00C8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: NoiseSpeed
		/// Type: StructProperty
		/// Offset: 0xD0
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector NoiseSpeed => ReadStruct<FRawDistributionVector>(0xD0);
		
		/// <summary>
		/// Name: bSmooth
		/// Type: BoolProperty
		/// Offset: 0x120
		/// Size: 0x01
		/// </summary>
		public bool bSmooth => (ReadByte(0x0120) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: NoiseLockRadius
		/// Type: FloatProperty
		/// Offset: 0x124
		/// Size: 0x04
		/// </summary>
		public float NoiseLockRadius
		{
			get
			{
				return ReadSingle(0x124);
			}
			set
			{
				WriteSingle(0x124,value);
			}
		}
		
		/// <summary>
		/// Name: bNoiseLock
		/// Type: BoolProperty
		/// Offset: 0x128
		/// Size: 0x01
		/// </summary>
		public bool bNoiseLock => (ReadByte(0x0128) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOscillate
		/// Type: BoolProperty
		/// Offset: 0x128
		/// Size: 0x01
		/// </summary>
		public bool bOscillate => (ReadByte(0x0128) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: NoiseLockTime
		/// Type: FloatProperty
		/// Offset: 0x12C
		/// Size: 0x04
		/// </summary>
		public float NoiseLockTime
		{
			get
			{
				return ReadSingle(0x12C);
			}
			set
			{
				WriteSingle(0x12C,value);
			}
		}
		
		/// <summary>
		/// Name: NoiseTension
		/// Type: FloatProperty
		/// Offset: 0x130
		/// Size: 0x04
		/// </summary>
		public float NoiseTension
		{
			get
			{
				return ReadSingle(0x130);
			}
			set
			{
				WriteSingle(0x130,value);
			}
		}
		
		/// <summary>
		/// Name: bUseNoiseTangents
		/// Type: BoolProperty
		/// Offset: 0x134
		/// Size: 0x01
		/// </summary>
		public bool bUseNoiseTangents => (ReadByte(0x0134) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: NoiseTangentStrength
		/// Type: StructProperty
		/// Offset: 0x138
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat NoiseTangentStrength => ReadStruct<FRawDistributionFloat>(0x138);
		
		/// <summary>
		/// Name: NoiseTessellation
		/// Type: IntProperty
		/// Offset: 0x170
		/// Size: 0x04
		/// </summary>
		public int NoiseTessellation
		{
			get
			{
				return ReadInt32(0x170);
			}
			set
			{
				WriteInt32(0x170,value);
			}
		}
		
		/// <summary>
		/// Name: bTargetNoise
		/// Type: BoolProperty
		/// Offset: 0x174
		/// Size: 0x01
		/// </summary>
		public bool bTargetNoise => (ReadByte(0x0174) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: FrequencyDistance
		/// Type: FloatProperty
		/// Offset: 0x178
		/// Size: 0x04
		/// </summary>
		public float FrequencyDistance
		{
			get
			{
				return ReadSingle(0x178);
			}
			set
			{
				WriteSingle(0x178,value);
			}
		}
		
		/// <summary>
		/// Name: bApplyNoiseScale
		/// Type: BoolProperty
		/// Offset: 0x17C
		/// Size: 0x01
		/// </summary>
		public bool bApplyNoiseScale => (ReadByte(0x017C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: NoiseScale
		/// Type: StructProperty
		/// Offset: 0x180
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat NoiseScale => ReadStruct<FRawDistributionFloat>(0x180);
		
	}


	/// <summary>
	/// UParticleModuleBeamSource:UParticleModuleBeamBase
	/// Size: 0x138
	/// Properties: 10
	/// </summary>
	public class UParticleModuleBeamSource:UParticleModuleBeamBase
	{
		public override int ObjectSize => 312;
		/// <summary>
		/// Name: SourceMethod
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte SourceMethod
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: SourceName
		/// Type: NameProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bSourceAbsolute
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bSourceAbsolute => (ReadByte(0x0040) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Source
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector Source => ReadStruct<FRawDistributionVector>(0x48);
		
		/// <summary>
		/// Name: bLockSource
		/// Type: BoolProperty
		/// Offset: 0x98
		/// Size: 0x01
		/// </summary>
		public bool bLockSource => (ReadByte(0x0098) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: SourceTangentMethod
		/// Type: ByteProperty
		/// Offset: 0x9C
		/// Size: 0x01
		/// </summary>
		public byte SourceTangentMethod
		{
			get
			{
				return ReadByte(0x9C);
			}
			set
			{
				WriteByte(0x9C,value);
			}
		}
		
		/// <summary>
		/// Name: SourceTangent
		/// Type: StructProperty
		/// Offset: 0xA0
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector SourceTangent => ReadStruct<FRawDistributionVector>(0xA0);
		
		/// <summary>
		/// Name: bLockSourceTangent
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool bLockSourceTangent => (ReadByte(0x00F0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: SourceStrength
		/// Type: StructProperty
		/// Offset: 0xF8
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat SourceStrength => ReadStruct<FRawDistributionFloat>(0xF8);
		
		/// <summary>
		/// Name: bLockSourceStength
		/// Type: BoolProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public bool bLockSourceStength => (ReadByte(0x0130) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleBeamTarget:UParticleModuleBeamBase
	/// Size: 0x130
	/// Properties: 11
	/// </summary>
	public class UParticleModuleBeamTarget:UParticleModuleBeamBase
	{
		public override int ObjectSize => 304;
		/// <summary>
		/// Name: TargetMethod
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte TargetMethod
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: TargetName
		/// Type: NameProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Target
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector Target => ReadStruct<FRawDistributionVector>(0x40);
		
		/// <summary>
		/// Name: bTargetAbsolute
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool bTargetAbsolute => (ReadByte(0x0090) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bLockTarget
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool bLockTarget => (ReadByte(0x0090) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: TargetTangentMethod
		/// Type: ByteProperty
		/// Offset: 0x94
		/// Size: 0x01
		/// </summary>
		public byte TargetTangentMethod
		{
			get
			{
				return ReadByte(0x94);
			}
			set
			{
				WriteByte(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: TargetTangent
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector TargetTangent => ReadStruct<FRawDistributionVector>(0x98);
		
		/// <summary>
		/// Name: bLockTargetTangent
		/// Type: BoolProperty
		/// Offset: 0xE8
		/// Size: 0x01
		/// </summary>
		public bool bLockTargetTangent => (ReadByte(0x00E8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: TargetStrength
		/// Type: StructProperty
		/// Offset: 0xF0
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat TargetStrength => ReadStruct<FRawDistributionFloat>(0xF0);
		
		/// <summary>
		/// Name: bLockTargetStength
		/// Type: BoolProperty
		/// Offset: 0x128
		/// Size: 0x01
		/// </summary>
		public bool bLockTargetStength => (ReadByte(0x0128) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LockRadius
		/// Type: FloatProperty
		/// Offset: 0x12C
		/// Size: 0x04
		/// </summary>
		public float LockRadius
		{
			get
			{
				return ReadSingle(0x12C);
			}
			set
			{
				WriteSingle(0x12C,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleCameraBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleCameraBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleCameraOffset:UParticleModuleCameraBase
	/// Size: 0x70
	/// Properties: 3
	/// </summary>
	public class UParticleModuleCameraOffset:UParticleModuleCameraBase
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: CameraOffset
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat CameraOffset => ReadStruct<FRawDistributionFloat>(0x30);
		
		/// <summary>
		/// Name: bSpawnTimeOnly
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bSpawnTimeOnly => (ReadByte(0x0068) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: UpdateMethod
		/// Type: ByteProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public byte UpdateMethod
		{
			get
			{
				return ReadByte(0x6C);
			}
			set
			{
				WriteByte(0x6C,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleCollisionBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleCollisionBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleCollision:UParticleModuleCollisionBase
	/// Size: 0x1B8
	/// Properties: 17
	/// </summary>
	public class UParticleModuleCollision:UParticleModuleCollisionBase
	{
		public override int ObjectSize => 440;
		/// <summary>
		/// Name: DampingFactor
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector DampingFactor => ReadStruct<FRawDistributionVector>(0x30);
		
		/// <summary>
		/// Name: DampingFactorRotation
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector DampingFactorRotation => ReadStruct<FRawDistributionVector>(0x80);
		
		/// <summary>
		/// Name: MaxCollisions
		/// Type: StructProperty
		/// Offset: 0xD0
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat MaxCollisions => ReadStruct<FRawDistributionFloat>(0xD0);
		
		/// <summary>
		/// Name: CollisionCompletionOption
		/// Type: ByteProperty
		/// Offset: 0x108
		/// Size: 0x01
		/// </summary>
		public byte CollisionCompletionOption
		{
			get
			{
				return ReadByte(0x108);
			}
			set
			{
				WriteByte(0x108,value);
			}
		}
		
		/// <summary>
		/// Name: CollisionTypes
		/// Type: TArray<>
		/// Offset: 0x110
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: bApplyPhysics
		/// Type: BoolProperty
		/// Offset: 0x128
		/// Size: 0x01
		/// </summary>
		public bool bApplyPhysics => (ReadByte(0x0128) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bIgnoreTriggerVolumes
		/// Type: BoolProperty
		/// Offset: 0x128
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreTriggerVolumes => (ReadByte(0x0128) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: ParticleMass
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat ParticleMass => ReadStruct<FRawDistributionFloat>(0x130);
		
		/// <summary>
		/// Name: DirScalar
		/// Type: FloatProperty
		/// Offset: 0x168
		/// Size: 0x04
		/// </summary>
		public float DirScalar
		{
			get
			{
				return ReadSingle(0x168);
			}
			set
			{
				WriteSingle(0x168,value);
			}
		}
		
		/// <summary>
		/// Name: bPawnsDoNotDecrementCount
		/// Type: BoolProperty
		/// Offset: 0x16C
		/// Size: 0x01
		/// </summary>
		public bool bPawnsDoNotDecrementCount => (ReadByte(0x016C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOnlyVerticalNormalsDecrementCount
		/// Type: BoolProperty
		/// Offset: 0x16C
		/// Size: 0x01
		/// </summary>
		public bool bOnlyVerticalNormalsDecrementCount => (ReadByte(0x016C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: VerticalFudgeFactor
		/// Type: FloatProperty
		/// Offset: 0x170
		/// Size: 0x04
		/// </summary>
		public float VerticalFudgeFactor
		{
			get
			{
				return ReadSingle(0x170);
			}
			set
			{
				WriteSingle(0x170,value);
			}
		}
		
		/// <summary>
		/// Name: DelayAmount
		/// Type: StructProperty
		/// Offset: 0x178
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat DelayAmount => ReadStruct<FRawDistributionFloat>(0x178);
		
		/// <summary>
		/// Name: bDropDetail
		/// Type: BoolProperty
		/// Offset: 0x1B0
		/// Size: 0x01
		/// </summary>
		public bool bDropDetail => (ReadByte(0x01B0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bCollideOnlyIfVisible
		/// Type: BoolProperty
		/// Offset: 0x1B0
		/// Size: 0x01
		/// </summary>
		public bool bCollideOnlyIfVisible => (ReadByte(0x01B0) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bIgnoreSourceActor
		/// Type: BoolProperty
		/// Offset: 0x1B0
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreSourceActor => (ReadByte(0x01B0) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: MaxCollisionDistance
		/// Type: FloatProperty
		/// Offset: 0x1B4
		/// Size: 0x04
		/// </summary>
		public float MaxCollisionDistance
		{
			get
			{
				return ReadSingle(0x1B4);
			}
			set
			{
				WriteSingle(0x1B4,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleCollisionGPU:UParticleModuleCollisionBase
	/// Size: 0xB0
	/// Properties: 7
	/// </summary>
	public class UParticleModuleCollisionGPU:UParticleModuleCollisionBase
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: Resilience
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat Resilience => ReadStruct<FRawDistributionFloat>(0x30);
		
		/// <summary>
		/// Name: ResilienceScaleOverLife
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat ResilienceScaleOverLife => ReadStruct<FRawDistributionFloat>(0x68);
		
		/// <summary>
		/// Name: Friction
		/// Type: FloatProperty
		/// Offset: 0xA0
		/// Size: 0x04
		/// </summary>
		public float Friction
		{
			get
			{
				return ReadSingle(0xA0);
			}
			set
			{
				WriteSingle(0xA0,value);
			}
		}
		
		/// <summary>
		/// Name: RadiusScale
		/// Type: FloatProperty
		/// Offset: 0xA4
		/// Size: 0x04
		/// </summary>
		public float RadiusScale
		{
			get
			{
				return ReadSingle(0xA4);
			}
			set
			{
				WriteSingle(0xA4,value);
			}
		}
		
		/// <summary>
		/// Name: RadiusBias
		/// Type: FloatProperty
		/// Offset: 0xA8
		/// Size: 0x04
		/// </summary>
		public float RadiusBias
		{
			get
			{
				return ReadSingle(0xA8);
			}
			set
			{
				WriteSingle(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: response
		/// Type: ByteProperty
		/// Offset: 0xAC
		/// Size: 0x01
		/// </summary>
		public byte response
		{
			get
			{
				return ReadByte(0xAC);
			}
			set
			{
				WriteByte(0xAC,value);
			}
		}
		
		/// <summary>
		/// Name: CollisionMode
		/// Type: ByteProperty
		/// Offset: 0xAD
		/// Size: 0x01
		/// </summary>
		public byte CollisionMode
		{
			get
			{
				return ReadByte(0xAD);
			}
			set
			{
				WriteByte(0xAD,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleColorBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleColorBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleColor:UParticleModuleColorBase
	/// Size: 0xC0
	/// Properties: 3
	/// </summary>
	public class UParticleModuleColor:UParticleModuleColorBase
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: StartColor
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector StartColor => ReadStruct<FRawDistributionVector>(0x30);
		
		/// <summary>
		/// Name: StartAlpha
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat StartAlpha => ReadStruct<FRawDistributionFloat>(0x80);
		
		/// <summary>
		/// Name: bClampAlpha
		/// Type: BoolProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public bool bClampAlpha => (ReadByte(0x00B8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleColor_Seeded:UParticleModuleColor
	/// Size: 0xE0
	/// Properties: 1
	/// </summary>
	public class UParticleModuleColor_Seeded:UParticleModuleColor
	{
		public override int ObjectSize => 224;
		/// <summary>
		/// Name: RandomSeedInfo
		/// Type: StructProperty
		/// Offset: 0xC0
		/// Size: 0x20
		/// </summary>
		public FParticleRandomSeedInfo RandomSeedInfo => ReadStruct<FParticleRandomSeedInfo>(0xC0);
		
	}


	/// <summary>
	/// UParticleModuleColorOverLife:UParticleModuleColorBase
	/// Size: 0xC0
	/// Properties: 3
	/// </summary>
	public class UParticleModuleColorOverLife:UParticleModuleColorBase
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: ColorOverLife
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector ColorOverLife => ReadStruct<FRawDistributionVector>(0x30);
		
		/// <summary>
		/// Name: AlphaOverLife
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat AlphaOverLife => ReadStruct<FRawDistributionFloat>(0x80);
		
		/// <summary>
		/// Name: bClampAlpha
		/// Type: BoolProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public bool bClampAlpha => (ReadByte(0x00B8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleColorScaleOverLife:UParticleModuleColorBase
	/// Size: 0xC0
	/// Properties: 3
	/// </summary>
	public class UParticleModuleColorScaleOverLife:UParticleModuleColorBase
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: ColorScaleOverLife
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector ColorScaleOverLife => ReadStruct<FRawDistributionVector>(0x30);
		
		/// <summary>
		/// Name: AlphaScaleOverLife
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat AlphaScaleOverLife => ReadStruct<FRawDistributionFloat>(0x80);
		
		/// <summary>
		/// Name: bEmitterTime
		/// Type: BoolProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public bool bEmitterTime => (ReadByte(0x00B8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleEventBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleEventBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleEventGenerator:UParticleModuleEventBase
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class UParticleModuleEventGenerator:UParticleModuleEventBase
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Events
		/// Type: TArray<FParticleEvent_GenerateInfo>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FParticleEvent_GenerateInfo> Events => new TArray<FParticleEvent_GenerateInfo>(BaseAddress+0x30);
		
	}


	/// <summary>
	/// UParticleModuleEventReceiverBase:UParticleModuleEventBase
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class UParticleModuleEventReceiverBase:UParticleModuleEventBase
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: EventGeneratorType
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte EventGeneratorType
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: EventName
		/// Type: NameProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UParticleModuleEventReceiverKillParticles:UParticleModuleEventReceiverBase
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class UParticleModuleEventReceiverKillParticles:UParticleModuleEventReceiverBase
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: bStopSpawning
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bStopSpawning => (ReadByte(0x0040) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleEventReceiverSpawn:UParticleModuleEventReceiverBase
	/// Size: 0xD0
	/// Properties: 5
	/// </summary>
	public class UParticleModuleEventReceiverSpawn:UParticleModuleEventReceiverBase
	{
		public override int ObjectSize => 208;
		/// <summary>
		/// Name: SpawnCount
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat SpawnCount => ReadStruct<FRawDistributionFloat>(0x40);
		
		/// <summary>
		/// Name: bUseParticleTime
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bUseParticleTime => (ReadByte(0x0078) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUsePSysLocation
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bUsePSysLocation => (ReadByte(0x0078) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bInheritVelocity
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bInheritVelocity => (ReadByte(0x0078) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: InheritVelocityScale
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector InheritVelocityScale => ReadStruct<FRawDistributionVector>(0x80);
		
	}


	/// <summary>
	/// UParticleModuleKillBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleKillBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleKillBox:UParticleModuleKillBase
	/// Size: 0xD8
	/// Properties: 5
	/// </summary>
	public class UParticleModuleKillBox:UParticleModuleKillBase
	{
		public override int ObjectSize => 216;
		/// <summary>
		/// Name: LowerLeftCorner
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector LowerLeftCorner => ReadStruct<FRawDistributionVector>(0x30);
		
		/// <summary>
		/// Name: UpperRightCorner
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector UpperRightCorner => ReadStruct<FRawDistributionVector>(0x80);
		
		/// <summary>
		/// Name: bAbsolute
		/// Type: BoolProperty
		/// Offset: 0xD0
		/// Size: 0x01
		/// </summary>
		public bool bAbsolute => (ReadByte(0x00D0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bKillInside
		/// Type: BoolProperty
		/// Offset: 0xD0
		/// Size: 0x01
		/// </summary>
		public bool bKillInside => (ReadByte(0x00D0) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bAxisAlignedAndFixedSize
		/// Type: BoolProperty
		/// Offset: 0xD0
		/// Size: 0x01
		/// </summary>
		public bool bAxisAlignedAndFixedSize => (ReadByte(0x00D0) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// UParticleModuleKillHeight:UParticleModuleKillBase
	/// Size: 0x70
	/// Properties: 4
	/// </summary>
	public class UParticleModuleKillHeight:UParticleModuleKillBase
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: Height
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat Height => ReadStruct<FRawDistributionFloat>(0x30);
		
		/// <summary>
		/// Name: bAbsolute
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bAbsolute => (ReadByte(0x0068) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bFloor
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bFloor => (ReadByte(0x0068) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bApplyPSysScale
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bApplyPSysScale => (ReadByte(0x0068) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// UParticleModuleLifetimeBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleLifetimeBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleLifetime:UParticleModuleLifetimeBase
	/// Size: 0x68
	/// Properties: 1
	/// </summary>
	public class UParticleModuleLifetime:UParticleModuleLifetimeBase
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: LifeTime
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat LifeTime => ReadStruct<FRawDistributionFloat>(0x30);
		
	}


	/// <summary>
	/// UParticleModuleLifetime_Seeded:UParticleModuleLifetime
	/// Size: 0x88
	/// Properties: 1
	/// </summary>
	public class UParticleModuleLifetime_Seeded:UParticleModuleLifetime
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: RandomSeedInfo
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x20
		/// </summary>
		public FParticleRandomSeedInfo RandomSeedInfo => ReadStruct<FParticleRandomSeedInfo>(0x68);
		
	}


	/// <summary>
	/// UParticleModuleLightBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleLightBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleLight:UParticleModuleLightBase
	/// Size: 0x138
	/// Properties: 10
	/// </summary>
	public class UParticleModuleLight:UParticleModuleLightBase
	{
		public override int ObjectSize => 312;
		/// <summary>
		/// Name: bUseInverseSquaredFalloff
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bUseInverseSquaredFalloff
		{
			get
			{
				return ReadBool(0x30);
			}
			set
			{
				WriteBool(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: bAffectsTranslucency
		/// Type: BoolProperty
		/// Offset: 0x31
		/// Size: 0x01
		/// </summary>
		public bool bAffectsTranslucency
		{
			get
			{
				return ReadBool(0x31);
			}
			set
			{
				WriteBool(0x31,value);
			}
		}
		
		/// <summary>
		/// Name: bPreviewLightRadius
		/// Type: BoolProperty
		/// Offset: 0x32
		/// Size: 0x01
		/// </summary>
		public bool bPreviewLightRadius
		{
			get
			{
				return ReadBool(0x32);
			}
			set
			{
				WriteBool(0x32,value);
			}
		}
		
		/// <summary>
		/// Name: SpawnFraction
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float SpawnFraction
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: ColorScaleOverLife
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector ColorScaleOverLife => ReadStruct<FRawDistributionVector>(0x38);
		
		/// <summary>
		/// Name: BrightnessOverLife
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat BrightnessOverLife => ReadStruct<FRawDistributionFloat>(0x88);
		
		/// <summary>
		/// Name: RadiusScale
		/// Type: StructProperty
		/// Offset: 0xC0
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat RadiusScale => ReadStruct<FRawDistributionFloat>(0xC0);
		
		/// <summary>
		/// Name: LightExponent
		/// Type: StructProperty
		/// Offset: 0xF8
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat LightExponent => ReadStruct<FRawDistributionFloat>(0xF8);
		
		/// <summary>
		/// Name: bHighQualityLights
		/// Type: BoolProperty
		/// Offset: 0x130
		/// Size: 0x01
		/// </summary>
		public bool bHighQualityLights
		{
			get
			{
				return ReadBool(0x130);
			}
			set
			{
				WriteBool(0x130,value);
			}
		}
		
		/// <summary>
		/// Name: bShadowCastingLights
		/// Type: BoolProperty
		/// Offset: 0x131
		/// Size: 0x01
		/// </summary>
		public bool bShadowCastingLights
		{
			get
			{
				return ReadBool(0x131);
			}
			set
			{
				WriteBool(0x131,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleLight_Seeded:UParticleModuleLight
	/// Size: 0x158
	/// Properties: 1
	/// </summary>
	public class UParticleModuleLight_Seeded:UParticleModuleLight
	{
		public override int ObjectSize => 344;
		/// <summary>
		/// Name: RandomSeedInfo
		/// Type: StructProperty
		/// Offset: 0x138
		/// Size: 0x20
		/// </summary>
		public FParticleRandomSeedInfo RandomSeedInfo => ReadStruct<FParticleRandomSeedInfo>(0x138);
		
	}


	/// <summary>
	/// UParticleModuleLocationBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleLocationBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleLocation:UParticleModuleLocationBase
	/// Size: 0x88
	/// Properties: 3
	/// </summary>
	public class UParticleModuleLocation:UParticleModuleLocationBase
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: StartLocation
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector StartLocation => ReadStruct<FRawDistributionVector>(0x30);
		
		/// <summary>
		/// Name: DistributeOverNPoints
		/// Type: FloatProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public float DistributeOverNPoints
		{
			get
			{
				return ReadSingle(0x80);
			}
			set
			{
				WriteSingle(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: DistributeThreshold
		/// Type: FloatProperty
		/// Offset: 0x84
		/// Size: 0x04
		/// </summary>
		public float DistributeThreshold
		{
			get
			{
				return ReadSingle(0x84);
			}
			set
			{
				WriteSingle(0x84,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleLocation_Seeded:UParticleModuleLocation
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UParticleModuleLocation_Seeded:UParticleModuleLocation
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: RandomSeedInfo
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0x20
		/// </summary>
		public FParticleRandomSeedInfo RandomSeedInfo => ReadStruct<FParticleRandomSeedInfo>(0x88);
		
	}


	/// <summary>
	/// UParticleModuleLocationWorldOffset:UParticleModuleLocation
	/// Size: 0x88
	/// Properties: 0
	/// </summary>
	public class UParticleModuleLocationWorldOffset:UParticleModuleLocation
	{
		public override int ObjectSize => 136;
	}


	/// <summary>
	/// UParticleModuleLocationWorldOffset_Seeded:UParticleModuleLocationWorldOffset
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UParticleModuleLocationWorldOffset_Seeded:UParticleModuleLocationWorldOffset
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: RandomSeedInfo
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0x20
		/// </summary>
		public FParticleRandomSeedInfo RandomSeedInfo => ReadStruct<FParticleRandomSeedInfo>(0x88);
		
	}


	/// <summary>
	/// UParticleModuleLocationBoneSocket:UParticleModuleLocationBase
	/// Size: 0x70
	/// Properties: 10
	/// </summary>
	public class UParticleModuleLocationBoneSocket:UParticleModuleLocationBase
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: SourceType
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte SourceType
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: UniversalOffset
		/// Type: StructProperty
		/// Offset: 0x34
		/// Size: 0x0C
		/// </summary>
		public FVector UniversalOffset => ReadStruct<FVector>(0x34);
		
		/// <summary>
		/// Name: SourceLocations
		/// Type: TArray<FLocationBoneSocketInfo>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FLocationBoneSocketInfo> SourceLocations => new TArray<FLocationBoneSocketInfo>(BaseAddress+0x40);
		
		/// <summary>
		/// Name: SelectionMethod
		/// Type: ByteProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public byte SelectionMethod
		{
			get
			{
				return ReadByte(0x50);
			}
			set
			{
				WriteByte(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: bUpdatePositionEachFrame
		/// Type: BoolProperty
		/// Offset: 0x54
		/// Size: 0x01
		/// </summary>
		public bool bUpdatePositionEachFrame => (ReadByte(0x0054) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOrientMeshEmitters
		/// Type: BoolProperty
		/// Offset: 0x54
		/// Size: 0x01
		/// </summary>
		public bool bOrientMeshEmitters => (ReadByte(0x0054) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bInheritBoneVelocity
		/// Type: BoolProperty
		/// Offset: 0x54
		/// Size: 0x01
		/// </summary>
		public bool bInheritBoneVelocity => (ReadByte(0x0054) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: InheritVelocityScale
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float InheritVelocityScale
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: SkelMeshActorParamName
		/// Type: NameProperty
		/// Offset: 0x60
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: NumPreSelectedIndices
		/// Type: IntProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public int NumPreSelectedIndices
		{
			get
			{
				return ReadInt32(0x68);
			}
			set
			{
				WriteInt32(0x68,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleLocationDirect:UParticleModuleLocationBase
	/// Size: 0x170
	/// Properties: 4
	/// </summary>
	public class UParticleModuleLocationDirect:UParticleModuleLocationBase
	{
		public override int ObjectSize => 368;
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector Location => ReadStruct<FRawDistributionVector>(0x30);
		
		/// <summary>
		/// Name: LocationOffset
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector LocationOffset => ReadStruct<FRawDistributionVector>(0x80);
		
		/// <summary>
		/// Name: ScaleFactor
		/// Type: StructProperty
		/// Offset: 0xD0
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector ScaleFactor => ReadStruct<FRawDistributionVector>(0xD0);
		
		/// <summary>
		/// Name: Direction
		/// Type: StructProperty
		/// Offset: 0x120
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector Direction => ReadStruct<FRawDistributionVector>(0x120);
		
	}


	/// <summary>
	/// UParticleModuleLocationEmitter:UParticleModuleLocationBase
	/// Size: 0x50
	/// Properties: 6
	/// </summary>
	public class UParticleModuleLocationEmitter:UParticleModuleLocationBase
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: EmitterName
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SelectionMethod
		/// Type: ByteProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public byte SelectionMethod
		{
			get
			{
				return ReadByte(0x38);
			}
			set
			{
				WriteByte(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: InheritSourceVelocity
		/// Type: BoolProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public bool InheritSourceVelocity => (ReadByte(0x003C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: InheritSourceVelocityScale
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float InheritSourceVelocityScale
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: bInheritSourceRotation
		/// Type: BoolProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public bool bInheritSourceRotation => (ReadByte(0x0044) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: InheritSourceRotationScale
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float InheritSourceRotationScale
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleLocationEmitterDirect:UParticleModuleLocationBase
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UParticleModuleLocationEmitterDirect:UParticleModuleLocationBase
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: EmitterName
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UParticleModuleLocationPrimitiveBase:UParticleModuleLocationBase
	/// Size: 0xC0
	/// Properties: 10
	/// </summary>
	public class UParticleModuleLocationPrimitiveBase:UParticleModuleLocationBase
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: Positive_X
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool Positive_X => (ReadByte(0x0030) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Positive_Y
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool Positive_Y => (ReadByte(0x0030) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: Positive_Z
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool Positive_Z => (ReadByte(0x0030) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: Negative_X
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool Negative_X => (ReadByte(0x0030) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: Negative_Y
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool Negative_Y => (ReadByte(0x0030) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: Negative_Z
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool Negative_Z => (ReadByte(0x0030) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: SurfaceOnly
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool SurfaceOnly => (ReadByte(0x0030) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: Velocity
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool Velocity => (ReadByte(0x0030) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: VelocityScale
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat VelocityScale => ReadStruct<FRawDistributionFloat>(0x38);
		
		/// <summary>
		/// Name: StartLocation
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector StartLocation => ReadStruct<FRawDistributionVector>(0x70);
		
	}


	/// <summary>
	/// UParticleModuleLocationPrimitiveCylinder:UParticleModuleLocationPrimitiveBase
	/// Size: 0x140
	/// Properties: 4
	/// </summary>
	public class UParticleModuleLocationPrimitiveCylinder:UParticleModuleLocationPrimitiveBase
	{
		public override int ObjectSize => 320;
		/// <summary>
		/// Name: RadialVelocity
		/// Type: BoolProperty
		/// Offset: 0xC0
		/// Size: 0x01
		/// </summary>
		public bool RadialVelocity => (ReadByte(0x00C0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: StartRadius
		/// Type: StructProperty
		/// Offset: 0xC8
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat StartRadius => ReadStruct<FRawDistributionFloat>(0xC8);
		
		/// <summary>
		/// Name: StartHeight
		/// Type: StructProperty
		/// Offset: 0x100
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat StartHeight => ReadStruct<FRawDistributionFloat>(0x100);
		
		/// <summary>
		/// Name: HeightAxis
		/// Type: ByteProperty
		/// Offset: 0x138
		/// Size: 0x01
		/// </summary>
		public byte HeightAxis
		{
			get
			{
				return ReadByte(0x138);
			}
			set
			{
				WriteByte(0x138,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleLocationPrimitiveCylinder_Seeded:UParticleModuleLocationPrimitiveCylinder
	/// Size: 0x160
	/// Properties: 1
	/// </summary>
	public class UParticleModuleLocationPrimitiveCylinder_Seeded:UParticleModuleLocationPrimitiveCylinder
	{
		public override int ObjectSize => 352;
		/// <summary>
		/// Name: RandomSeedInfo
		/// Type: StructProperty
		/// Offset: 0x140
		/// Size: 0x20
		/// </summary>
		public FParticleRandomSeedInfo RandomSeedInfo => ReadStruct<FParticleRandomSeedInfo>(0x140);
		
	}


	/// <summary>
	/// UParticleModuleLocationPrimitiveSphere:UParticleModuleLocationPrimitiveBase
	/// Size: 0xF8
	/// Properties: 1
	/// </summary>
	public class UParticleModuleLocationPrimitiveSphere:UParticleModuleLocationPrimitiveBase
	{
		public override int ObjectSize => 248;
		/// <summary>
		/// Name: StartRadius
		/// Type: StructProperty
		/// Offset: 0xC0
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat StartRadius => ReadStruct<FRawDistributionFloat>(0xC0);
		
	}


	/// <summary>
	/// UParticleModuleLocationPrimitiveSphere_Seeded:UParticleModuleLocationPrimitiveSphere
	/// Size: 0x118
	/// Properties: 1
	/// </summary>
	public class UParticleModuleLocationPrimitiveSphere_Seeded:UParticleModuleLocationPrimitiveSphere
	{
		public override int ObjectSize => 280;
		/// <summary>
		/// Name: RandomSeedInfo
		/// Type: StructProperty
		/// Offset: 0xF8
		/// Size: 0x20
		/// </summary>
		public FParticleRandomSeedInfo RandomSeedInfo => ReadStruct<FParticleRandomSeedInfo>(0xF8);
		
	}


	/// <summary>
	/// UParticleModuleLocationPrimitiveTriangle:UParticleModuleLocationBase
	/// Size: 0x128
	/// Properties: 4
	/// </summary>
	public class UParticleModuleLocationPrimitiveTriangle:UParticleModuleLocationBase
	{
		public override int ObjectSize => 296;
		/// <summary>
		/// Name: StartOffset
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector StartOffset => ReadStruct<FRawDistributionVector>(0x30);
		
		/// <summary>
		/// Name: Height
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat Height => ReadStruct<FRawDistributionFloat>(0x80);
		
		/// <summary>
		/// Name: Angle
		/// Type: StructProperty
		/// Offset: 0xB8
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat Angle => ReadStruct<FRawDistributionFloat>(0xB8);
		
		/// <summary>
		/// Name: Thickness
		/// Type: StructProperty
		/// Offset: 0xF0
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat Thickness => ReadStruct<FRawDistributionFloat>(0xF0);
		
	}


	/// <summary>
	/// UParticleModuleLocationSkelVertSurface:UParticleModuleLocationBase
	/// Size: 0x90
	/// Properties: 13
	/// </summary>
	public class UParticleModuleLocationSkelVertSurface:UParticleModuleLocationBase
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: SourceType
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte SourceType
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: UniversalOffset
		/// Type: StructProperty
		/// Offset: 0x34
		/// Size: 0x0C
		/// </summary>
		public FVector UniversalOffset => ReadStruct<FVector>(0x34);
		
		/// <summary>
		/// Name: bUpdatePositionEachFrame
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bUpdatePositionEachFrame => (ReadByte(0x0040) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOrientMeshEmitters
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bOrientMeshEmitters => (ReadByte(0x0040) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bInheritBoneVelocity
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bInheritBoneVelocity => (ReadByte(0x0040) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: SkelMeshActorParamName
		/// Type: NameProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ValidAssociatedBones
		/// Type: TArray<FName>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> ValidAssociatedBones => new TArray<FName>(BaseAddress+0x50);
		
		/// <summary>
		/// Name: bEnforceNormalCheck
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bEnforceNormalCheck => (ReadByte(0x0060) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: NormalToCompare
		/// Type: StructProperty
		/// Offset: 0x64
		/// Size: 0x0C
		/// </summary>
		public FVector NormalToCompare => ReadStruct<FVector>(0x64);
		
		/// <summary>
		/// Name: NormalCheckToleranceDegrees
		/// Type: FloatProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public float NormalCheckToleranceDegrees
		{
			get
			{
				return ReadSingle(0x70);
			}
			set
			{
				WriteSingle(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: NormalCheckTolerance
		/// Type: FloatProperty
		/// Offset: 0x74
		/// Size: 0x04
		/// </summary>
		public float NormalCheckTolerance
		{
			get
			{
				return ReadSingle(0x74);
			}
			set
			{
				WriteSingle(0x74,value);
			}
		}
		
		/// <summary>
		/// Name: ValidMaterialIndices
		/// Type: TArray<>
		/// Offset: 0x78
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: bInheritVertexColor
		/// Type: BoolProperty
		/// Offset: 0x88
		/// Size: 0x01
		/// </summary>
		public bool bInheritVertexColor => (ReadByte(0x0088) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModulePivotOffset:UParticleModuleLocationBase
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UParticleModulePivotOffset:UParticleModuleLocationBase
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: PivotOffset
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public FVector2D PivotOffset => ReadStruct<FVector2D>(0x30);
		
	}


	/// <summary>
	/// UParticleModuleSourceMovement:UParticleModuleLocationBase
	/// Size: 0x80
	/// Properties: 1
	/// </summary>
	public class UParticleModuleSourceMovement:UParticleModuleLocationBase
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: SourceMovementScale
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector SourceMovementScale => ReadStruct<FRawDistributionVector>(0x30);
		
	}


	/// <summary>
	/// UParticleModuleMaterialBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleMaterialBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleMeshMaterial:UParticleModuleMaterialBase
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class UParticleModuleMeshMaterial:UParticleModuleMaterialBase
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: MeshMaterials
		/// Type: TArray<UMaterialInterface>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x58
		/// </summary>
		public TArray<UMaterialInterface> MeshMaterials => new TArray<UMaterialInterface>(BaseAddress+0x30);
		
	}


	/// <summary>
	/// UParticleModuleOrbitBase:UParticleModule
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UParticleModuleOrbitBase:UParticleModule
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: bUseEmitterTime
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bUseEmitterTime => (ReadByte(0x0030) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleOrbit:UParticleModuleOrbitBase
	/// Size: 0x148
	/// Properties: 7
	/// </summary>
	public class UParticleModuleOrbit:UParticleModuleOrbitBase
	{
		public override int ObjectSize => 328;
		/// <summary>
		/// Name: ChainMode
		/// Type: ByteProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public byte ChainMode
		{
			get
			{
				return ReadByte(0x38);
			}
			set
			{
				WriteByte(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: OffsetAmount
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector OffsetAmount => ReadStruct<FRawDistributionVector>(0x40);
		
		/// <summary>
		/// Name: OffsetOptions
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public FOrbitOptions OffsetOptions => ReadStruct<FOrbitOptions>(0x90);
		
		/// <summary>
		/// Name: RotationAmount
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector RotationAmount => ReadStruct<FRawDistributionVector>(0x98);
		
		/// <summary>
		/// Name: RotationOptions
		/// Type: StructProperty
		/// Offset: 0xE8
		/// Size: 0x04
		/// </summary>
		public FOrbitOptions RotationOptions => ReadStruct<FOrbitOptions>(0xE8);
		
		/// <summary>
		/// Name: RotationRateAmount
		/// Type: StructProperty
		/// Offset: 0xF0
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector RotationRateAmount => ReadStruct<FRawDistributionVector>(0xF0);
		
		/// <summary>
		/// Name: RotationRateOptions
		/// Type: StructProperty
		/// Offset: 0x140
		/// Size: 0x04
		/// </summary>
		public FOrbitOptions RotationRateOptions => ReadStruct<FOrbitOptions>(0x140);
		
	}


	/// <summary>
	/// UParticleModuleParameterBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleParameterBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleParameterDynamic:UParticleModuleParameterBase
	/// Size: 0x48
	/// Properties: 3
	/// </summary>
	public class UParticleModuleParameterDynamic:UParticleModuleParameterBase
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: DynamicParams
		/// Type: TArray<FEmitterDynamicParameter>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x50
		/// </summary>
		public TArray<FEmitterDynamicParameter> DynamicParams => new TArray<FEmitterDynamicParameter>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: UpdateFlags
		/// Type: IntProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public int UpdateFlags
		{
			get
			{
				return ReadInt32(0x40);
			}
			set
			{
				WriteInt32(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: bUsesVelocity
		/// Type: BoolProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public bool bUsesVelocity => (ReadByte(0x0044) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleParameterDynamic_Seeded:UParticleModuleParameterDynamic
	/// Size: 0x68
	/// Properties: 1
	/// </summary>
	public class UParticleModuleParameterDynamic_Seeded:UParticleModuleParameterDynamic
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: RandomSeedInfo
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x20
		/// </summary>
		public FParticleRandomSeedInfo RandomSeedInfo => ReadStruct<FParticleRandomSeedInfo>(0x48);
		
	}


	/// <summary>
	/// UParticleModuleRequired:UParticleModule
	/// Size: 0x138
	/// Properties: 38
	/// </summary>
	public class UParticleModuleRequired:UParticleModule
	{
		public override int ObjectSize => 312;
		/// <summary>
		/// Name: Material
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface Material => ReadUObject<UMaterialInterface>(0x30);
		
		/// <summary>
		/// Name: EmitterOrigin
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x0C
		/// </summary>
		public FVector EmitterOrigin => ReadStruct<FVector>(0x38);
		
		/// <summary>
		/// Name: EmitterRotation
		/// Type: StructProperty
		/// Offset: 0x44
		/// Size: 0x0C
		/// </summary>
		public FRotator EmitterRotation => ReadStruct<FRotator>(0x44);
		
		/// <summary>
		/// Name: ScreenAlignment
		/// Type: ByteProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public byte ScreenAlignment
		{
			get
			{
				return ReadByte(0x50);
			}
			set
			{
				WriteByte(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: bUseLocalSpace
		/// Type: BoolProperty
		/// Offset: 0x54
		/// Size: 0x01
		/// </summary>
		public bool bUseLocalSpace => (ReadByte(0x0054) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bKillOnDeactivate
		/// Type: BoolProperty
		/// Offset: 0x54
		/// Size: 0x01
		/// </summary>
		public bool bKillOnDeactivate => (ReadByte(0x0054) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bKillOnCompleted
		/// Type: BoolProperty
		/// Offset: 0x54
		/// Size: 0x01
		/// </summary>
		public bool bKillOnCompleted => (ReadByte(0x0054) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: SortMode
		/// Type: ByteProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public byte SortMode
		{
			get
			{
				return ReadByte(0x58);
			}
			set
			{
				WriteByte(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: bUseLegacyEmitterTime
		/// Type: BoolProperty
		/// Offset: 0x5C
		/// Size: 0x01
		/// </summary>
		public bool bUseLegacyEmitterTime => (ReadByte(0x005C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: EmitterDuration
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float EmitterDuration
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: EmitterDurationLow
		/// Type: FloatProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public float EmitterDurationLow
		{
			get
			{
				return ReadSingle(0x64);
			}
			set
			{
				WriteSingle(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: bEmitterDurationUseRange
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bEmitterDurationUseRange => (ReadByte(0x0068) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDurationRecalcEachLoop
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bDurationRecalcEachLoop => (ReadByte(0x0068) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: EmitterLoops
		/// Type: IntProperty
		/// Offset: 0x6C
		/// Size: 0x04
		/// </summary>
		public int EmitterLoops
		{
			get
			{
				return ReadInt32(0x6C);
			}
			set
			{
				WriteInt32(0x6C,value);
			}
		}
		
		/// <summary>
		/// Name: SpawnRate
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat SpawnRate => ReadStruct<FRawDistributionFloat>(0x70);
		
		/// <summary>
		/// Name: ParticleBurstMethod
		/// Type: ByteProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public byte ParticleBurstMethod
		{
			get
			{
				return ReadByte(0xA8);
			}
			set
			{
				WriteByte(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: BurstList
		/// Type: TArray<FParticleBurst>
		/// Offset: 0xB0
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FParticleBurst> BurstList => new TArray<FParticleBurst>(BaseAddress+0xB0);
		
		/// <summary>
		/// Name: EmitterDelay
		/// Type: FloatProperty
		/// Offset: 0xC0
		/// Size: 0x04
		/// </summary>
		public float EmitterDelay
		{
			get
			{
				return ReadSingle(0xC0);
			}
			set
			{
				WriteSingle(0xC0,value);
			}
		}
		
		/// <summary>
		/// Name: EmitterDelayLow
		/// Type: FloatProperty
		/// Offset: 0xC4
		/// Size: 0x04
		/// </summary>
		public float EmitterDelayLow
		{
			get
			{
				return ReadSingle(0xC4);
			}
			set
			{
				WriteSingle(0xC4,value);
			}
		}
		
		/// <summary>
		/// Name: bEmitterDelayUseRange
		/// Type: BoolProperty
		/// Offset: 0xC8
		/// Size: 0x01
		/// </summary>
		public bool bEmitterDelayUseRange => (ReadByte(0x00C8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDelayFirstLoopOnly
		/// Type: BoolProperty
		/// Offset: 0xC8
		/// Size: 0x01
		/// </summary>
		public bool bDelayFirstLoopOnly => (ReadByte(0x00C8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: InterpolationMethod
		/// Type: ByteProperty
		/// Offset: 0xCC
		/// Size: 0x01
		/// </summary>
		public byte InterpolationMethod
		{
			get
			{
				return ReadByte(0xCC);
			}
			set
			{
				WriteByte(0xCC,value);
			}
		}
		
		/// <summary>
		/// Name: SubImages_Horizontal
		/// Type: IntProperty
		/// Offset: 0xD0
		/// Size: 0x04
		/// </summary>
		public int SubImages_Horizontal
		{
			get
			{
				return ReadInt32(0xD0);
			}
			set
			{
				WriteInt32(0xD0,value);
			}
		}
		
		/// <summary>
		/// Name: SubImages_Vertical
		/// Type: IntProperty
		/// Offset: 0xD4
		/// Size: 0x04
		/// </summary>
		public int SubImages_Vertical
		{
			get
			{
				return ReadInt32(0xD4);
			}
			set
			{
				WriteInt32(0xD4,value);
			}
		}
		
		/// <summary>
		/// Name: bScaleUV
		/// Type: BoolProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public bool bScaleUV => (ReadByte(0x00D8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: RandomImageTime
		/// Type: FloatProperty
		/// Offset: 0xDC
		/// Size: 0x04
		/// </summary>
		public float RandomImageTime
		{
			get
			{
				return ReadSingle(0xDC);
			}
			set
			{
				WriteSingle(0xDC,value);
			}
		}
		
		/// <summary>
		/// Name: RandomImageChanges
		/// Type: IntProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public int RandomImageChanges
		{
			get
			{
				return ReadInt32(0xE0);
			}
			set
			{
				WriteInt32(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: bOverrideSystemMacroUV
		/// Type: BoolProperty
		/// Offset: 0xE4
		/// Size: 0x01
		/// </summary>
		public bool bOverrideSystemMacroUV => (ReadByte(0x00E4) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: MacroUVPosition
		/// Type: StructProperty
		/// Offset: 0xE8
		/// Size: 0x0C
		/// </summary>
		public FVector MacroUVPosition => ReadStruct<FVector>(0xE8);
		
		/// <summary>
		/// Name: MacroUVRadius
		/// Type: FloatProperty
		/// Offset: 0xF4
		/// Size: 0x04
		/// </summary>
		public float MacroUVRadius
		{
			get
			{
				return ReadSingle(0xF4);
			}
			set
			{
				WriteSingle(0xF4,value);
			}
		}
		
		/// <summary>
		/// Name: bUseMaxDrawCount
		/// Type: BoolProperty
		/// Offset: 0xF8
		/// Size: 0x01
		/// </summary>
		public bool bUseMaxDrawCount => (ReadByte(0x00F8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: MaxDrawCount
		/// Type: IntProperty
		/// Offset: 0xFC
		/// Size: 0x04
		/// </summary>
		public int MaxDrawCount
		{
			get
			{
				return ReadInt32(0xFC);
			}
			set
			{
				WriteInt32(0xFC,value);
			}
		}
		
		/// <summary>
		/// Name: EmitterNormalsMode
		/// Type: ByteProperty
		/// Offset: 0x100
		/// Size: 0x01
		/// </summary>
		public byte EmitterNormalsMode
		{
			get
			{
				return ReadByte(0x100);
			}
			set
			{
				WriteByte(0x100,value);
			}
		}
		
		/// <summary>
		/// Name: NormalsSphereCenter
		/// Type: StructProperty
		/// Offset: 0x104
		/// Size: 0x0C
		/// </summary>
		public FVector NormalsSphereCenter => ReadStruct<FVector>(0x104);
		
		/// <summary>
		/// Name: NormalsCylinderDirection
		/// Type: StructProperty
		/// Offset: 0x110
		/// Size: 0x0C
		/// </summary>
		public FVector NormalsCylinderDirection => ReadStruct<FVector>(0x110);
		
		/// <summary>
		/// Name: bOrbitModuleAffectsVelocityAlignment
		/// Type: BoolProperty
		/// Offset: 0x11C
		/// Size: 0x01
		/// </summary>
		public bool bOrbitModuleAffectsVelocityAlignment => (ReadByte(0x011C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: UVFlippingMode
		/// Type: ByteProperty
		/// Offset: 0x120
		/// Size: 0x01
		/// </summary>
		public byte UVFlippingMode
		{
			get
			{
				return ReadByte(0x120);
			}
			set
			{
				WriteByte(0x120,value);
			}
		}
		
		/// <summary>
		/// Name: NamedMaterialOverrides
		/// Type: TArray<FName>
		/// Offset: 0x128
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> NamedMaterialOverrides => new TArray<FName>(BaseAddress+0x128);
		
	}


	/// <summary>
	/// UParticleModuleRotationBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleRotationBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleMeshRotation:UParticleModuleRotationBase
	/// Size: 0x88
	/// Properties: 2
	/// </summary>
	public class UParticleModuleMeshRotation:UParticleModuleRotationBase
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: StartRotation
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector StartRotation => ReadStruct<FRawDistributionVector>(0x30);
		
		/// <summary>
		/// Name: bInheritParent
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bInheritParent => (ReadByte(0x0080) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleMeshRotation_Seeded:UParticleModuleMeshRotation
	/// Size: 0xA8
	/// Properties: 1
	/// </summary>
	public class UParticleModuleMeshRotation_Seeded:UParticleModuleMeshRotation
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: RandomSeedInfo
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0x20
		/// </summary>
		public FParticleRandomSeedInfo RandomSeedInfo => ReadStruct<FParticleRandomSeedInfo>(0x88);
		
	}


	/// <summary>
	/// UParticleModuleRotation:UParticleModuleRotationBase
	/// Size: 0x68
	/// Properties: 1
	/// </summary>
	public class UParticleModuleRotation:UParticleModuleRotationBase
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: StartRotation
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat StartRotation => ReadStruct<FRawDistributionFloat>(0x30);
		
	}


	/// <summary>
	/// UParticleModuleRotation_Seeded:UParticleModuleRotation
	/// Size: 0x88
	/// Properties: 1
	/// </summary>
	public class UParticleModuleRotation_Seeded:UParticleModuleRotation
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: RandomSeedInfo
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x20
		/// </summary>
		public FParticleRandomSeedInfo RandomSeedInfo => ReadStruct<FParticleRandomSeedInfo>(0x68);
		
	}


	/// <summary>
	/// UParticleModuleRotationOverLifetime:UParticleModuleRotationBase
	/// Size: 0x70
	/// Properties: 2
	/// </summary>
	public class UParticleModuleRotationOverLifetime:UParticleModuleRotationBase
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: RotationOverLife
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat RotationOverLife => ReadStruct<FRawDistributionFloat>(0x30);
		
		/// <summary>
		/// Name: Scale
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool Scale => (ReadByte(0x0068) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleRotationRateBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleRotationRateBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleMeshRotationRate:UParticleModuleRotationRateBase
	/// Size: 0x80
	/// Properties: 1
	/// </summary>
	public class UParticleModuleMeshRotationRate:UParticleModuleRotationRateBase
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: StartRotationRate
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector StartRotationRate => ReadStruct<FRawDistributionVector>(0x30);
		
	}


	/// <summary>
	/// UParticleModuleRotationRate:UParticleModuleRotationRateBase
	/// Size: 0x68
	/// Properties: 1
	/// </summary>
	public class UParticleModuleRotationRate:UParticleModuleRotationRateBase
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: StartRotationRate
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat StartRotationRate => ReadStruct<FRawDistributionFloat>(0x30);
		
	}


	/// <summary>
	/// UParticleModuleMeshRotationRate_Seeded:UParticleModuleMeshRotationRate
	/// Size: 0xA0
	/// Properties: 1
	/// </summary>
	public class UParticleModuleMeshRotationRate_Seeded:UParticleModuleMeshRotationRate
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: RandomSeedInfo
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x20
		/// </summary>
		public FParticleRandomSeedInfo RandomSeedInfo => ReadStruct<FParticleRandomSeedInfo>(0x80);
		
	}


	/// <summary>
	/// UParticleModuleMeshRotationRateMultiplyLife:UParticleModuleRotationRateBase
	/// Size: 0x80
	/// Properties: 1
	/// </summary>
	public class UParticleModuleMeshRotationRateMultiplyLife:UParticleModuleRotationRateBase
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: LifeMultiplier
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector LifeMultiplier => ReadStruct<FRawDistributionVector>(0x30);
		
	}


	/// <summary>
	/// UParticleModuleMeshRotationRateOverLife:UParticleModuleRotationRateBase
	/// Size: 0x88
	/// Properties: 2
	/// </summary>
	public class UParticleModuleMeshRotationRateOverLife:UParticleModuleRotationRateBase
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: RotRate
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector RotRate => ReadStruct<FRawDistributionVector>(0x30);
		
		/// <summary>
		/// Name: bScaleRotRate
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bScaleRotRate => (ReadByte(0x0080) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleRotationRate_Seeded:UParticleModuleRotationRate
	/// Size: 0x88
	/// Properties: 1
	/// </summary>
	public class UParticleModuleRotationRate_Seeded:UParticleModuleRotationRate
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: RandomSeedInfo
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x20
		/// </summary>
		public FParticleRandomSeedInfo RandomSeedInfo => ReadStruct<FParticleRandomSeedInfo>(0x68);
		
	}


	/// <summary>
	/// UParticleModuleRotationRateMultiplyLife:UParticleModuleRotationRateBase
	/// Size: 0x68
	/// Properties: 1
	/// </summary>
	public class UParticleModuleRotationRateMultiplyLife:UParticleModuleRotationRateBase
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: LifeMultiplier
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat LifeMultiplier => ReadStruct<FRawDistributionFloat>(0x30);
		
	}


	/// <summary>
	/// UParticleModuleSizeBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleSizeBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleSize:UParticleModuleSizeBase
	/// Size: 0x80
	/// Properties: 1
	/// </summary>
	public class UParticleModuleSize:UParticleModuleSizeBase
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: StartSize
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector StartSize => ReadStruct<FRawDistributionVector>(0x30);
		
	}


	/// <summary>
	/// UParticleModuleSize_Seeded:UParticleModuleSize
	/// Size: 0xA0
	/// Properties: 1
	/// </summary>
	public class UParticleModuleSize_Seeded:UParticleModuleSize
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: RandomSeedInfo
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x20
		/// </summary>
		public FParticleRandomSeedInfo RandomSeedInfo => ReadStruct<FParticleRandomSeedInfo>(0x80);
		
	}


	/// <summary>
	/// UParticleModuleSizeMultiplyLife:UParticleModuleSizeBase
	/// Size: 0x88
	/// Properties: 4
	/// </summary>
	public class UParticleModuleSizeMultiplyLife:UParticleModuleSizeBase
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: LifeMultiplier
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector LifeMultiplier => ReadStruct<FRawDistributionVector>(0x30);
		
		/// <summary>
		/// Name: MultiplyX
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool MultiplyX => (ReadByte(0x0080) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: MultiplyY
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool MultiplyY => (ReadByte(0x0080) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: MultiplyZ
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool MultiplyZ => (ReadByte(0x0080) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// UParticleModuleSizeScale:UParticleModuleSizeBase
	/// Size: 0x88
	/// Properties: 4
	/// </summary>
	public class UParticleModuleSizeScale:UParticleModuleSizeBase
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: SizeScale
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector SizeScale => ReadStruct<FRawDistributionVector>(0x30);
		
		/// <summary>
		/// Name: EnableX
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool EnableX => (ReadByte(0x0080) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: EnableY
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool EnableY => (ReadByte(0x0080) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: EnableZ
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool EnableZ => (ReadByte(0x0080) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// UParticleModuleSizeScaleBySpeed:UParticleModuleSizeBase
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class UParticleModuleSizeScaleBySpeed:UParticleModuleSizeBase
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: SpeedScale
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public FVector2D SpeedScale => ReadStruct<FVector2D>(0x30);
		
		/// <summary>
		/// Name: MaxScale
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public FVector2D MaxScale => ReadStruct<FVector2D>(0x38);
		
	}


	/// <summary>
	/// UParticleModuleSpawnBase:UParticleModule
	/// Size: 0x38
	/// Properties: 2
	/// </summary>
	public class UParticleModuleSpawnBase:UParticleModule
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: bProcessSpawnRate
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bProcessSpawnRate => (ReadByte(0x0030) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bProcessBurstList
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bProcessBurstList => (ReadByte(0x0030) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// UParticleModuleSpawn:UParticleModuleSpawnBase
	/// Size: 0x100
	/// Properties: 6
	/// </summary>
	public class UParticleModuleSpawn:UParticleModuleSpawnBase
	{
		public override int ObjectSize => 256;
		/// <summary>
		/// Name: Rate
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat Rate => ReadStruct<FRawDistributionFloat>(0x38);
		
		/// <summary>
		/// Name: RateScale
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat RateScale => ReadStruct<FRawDistributionFloat>(0x70);
		
		/// <summary>
		/// Name: ParticleBurstMethod
		/// Type: ByteProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public byte ParticleBurstMethod
		{
			get
			{
				return ReadByte(0xA8);
			}
			set
			{
				WriteByte(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: BurstList
		/// Type: TArray<FParticleBurst>
		/// Offset: 0xB0
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FParticleBurst> BurstList => new TArray<FParticleBurst>(BaseAddress+0xB0);
		
		/// <summary>
		/// Name: BurstScale
		/// Type: StructProperty
		/// Offset: 0xC0
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat BurstScale => ReadStruct<FRawDistributionFloat>(0xC0);
		
		/// <summary>
		/// Name: bApplyGlobalSpawnRateScale
		/// Type: BoolProperty
		/// Offset: 0xF8
		/// Size: 0x01
		/// </summary>
		public bool bApplyGlobalSpawnRateScale => (ReadByte(0x00F8) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleSpawnPerUnit:UParticleModuleSpawnBase
	/// Size: 0x88
	/// Properties: 8
	/// </summary>
	public class UParticleModuleSpawnPerUnit:UParticleModuleSpawnBase
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: UnitScalar
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float UnitScalar
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: SpawnPerUnit
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat SpawnPerUnit => ReadStruct<FRawDistributionFloat>(0x40);
		
		/// <summary>
		/// Name: bIgnoreSpawnRateWhenMoving
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreSpawnRateWhenMoving => (ReadByte(0x0078) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: MovementTolerance
		/// Type: FloatProperty
		/// Offset: 0x7C
		/// Size: 0x04
		/// </summary>
		public float MovementTolerance
		{
			get
			{
				return ReadSingle(0x7C);
			}
			set
			{
				WriteSingle(0x7C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxFrameDistance
		/// Type: FloatProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public float MaxFrameDistance
		{
			get
			{
				return ReadSingle(0x80);
			}
			set
			{
				WriteSingle(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: bIgnoreMovementAlongX
		/// Type: BoolProperty
		/// Offset: 0x84
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreMovementAlongX => (ReadByte(0x0084) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bIgnoreMovementAlongY
		/// Type: BoolProperty
		/// Offset: 0x84
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreMovementAlongY => (ReadByte(0x0084) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bIgnoreMovementAlongZ
		/// Type: BoolProperty
		/// Offset: 0x84
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreMovementAlongZ => (ReadByte(0x0084) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// UParticleModuleSubUVBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleSubUVBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// USubUVAnimation:UObject
	/// Size: 0x60
	/// Properties: 5
	/// </summary>
	public class USubUVAnimation:UObject
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: SubUVTexture
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UTexture2D SubUVTexture => ReadUObject<UTexture2D>(0x28);
		
		/// <summary>
		/// Name: SubImages_Horizontal
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int SubImages_Horizontal
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: SubImages_Vertical
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int SubImages_Vertical
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: BoundingMode
		/// Type: ByteProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public byte BoundingMode
		{
			get
			{
				return ReadByte(0x38);
			}
			set
			{
				WriteByte(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: AlphaThreshold
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float AlphaThreshold
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleSubUV:UParticleModuleSubUVBase
	/// Size: 0x78
	/// Properties: 3
	/// </summary>
	public class UParticleModuleSubUV:UParticleModuleSubUVBase
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: Animation
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public USubUVAnimation Animation => ReadUObject<USubUVAnimation>(0x30);
		
		/// <summary>
		/// Name: SubImageIndex
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat SubImageIndex => ReadStruct<FRawDistributionFloat>(0x38);
		
		/// <summary>
		/// Name: bUseRealTime
		/// Type: BoolProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public bool bUseRealTime => (ReadByte(0x0070) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleSubUVMovie:UParticleModuleSubUV
	/// Size: 0xC0
	/// Properties: 3
	/// </summary>
	public class UParticleModuleSubUVMovie:UParticleModuleSubUV
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: bUseEmitterTime
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bUseEmitterTime => (ReadByte(0x0078) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: FrameRate
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat FrameRate => ReadStruct<FRawDistributionFloat>(0x80);
		
		/// <summary>
		/// Name: StartingFrame
		/// Type: IntProperty
		/// Offset: 0xB8
		/// Size: 0x04
		/// </summary>
		public int StartingFrame
		{
			get
			{
				return ReadInt32(0xB8);
			}
			set
			{
				WriteInt32(0xB8,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleTrailBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleTrailBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleTrailSource:UParticleModuleTrailBase
	/// Size: 0x98
	/// Properties: 8
	/// </summary>
	public class UParticleModuleTrailSource:UParticleModuleTrailBase
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: SourceMethod
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte SourceMethod
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: SourceName
		/// Type: NameProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SourceStrength
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat SourceStrength => ReadStruct<FRawDistributionFloat>(0x40);
		
		/// <summary>
		/// Name: bLockSourceStength
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bLockSourceStength => (ReadByte(0x0078) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: SourceOffsetCount
		/// Type: IntProperty
		/// Offset: 0x7C
		/// Size: 0x04
		/// </summary>
		public int SourceOffsetCount
		{
			get
			{
				return ReadInt32(0x7C);
			}
			set
			{
				WriteInt32(0x7C,value);
			}
		}
		
		/// <summary>
		/// Name: SourceOffsetDefaults
		/// Type: TArray<FVector>
		/// Offset: 0x80
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> SourceOffsetDefaults => new TArray<FVector>(BaseAddress+0x80);
		
		/// <summary>
		/// Name: SelectionMethod
		/// Type: ByteProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public byte SelectionMethod
		{
			get
			{
				return ReadByte(0x90);
			}
			set
			{
				WriteByte(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: bInheritRotation
		/// Type: BoolProperty
		/// Offset: 0x94
		/// Size: 0x01
		/// </summary>
		public bool bInheritRotation => (ReadByte(0x0094) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleTypeDataBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleTypeDataBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleTypeDataAnimTrail:UParticleModuleTypeDataBase
	/// Size: 0x48
	/// Properties: 7
	/// </summary>
	public class UParticleModuleTypeDataAnimTrail:UParticleModuleTypeDataBase
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: bDeadTrailsOnDeactivate
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bDeadTrailsOnDeactivate => (ReadByte(0x0030) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bEnablePreviousTangentRecalculation
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bEnablePreviousTangentRecalculation => (ReadByte(0x0030) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bTangentRecalculationEveryFrame
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bTangentRecalculationEveryFrame => (ReadByte(0x0030) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: TilingDistance
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float TilingDistance
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: DistanceTessellationStepSize
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float DistanceTessellationStepSize
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: TangentTessellationStepSize
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float TangentTessellationStepSize
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: WidthTessellationStepSize
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float WidthTessellationStepSize
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleTypeDataBeam2:UParticleModuleTypeDataBase
	/// Size: 0x168
	/// Properties: 18
	/// </summary>
	public class UParticleModuleTypeDataBeam2:UParticleModuleTypeDataBase
	{
		public override int ObjectSize => 360;
		/// <summary>
		/// Name: BeamMethod
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte BeamMethod
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: TextureTile
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int TextureTile
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: TextureTileDistance
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float TextureTileDistance
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: Sheets
		/// Type: IntProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public int Sheets
		{
			get
			{
				return ReadInt32(0x3C);
			}
			set
			{
				WriteInt32(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxBeamCount
		/// Type: IntProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public int MaxBeamCount
		{
			get
			{
				return ReadInt32(0x40);
			}
			set
			{
				WriteInt32(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: Speed
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float Speed
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: InterpolationPoints
		/// Type: IntProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public int InterpolationPoints
		{
			get
			{
				return ReadInt32(0x48);
			}
			set
			{
				WriteInt32(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: bAlwaysOn
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bAlwaysOn => (ReadByte(0x004C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: UpVectorStepSize
		/// Type: IntProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public int UpVectorStepSize
		{
			get
			{
				return ReadInt32(0x50);
			}
			set
			{
				WriteInt32(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: BranchParentName
		/// Type: NameProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Distance
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat Distance => ReadStruct<FRawDistributionFloat>(0x60);
		
		/// <summary>
		/// Name: TaperMethod
		/// Type: ByteProperty
		/// Offset: 0x98
		/// Size: 0x01
		/// </summary>
		public byte TaperMethod
		{
			get
			{
				return ReadByte(0x98);
			}
			set
			{
				WriteByte(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: TaperFactor
		/// Type: StructProperty
		/// Offset: 0xA0
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat TaperFactor => ReadStruct<FRawDistributionFloat>(0xA0);
		
		/// <summary>
		/// Name: TaperScale
		/// Type: StructProperty
		/// Offset: 0xD8
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat TaperScale => ReadStruct<FRawDistributionFloat>(0xD8);
		
		/// <summary>
		/// Name: RenderGeometry
		/// Type: BoolProperty
		/// Offset: 0x110
		/// Size: 0x01
		/// </summary>
		public bool RenderGeometry => (ReadByte(0x0110) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: RenderDirectLine
		/// Type: BoolProperty
		/// Offset: 0x110
		/// Size: 0x01
		/// </summary>
		public bool RenderDirectLine => (ReadByte(0x0110) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: RenderLines
		/// Type: BoolProperty
		/// Offset: 0x110
		/// Size: 0x01
		/// </summary>
		public bool RenderLines => (ReadByte(0x0110) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: RenderTessellation
		/// Type: BoolProperty
		/// Offset: 0x110
		/// Size: 0x01
		/// </summary>
		public bool RenderTessellation => (ReadByte(0x0110) & 0x08) == 0x08;
		
	}


	/// <summary>
	/// UParticleModuleTypeDataGpu:UParticleModuleTypeDataBase
	/// Size: 0x440
	/// Properties: 4
	/// </summary>
	public class UParticleModuleTypeDataGpu:UParticleModuleTypeDataBase
	{
		public override int ObjectSize => 1088;
		/// <summary>
		/// Name: EmitterInfo
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x2B0
		/// </summary>
		public FGPUSpriteEmitterInfo EmitterInfo => ReadStruct<FGPUSpriteEmitterInfo>(0x30);
		
		/// <summary>
		/// Name: ResourceData
		/// Type: StructProperty
		/// Offset: 0x2E0
		/// Size: 0x150
		/// </summary>
		public FGPUSpriteResourceData ResourceData => ReadStruct<FGPUSpriteResourceData>(0x2E0);
		
		/// <summary>
		/// Name: CameraMotionBlurAmount
		/// Type: FloatProperty
		/// Offset: 0x430
		/// Size: 0x04
		/// </summary>
		public float CameraMotionBlurAmount
		{
			get
			{
				return ReadSingle(0x430);
			}
			set
			{
				WriteSingle(0x430,value);
			}
		}
		
		/// <summary>
		/// Name: bClearExistingParticlesOnInit
		/// Type: BoolProperty
		/// Offset: 0x434
		/// Size: 0x01
		/// </summary>
		public bool bClearExistingParticlesOnInit => (ReadByte(0x0434) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleTypeDataMesh:UParticleModuleTypeDataBase
	/// Size: 0xB8
	/// Properties: 18
	/// </summary>
	public class UParticleModuleTypeDataMesh:UParticleModuleTypeDataBase
	{
		public override int ObjectSize => 184;
		/// <summary>
		/// Name: Mesh
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UStaticMesh Mesh => ReadUObject<UStaticMesh>(0x30);
		
		/// <summary>
		/// Name: CastShadows
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool CastShadows => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: DoCollisions
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool DoCollisions => (ReadByte(0x0038) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: MeshAlignment
		/// Type: ByteProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public byte MeshAlignment
		{
			get
			{
				return ReadByte(0x3C);
			}
			set
			{
				WriteByte(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: bOverrideMaterial
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bOverrideMaterial => (ReadByte(0x0040) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverrideDefaultMotionBlurSettings
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bOverrideDefaultMotionBlurSettings => (ReadByte(0x0040) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bEnableMotionBlur
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bEnableMotionBlur => (ReadByte(0x0040) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: Pitch
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float Pitch
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: Roll
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float Roll
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: Yaw
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float Yaw
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: RollPitchYawRange
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector RollPitchYawRange => ReadStruct<FRawDistributionVector>(0x50);
		
		/// <summary>
		/// Name: AxisLockOption
		/// Type: ByteProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public byte AxisLockOption
		{
			get
			{
				return ReadByte(0xA8);
			}
			set
			{
				WriteByte(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: bCameraFacing
		/// Type: BoolProperty
		/// Offset: 0xAC
		/// Size: 0x01
		/// </summary>
		public bool bCameraFacing => (ReadByte(0x00AC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CameraFacingUpAxisOption
		/// Type: ByteProperty
		/// Offset: 0xB0
		/// Size: 0x01
		/// </summary>
		public byte CameraFacingUpAxisOption
		{
			get
			{
				return ReadByte(0xB0);
			}
			set
			{
				WriteByte(0xB0,value);
			}
		}
		
		/// <summary>
		/// Name: CameraFacingOption
		/// Type: ByteProperty
		/// Offset: 0xB1
		/// Size: 0x01
		/// </summary>
		public byte CameraFacingOption
		{
			get
			{
				return ReadByte(0xB1);
			}
			set
			{
				WriteByte(0xB1,value);
			}
		}
		
		/// <summary>
		/// Name: bApplyParticleRotationAsSpin
		/// Type: BoolProperty
		/// Offset: 0xB4
		/// Size: 0x01
		/// </summary>
		public bool bApplyParticleRotationAsSpin => (ReadByte(0x00B4) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bFaceCameraDirectionRatherThanPosition
		/// Type: BoolProperty
		/// Offset: 0xB4
		/// Size: 0x01
		/// </summary>
		public bool bFaceCameraDirectionRatherThanPosition => (ReadByte(0x00B4) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bCollisionsConsiderPartilceSize
		/// Type: BoolProperty
		/// Offset: 0xB4
		/// Size: 0x01
		/// </summary>
		public bool bCollisionsConsiderPartilceSize => (ReadByte(0x00B4) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// UParticleModuleTypeDataRibbon:UParticleModuleTypeDataBase
	/// Size: 0x60
	/// Properties: 20
	/// </summary>
	public class UParticleModuleTypeDataRibbon:UParticleModuleTypeDataBase
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: MaxTessellationBetweenParticles
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int MaxTessellationBetweenParticles
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: SheetsPerTrail
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int SheetsPerTrail
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: MaxTrailCount
		/// Type: IntProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public int MaxTrailCount
		{
			get
			{
				return ReadInt32(0x38);
			}
			set
			{
				WriteInt32(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: MaxParticleInTrailCount
		/// Type: IntProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public int MaxParticleInTrailCount
		{
			get
			{
				return ReadInt32(0x3C);
			}
			set
			{
				WriteInt32(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: bDeadTrailsOnDeactivate
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bDeadTrailsOnDeactivate => (ReadByte(0x0040) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDeadTrailsOnSourceLoss
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bDeadTrailsOnSourceLoss => (ReadByte(0x0040) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bClipSourceSegement
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bClipSourceSegement => (ReadByte(0x0040) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bEnablePreviousTangentRecalculation
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bEnablePreviousTangentRecalculation => (ReadByte(0x0040) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bTangentRecalculationEveryFrame
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bTangentRecalculationEveryFrame => (ReadByte(0x0040) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bSpawnInitialParticle
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bSpawnInitialParticle => (ReadByte(0x0040) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: RenderAxis
		/// Type: ByteProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public byte RenderAxis
		{
			get
			{
				return ReadByte(0x44);
			}
			set
			{
				WriteByte(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: TangentSpawningScalar
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float TangentSpawningScalar
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: bRenderGeometry
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bRenderGeometry => (ReadByte(0x004C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bRenderSpawnPoints
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bRenderSpawnPoints => (ReadByte(0x004C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bRenderTangents
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bRenderTangents => (ReadByte(0x004C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bRenderTessellation
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bRenderTessellation => (ReadByte(0x004C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: TilingDistance
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float TilingDistance
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: DistanceTessellationStepSize
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float DistanceTessellationStepSize
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableTangentDiffInterpScale
		/// Type: BoolProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public bool bEnableTangentDiffInterpScale => (ReadByte(0x0058) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: TangentTessellationScalar
		/// Type: FloatProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public float TangentTessellationScalar
		{
			get
			{
				return ReadSingle(0x5C);
			}
			set
			{
				WriteSingle(0x5C,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleVectorFieldBase:UParticleModule
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UParticleModuleVectorFieldBase:UParticleModule
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UParticleModuleVectorFieldGlobal:UParticleModuleVectorFieldBase
	/// Size: 0x40
	/// Properties: 3
	/// </summary>
	public class UParticleModuleVectorFieldGlobal:UParticleModuleVectorFieldBase
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: bOverrideGlobalVectorFieldTightness
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bOverrideGlobalVectorFieldTightness => (ReadByte(0x0030) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: GlobalVectorFieldScale
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float GlobalVectorFieldScale
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: GlobalVectorFieldTightness
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float GlobalVectorFieldTightness
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// UParticleModuleVectorFieldLocal:UParticleModuleVectorFieldBase
	/// Size: 0x68
	/// Properties: 10
	/// </summary>
	public class UParticleModuleVectorFieldLocal:UParticleModuleVectorFieldBase
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: VectorField
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UVectorField VectorField => ReadUObject<UVectorField>(0x30);
		
		/// <summary>
		/// Name: RelativeTranslation
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x0C
		/// </summary>
		public FVector RelativeTranslation => ReadStruct<FVector>(0x38);
		
		/// <summary>
		/// Name: RelativeRotation
		/// Type: StructProperty
		/// Offset: 0x44
		/// Size: 0x0C
		/// </summary>
		public FRotator RelativeRotation => ReadStruct<FRotator>(0x44);
		
		/// <summary>
		/// Name: RelativeScale3D
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x0C
		/// </summary>
		public FVector RelativeScale3D => ReadStruct<FVector>(0x50);
		
		/// <summary>
		/// Name: Intensity
		/// Type: FloatProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public float Intensity
		{
			get
			{
				return ReadSingle(0x5C);
			}
			set
			{
				WriteSingle(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: Tightness
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float Tightness
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: bIgnoreComponentTransform
		/// Type: BoolProperty
		/// Offset: 0x64
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreComponentTransform => (ReadByte(0x0064) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bTileX
		/// Type: BoolProperty
		/// Offset: 0x64
		/// Size: 0x01
		/// </summary>
		public bool bTileX => (ReadByte(0x0064) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bTileY
		/// Type: BoolProperty
		/// Offset: 0x64
		/// Size: 0x01
		/// </summary>
		public bool bTileY => (ReadByte(0x0064) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bTileZ
		/// Type: BoolProperty
		/// Offset: 0x64
		/// Size: 0x01
		/// </summary>
		public bool bTileZ => (ReadByte(0x0064) & 0x08) == 0x08;
		
	}


	/// <summary>
	/// UParticleModuleVectorFieldRotation:UParticleModuleVectorFieldBase
	/// Size: 0x48
	/// Properties: 2
	/// </summary>
	public class UParticleModuleVectorFieldRotation:UParticleModuleVectorFieldBase
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: MinInitialRotation
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x0C
		/// </summary>
		public FVector MinInitialRotation => ReadStruct<FVector>(0x30);
		
		/// <summary>
		/// Name: MaxInitialRotation
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x0C
		/// </summary>
		public FVector MaxInitialRotation => ReadStruct<FVector>(0x3C);
		
	}


	/// <summary>
	/// UParticleModuleVectorFieldRotationRate:UParticleModuleVectorFieldBase
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class UParticleModuleVectorFieldRotationRate:UParticleModuleVectorFieldBase
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: RotationRate
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x0C
		/// </summary>
		public FVector RotationRate => ReadStruct<FVector>(0x30);
		
	}


	/// <summary>
	/// UParticleModuleVectorFieldScale:UParticleModuleVectorFieldBase
	/// Size: 0x70
	/// Properties: 2
	/// </summary>
	public class UParticleModuleVectorFieldScale:UParticleModuleVectorFieldBase
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: VectorFieldScale
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UDistributionFloat VectorFieldScale => ReadUObject<UDistributionFloat>(0x30);
		
		/// <summary>
		/// Name: VectorFieldScaleRaw
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat VectorFieldScaleRaw => ReadStruct<FRawDistributionFloat>(0x38);
		
	}


	/// <summary>
	/// UParticleModuleVectorFieldScaleOverLife:UParticleModuleVectorFieldBase
	/// Size: 0x70
	/// Properties: 2
	/// </summary>
	public class UParticleModuleVectorFieldScaleOverLife:UParticleModuleVectorFieldBase
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: VectorFieldScaleOverLife
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UDistributionFloat VectorFieldScaleOverLife => ReadUObject<UDistributionFloat>(0x30);
		
		/// <summary>
		/// Name: VectorFieldScaleOverLifeRaw
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat VectorFieldScaleOverLifeRaw => ReadStruct<FRawDistributionFloat>(0x38);
		
	}


	/// <summary>
	/// UParticleModuleVelocityBase:UParticleModule
	/// Size: 0x38
	/// Properties: 2
	/// </summary>
	public class UParticleModuleVelocityBase:UParticleModule
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: bInWorldSpace
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bInWorldSpace => (ReadByte(0x0030) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bApplyOwnerScale
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bApplyOwnerScale => (ReadByte(0x0030) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// UParticleModuleVelocity:UParticleModuleVelocityBase
	/// Size: 0xC0
	/// Properties: 2
	/// </summary>
	public class UParticleModuleVelocity:UParticleModuleVelocityBase
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: StartVelocity
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector StartVelocity => ReadStruct<FRawDistributionVector>(0x38);
		
		/// <summary>
		/// Name: StartVelocityRadial
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat StartVelocityRadial => ReadStruct<FRawDistributionFloat>(0x88);
		
	}


	/// <summary>
	/// UParticleModuleVelocity_Seeded:UParticleModuleVelocity
	/// Size: 0xE0
	/// Properties: 1
	/// </summary>
	public class UParticleModuleVelocity_Seeded:UParticleModuleVelocity
	{
		public override int ObjectSize => 224;
		/// <summary>
		/// Name: RandomSeedInfo
		/// Type: StructProperty
		/// Offset: 0xC0
		/// Size: 0x20
		/// </summary>
		public FParticleRandomSeedInfo RandomSeedInfo => ReadStruct<FParticleRandomSeedInfo>(0xC0);
		
	}


	/// <summary>
	/// UParticleModuleVelocityCone:UParticleModuleVelocityBase
	/// Size: 0xB8
	/// Properties: 3
	/// </summary>
	public class UParticleModuleVelocityCone:UParticleModuleVelocityBase
	{
		public override int ObjectSize => 184;
		/// <summary>
		/// Name: Angle
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat Angle => ReadStruct<FRawDistributionFloat>(0x38);
		
		/// <summary>
		/// Name: Velocity
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat Velocity => ReadStruct<FRawDistributionFloat>(0x70);
		
		/// <summary>
		/// Name: Direction
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x0C
		/// </summary>
		public FVector Direction => ReadStruct<FVector>(0xA8);
		
	}


	/// <summary>
	/// UParticleModuleVelocityInheritParent:UParticleModuleVelocityBase
	/// Size: 0x88
	/// Properties: 1
	/// </summary>
	public class UParticleModuleVelocityInheritParent:UParticleModuleVelocityBase
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: Scale
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector Scale => ReadStruct<FRawDistributionVector>(0x38);
		
	}


	/// <summary>
	/// UParticleModuleVelocityOverLifetime:UParticleModuleVelocityBase
	/// Size: 0x90
	/// Properties: 2
	/// </summary>
	public class UParticleModuleVelocityOverLifetime:UParticleModuleVelocityBase
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: VelOverLife
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector VelOverLife => ReadStruct<FRawDistributionVector>(0x38);
		
		/// <summary>
		/// Name: Absolute
		/// Type: BoolProperty
		/// Offset: 0x88
		/// Size: 0x01
		/// </summary>
		public bool Absolute => (ReadByte(0x0088) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UParticleModuleEventSendToGame:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UParticleModuleEventSendToGame:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UParticleSystemReplay:UObject
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class UParticleSystemReplay:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: ClipIDNumber
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int ClipIDNumber
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// UDemoPendingNetGame:UPendingNetGame
	/// Size: 0xC8
	/// Properties: 0
	/// </summary>
	public class UDemoPendingNetGame:UPendingNetGame
	{
		public override int ObjectSize => 200;
	}


	/// <summary>
	/// UPhysicalMaterial:UObject
	/// Size: 0x88
	/// Properties: 15
	/// </summary>
	public class UPhysicalMaterial:UObject
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: Friction
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float Friction
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: FrictionCombineMode
		/// Type: ByteProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public byte FrictionCombineMode
		{
			get
			{
				return ReadByte(0x2C);
			}
			set
			{
				WriteByte(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: bOverrideFrictionCombineMode
		/// Type: BoolProperty
		/// Offset: 0x2D
		/// Size: 0x01
		/// </summary>
		public bool bOverrideFrictionCombineMode
		{
			get
			{
				return ReadBool(0x2D);
			}
			set
			{
				WriteBool(0x2D,value);
			}
		}
		
		/// <summary>
		/// Name: Restitution
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float Restitution
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: RestitutionCombineMode
		/// Type: ByteProperty
		/// Offset: 0x34
		/// Size: 0x01
		/// </summary>
		public byte RestitutionCombineMode
		{
			get
			{
				return ReadByte(0x34);
			}
			set
			{
				WriteByte(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: bOverrideRestitutionCombineMode
		/// Type: BoolProperty
		/// Offset: 0x35
		/// Size: 0x01
		/// </summary>
		public bool bOverrideRestitutionCombineMode
		{
			get
			{
				return ReadBool(0x35);
			}
			set
			{
				WriteBool(0x35,value);
			}
		}
		
		/// <summary>
		/// Name: Density
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float Density
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: RaiseMassToPower
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float RaiseMassToPower
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: DestructibleDamageThresholdScale
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float DestructibleDamageThresholdScale
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: PhysicalMaterialProperty
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public UPhysicalMaterialPropertyBase PhysicalMaterialProperty => ReadUObject<UPhysicalMaterialPropertyBase>(0x48);
		
		/// <summary>
		/// Name: SurfaceType
		/// Type: ByteProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public byte SurfaceType
		{
			get
			{
				return ReadByte(0x50);
			}
			set
			{
				WriteByte(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: GatherMaterialTypeID
		/// Type: IntProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public int GatherMaterialTypeID
		{
			get
			{
				return ReadInt32(0x54);
			}
			set
			{
				WriteInt32(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: SoundEmitterType
		/// Type: IntProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public int SoundEmitterType
		{
			get
			{
				return ReadInt32(0x58);
			}
			set
			{
				WriteInt32(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: TireFrictionScale
		/// Type: FloatProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public float TireFrictionScale
		{
			get
			{
				return ReadSingle(0x5C);
			}
			set
			{
				WriteSingle(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: TireFrictionScales
		/// Type: TArray<FTireFrictionScalePair>
		/// Offset: 0x60
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FTireFrictionScalePair> TireFrictionScales => new TArray<FTireFrictionScalePair>(BaseAddress+0x60);
		
	}


	/// <summary>
	/// UPhysicalMaterialPropertyBase:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UPhysicalMaterialPropertyBase:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UPhysicsAsset:UObject
	/// Size: 0xF8
	/// Properties: 3
	/// </summary>
	public class UPhysicsAsset:UObject
	{
		public override int ObjectSize => 248;
		/// <summary>
		/// Name: BodySetup
		/// Type: TArray<UBodySetup>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x2E0
		/// </summary>
		public TArray<UBodySetup> BodySetup => new TArray<UBodySetup>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: BoundsBodies
		/// Type: TArray<>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: ConstraintSetup
		/// Type: TArray<UPhysicsConstraintTemplate>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x240
		/// </summary>
		public TArray<UPhysicsConstraintTemplate> ConstraintSetup => new TArray<UPhysicsConstraintTemplate>(BaseAddress+0x48);
		
	}


	/// <summary>
	/// UPhysicsCollisionHandler:UObject
	/// Size: 0x40
	/// Properties: 4
	/// </summary>
	public class UPhysicsCollisionHandler:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: ImpactThreshold
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float ImpactThreshold
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: ImpactReFireDelay
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float ImpactReFireDelay
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultImpactSound
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public USoundBase DefaultImpactSound => ReadUObject<USoundBase>(0x30);
		
		/// <summary>
		/// Name: LastImpactSoundTime
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float LastImpactSoundTime
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// UPhysicsConstraintTemplate:UObject
	/// Size: 0x240
	/// Properties: 36
	/// </summary>
	public class UPhysicsConstraintTemplate:UObject
	{
		public override int ObjectSize => 576;
		/// <summary>
		/// Name: JointName
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ConstraintBone1
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ConstraintBone2
		/// Type: NameProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Pos1
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x0C
		/// </summary>
		public FVector Pos1 => ReadStruct<FVector>(0x40);
		
		/// <summary>
		/// Name: PriAxis1
		/// Type: StructProperty
		/// Offset: 0x4C
		/// Size: 0x0C
		/// </summary>
		public FVector PriAxis1 => ReadStruct<FVector>(0x4C);
		
		/// <summary>
		/// Name: SecAxis1
		/// Type: StructProperty
		/// Offset: 0x58
		/// Size: 0x0C
		/// </summary>
		public FVector SecAxis1 => ReadStruct<FVector>(0x58);
		
		/// <summary>
		/// Name: Pos2
		/// Type: StructProperty
		/// Offset: 0x64
		/// Size: 0x0C
		/// </summary>
		public FVector Pos2 => ReadStruct<FVector>(0x64);
		
		/// <summary>
		/// Name: PriAxis2
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x0C
		/// </summary>
		public FVector PriAxis2 => ReadStruct<FVector>(0x70);
		
		/// <summary>
		/// Name: SecAxis2
		/// Type: StructProperty
		/// Offset: 0x7C
		/// Size: 0x0C
		/// </summary>
		public FVector SecAxis2 => ReadStruct<FVector>(0x7C);
		
		/// <summary>
		/// Name: bEnableProjection
		/// Type: BoolProperty
		/// Offset: 0x88
		/// Size: 0x01
		/// </summary>
		public bool bEnableProjection => (ReadByte(0x0088) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ProjectionLinearTolerance
		/// Type: FloatProperty
		/// Offset: 0x8C
		/// Size: 0x04
		/// </summary>
		public float ProjectionLinearTolerance
		{
			get
			{
				return ReadSingle(0x8C);
			}
			set
			{
				WriteSingle(0x8C,value);
			}
		}
		
		/// <summary>
		/// Name: ProjectionAngularTolerance
		/// Type: FloatProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public float ProjectionAngularTolerance
		{
			get
			{
				return ReadSingle(0x90);
			}
			set
			{
				WriteSingle(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: LinearXMotion
		/// Type: ByteProperty
		/// Offset: 0x94
		/// Size: 0x01
		/// </summary>
		public byte LinearXMotion
		{
			get
			{
				return ReadByte(0x94);
			}
			set
			{
				WriteByte(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: LinearYMotion
		/// Type: ByteProperty
		/// Offset: 0x95
		/// Size: 0x01
		/// </summary>
		public byte LinearYMotion
		{
			get
			{
				return ReadByte(0x95);
			}
			set
			{
				WriteByte(0x95,value);
			}
		}
		
		/// <summary>
		/// Name: LinearZMotion
		/// Type: ByteProperty
		/// Offset: 0x96
		/// Size: 0x01
		/// </summary>
		public byte LinearZMotion
		{
			get
			{
				return ReadByte(0x96);
			}
			set
			{
				WriteByte(0x96,value);
			}
		}
		
		/// <summary>
		/// Name: LinearLimitSize
		/// Type: FloatProperty
		/// Offset: 0x98
		/// Size: 0x04
		/// </summary>
		public float LinearLimitSize
		{
			get
			{
				return ReadSingle(0x98);
			}
			set
			{
				WriteSingle(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: bLinearLimitSoft
		/// Type: BoolProperty
		/// Offset: 0x9C
		/// Size: 0x01
		/// </summary>
		public bool bLinearLimitSoft => (ReadByte(0x009C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LinearLimitStiffness
		/// Type: FloatProperty
		/// Offset: 0xA0
		/// Size: 0x04
		/// </summary>
		public float LinearLimitStiffness
		{
			get
			{
				return ReadSingle(0xA0);
			}
			set
			{
				WriteSingle(0xA0,value);
			}
		}
		
		/// <summary>
		/// Name: LinearLimitDamping
		/// Type: FloatProperty
		/// Offset: 0xA4
		/// Size: 0x04
		/// </summary>
		public float LinearLimitDamping
		{
			get
			{
				return ReadSingle(0xA4);
			}
			set
			{
				WriteSingle(0xA4,value);
			}
		}
		
		/// <summary>
		/// Name: bLinearBreakable
		/// Type: BoolProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public bool bLinearBreakable => (ReadByte(0x00A8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LinearBreakThreshold
		/// Type: FloatProperty
		/// Offset: 0xAC
		/// Size: 0x04
		/// </summary>
		public float LinearBreakThreshold
		{
			get
			{
				return ReadSingle(0xAC);
			}
			set
			{
				WriteSingle(0xAC,value);
			}
		}
		
		/// <summary>
		/// Name: AngularSwing1Motion
		/// Type: ByteProperty
		/// Offset: 0xB0
		/// Size: 0x01
		/// </summary>
		public byte AngularSwing1Motion
		{
			get
			{
				return ReadByte(0xB0);
			}
			set
			{
				WriteByte(0xB0,value);
			}
		}
		
		/// <summary>
		/// Name: AngularSwing2Motion
		/// Type: ByteProperty
		/// Offset: 0xB1
		/// Size: 0x01
		/// </summary>
		public byte AngularSwing2Motion
		{
			get
			{
				return ReadByte(0xB1);
			}
			set
			{
				WriteByte(0xB1,value);
			}
		}
		
		/// <summary>
		/// Name: AngularTwistMotion
		/// Type: ByteProperty
		/// Offset: 0xB2
		/// Size: 0x01
		/// </summary>
		public byte AngularTwistMotion
		{
			get
			{
				return ReadByte(0xB2);
			}
			set
			{
				WriteByte(0xB2,value);
			}
		}
		
		/// <summary>
		/// Name: bSwingLimitSoft
		/// Type: BoolProperty
		/// Offset: 0xB4
		/// Size: 0x01
		/// </summary>
		public bool bSwingLimitSoft => (ReadByte(0x00B4) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bTwistLimitSoft
		/// Type: BoolProperty
		/// Offset: 0xB4
		/// Size: 0x01
		/// </summary>
		public bool bTwistLimitSoft => (ReadByte(0x00B4) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: Swing1LimitAngle
		/// Type: FloatProperty
		/// Offset: 0xB8
		/// Size: 0x04
		/// </summary>
		public float Swing1LimitAngle
		{
			get
			{
				return ReadSingle(0xB8);
			}
			set
			{
				WriteSingle(0xB8,value);
			}
		}
		
		/// <summary>
		/// Name: Swing2LimitAngle
		/// Type: FloatProperty
		/// Offset: 0xBC
		/// Size: 0x04
		/// </summary>
		public float Swing2LimitAngle
		{
			get
			{
				return ReadSingle(0xBC);
			}
			set
			{
				WriteSingle(0xBC,value);
			}
		}
		
		/// <summary>
		/// Name: TwistLimitAngle
		/// Type: FloatProperty
		/// Offset: 0xC0
		/// Size: 0x04
		/// </summary>
		public float TwistLimitAngle
		{
			get
			{
				return ReadSingle(0xC0);
			}
			set
			{
				WriteSingle(0xC0,value);
			}
		}
		
		/// <summary>
		/// Name: SwingLimitStiffness
		/// Type: FloatProperty
		/// Offset: 0xC4
		/// Size: 0x04
		/// </summary>
		public float SwingLimitStiffness
		{
			get
			{
				return ReadSingle(0xC4);
			}
			set
			{
				WriteSingle(0xC4,value);
			}
		}
		
		/// <summary>
		/// Name: SwingLimitDamping
		/// Type: FloatProperty
		/// Offset: 0xC8
		/// Size: 0x04
		/// </summary>
		public float SwingLimitDamping
		{
			get
			{
				return ReadSingle(0xC8);
			}
			set
			{
				WriteSingle(0xC8,value);
			}
		}
		
		/// <summary>
		/// Name: TwistLimitStiffness
		/// Type: FloatProperty
		/// Offset: 0xCC
		/// Size: 0x04
		/// </summary>
		public float TwistLimitStiffness
		{
			get
			{
				return ReadSingle(0xCC);
			}
			set
			{
				WriteSingle(0xCC,value);
			}
		}
		
		/// <summary>
		/// Name: TwistLimitDamping
		/// Type: FloatProperty
		/// Offset: 0xD0
		/// Size: 0x04
		/// </summary>
		public float TwistLimitDamping
		{
			get
			{
				return ReadSingle(0xD0);
			}
			set
			{
				WriteSingle(0xD0,value);
			}
		}
		
		/// <summary>
		/// Name: bAngularBreakable
		/// Type: BoolProperty
		/// Offset: 0xD4
		/// Size: 0x01
		/// </summary>
		public bool bAngularBreakable => (ReadByte(0x00D4) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: AngularBreakThreshold
		/// Type: FloatProperty
		/// Offset: 0xD8
		/// Size: 0x04
		/// </summary>
		public float AngularBreakThreshold
		{
			get
			{
				return ReadSingle(0xD8);
			}
			set
			{
				WriteSingle(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultInstance
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x160
		/// </summary>
		public FConstraintInstance DefaultInstance => ReadStruct<FConstraintInstance>(0xE0);
		
	}


	/// <summary>
	/// UPhysicsSerializer:UObject
	/// Size: 0xD0
	/// Properties: 0
	/// </summary>
	public class UPhysicsSerializer:UObject
	{
		public override int ObjectSize => 208;
	}


	/// <summary>
	/// UPlatformInterfaceBase:UObject
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class UPlatformInterfaceBase:UObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: AllDelegates
		/// Type: TArray<FDelegateArray>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FDelegateArray> AllDelegates => new TArray<FDelegateArray>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// UCloudStorageBase:UPlatformInterfaceBase
	/// Size: 0x50
	/// Properties: 2
	/// </summary>
	public class UCloudStorageBase:UPlatformInterfaceBase
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: LocalCloudFiles
		/// Type: TArray<>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: bSuppressDelegateCalls
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool bSuppressDelegateCalls => (ReadByte(0x0048) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// UInGameAdManager:UPlatformInterfaceBase
	/// Size: 0x60
	/// Properties: 3
	/// </summary>
	public class UInGameAdManager:UPlatformInterfaceBase
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: bShouldPauseWhileAdOpen
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bShouldPauseWhileAdOpen => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ClickedBannerDelegates
		/// Type: TArray<>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: ClosedAdDelegates
		/// Type: TArray<>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// UMicroTransactionBase:UPlatformInterfaceBase
	/// Size: 0x68
	/// Properties: 3
	/// </summary>
	public class UMicroTransactionBase:UPlatformInterfaceBase
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: AvailableProducts
		/// Type: TArray<FPurchaseInfo>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FPurchaseInfo> AvailableProducts => new TArray<FPurchaseInfo>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: LastError
		/// Type: StrProperty
		/// Offset: 0x48
		/// Size: 0x10
		/// </summary>
		public FString LastError => new FString(BaseAddress+0x48);
		
		/// <summary>
		/// Name: LastErrorSolution
		/// Type: StrProperty
		/// Offset: 0x58
		/// Size: 0x10
		/// </summary>
		public FString LastErrorSolution => new FString(BaseAddress+0x58);
		
	}


	/// <summary>
	/// UTwitterIntegrationBase:UPlatformInterfaceBase
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class UTwitterIntegrationBase:UPlatformInterfaceBase
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UPlatformInterfaceWebResponse:UObject
	/// Size: 0xB0
	/// Properties: 5
	/// </summary>
	public class UPlatformInterfaceWebResponse:UObject
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: OriginalURL
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString OriginalURL => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: ResponseCode
		/// Type: IntProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public int ResponseCode
		{
			get
			{
				return ReadInt32(0x38);
			}
			set
			{
				WriteInt32(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: Tag
		/// Type: IntProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public int Tag
		{
			get
			{
				return ReadInt32(0x3C);
			}
			set
			{
				WriteInt32(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: StringResponse
		/// Type: StrProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FString StringResponse => new FString(BaseAddress+0x40);
		
		/// <summary>
		/// Name: BinaryResponse
		/// Type: TArray<>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// UChildConnection:UNetConnection
	/// Size: 0x336A8
	/// Properties: 1
	/// </summary>
	public class UChildConnection:UNetConnection
	{
		public override int ObjectSize => 210600;
		/// <summary>
		/// Name: Parent
		/// Type: ObjectProperty
		/// Offset: 0x336A0
		/// Size: 0x08
		/// </summary>
		public UNetConnection Parent => ReadUObject<UNetConnection>(0x336A0);
		
	}


	/// <summary>
	/// UDemoNetConnection:UNetConnection
	/// Size: 0x336B0
	/// Properties: 0
	/// </summary>
	public class UDemoNetConnection:UNetConnection
	{
		public override int ObjectSize => 210608;
	}


	/// <summary>
	/// UPolys:UObject
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class UPolys:UObject
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// UReporterBase:UObject
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class UReporterBase:UObject
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// UReporterGraph:UReporterBase
	/// Size: 0xA8
	/// Properties: 0
	/// </summary>
	public class UReporterGraph:UReporterBase
	{
		public override int ObjectSize => 168;
	}


	/// <summary>
	/// UReverbEffect:UObject
	/// Size: 0x58
	/// Properties: 12
	/// </summary>
	public class UReverbEffect:UObject
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: Density
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float Density
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: Diffusion
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float Diffusion
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: Gain
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float Gain
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: GainHF
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float GainHF
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: DecayTime
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float DecayTime
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: DecayHFRatio
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float DecayHFRatio
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: ReflectionsGain
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float ReflectionsGain
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: ReflectionsDelay
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float ReflectionsDelay
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: LateGain
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float LateGain
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: LateDelay
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float LateDelay
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: AirAbsorptionGainHF
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float AirAbsorptionGainHF
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: RoomRolloffFactor
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float RoomRolloffFactor
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
	}


	/// <summary>
	/// URig:UObject
	/// Size: 0x48
	/// Properties: 2
	/// </summary>
	public class URig:UObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: TransformBases
		/// Type: TArray<FTransformBase>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FTransformBase> TransformBases => new TArray<FTransformBase>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: Nodes
		/// Type: TArray<FNode>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x60
		/// </summary>
		public TArray<FNode> Nodes => new TArray<FNode>(BaseAddress+0x38);
		
	}


	/// <summary>
	/// USaveGame:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class USaveGame:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// USimpleConstructionScript:UObject
	/// Size: 0xB8
	/// Properties: 5
	/// </summary>
	public class USimpleConstructionScript:UObject
	{
		public override int ObjectSize => 184;
		/// <summary>
		/// Name: RootNodes
		/// Type: TArray<USCS_Node>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x130
		/// </summary>
		public TArray<USCS_Node> RootNodes => new TArray<USCS_Node>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: AllNodes
		/// Type: TArray<USCS_Node>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x130
		/// </summary>
		public TArray<USCS_Node> AllNodes => new TArray<USCS_Node>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: DefaultSceneRootNode
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public USCS_Node DefaultSceneRootNode => ReadUObject<USCS_Node>(0x48);
		
		/// <summary>
		/// Name: RootNode
		/// Type: ObjectProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public USCS_Node RootNode => ReadUObject<USCS_Node>(0x50);
		
		/// <summary>
		/// Name: ActorComponentNodes
		/// Type: TArray<USCS_Node>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x130
		/// </summary>
		public TArray<USCS_Node> ActorComponentNodes => new TArray<USCS_Node>(BaseAddress+0x58);
		
	}


	/// <summary>
	/// USCS_Node:UObject
	/// Size: 0x130
	/// Properties: 14
	/// </summary>
	public class USCS_Node:UObject
	{
		public override int ObjectSize => 304;
		/// <summary>
		/// Name: ComponentTemplate
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UActorComponent ComponentTemplate => ReadUObject<UActorComponent>(0x28);
		
		/// <summary>
		/// Name: CookedComponentInstancingData
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		public FBlueprintCookedComponentInstancingData CookedComponentInstancingData => ReadStruct<FBlueprintCookedComponentInstancingData>(0x30);
		
		/// <summary>
		/// Name: VariableName
		/// Type: NameProperty
		/// Offset: 0x80
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AttachToName
		/// Type: NameProperty
		/// Offset: 0x88
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ParentComponentOrVariableName
		/// Type: NameProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ParentComponentOwnerClassName
		/// Type: NameProperty
		/// Offset: 0x98
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bIsParentComponentNative
		/// Type: BoolProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public bool bIsParentComponentNative
		{
			get
			{
				return ReadBool(0xA0);
			}
			set
			{
				WriteBool(0xA0,value);
			}
		}
		
		/// <summary>
		/// Name: ChildNodes
		/// Type: TArray<USCS_Node>
		/// Offset: 0xA8
		/// Size: 0x10
		/// SubElement Size: 0x130
		/// </summary>
		public TArray<USCS_Node> ChildNodes => new TArray<USCS_Node>(BaseAddress+0xA8);
		
		/// <summary>
		/// Name: MetaDataArray
		/// Type: TArray<FBPVariableMetaDataEntry>
		/// Offset: 0xB8
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FBPVariableMetaDataEntry> MetaDataArray => new TArray<FBPVariableMetaDataEntry>(BaseAddress+0xB8);
		
		/// <summary>
		/// Name: VariableGuid
		/// Type: StructProperty
		/// Offset: 0xC8
		/// Size: 0x10
		/// </summary>
		public FGuid VariableGuid => ReadStruct<FGuid>(0xC8);
		
		/// <summary>
		/// Name: bIsFalseRoot
		/// Type: BoolProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public bool bIsFalseRoot
		{
			get
			{
				return ReadBool(0xD8);
			}
			set
			{
				WriteBool(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: bIsNative
		/// Type: BoolProperty
		/// Offset: 0xD9
		/// Size: 0x01
		/// </summary>
		public bool bIsNative
		{
			get
			{
				return ReadBool(0xD9);
			}
			set
			{
				WriteBool(0xD9,value);
			}
		}
		
		/// <summary>
		/// Name: NativeComponentName
		/// Type: NameProperty
		/// Offset: 0xE0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bVariableNameAutoGenerated
		/// Type: BoolProperty
		/// Offset: 0xE8
		/// Size: 0x01
		/// </summary>
		public bool bVariableNameAutoGenerated
		{
			get
			{
				return ReadBool(0xE8);
			}
			set
			{
				WriteBool(0xE8,value);
			}
		}
		
	}


	/// <summary>
	/// USelection:UObject
	/// Size: 0x58
	/// Properties: 0
	/// </summary>
	public class USelection:UObject
	{
		public override int ObjectSize => 88;
	}


	/// <summary>
	/// UDestructibleMesh:USkeletalMesh
	/// Size: 0x2E0
	/// Properties: 2
	/// </summary>
	public class UDestructibleMesh:USkeletalMesh
	{
		public override int ObjectSize => 736;
		/// <summary>
		/// Name: DefaultDestructibleParameters
		/// Type: StructProperty
		/// Offset: 0x240
		/// Size: 0x88
		/// </summary>
		public FDestructibleParameters DefaultDestructibleParameters => ReadStruct<FDestructibleParameters>(0x240);
		
		/// <summary>
		/// Name: FractureEffects
		/// Type: TArray<FFractureEffect>
		/// Offset: 0x2C8
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FFractureEffect> FractureEffects => new TArray<FFractureEffect>(BaseAddress+0x2C8);
		
	}


	/// <summary>
	/// USkeletalMeshReductionSettings:UObject
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class USkeletalMeshReductionSettings:UObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Settings
		/// Type: TArray<FSkeletalMeshLODGroupSettings>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0xF8
		/// </summary>
		public TArray<FSkeletalMeshLODGroupSettings> Settings => new TArray<FSkeletalMeshLODGroupSettings>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// USkeletalMeshSocket:UObject
	/// Size: 0x60
	/// Properties: 6
	/// </summary>
	public class USkeletalMeshSocket:UObject
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: SocketName
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: BoneName
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: RelativeLocation
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x0C
		/// </summary>
		public FVector RelativeLocation => ReadStruct<FVector>(0x38);
		
		/// <summary>
		/// Name: RelativeRotation
		/// Type: StructProperty
		/// Offset: 0x44
		/// Size: 0x0C
		/// </summary>
		public FRotator RelativeRotation => ReadStruct<FRotator>(0x44);
		
		/// <summary>
		/// Name: RelativeScale
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x0C
		/// </summary>
		public FVector RelativeScale => ReadStruct<FVector>(0x50);
		
		/// <summary>
		/// Name: bForceAlwaysAnimated
		/// Type: BoolProperty
		/// Offset: 0x5C
		/// Size: 0x01
		/// </summary>
		public bool bForceAlwaysAnimated
		{
			get
			{
				return ReadBool(0x5C);
			}
			set
			{
				WriteBool(0x5C,value);
			}
		}
		
	}


	/// <summary>
	/// USlateBrushAsset:UObject
	/// Size: 0xB8
	/// Properties: 1
	/// </summary>
	public class USlateBrushAsset:UObject
	{
		public override int ObjectSize => 184;
		/// <summary>
		/// Name: Brush
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x90
		/// </summary>
		public FSlateBrush Brush => ReadStruct<FSlateBrush>(0x28);
		
	}


	/// <summary>
	/// USoundConcurrency:UObject
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class USoundConcurrency:UObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Concurrency
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FSoundConcurrencySettings Concurrency => ReadStruct<FSoundConcurrencySettings>(0x28);
		
	}


	/// <summary>
	/// UDialogueSoundWaveProxy:USoundBase
	/// Size: 0x88
	/// Properties: 0
	/// </summary>
	public class UDialogueSoundWaveProxy:USoundBase
	{
		public override int ObjectSize => 136;
	}


	/// <summary>
	/// USoundCue:USoundBase
	/// Size: 0x190
	/// Properties: 5
	/// </summary>
	public class USoundCue:USoundBase
	{
		public override int ObjectSize => 400;
		/// <summary>
		/// Name: bOverrideAttenuation
		/// Type: BoolProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public bool bOverrideAttenuation => (ReadByte(0x0070) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: FirstNode
		/// Type: ObjectProperty
		/// Offset: 0x78
		/// Size: 0x08
		/// </summary>
		public USoundNode FirstNode => ReadUObject<USoundNode>(0x78);
		
		/// <summary>
		/// Name: VolumeMultiplier
		/// Type: FloatProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public float VolumeMultiplier
		{
			get
			{
				return ReadSingle(0x80);
			}
			set
			{
				WriteSingle(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: PitchMultiplier
		/// Type: FloatProperty
		/// Offset: 0x84
		/// Size: 0x04
		/// </summary>
		public float PitchMultiplier
		{
			get
			{
				return ReadSingle(0x84);
			}
			set
			{
				WriteSingle(0x84,value);
			}
		}
		
		/// <summary>
		/// Name: AttenuationOverrides
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0xF8
		/// </summary>
		public FAttenuationSettings AttenuationOverrides => ReadStruct<FAttenuationSettings>(0x88);
		
	}


	/// <summary>
	/// USoundGroups:UObject
	/// Size: 0x88
	/// Properties: 1
	/// </summary>
	public class USoundGroups:UObject
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: SoundGroupProfiles
		/// Type: TArray<FSoundGroup>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FSoundGroup> SoundGroupProfiles => new TArray<FSoundGroup>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// USoundClass:UObject
	/// Size: 0x78
	/// Properties: 4
	/// </summary>
	public class USoundClass:UObject
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: Properties
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x24
		/// </summary>
		public FSoundClassProperties Properties => ReadStruct<FSoundClassProperties>(0x28);
		
		/// <summary>
		/// Name: ChildClasses
		/// Type: TArray<USoundClass>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x78
		/// </summary>
		public TArray<USoundClass> ChildClasses => new TArray<USoundClass>(BaseAddress+0x50);
		
		/// <summary>
		/// Name: PassiveSoundMixModifiers
		/// Type: TArray<FPassiveSoundMixModifier>
		/// Offset: 0x60
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FPassiveSoundMixModifier> PassiveSoundMixModifiers => new TArray<FPassiveSoundMixModifier>(BaseAddress+0x60);
		
		/// <summary>
		/// Name: ParentClass
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public USoundClass ParentClass => ReadUObject<USoundClass>(0x70);
		
	}


	/// <summary>
	/// USoundMix:UObject
	/// Size: 0x88
	/// Properties: 8
	/// </summary>
	public class USoundMix:UObject
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: bApplyEQ
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bApplyEQ => (ReadByte(0x0028) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: EQPriority
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float EQPriority
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: EQSettings
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x38
		/// </summary>
		public FAudioEQEffect EQSettings => ReadStruct<FAudioEQEffect>(0x30);
		
		/// <summary>
		/// Name: SoundClassEffects
		/// Type: TArray<FSoundClassAdjuster>
		/// Offset: 0x68
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FSoundClassAdjuster> SoundClassEffects => new TArray<FSoundClassAdjuster>(BaseAddress+0x68);
		
		/// <summary>
		/// Name: InitialDelay
		/// Type: FloatProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public float InitialDelay
		{
			get
			{
				return ReadSingle(0x78);
			}
			set
			{
				WriteSingle(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: FadeInTime
		/// Type: FloatProperty
		/// Offset: 0x7C
		/// Size: 0x04
		/// </summary>
		public float FadeInTime
		{
			get
			{
				return ReadSingle(0x7C);
			}
			set
			{
				WriteSingle(0x7C,value);
			}
		}
		
		/// <summary>
		/// Name: Duration
		/// Type: FloatProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public float Duration
		{
			get
			{
				return ReadSingle(0x80);
			}
			set
			{
				WriteSingle(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: FadeOutTime
		/// Type: FloatProperty
		/// Offset: 0x84
		/// Size: 0x04
		/// </summary>
		public float FadeOutTime
		{
			get
			{
				return ReadSingle(0x84);
			}
			set
			{
				WriteSingle(0x84,value);
			}
		}
		
	}


	/// <summary>
	/// USoundNode:UObject
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class USoundNode:UObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: ChildNodes
		/// Type: TArray<USoundNode>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<USoundNode> ChildNodes => new TArray<USoundNode>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// USoundNodeAssetReferencer:USoundNode
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class USoundNodeAssetReferencer:USoundNode
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// USoundNodeWavePlayer:USoundNodeAssetReferencer
	/// Size: 0x68
	/// Properties: 2
	/// </summary>
	public class USoundNodeWavePlayer:USoundNodeAssetReferencer
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: SoundWave
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public USoundWave SoundWave => ReadUObject<USoundWave>(0x58);
		
		/// <summary>
		/// Name: bLooping
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bLooping => (ReadByte(0x0060) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// USoundNodeAttenuation:USoundNode
	/// Size: 0x140
	/// Properties: 3
	/// </summary>
	public class USoundNodeAttenuation:USoundNode
	{
		public override int ObjectSize => 320;
		/// <summary>
		/// Name: AttenuationSettings
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public USoundAttenuation AttenuationSettings => ReadUObject<USoundAttenuation>(0x38);
		
		/// <summary>
		/// Name: AttenuationOverrides
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0xF8
		/// </summary>
		public FAttenuationSettings AttenuationOverrides => ReadStruct<FAttenuationSettings>(0x40);
		
		/// <summary>
		/// Name: bOverrideAttenuation
		/// Type: BoolProperty
		/// Offset: 0x138
		/// Size: 0x01
		/// </summary>
		public bool bOverrideAttenuation => (ReadByte(0x0138) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// USoundNodeBranch:USoundNode
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class USoundNodeBranch:USoundNode
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: BoolParameterName
		/// Type: NameProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// USoundNodeConcatenator:USoundNode
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class USoundNodeConcatenator:USoundNode
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: InputVolume
		/// Type: TArray<>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// USoundNodeDelay:USoundNode
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class USoundNodeDelay:USoundNode
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: DelayMin
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float DelayMin
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: DelayMax
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float DelayMax
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
	}


	/// <summary>
	/// USoundNodeDialoguePlayer:USoundNode
	/// Size: 0x60
	/// Properties: 2
	/// </summary>
	public class USoundNodeDialoguePlayer:USoundNode
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: DialogueWaveParameter
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x20
		/// </summary>
		public FDialogueWaveParameter DialogueWaveParameter => ReadStruct<FDialogueWaveParameter>(0x38);
		
		/// <summary>
		/// Name: bLooping
		/// Type: BoolProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public bool bLooping => (ReadByte(0x0058) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// USoundNodeDistanceCrossFade:USoundNode
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class USoundNodeDistanceCrossFade:USoundNode
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: CrossFadeInput
		/// Type: TArray<FDistanceDatum>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x14
		/// </summary>
		public TArray<FDistanceDatum> CrossFadeInput => new TArray<FDistanceDatum>(BaseAddress+0x38);
		
	}


	/// <summary>
	/// USoundNodeParamCrossFade:USoundNodeDistanceCrossFade
	/// Size: 0x50
	/// Properties: 1
	/// </summary>
	public class USoundNodeParamCrossFade:USoundNodeDistanceCrossFade
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: ParamName
		/// Type: NameProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// USoundNodeDoppler:USoundNode
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class USoundNodeDoppler:USoundNode
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: DopplerIntensity
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float DopplerIntensity
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// USoundNodeEnveloper:USoundNode
	/// Size: 0x170
	/// Properties: 14
	/// </summary>
	public class USoundNodeEnveloper:USoundNode
	{
		public override int ObjectSize => 368;
		/// <summary>
		/// Name: LoopStart
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float LoopStart
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: LoopEnd
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float LoopEnd
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: DurationAfterLoop
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float DurationAfterLoop
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: LoopCount
		/// Type: IntProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public int LoopCount
		{
			get
			{
				return ReadInt32(0x44);
			}
			set
			{
				WriteInt32(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: bLoopIndefinitely
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool bLoopIndefinitely => (ReadByte(0x0048) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bLoop
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool bLoop => (ReadByte(0x0048) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: VolumeInterpCurve
		/// Type: ObjectProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public UDistributionFloatConstantCurve VolumeInterpCurve => ReadUObject<UDistributionFloatConstantCurve>(0x50);
		
		/// <summary>
		/// Name: PitchInterpCurve
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UDistributionFloatConstantCurve PitchInterpCurve => ReadUObject<UDistributionFloatConstantCurve>(0x58);
		
		/// <summary>
		/// Name: VolumeCurve
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x80
		/// </summary>
		public FRuntimeFloatCurve VolumeCurve => ReadStruct<FRuntimeFloatCurve>(0x60);
		
		/// <summary>
		/// Name: PitchCurve
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x80
		/// </summary>
		public FRuntimeFloatCurve PitchCurve => ReadStruct<FRuntimeFloatCurve>(0xE0);
		
		/// <summary>
		/// Name: PitchMin
		/// Type: FloatProperty
		/// Offset: 0x160
		/// Size: 0x04
		/// </summary>
		public float PitchMin
		{
			get
			{
				return ReadSingle(0x160);
			}
			set
			{
				WriteSingle(0x160,value);
			}
		}
		
		/// <summary>
		/// Name: PitchMax
		/// Type: FloatProperty
		/// Offset: 0x164
		/// Size: 0x04
		/// </summary>
		public float PitchMax
		{
			get
			{
				return ReadSingle(0x164);
			}
			set
			{
				WriteSingle(0x164,value);
			}
		}
		
		/// <summary>
		/// Name: VolumeMin
		/// Type: FloatProperty
		/// Offset: 0x168
		/// Size: 0x04
		/// </summary>
		public float VolumeMin
		{
			get
			{
				return ReadSingle(0x168);
			}
			set
			{
				WriteSingle(0x168,value);
			}
		}
		
		/// <summary>
		/// Name: VolumeMax
		/// Type: FloatProperty
		/// Offset: 0x16C
		/// Size: 0x04
		/// </summary>
		public float VolumeMax
		{
			get
			{
				return ReadSingle(0x16C);
			}
			set
			{
				WriteSingle(0x16C,value);
			}
		}
		
	}


	/// <summary>
	/// USoundNodeGroupControl:USoundNode
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class USoundNodeGroupControl:USoundNode
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: GroupSizes
		/// Type: TArray<>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// USoundNodeLooping:USoundNode
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class USoundNodeLooping:USoundNode
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: LoopCount
		/// Type: IntProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public int LoopCount
		{
			get
			{
				return ReadInt32(0x38);
			}
			set
			{
				WriteInt32(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: bLoopIndefinitely
		/// Type: BoolProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public bool bLoopIndefinitely => (ReadByte(0x003C) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// USoundNodeMature:USoundNode
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class USoundNodeMature:USoundNode
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// USoundNodeMixer:USoundNode
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class USoundNodeMixer:USoundNode
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: InputVolume
		/// Type: TArray<>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// USoundNodeModulator:USoundNode
	/// Size: 0x48
	/// Properties: 4
	/// </summary>
	public class USoundNodeModulator:USoundNode
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: PitchMin
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float PitchMin
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: PitchMax
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float PitchMax
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: VolumeMin
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float VolumeMin
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: VolumeMax
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float VolumeMax
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
	}


	/// <summary>
	/// USoundNodeModulatorContinuous:USoundNode
	/// Size: 0x78
	/// Properties: 2
	/// </summary>
	public class USoundNodeModulatorContinuous:USoundNode
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: PitchModulationParams
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x20
		/// </summary>
		public FModulatorContinuousParams PitchModulationParams => ReadStruct<FModulatorContinuousParams>(0x38);
		
		/// <summary>
		/// Name: VolumeModulationParams
		/// Type: StructProperty
		/// Offset: 0x58
		/// Size: 0x20
		/// </summary>
		public FModulatorContinuousParams VolumeModulationParams => ReadStruct<FModulatorContinuousParams>(0x58);
		
	}


	/// <summary>
	/// USoundNodeOscillator:USoundNode
	/// Size: 0x60
	/// Properties: 10
	/// </summary>
	public class USoundNodeOscillator:USoundNode
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: bModulateVolume
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bModulateVolume => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bModulatePitch
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bModulatePitch => (ReadByte(0x0038) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: AmplitudeMin
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float AmplitudeMin
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: AmplitudeMax
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float AmplitudeMax
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: FrequencyMin
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float FrequencyMin
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: FrequencyMax
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float FrequencyMax
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: OffsetMin
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float OffsetMin
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: OffsetMax
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float OffsetMax
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: CenterMin
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float CenterMin
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: CenterMax
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float CenterMax
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
	}


	/// <summary>
	/// USoundNodeQualityLevel:USoundNode
	/// Size: 0x38
	/// Properties: 0
	/// </summary>
	public class USoundNodeQualityLevel:USoundNode
	{
		public override int ObjectSize => 56;
	}


	/// <summary>
	/// USoundNodeRandom:USoundNode
	/// Size: 0x68
	/// Properties: 5
	/// </summary>
	public class USoundNodeRandom:USoundNode
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: Weights
		/// Type: TArray<>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: PreselectAtLevelLoad
		/// Type: IntProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public int PreselectAtLevelLoad
		{
			get
			{
				return ReadInt32(0x48);
			}
			set
			{
				WriteInt32(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: bRandomizeWithoutReplacement
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bRandomizeWithoutReplacement => (ReadByte(0x004C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: HasBeenUsed
		/// Type: TArray<>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: NumRandomUsed
		/// Type: IntProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public int NumRandomUsed
		{
			get
			{
				return ReadInt32(0x60);
			}
			set
			{
				WriteInt32(0x60,value);
			}
		}
		
	}


	/// <summary>
	/// USoundNodeSoundClass:USoundNode
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class USoundNodeSoundClass:USoundNode
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: SoundClassOverride
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public USoundClass SoundClassOverride => ReadUObject<USoundClass>(0x38);
		
	}


	/// <summary>
	/// USoundNodeSwitch:USoundNode
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class USoundNodeSwitch:USoundNode
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: IntParameterName
		/// Type: NameProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// USoundNodeWaveParam:USoundNode
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class USoundNodeWaveParam:USoundNode
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: WaveParameterName
		/// Type: NameProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// UStaticMesh:UObject
	/// Size: 0x118
	/// Properties: 18
	/// </summary>
	public class UStaticMesh:UObject
	{
		public override int ObjectSize => 280;
		/// <summary>
		/// Name: MinLOD
		/// Type: IntProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public int MinLOD
		{
			get
			{
				return ReadInt32(0x40);
			}
			set
			{
				WriteInt32(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: Materials
		/// Type: TArray<UMaterialInterface>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x58
		/// </summary>
		public TArray<UMaterialInterface> Materials => new TArray<UMaterialInterface>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: LightMapResolution
		/// Type: IntProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public int LightMapResolution
		{
			get
			{
				return ReadInt32(0x58);
			}
			set
			{
				WriteInt32(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: LightMapCoordinateIndex
		/// Type: IntProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public int LightMapCoordinateIndex
		{
			get
			{
				return ReadInt32(0x5C);
			}
			set
			{
				WriteInt32(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: BodySetup
		/// Type: ObjectProperty
		/// Offset: 0x60
		/// Size: 0x08
		/// </summary>
		public UBodySetup BodySetup => ReadUObject<UBodySetup>(0x60);
		
		/// <summary>
		/// Name: LODForCollision
		/// Type: IntProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public int LODForCollision
		{
			get
			{
				return ReadInt32(0x68);
			}
			set
			{
				WriteInt32(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: bUseMaximumStreamingTexelRatio
		/// Type: BoolProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public bool bUseMaximumStreamingTexelRatio => (ReadByte(0x006C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bStripComplexCollisionForConsole
		/// Type: BoolProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public bool bStripComplexCollisionForConsole => (ReadByte(0x006C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bHasNavigationData
		/// Type: BoolProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public bool bHasNavigationData => (ReadByte(0x006C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: StreamingDistanceMultiplier
		/// Type: FloatProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public float StreamingDistanceMultiplier
		{
			get
			{
				return ReadSingle(0x70);
			}
			set
			{
				WriteSingle(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: LpvBiasMultiplier
		/// Type: FloatProperty
		/// Offset: 0x74
		/// Size: 0x04
		/// </summary>
		public float LpvBiasMultiplier
		{
			get
			{
				return ReadSingle(0x74);
			}
			set
			{
				WriteSingle(0x74,value);
			}
		}
		
		/// <summary>
		/// Name: Sockets
		/// Type: TArray<UStaticMeshSocket>
		/// Offset: 0xA8
		/// Size: 0x10
		/// SubElement Size: 0x68
		/// </summary>
		public TArray<UStaticMeshSocket> Sockets => new TArray<UStaticMeshSocket>(BaseAddress+0xA8);
		
		/// <summary>
		/// Name: PositiveBoundsExtension
		/// Type: StructProperty
		/// Offset: 0xC8
		/// Size: 0x0C
		/// </summary>
		public FVector PositiveBoundsExtension => ReadStruct<FVector>(0xC8);
		
		/// <summary>
		/// Name: NegativeBoundsExtension
		/// Type: StructProperty
		/// Offset: 0xD4
		/// Size: 0x0C
		/// </summary>
		public FVector NegativeBoundsExtension => ReadStruct<FVector>(0xD4);
		
		/// <summary>
		/// Name: ExtendedBounds
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x1C
		/// </summary>
		public FBoxSphereBounds ExtendedBounds => ReadStruct<FBoxSphereBounds>(0xE0);
		
		/// <summary>
		/// Name: ElementToIgnoreForTexFactor
		/// Type: IntProperty
		/// Offset: 0xFC
		/// Size: 0x04
		/// </summary>
		public int ElementToIgnoreForTexFactor
		{
			get
			{
				return ReadInt32(0xFC);
			}
			set
			{
				WriteInt32(0xFC,value);
			}
		}
		
		/// <summary>
		/// Name: AssetUserData
		/// Type: TArray<UAssetUserData>
		/// Offset: 0x100
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UAssetUserData> AssetUserData => new TArray<UAssetUserData>(BaseAddress+0x100);
		
		/// <summary>
		/// Name: NavCollision
		/// Type: ObjectProperty
		/// Offset: 0x110
		/// Size: 0x08
		/// </summary>
		public UNavCollision NavCollision => ReadUObject<UNavCollision>(0x110);
		
	}


	/// <summary>
	/// UStaticMeshSocket:UObject
	/// Size: 0x68
	/// Properties: 5
	/// </summary>
	public class UStaticMeshSocket:UObject
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: SocketName
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: RelativeLocation
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x0C
		/// </summary>
		public FVector RelativeLocation => ReadStruct<FVector>(0x30);
		
		/// <summary>
		/// Name: RelativeRotation
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x0C
		/// </summary>
		public FRotator RelativeRotation => ReadStruct<FRotator>(0x3C);
		
		/// <summary>
		/// Name: RelativeScale
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x0C
		/// </summary>
		public FVector RelativeScale => ReadStruct<FVector>(0x48);
		
		/// <summary>
		/// Name: Tag
		/// Type: StrProperty
		/// Offset: 0x58
		/// Size: 0x10
		/// </summary>
		public FString Tag => new FString(BaseAddress+0x58);
		
	}


	/// <summary>
	/// USubsurfaceProfile:UObject
	/// Size: 0x50
	/// Properties: 1
	/// </summary>
	public class USubsurfaceProfile:UObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: Settings
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x24
		/// </summary>
		public FSubsurfaceProfileStruct Settings => ReadStruct<FSubsurfaceProfileStruct>(0x28);
		
	}


	/// <summary>
	/// UTextPropertyTestObject:UObject
	/// Size: 0x70
	/// Properties: 3
	/// </summary>
	public class UTextPropertyTestObject:UObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: DefaultedText
		/// Type: TextProperty
		/// Offset: 0x28
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: UndefaultedText
		/// Type: TextProperty
		/// Offset: 0x40
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: TransientText
		/// Type: TextProperty
		/// Offset: 0x58
		/// Size: 0x18
		/// </summary>
		
	}


	/// <summary>
	/// UTexture:UObject
	/// Size: 0xB8
	/// Properties: 12
	/// </summary>
	public class UTexture:UObject
	{
		public override int ObjectSize => 184;
		/// <summary>
		/// Name: LODBias
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int LODBias
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: NumCinematicMipLevels
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int NumCinematicMipLevels
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: SRGB
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool SRGB => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: NeverStream
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool NeverStream => (ReadByte(0x0038) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bNoTiling
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bNoTiling => (ReadByte(0x0038) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bUseCinematicMipLevels
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bUseCinematicMipLevels => (ReadByte(0x0038) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: AssetUserData
		/// Type: TArray<UAssetUserData>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UAssetUserData> AssetUserData => new TArray<UAssetUserData>(BaseAddress+0x40);
		
		/// <summary>
		/// Name: CachedCombinedLODBias
		/// Type: IntProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public int CachedCombinedLODBias
		{
			get
			{
				return ReadInt32(0x50);
			}
			set
			{
				WriteInt32(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: bAsyncResourceReleaseHasBeenStarted
		/// Type: BoolProperty
		/// Offset: 0x54
		/// Size: 0x01
		/// </summary>
		public bool bAsyncResourceReleaseHasBeenStarted => (ReadByte(0x0054) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CompressionSettings
		/// Type: ByteProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public byte CompressionSettings
		{
			get
			{
				return ReadByte(0x58);
			}
			set
			{
				WriteByte(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: Filter
		/// Type: ByteProperty
		/// Offset: 0x59
		/// Size: 0x01
		/// </summary>
		public byte Filter
		{
			get
			{
				return ReadByte(0x59);
			}
			set
			{
				WriteByte(0x59,value);
			}
		}
		
		/// <summary>
		/// Name: LODGroup
		/// Type: ByteProperty
		/// Offset: 0x5A
		/// Size: 0x01
		/// </summary>
		public byte LODGroup
		{
			get
			{
				return ReadByte(0x5A);
			}
			set
			{
				WriteByte(0x5A,value);
			}
		}
		
	}


	/// <summary>
	/// UTexture2D:UTexture
	/// Size: 0x100
	/// Properties: 14
	/// </summary>
	public class UTexture2D:UTexture
	{
		public override int ObjectSize => 256;
		/// <summary>
		/// Name: RequestedMips
		/// Type: IntProperty
		/// Offset: 0xB8
		/// Size: 0x04
		/// </summary>
		public int RequestedMips
		{
			get
			{
				return ReadInt32(0xB8);
			}
			set
			{
				WriteInt32(0xB8,value);
			}
		}
		
		/// <summary>
		/// Name: ResidentMips
		/// Type: IntProperty
		/// Offset: 0xBC
		/// Size: 0x04
		/// </summary>
		public int ResidentMips
		{
			get
			{
				return ReadInt32(0xBC);
			}
			set
			{
				WriteInt32(0xBC,value);
			}
		}
		
		/// <summary>
		/// Name: StreamingIndex
		/// Type: IntProperty
		/// Offset: 0xC0
		/// Size: 0x04
		/// </summary>
		public int StreamingIndex
		{
			get
			{
				return ReadInt32(0xC0);
			}
			set
			{
				WriteInt32(0xC0,value);
			}
		}
		
		/// <summary>
		/// Name: LevelIndex
		/// Type: IntProperty
		/// Offset: 0xC4
		/// Size: 0x04
		/// </summary>
		public int LevelIndex
		{
			get
			{
				return ReadInt32(0xC4);
			}
			set
			{
				WriteInt32(0xC4,value);
			}
		}
		
		/// <summary>
		/// Name: FirstResourceMemMip
		/// Type: IntProperty
		/// Offset: 0xC8
		/// Size: 0x04
		/// </summary>
		public int FirstResourceMemMip
		{
			get
			{
				return ReadInt32(0xC8);
			}
			set
			{
				WriteInt32(0xC8,value);
			}
		}
		
		/// <summary>
		/// Name: ImportedSize
		/// Type: StructProperty
		/// Offset: 0xD0
		/// Size: 0x08
		/// </summary>
		public FIntPoint ImportedSize => ReadStruct<FIntPoint>(0xD0);
		
		/// <summary>
		/// Name: ForceMipLevelsToBeResidentTimestamp
		/// Type: FloatProperty
		/// Offset: 0xD8
		/// Size: 0x04
		/// </summary>
		public float ForceMipLevelsToBeResidentTimestamp
		{
			get
			{
				return ReadSingle(0xD8);
			}
			set
			{
				WriteSingle(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: bTemporarilyDisableStreaming
		/// Type: BoolProperty
		/// Offset: 0xDC
		/// Size: 0x01
		/// </summary>
		public bool bTemporarilyDisableStreaming => (ReadByte(0x00DC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bIsStreamable
		/// Type: BoolProperty
		/// Offset: 0xDC
		/// Size: 0x01
		/// </summary>
		public bool bIsStreamable => (ReadByte(0x00DC) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bHasCancelationPending
		/// Type: BoolProperty
		/// Offset: 0xDC
		/// Size: 0x01
		/// </summary>
		public bool bHasCancelationPending => (ReadByte(0x00DC) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bForceMiplevelsToBeResident
		/// Type: BoolProperty
		/// Offset: 0xDC
		/// Size: 0x01
		/// </summary>
		public bool bForceMiplevelsToBeResident => (ReadByte(0x00DC) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bGlobalForceMipLevelsToBeResident
		/// Type: BoolProperty
		/// Offset: 0xDC
		/// Size: 0x01
		/// </summary>
		public bool bGlobalForceMipLevelsToBeResident => (ReadByte(0x00DC) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: AddressX
		/// Type: ByteProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public byte AddressX
		{
			get
			{
				return ReadByte(0xE0);
			}
			set
			{
				WriteByte(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: AddressY
		/// Type: ByteProperty
		/// Offset: 0xE1
		/// Size: 0x01
		/// </summary>
		public byte AddressY
		{
			get
			{
				return ReadByte(0xE1);
			}
			set
			{
				WriteByte(0xE1,value);
			}
		}
		
	}


	/// <summary>
	/// ULightMapTexture2D:UTexture2D
	/// Size: 0x110
	/// Properties: 1
	/// </summary>
	public class ULightMapTexture2D:UTexture2D
	{
		public override int ObjectSize => 272;
		/// <summary>
		/// Name: GraniteTexture
		/// Type: ObjectProperty
		/// Offset: 0x108
		/// Size: 0x08
		/// </summary>
		public UGraniteTexture GraniteTexture => ReadUObject<UGraniteTexture>(0x108);
		
	}


	/// <summary>
	/// UShadowMapTexture2D:UTexture2D
	/// Size: 0x110
	/// Properties: 2
	/// </summary>
	public class UShadowMapTexture2D:UTexture2D
	{
		public override int ObjectSize => 272;
		/// <summary>
		/// Name: ShadowmapFlags
		/// Type: ByteProperty
		/// Offset: 0x100
		/// Size: 0x01
		/// </summary>
		public byte ShadowmapFlags
		{
			get
			{
				return ReadByte(0x100);
			}
			set
			{
				WriteByte(0x100,value);
			}
		}
		
		/// <summary>
		/// Name: GraniteTexture
		/// Type: ObjectProperty
		/// Offset: 0x108
		/// Size: 0x08
		/// </summary>
		public UGraniteTexture GraniteTexture => ReadUObject<UGraniteTexture>(0x108);
		
	}


	/// <summary>
	/// UTextureLightProfile:UTexture2D
	/// Size: 0x108
	/// Properties: 2
	/// </summary>
	public class UTextureLightProfile:UTexture2D
	{
		public override int ObjectSize => 264;
		/// <summary>
		/// Name: Brightness
		/// Type: FloatProperty
		/// Offset: 0x100
		/// Size: 0x04
		/// </summary>
		public float Brightness
		{
			get
			{
				return ReadSingle(0x100);
			}
			set
			{
				WriteSingle(0x100,value);
			}
		}
		
		/// <summary>
		/// Name: TextureMultiplier
		/// Type: FloatProperty
		/// Offset: 0x104
		/// Size: 0x04
		/// </summary>
		public float TextureMultiplier
		{
			get
			{
				return ReadSingle(0x104);
			}
			set
			{
				WriteSingle(0x104,value);
			}
		}
		
	}


	/// <summary>
	/// UTexture2DDynamic:UTexture
	/// Size: 0xD0
	/// Properties: 1
	/// </summary>
	public class UTexture2DDynamic:UTexture
	{
		public override int ObjectSize => 208;
		/// <summary>
		/// Name: Format
		/// Type: ByteProperty
		/// Offset: 0xC0
		/// Size: 0x01
		/// </summary>
		public byte Format
		{
			get
			{
				return ReadByte(0xC0);
			}
			set
			{
				WriteByte(0xC0,value);
			}
		}
		
	}


	/// <summary>
	/// UTextureCube:UTexture
	/// Size: 0x110
	/// Properties: 0
	/// </summary>
	public class UTextureCube:UTexture
	{
		public override int ObjectSize => 272;
	}


	/// <summary>
	/// UTextureRenderTarget:UTexture
	/// Size: 0xC0
	/// Properties: 1
	/// </summary>
	public class UTextureRenderTarget:UTexture
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: TargetGamma
		/// Type: FloatProperty
		/// Offset: 0xB8
		/// Size: 0x04
		/// </summary>
		public float TargetGamma
		{
			get
			{
				return ReadSingle(0xB8);
			}
			set
			{
				WriteSingle(0xB8,value);
			}
		}
		
	}


	/// <summary>
	/// UTextureRenderTarget2D:UTextureRenderTarget
	/// Size: 0xE8
	/// Properties: 10
	/// </summary>
	public class UTextureRenderTarget2D:UTextureRenderTarget
	{
		public override int ObjectSize => 232;
		/// <summary>
		/// Name: SizeX
		/// Type: IntProperty
		/// Offset: 0xC0
		/// Size: 0x04
		/// </summary>
		public int SizeX
		{
			get
			{
				return ReadInt32(0xC0);
			}
			set
			{
				WriteInt32(0xC0,value);
			}
		}
		
		/// <summary>
		/// Name: SizeY
		/// Type: IntProperty
		/// Offset: 0xC4
		/// Size: 0x04
		/// </summary>
		public int SizeY
		{
			get
			{
				return ReadInt32(0xC4);
			}
			set
			{
				WriteInt32(0xC4,value);
			}
		}
		
		/// <summary>
		/// Name: ClearColor
		/// Type: StructProperty
		/// Offset: 0xC8
		/// Size: 0x10
		/// </summary>
		public FLinearColor ClearColor => ReadStruct<FLinearColor>(0xC8);
		
		/// <summary>
		/// Name: AddressX
		/// Type: ByteProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public byte AddressX
		{
			get
			{
				return ReadByte(0xD8);
			}
			set
			{
				WriteByte(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: AddressY
		/// Type: ByteProperty
		/// Offset: 0xD9
		/// Size: 0x01
		/// </summary>
		public byte AddressY
		{
			get
			{
				return ReadByte(0xD9);
			}
			set
			{
				WriteByte(0xD9,value);
			}
		}
		
		/// <summary>
		/// Name: bForceLinearGamma
		/// Type: BoolProperty
		/// Offset: 0xDC
		/// Size: 0x01
		/// </summary>
		public bool bForceLinearGamma => (ReadByte(0x00DC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bHDR
		/// Type: BoolProperty
		/// Offset: 0xDC
		/// Size: 0x01
		/// </summary>
		public bool bHDR => (ReadByte(0x00DC) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bAutoGenerateMips
		/// Type: BoolProperty
		/// Offset: 0xDC
		/// Size: 0x01
		/// </summary>
		public bool bAutoGenerateMips => (ReadByte(0x00DC) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bForceUAVSupport
		/// Type: BoolProperty
		/// Offset: 0xDC
		/// Size: 0x01
		/// </summary>
		public bool bForceUAVSupport => (ReadByte(0x00DC) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: OverrideFormat
		/// Type: ByteProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public byte OverrideFormat
		{
			get
			{
				return ReadByte(0xE0);
			}
			set
			{
				WriteByte(0xE0,value);
			}
		}
		
	}


	/// <summary>
	/// UCanvasRenderTarget2D:UTextureRenderTarget2D
	/// Size: 0x100
	/// Properties: 0
	/// </summary>
	public class UCanvasRenderTarget2D:UTextureRenderTarget2D
	{
		public override int ObjectSize => 256;
	}


	/// <summary>
	/// UTextureRenderTargetCube:UTextureRenderTarget
	/// Size: 0xE0
	/// Properties: 5
	/// </summary>
	public class UTextureRenderTargetCube:UTextureRenderTarget
	{
		public override int ObjectSize => 224;
		/// <summary>
		/// Name: SizeX
		/// Type: IntProperty
		/// Offset: 0xC0
		/// Size: 0x04
		/// </summary>
		public int SizeX
		{
			get
			{
				return ReadInt32(0xC0);
			}
			set
			{
				WriteInt32(0xC0,value);
			}
		}
		
		/// <summary>
		/// Name: ClearColor
		/// Type: StructProperty
		/// Offset: 0xC4
		/// Size: 0x10
		/// </summary>
		public FLinearColor ClearColor => ReadStruct<FLinearColor>(0xC4);
		
		/// <summary>
		/// Name: OverrideFormat
		/// Type: ByteProperty
		/// Offset: 0xD4
		/// Size: 0x01
		/// </summary>
		public byte OverrideFormat
		{
			get
			{
				return ReadByte(0xD4);
			}
			set
			{
				WriteByte(0xD4,value);
			}
		}
		
		/// <summary>
		/// Name: bHDR
		/// Type: BoolProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public bool bHDR => (ReadByte(0x00D8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bForceLinearGamma
		/// Type: BoolProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public bool bForceLinearGamma => (ReadByte(0x00D8) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// UThumbnailInfo:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UThumbnailInfo:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UTimelineTemplate:UObject
	/// Size: 0x98
	/// Properties: 12
	/// </summary>
	public class UTimelineTemplate:UObject
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: TimelineLength
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float TimelineLength
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: LengthMode
		/// Type: ByteProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public byte LengthMode
		{
			get
			{
				return ReadByte(0x2C);
			}
			set
			{
				WriteByte(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: bAutoPlay
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bAutoPlay => (ReadByte(0x0030) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bLoop
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bLoop => (ReadByte(0x0030) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bReplicated
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bReplicated => (ReadByte(0x0030) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bValidatedAsWired
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bValidatedAsWired => (ReadByte(0x0030) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: EventTracks
		/// Type: TArray<FTTEventTrack>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FTTEventTrack> EventTracks => new TArray<FTTEventTrack>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: FloatTracks
		/// Type: TArray<FTTFloatTrack>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FTTFloatTrack> FloatTracks => new TArray<FTTFloatTrack>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: VectorTracks
		/// Type: TArray<FTTVectorTrack>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FTTVectorTrack> VectorTracks => new TArray<FTTVectorTrack>(BaseAddress+0x58);
		
		/// <summary>
		/// Name: LinearColorTracks
		/// Type: TArray<FTTLinearColorTrack>
		/// Offset: 0x68
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FTTLinearColorTrack> LinearColorTracks => new TArray<FTTLinearColorTrack>(BaseAddress+0x68);
		
		/// <summary>
		/// Name: MetaDataArray
		/// Type: TArray<FBPVariableMetaDataEntry>
		/// Offset: 0x78
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FBPVariableMetaDataEntry> MetaDataArray => new TArray<FBPVariableMetaDataEntry>(BaseAddress+0x78);
		
		/// <summary>
		/// Name: TimelineGuid
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0x10
		/// </summary>
		public FGuid TimelineGuid => ReadStruct<FGuid>(0x88);
		
	}


	/// <summary>
	/// UTouchInterface:UObject
	/// Size: 0x58
	/// Properties: 8
	/// </summary>
	public class UTouchInterface:UObject
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: Controls
		/// Type: TArray<FTouchInputControl>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x68
		/// </summary>
		public TArray<FTouchInputControl> Controls => new TArray<FTouchInputControl>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: ActiveOpacity
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float ActiveOpacity
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: InactiveOpacity
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float InactiveOpacity
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: TimeUntilDeactive
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float TimeUntilDeactive
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: TimeUntilReset
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float TimeUntilReset
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: ActivationDelay
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float ActivationDelay
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: bPreventRecenter
		/// Type: BoolProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public bool bPreventRecenter
		{
			get
			{
				return ReadBool(0x4C);
			}
			set
			{
				WriteBool(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: StartupDelay
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float StartupDelay
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
	}


	/// <summary>
	/// UUserDefinedEnum:UEnum
	/// Size: 0x68
	/// Properties: 1
	/// </summary>
	public class UUserDefinedEnum:UEnum
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: DisplayNames
		/// Type: TArray<>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// UVectorField:UObject
	/// Size: 0x48
	/// Properties: 2
	/// </summary>
	public class UVectorField:UObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: Bounds
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x1C
		/// </summary>
		public FBox Bounds => ReadStruct<FBox>(0x28);
		
		/// <summary>
		/// Name: Intensity
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float Intensity
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
	}


	/// <summary>
	/// UVectorFieldAnimated:UVectorField
	/// Size: 0x88
	/// Properties: 13
	/// </summary>
	public class UVectorFieldAnimated:UVectorField
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: Texture
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public UTexture2D Texture => ReadUObject<UTexture2D>(0x48);
		
		/// <summary>
		/// Name: ConstructionOp
		/// Type: ByteProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public byte ConstructionOp
		{
			get
			{
				return ReadByte(0x50);
			}
			set
			{
				WriteByte(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: VolumeSizeX
		/// Type: IntProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public int VolumeSizeX
		{
			get
			{
				return ReadInt32(0x54);
			}
			set
			{
				WriteInt32(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: VolumeSizeY
		/// Type: IntProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public int VolumeSizeY
		{
			get
			{
				return ReadInt32(0x58);
			}
			set
			{
				WriteInt32(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: VolumeSizeZ
		/// Type: IntProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public int VolumeSizeZ
		{
			get
			{
				return ReadInt32(0x5C);
			}
			set
			{
				WriteInt32(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: SubImagesX
		/// Type: IntProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public int SubImagesX
		{
			get
			{
				return ReadInt32(0x60);
			}
			set
			{
				WriteInt32(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: SubImagesY
		/// Type: IntProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public int SubImagesY
		{
			get
			{
				return ReadInt32(0x64);
			}
			set
			{
				WriteInt32(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: FrameCount
		/// Type: IntProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public int FrameCount
		{
			get
			{
				return ReadInt32(0x68);
			}
			set
			{
				WriteInt32(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: FramesPerSecond
		/// Type: FloatProperty
		/// Offset: 0x6C
		/// Size: 0x04
		/// </summary>
		public float FramesPerSecond
		{
			get
			{
				return ReadSingle(0x6C);
			}
			set
			{
				WriteSingle(0x6C,value);
			}
		}
		
		/// <summary>
		/// Name: bLoop
		/// Type: BoolProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public bool bLoop => (ReadByte(0x0070) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: NoiseField
		/// Type: ObjectProperty
		/// Offset: 0x78
		/// Size: 0x08
		/// </summary>
		public UVectorFieldStatic NoiseField => ReadUObject<UVectorFieldStatic>(0x78);
		
		/// <summary>
		/// Name: NoiseScale
		/// Type: FloatProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public float NoiseScale
		{
			get
			{
				return ReadSingle(0x80);
			}
			set
			{
				WriteSingle(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: NoiseMax
		/// Type: FloatProperty
		/// Offset: 0x84
		/// Size: 0x04
		/// </summary>
		public float NoiseMax
		{
			get
			{
				return ReadSingle(0x84);
			}
			set
			{
				WriteSingle(0x84,value);
			}
		}
		
	}


	/// <summary>
	/// UVectorFieldStatic:UVectorField
	/// Size: 0xD0
	/// Properties: 3
	/// </summary>
	public class UVectorFieldStatic:UVectorField
	{
		public override int ObjectSize => 208;
		/// <summary>
		/// Name: SizeX
		/// Type: IntProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public int SizeX
		{
			get
			{
				return ReadInt32(0x48);
			}
			set
			{
				WriteInt32(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: SizeY
		/// Type: IntProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public int SizeY
		{
			get
			{
				return ReadInt32(0x4C);
			}
			set
			{
				WriteInt32(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: SizeZ
		/// Type: IntProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public int SizeZ
		{
			get
			{
				return ReadInt32(0x50);
			}
			set
			{
				WriteInt32(0x50,value);
			}
		}
		
	}


	/// <summary>
	/// UVehicleWheel:UObject
	/// Size: 0xD8
	/// Properties: 32
	/// </summary>
	public class UVehicleWheel:UObject
	{
		public override int ObjectSize => 216;
		/// <summary>
		/// Name: CollisionMesh
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UStaticMesh CollisionMesh => ReadUObject<UStaticMesh>(0x28);
		
		/// <summary>
		/// Name: bDontCreateShape
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bDontCreateShape
		{
			get
			{
				return ReadBool(0x30);
			}
			set
			{
				WriteBool(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: bAutoAdjustCollisionSize
		/// Type: BoolProperty
		/// Offset: 0x31
		/// Size: 0x01
		/// </summary>
		public bool bAutoAdjustCollisionSize
		{
			get
			{
				return ReadBool(0x31);
			}
			set
			{
				WriteBool(0x31,value);
			}
		}
		
		/// <summary>
		/// Name: Offset
		/// Type: StructProperty
		/// Offset: 0x34
		/// Size: 0x0C
		/// </summary>
		public FVector Offset => ReadStruct<FVector>(0x34);
		
		/// <summary>
		/// Name: ShapeRadius
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float ShapeRadius
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: ShapeWidth
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float ShapeWidth
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: Mass
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float Mass
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: DampingRate
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float DampingRate
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: SteerAngle
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float SteerAngle
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: bAffectedByHandbrake
		/// Type: BoolProperty
		/// Offset: 0x54
		/// Size: 0x01
		/// </summary>
		public bool bAffectedByHandbrake
		{
			get
			{
				return ReadBool(0x54);
			}
			set
			{
				WriteBool(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: TireType
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UTireType TireType => ReadUObject<UTireType>(0x58);
		
		/// <summary>
		/// Name: LatStiffMaxLoad
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float LatStiffMaxLoad
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: LatStiffValue
		/// Type: FloatProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public float LatStiffValue
		{
			get
			{
				return ReadSingle(0x64);
			}
			set
			{
				WriteSingle(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: LongStiffValue
		/// Type: FloatProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public float LongStiffValue
		{
			get
			{
				return ReadSingle(0x68);
			}
			set
			{
				WriteSingle(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: SuspensionForceOffset
		/// Type: FloatProperty
		/// Offset: 0x6C
		/// Size: 0x04
		/// </summary>
		public float SuspensionForceOffset
		{
			get
			{
				return ReadSingle(0x6C);
			}
			set
			{
				WriteSingle(0x6C,value);
			}
		}
		
		/// <summary>
		/// Name: SuspensionMaxRaise
		/// Type: FloatProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public float SuspensionMaxRaise
		{
			get
			{
				return ReadSingle(0x70);
			}
			set
			{
				WriteSingle(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: SuspensionMaxDrop
		/// Type: FloatProperty
		/// Offset: 0x74
		/// Size: 0x04
		/// </summary>
		public float SuspensionMaxDrop
		{
			get
			{
				return ReadSingle(0x74);
			}
			set
			{
				WriteSingle(0x74,value);
			}
		}
		
		/// <summary>
		/// Name: SuspensionNaturalFrequency
		/// Type: FloatProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public float SuspensionNaturalFrequency
		{
			get
			{
				return ReadSingle(0x78);
			}
			set
			{
				WriteSingle(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: SuspensionDampingRatio
		/// Type: FloatProperty
		/// Offset: 0x7C
		/// Size: 0x04
		/// </summary>
		public float SuspensionDampingRatio
		{
			get
			{
				return ReadSingle(0x7C);
			}
			set
			{
				WriteSingle(0x7C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxBrakeTorque
		/// Type: FloatProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public float MaxBrakeTorque
		{
			get
			{
				return ReadSingle(0x80);
			}
			set
			{
				WriteSingle(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: MaxHandBrakeTorque
		/// Type: FloatProperty
		/// Offset: 0x84
		/// Size: 0x04
		/// </summary>
		public float MaxHandBrakeTorque
		{
			get
			{
				return ReadSingle(0x84);
			}
			set
			{
				WriteSingle(0x84,value);
			}
		}
		
		/// <summary>
		/// Name: VehicleSim
		/// Type: ObjectProperty
		/// Offset: 0x88
		/// Size: 0x08
		/// </summary>
		public UWheeledVehicleMovementComponent VehicleSim => ReadUObject<UWheeledVehicleMovementComponent>(0x88);
		
		/// <summary>
		/// Name: WheelIndex
		/// Type: IntProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public int WheelIndex
		{
			get
			{
				return ReadInt32(0x90);
			}
			set
			{
				WriteInt32(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: DebugLongSlip
		/// Type: FloatProperty
		/// Offset: 0x94
		/// Size: 0x04
		/// </summary>
		public float DebugLongSlip
		{
			get
			{
				return ReadSingle(0x94);
			}
			set
			{
				WriteSingle(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: DebugLatSlip
		/// Type: FloatProperty
		/// Offset: 0x98
		/// Size: 0x04
		/// </summary>
		public float DebugLatSlip
		{
			get
			{
				return ReadSingle(0x98);
			}
			set
			{
				WriteSingle(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: DebugNormalizedTireLoad
		/// Type: FloatProperty
		/// Offset: 0x9C
		/// Size: 0x04
		/// </summary>
		public float DebugNormalizedTireLoad
		{
			get
			{
				return ReadSingle(0x9C);
			}
			set
			{
				WriteSingle(0x9C,value);
			}
		}
		
		/// <summary>
		/// Name: DebugWheelTorque
		/// Type: FloatProperty
		/// Offset: 0xA0
		/// Size: 0x04
		/// </summary>
		public float DebugWheelTorque
		{
			get
			{
				return ReadSingle(0xA0);
			}
			set
			{
				WriteSingle(0xA0,value);
			}
		}
		
		/// <summary>
		/// Name: DebugLongForce
		/// Type: FloatProperty
		/// Offset: 0xA4
		/// Size: 0x04
		/// </summary>
		public float DebugLongForce
		{
			get
			{
				return ReadSingle(0xA4);
			}
			set
			{
				WriteSingle(0xA4,value);
			}
		}
		
		/// <summary>
		/// Name: DebugLatForce
		/// Type: FloatProperty
		/// Offset: 0xA8
		/// Size: 0x04
		/// </summary>
		public float DebugLatForce
		{
			get
			{
				return ReadSingle(0xA8);
			}
			set
			{
				WriteSingle(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0xAC
		/// Size: 0x0C
		/// </summary>
		public FVector Location => ReadStruct<FVector>(0xAC);
		
		/// <summary>
		/// Name: OldLocation
		/// Type: StructProperty
		/// Offset: 0xB8
		/// Size: 0x0C
		/// </summary>
		public FVector OldLocation => ReadStruct<FVector>(0xB8);
		
		/// <summary>
		/// Name: Velocity
		/// Type: StructProperty
		/// Offset: 0xC4
		/// Size: 0x0C
		/// </summary>
		public FVector Velocity => ReadStruct<FVector>(0xC4);
		
	}


	/// <summary>
	/// UVertexAnimBase:UObject
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class UVertexAnimBase:UObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: BaseSkelMesh
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public USkeletalMesh BaseSkelMesh => ReadUObject<USkeletalMesh>(0x28);
		
	}


	/// <summary>
	/// UMorphTarget:UVertexAnimBase
	/// Size: 0x40
	/// Properties: 0
	/// </summary>
	public class UMorphTarget:UVertexAnimBase
	{
		public override int ObjectSize => 64;
	}


	/// <summary>
	/// UVertexAnimation:UVertexAnimBase
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class UVertexAnimation:UVertexAnimBase
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: NumAnimatedVerts
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int NumAnimatedVerts
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
	}


	/// <summary>
	/// UVisualLoggerAutomationTests:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UVisualLoggerAutomationTests:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UVisualLoggerDebugSnapshotInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UVisualLoggerDebugSnapshotInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UMediaPlayer:UObject
	/// Size: 0x1A0
	/// Properties: 2
	/// </summary>
	public class UMediaPlayer:UObject
	{
		public override int ObjectSize => 416;
		/// <summary>
		/// Name: Looping
		/// Type: BoolProperty
		/// Offset: 0x88
		/// Size: 0x01
		/// </summary>
		public bool Looping => (ReadByte(0x0088) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: URL
		/// Type: StrProperty
		/// Offset: 0x90
		/// Size: 0x10
		/// </summary>
		public FString URL => new FString(BaseAddress+0x90);
		
	}


	/// <summary>
	/// UMediaSoundWave:USoundWave
	/// Size: 0x288
	/// Properties: 2
	/// </summary>
	public class UMediaSoundWave:USoundWave
	{
		public override int ObjectSize => 648;
		/// <summary>
		/// Name: AudioTrackIndex
		/// Type: IntProperty
		/// Offset: 0x238
		/// Size: 0x04
		/// </summary>
		public int AudioTrackIndex
		{
			get
			{
				return ReadInt32(0x238);
			}
			set
			{
				WriteInt32(0x238,value);
			}
		}
		
		/// <summary>
		/// Name: MediaPlayer
		/// Type: ObjectProperty
		/// Offset: 0x240
		/// Size: 0x08
		/// </summary>
		public UMediaPlayer MediaPlayer => ReadUObject<UMediaPlayer>(0x240);
		
	}


	/// <summary>
	/// UMediaTexture:UTexture
	/// Size: 0x118
	/// Properties: 5
	/// </summary>
	public class UMediaTexture:UTexture
	{
		public override int ObjectSize => 280;
		/// <summary>
		/// Name: AddressX
		/// Type: ByteProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public byte AddressX
		{
			get
			{
				return ReadByte(0xB8);
			}
			set
			{
				WriteByte(0xB8,value);
			}
		}
		
		/// <summary>
		/// Name: AddressY
		/// Type: ByteProperty
		/// Offset: 0xB9
		/// Size: 0x01
		/// </summary>
		public byte AddressY
		{
			get
			{
				return ReadByte(0xB9);
			}
			set
			{
				WriteByte(0xB9,value);
			}
		}
		
		/// <summary>
		/// Name: ClearColor
		/// Type: StructProperty
		/// Offset: 0xBC
		/// Size: 0x10
		/// </summary>
		public FLinearColor ClearColor => ReadStruct<FLinearColor>(0xBC);
		
		/// <summary>
		/// Name: VideoTrackIndex
		/// Type: IntProperty
		/// Offset: 0xCC
		/// Size: 0x04
		/// </summary>
		public int VideoTrackIndex
		{
			get
			{
				return ReadInt32(0xCC);
			}
			set
			{
				WriteInt32(0xCC,value);
			}
		}
		
		/// <summary>
		/// Name: MediaPlayer
		/// Type: ObjectProperty
		/// Offset: 0xD0
		/// Size: 0x08
		/// </summary>
		public UMediaPlayer MediaPlayer => ReadUObject<UMediaPlayer>(0xD0);
		
	}


	/// <summary>
	/// UEditorStyleSettings:UObject
	/// Size: 0xF0
	/// Properties: 14
	/// </summary>
	public class UEditorStyleSettings:UObject
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: SelectionColor
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FLinearColor SelectionColor => ReadStruct<FLinearColor>(0x28);
		
		/// <summary>
		/// Name: PressedSelectionColor
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FLinearColor PressedSelectionColor => ReadStruct<FLinearColor>(0x38);
		
		/// <summary>
		/// Name: InactiveSelectionColor
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x10
		/// </summary>
		public FLinearColor InactiveSelectionColor => ReadStruct<FLinearColor>(0x48);
		
		/// <summary>
		/// Name: KeyboardFocusColor
		/// Type: StructProperty
		/// Offset: 0x58
		/// Size: 0x10
		/// </summary>
		public FLinearColor KeyboardFocusColor => ReadStruct<FLinearColor>(0x58);
		
		/// <summary>
		/// Name: ColorVisionDeficiencyPreviewType
		/// Type: ByteProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public byte ColorVisionDeficiencyPreviewType
		{
			get
			{
				return ReadByte(0x68);
			}
			set
			{
				WriteByte(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: bUseSmallToolBarIcons
		/// Type: BoolProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public bool bUseSmallToolBarIcons => (ReadByte(0x006C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bEnableWindowAnimations
		/// Type: BoolProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public bool bEnableWindowAnimations => (ReadByte(0x006C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bShowFriendlyNames
		/// Type: BoolProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public bool bShowFriendlyNames => (ReadByte(0x006C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bExpandConfigurationMenus
		/// Type: BoolProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public bool bExpandConfigurationMenus => (ReadByte(0x006C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bShowProjectMenus
		/// Type: BoolProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public bool bShowProjectMenus => (ReadByte(0x006C) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bShowLaunchMenus
		/// Type: BoolProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public bool bShowLaunchMenus => (ReadByte(0x006C) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: LogTimestampMode
		/// Type: ByteProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public byte LogTimestampMode
		{
			get
			{
				return ReadByte(0x70);
			}
			set
			{
				WriteByte(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: bPromoteOutputLogWarningsDuringPIE
		/// Type: BoolProperty
		/// Offset: 0x71
		/// Size: 0x01
		/// </summary>
		public bool bPromoteOutputLogWarningsDuringPIE
		{
			get
			{
				return ReadBool(0x71);
			}
			set
			{
				WriteBool(0x71,value);
			}
		}
		
		/// <summary>
		/// Name: AssetEditorOpenLocation
		/// Type: ByteProperty
		/// Offset: 0x72
		/// Size: 0x01
		/// </summary>
		public byte AssetEditorOpenLocation
		{
			get
			{
				return ReadByte(0x72);
			}
			set
			{
				WriteByte(0x72,value);
			}
		}
		
	}


	/// <summary>
	/// USteamNetConnection:UIpConnection
	/// Size: 0x336C8
	/// Properties: 1
	/// </summary>
	public class USteamNetConnection:UIpConnection
	{
		public override int ObjectSize => 210632;
		/// <summary>
		/// Name: bIsPassthrough
		/// Type: BoolProperty
		/// Offset: 0x336C0
		/// Size: 0x01
		/// </summary>
		public bool bIsPassthrough
		{
			get
			{
				return ReadBool(0x336C0);
			}
			set
			{
				WriteBool(0x336C0,value);
			}
		}
		
	}


	/// <summary>
	/// USteamNetDriver:UIpNetDriver
	/// Size: 0x388
	/// Properties: 0
	/// </summary>
	public class USteamNetDriver:UIpNetDriver
	{
		public override int ObjectSize => 904;
	}


	/// <summary>
	/// UUniqueID:UObject
	/// Size: 0x50
	/// Properties: 1
	/// </summary>
	public class UUniqueID:UObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: UID
		/// Type: Int64Property
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public long UID
		{
			get
			{
				return ReadInt64(0x38);
			}
			set
			{
				WriteInt64(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// UAsyncLineTraceByChannelProxy:UBlueprintAsyncActionBase
	/// Size: 0x1C0
	/// Properties: 0
	/// </summary>
	public class UAsyncLineTraceByChannelProxy:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 448;
	}


	/// <summary>
	/// UDreamworldBlueprints:UBlueprintFunctionLibrary
	/// Size: 0xC8
	/// Properties: 0
	/// </summary>
	public class UDreamworldBlueprints:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 200;
	}


	/// <summary>
	/// UBudgetKeeper:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UBudgetKeeper:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UDeleteCharacterCallProxy:UBlueprintAsyncActionBase
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class UDeleteCharacterCallProxy:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// UFrameRateTracker:UObject
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class UFrameRateTracker:UObject
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// UFrameRateReporter:UFrameRateTracker
	/// Size: 0x88
	/// Properties: 3
	/// </summary>
	public class UFrameRateReporter:UFrameRateTracker
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: ScopeName
		/// Type: StrProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FString ScopeName => new FString(BaseAddress+0x50);
		
		/// <summary>
		/// Name: Compact
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool Compact
		{
			get
			{
				return ReadBool(0x60);
			}
			set
			{
				WriteBool(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: DebugLevel
		/// Type: ByteProperty
		/// Offset: 0x61
		/// Size: 0x01
		/// </summary>
		public byte DebugLevel
		{
			get
			{
				return ReadByte(0x61);
			}
			set
			{
				WriteByte(0x61,value);
			}
		}
		
	}


	/// <summary>
	/// UDWDebugLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UDWDebugLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// ASoundStage:AActor
	/// Size: 0x3D0
	/// Properties: 0
	/// </summary>
	public class ASoundStage:AActor
	{
		public override int ObjectSize => 976;
	}


	/// <summary>
	/// UGetUserCharacterListCallProxy:UBlueprintAsyncActionBase
	/// Size: 0x90
	/// Properties: 2
	/// </summary>
	public class UGetUserCharacterListCallProxy:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: idList
		/// Type: TArray<UUniqueID>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x50
		/// </summary>
		public TArray<UUniqueID> idList => new TArray<UUniqueID>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: CharacterListData
		/// Type: TArray<FCharacterListData>
		/// Offset: 0x80
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FCharacterListData> CharacterListData => new TArray<FCharacterListData>(BaseAddress+0x80);
		
	}


	/// <summary>
	/// UGetUserUniqueIDCallProxy:UBlueprintAsyncActionBase
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class UGetUserUniqueIDCallProxy:UBlueprintAsyncActionBase
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// UWorldPersistenceComponent:UPersistenceComponent
	/// Size: 0x230
	/// Properties: 0
	/// </summary>
	public class UWorldPersistenceComponent:UPersistenceComponent
	{
		public override int ObjectSize => 560;
	}


	/// <summary>
	/// UPolarUtilityVectorHelpers:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UPolarUtilityVectorHelpers:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// USupportsMaxRelevancyScalingInterface:UInterface
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class USupportsMaxRelevancyScalingInterface:UInterface
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UVirtualAllocTracker:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UVirtualAllocTracker:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// ULoggerLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class ULoggerLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UModDetailsRequest:UObject
	/// Size: 0x58
	/// Properties: 0
	/// </summary>
	public class UModDetailsRequest:UObject
	{
		public override int ObjectSize => 88;
	}


	/// <summary>
	/// UModManager:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UModManager:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// UMaterialExpressionSpriteTextureSampler:UMaterialExpressionTextureSampleParameter2D
	/// Size: 0x1E8
	/// Properties: 3
	/// </summary>
	public class UMaterialExpressionSpriteTextureSampler:UMaterialExpressionTextureSampleParameter2D
	{
		public override int ObjectSize => 488;
		/// <summary>
		/// Name: bSampleAdditionalTextures
		/// Type: BoolProperty
		/// Offset: 0x1C8
		/// Size: 0x01
		/// </summary>
		public bool bSampleAdditionalTextures
		{
			get
			{
				return ReadBool(0x1C8);
			}
			set
			{
				WriteBool(0x1C8,value);
			}
		}
		
		/// <summary>
		/// Name: AdditionalSlotIndex
		/// Type: IntProperty
		/// Offset: 0x1CC
		/// Size: 0x04
		/// </summary>
		public int AdditionalSlotIndex
		{
			get
			{
				return ReadInt32(0x1CC);
			}
			set
			{
				WriteInt32(0x1CC,value);
			}
		}
		
		/// <summary>
		/// Name: SlotDisplayName
		/// Type: TextProperty
		/// Offset: 0x1D0
		/// Size: 0x18
		/// </summary>
		
	}


	/// <summary>
	/// APaperCharacter:ACharacter
	/// Size: 0x7F0
	/// Properties: 1
	/// </summary>
	public class APaperCharacter:ACharacter
	{
		public override int ObjectSize => 2032;
		/// <summary>
		/// Name: Sprite
		/// Type: ObjectProperty
		/// Offset: 0x7E0
		/// Size: 0x08
		/// </summary>
		public UPaperFlipbookComponent Sprite => ReadUObject<UPaperFlipbookComponent>(0x7E0);
		
	}


	/// <summary>
	/// UPaperSprite:UObject
	/// Size: 0x98
	/// Properties: 11
	/// </summary>
	public class UPaperSprite:UObject
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: SourceTexture
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UTexture2D SourceTexture => ReadUObject<UTexture2D>(0x30);
		
		/// <summary>
		/// Name: AdditionalSourceTextures
		/// Type: TArray<UTexture>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0xB8
		/// </summary>
		public TArray<UTexture> AdditionalSourceTextures => new TArray<UTexture>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: BakedSourceTexture
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public UTexture2D BakedSourceTexture => ReadUObject<UTexture2D>(0x48);
		
		/// <summary>
		/// Name: DefaultMaterial
		/// Type: ObjectProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface DefaultMaterial => ReadUObject<UMaterialInterface>(0x50);
		
		/// <summary>
		/// Name: AlternateMaterial
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface AlternateMaterial => ReadUObject<UMaterialInterface>(0x58);
		
		/// <summary>
		/// Name: Sockets
		/// Type: TArray<FPaperSpriteSocket>
		/// Offset: 0x60
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FPaperSpriteSocket> Sockets => new TArray<FPaperSpriteSocket>(BaseAddress+0x60);
		
		/// <summary>
		/// Name: SpriteCollisionDomain
		/// Type: ByteProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public byte SpriteCollisionDomain
		{
			get
			{
				return ReadByte(0x70);
			}
			set
			{
				WriteByte(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: PixelsPerUnrealUnit
		/// Type: FloatProperty
		/// Offset: 0x74
		/// Size: 0x04
		/// </summary>
		public float PixelsPerUnrealUnit
		{
			get
			{
				return ReadSingle(0x74);
			}
			set
			{
				WriteSingle(0x74,value);
			}
		}
		
		/// <summary>
		/// Name: BodySetup
		/// Type: ObjectProperty
		/// Offset: 0x78
		/// Size: 0x08
		/// </summary>
		public UBodySetup BodySetup => ReadUObject<UBodySetup>(0x78);
		
		/// <summary>
		/// Name: AlternateMaterialSplitIndex
		/// Type: IntProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public int AlternateMaterialSplitIndex
		{
			get
			{
				return ReadInt32(0x80);
			}
			set
			{
				WriteInt32(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: BakedRenderData
		/// Type: TArray<FVector4>
		/// Offset: 0x88
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FVector4> BakedRenderData => new TArray<FVector4>(BaseAddress+0x88);
		
	}


	/// <summary>
	/// UPaperFlipbook:UObject
	/// Size: 0x50
	/// Properties: 4
	/// </summary>
	public class UPaperFlipbook:UObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: FramesPerSecond
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float FramesPerSecond
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: KeyFrames
		/// Type: TArray<FPaperFlipbookKeyFrame>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FPaperFlipbookKeyFrame> KeyFrames => new TArray<FPaperFlipbookKeyFrame>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: DefaultMaterial
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface DefaultMaterial => ReadUObject<UMaterialInterface>(0x40);
		
		/// <summary>
		/// Name: CollisionSource
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte CollisionSource
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
	}


	/// <summary>
	/// UPaperFlipbookComponent:UMeshComponent
	/// Size: 0x6A0
	/// Properties: 10
	/// </summary>
	public class UPaperFlipbookComponent:UMeshComponent
	{
		public override int ObjectSize => 1696;
		/// <summary>
		/// Name: SourceFlipbook
		/// Type: ObjectProperty
		/// Offset: 0x658
		/// Size: 0x08
		/// </summary>
		public UPaperFlipbook SourceFlipbook => ReadUObject<UPaperFlipbook>(0x658);
		
		/// <summary>
		/// Name: Material
		/// Type: ObjectProperty
		/// Offset: 0x660
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface Material => ReadUObject<UMaterialInterface>(0x660);
		
		/// <summary>
		/// Name: PlayRate
		/// Type: FloatProperty
		/// Offset: 0x668
		/// Size: 0x04
		/// </summary>
		public float PlayRate
		{
			get
			{
				return ReadSingle(0x668);
			}
			set
			{
				WriteSingle(0x668,value);
			}
		}
		
		/// <summary>
		/// Name: bLooping
		/// Type: BoolProperty
		/// Offset: 0x66C
		/// Size: 0x01
		/// </summary>
		public bool bLooping => (ReadByte(0x066C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bReversePlayback
		/// Type: BoolProperty
		/// Offset: 0x66C
		/// Size: 0x01
		/// </summary>
		public bool bReversePlayback => (ReadByte(0x066C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bPlaying
		/// Type: BoolProperty
		/// Offset: 0x66C
		/// Size: 0x01
		/// </summary>
		public bool bPlaying => (ReadByte(0x066C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: AccumulatedTime
		/// Type: FloatProperty
		/// Offset: 0x670
		/// Size: 0x04
		/// </summary>
		public float AccumulatedTime
		{
			get
			{
				return ReadSingle(0x670);
			}
			set
			{
				WriteSingle(0x670,value);
			}
		}
		
		/// <summary>
		/// Name: CachedFrameIndex
		/// Type: IntProperty
		/// Offset: 0x674
		/// Size: 0x04
		/// </summary>
		public int CachedFrameIndex
		{
			get
			{
				return ReadInt32(0x674);
			}
			set
			{
				WriteInt32(0x674,value);
			}
		}
		
		/// <summary>
		/// Name: SpriteColor
		/// Type: StructProperty
		/// Offset: 0x678
		/// Size: 0x10
		/// </summary>
		public FLinearColor SpriteColor => ReadStruct<FLinearColor>(0x678);
		
		/// <summary>
		/// Name: CachedBodySetup
		/// Type: ObjectProperty
		/// Offset: 0x688
		/// Size: 0x08
		/// </summary>
		public UBodySetup CachedBodySetup => ReadUObject<UBodySetup>(0x688);
		
	}


	/// <summary>
	/// APaperFlipbookActor:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class APaperFlipbookActor:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: RenderComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UPaperFlipbookComponent RenderComponent => ReadUObject<UPaperFlipbookComponent>(0x3D0);
		
	}


	/// <summary>
	/// UPaperGroupedSpriteComponent:UMeshComponent
	/// Size: 0x690
	/// Properties: 2
	/// </summary>
	public class UPaperGroupedSpriteComponent:UMeshComponent
	{
		public override int ObjectSize => 1680;
		/// <summary>
		/// Name: InstanceMaterials
		/// Type: TArray<UMaterialInterface>
		/// Offset: 0x658
		/// Size: 0x10
		/// SubElement Size: 0x58
		/// </summary>
		public TArray<UMaterialInterface> InstanceMaterials => new TArray<UMaterialInterface>(BaseAddress+0x658);
		
		/// <summary>
		/// Name: PerInstanceSpriteData
		/// Type: TArray<FSpriteInstanceData>
		/// Offset: 0x668
		/// Size: 0x10
		/// SubElement Size: 0x50
		/// </summary>
		public TArray<FSpriteInstanceData> PerInstanceSpriteData => new TArray<FSpriteInstanceData>(BaseAddress+0x668);
		
	}


	/// <summary>
	/// APaperGroupedSpriteActor:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class APaperGroupedSpriteActor:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: RenderComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UPaperGroupedSpriteComponent RenderComponent => ReadUObject<UPaperGroupedSpriteComponent>(0x3D0);
		
	}


	/// <summary>
	/// UPaperRuntimeSettings:UObject
	/// Size: 0x30
	/// Properties: 3
	/// </summary>
	public class UPaperRuntimeSettings:UObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: bEnableSpriteAtlasGroups
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bEnableSpriteAtlasGroups
		{
			get
			{
				return ReadBool(0x28);
			}
			set
			{
				WriteBool(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableTerrainSplineEditing
		/// Type: BoolProperty
		/// Offset: 0x29
		/// Size: 0x01
		/// </summary>
		public bool bEnableTerrainSplineEditing
		{
			get
			{
				return ReadBool(0x29);
			}
			set
			{
				WriteBool(0x29,value);
			}
		}
		
		/// <summary>
		/// Name: bResizeSpriteDataToMatchTextures
		/// Type: BoolProperty
		/// Offset: 0x2A
		/// Size: 0x01
		/// </summary>
		public bool bResizeSpriteDataToMatchTextures
		{
			get
			{
				return ReadBool(0x2A);
			}
			set
			{
				WriteBool(0x2A,value);
			}
		}
		
	}


	/// <summary>
	/// UPaperSpriteComponent:UMeshComponent
	/// Size: 0x680
	/// Properties: 3
	/// </summary>
	public class UPaperSpriteComponent:UMeshComponent
	{
		public override int ObjectSize => 1664;
		/// <summary>
		/// Name: SourceSprite
		/// Type: ObjectProperty
		/// Offset: 0x658
		/// Size: 0x08
		/// </summary>
		public UPaperSprite SourceSprite => ReadUObject<UPaperSprite>(0x658);
		
		/// <summary>
		/// Name: MaterialOverride
		/// Type: ObjectProperty
		/// Offset: 0x660
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface MaterialOverride => ReadUObject<UMaterialInterface>(0x660);
		
		/// <summary>
		/// Name: SpriteColor
		/// Type: StructProperty
		/// Offset: 0x668
		/// Size: 0x10
		/// </summary>
		public FLinearColor SpriteColor => ReadStruct<FLinearColor>(0x668);
		
	}


	/// <summary>
	/// APaperSpriteActor:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class APaperSpriteActor:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: RenderComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UPaperSpriteComponent RenderComponent => ReadUObject<UPaperSpriteComponent>(0x3D0);
		
	}


	/// <summary>
	/// UPaperSpriteAtlas:UObject
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UPaperSpriteAtlas:UObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// APaperTerrainActor:AActor
	/// Size: 0x3E8
	/// Properties: 3
	/// </summary>
	public class APaperTerrainActor:AActor
	{
		public override int ObjectSize => 1000;
		/// <summary>
		/// Name: DummyRoot
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public USceneComponent DummyRoot => ReadUObject<USceneComponent>(0x3D0);
		
		/// <summary>
		/// Name: SplineComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public UPaperTerrainSplineComponent SplineComponent => ReadUObject<UPaperTerrainSplineComponent>(0x3D8);
		
		/// <summary>
		/// Name: RenderComponent
		/// Type: ObjectProperty
		/// Offset: 0x3E0
		/// Size: 0x08
		/// </summary>
		public UPaperTerrainComponent RenderComponent => ReadUObject<UPaperTerrainComponent>(0x3E0);
		
	}


	/// <summary>
	/// UPaperTerrainComponent:UPrimitiveComponent
	/// Size: 0x600
	/// Properties: 11
	/// </summary>
	public class UPaperTerrainComponent:UPrimitiveComponent
	{
		public override int ObjectSize => 1536;
		/// <summary>
		/// Name: TerrainMaterial
		/// Type: ObjectProperty
		/// Offset: 0x5A0
		/// Size: 0x08
		/// </summary>
		public UPaperTerrainMaterial TerrainMaterial => ReadUObject<UPaperTerrainMaterial>(0x5A0);
		
		/// <summary>
		/// Name: bClosedSpline
		/// Type: BoolProperty
		/// Offset: 0x5A8
		/// Size: 0x01
		/// </summary>
		public bool bClosedSpline
		{
			get
			{
				return ReadBool(0x5A8);
			}
			set
			{
				WriteBool(0x5A8,value);
			}
		}
		
		/// <summary>
		/// Name: bFilledSpline
		/// Type: BoolProperty
		/// Offset: 0x5A9
		/// Size: 0x01
		/// </summary>
		public bool bFilledSpline
		{
			get
			{
				return ReadBool(0x5A9);
			}
			set
			{
				WriteBool(0x5A9,value);
			}
		}
		
		/// <summary>
		/// Name: AssociatedSpline
		/// Type: ObjectProperty
		/// Offset: 0x5B0
		/// Size: 0x08
		/// </summary>
		public UPaperTerrainSplineComponent AssociatedSpline => ReadUObject<UPaperTerrainSplineComponent>(0x5B0);
		
		/// <summary>
		/// Name: RandomSeed
		/// Type: IntProperty
		/// Offset: 0x5B8
		/// Size: 0x04
		/// </summary>
		public int RandomSeed
		{
			get
			{
				return ReadInt32(0x5B8);
			}
			set
			{
				WriteInt32(0x5B8,value);
			}
		}
		
		/// <summary>
		/// Name: SegmentOverlapAmount
		/// Type: FloatProperty
		/// Offset: 0x5BC
		/// Size: 0x04
		/// </summary>
		public float SegmentOverlapAmount
		{
			get
			{
				return ReadSingle(0x5BC);
			}
			set
			{
				WriteSingle(0x5BC,value);
			}
		}
		
		/// <summary>
		/// Name: TerrainColor
		/// Type: StructProperty
		/// Offset: 0x5C0
		/// Size: 0x10
		/// </summary>
		public FLinearColor TerrainColor => ReadStruct<FLinearColor>(0x5C0);
		
		/// <summary>
		/// Name: ReparamStepsPerSegment
		/// Type: IntProperty
		/// Offset: 0x5D0
		/// Size: 0x04
		/// </summary>
		public int ReparamStepsPerSegment
		{
			get
			{
				return ReadInt32(0x5D0);
			}
			set
			{
				WriteInt32(0x5D0,value);
			}
		}
		
		/// <summary>
		/// Name: SpriteCollisionDomain
		/// Type: ByteProperty
		/// Offset: 0x5D4
		/// Size: 0x01
		/// </summary>
		public byte SpriteCollisionDomain
		{
			get
			{
				return ReadByte(0x5D4);
			}
			set
			{
				WriteByte(0x5D4,value);
			}
		}
		
		/// <summary>
		/// Name: CollisionThickness
		/// Type: FloatProperty
		/// Offset: 0x5D8
		/// Size: 0x04
		/// </summary>
		public float CollisionThickness
		{
			get
			{
				return ReadSingle(0x5D8);
			}
			set
			{
				WriteSingle(0x5D8,value);
			}
		}
		
		/// <summary>
		/// Name: CachedBodySetup
		/// Type: ObjectProperty
		/// Offset: 0x5E0
		/// Size: 0x08
		/// </summary>
		public UBodySetup CachedBodySetup => ReadUObject<UBodySetup>(0x5E0);
		
	}


	/// <summary>
	/// UPaperTerrainMaterial:UDataAsset
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class UPaperTerrainMaterial:UDataAsset
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Rules
		/// Type: TArray<FPaperTerrainMaterialRule>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FPaperTerrainMaterialRule> Rules => new TArray<FPaperTerrainMaterialRule>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: InteriorFill
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UPaperSprite InteriorFill => ReadUObject<UPaperSprite>(0x38);
		
	}


	/// <summary>
	/// UPaperTerrainSplineComponent:USplineComponent
	/// Size: 0x660
	/// Properties: 0
	/// </summary>
	public class UPaperTerrainSplineComponent:USplineComponent
	{
		public override int ObjectSize => 1632;
	}


	/// <summary>
	/// UPaperTileSet:UObject
	/// Size: 0x98
	/// Properties: 15
	/// </summary>
	public class UPaperTileSet:UObject
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: TileSize
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public FIntPoint TileSize => ReadStruct<FIntPoint>(0x28);
		
		/// <summary>
		/// Name: TileSheet
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UTexture2D TileSheet => ReadUObject<UTexture2D>(0x30);
		
		/// <summary>
		/// Name: BorderMargin
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FIntMargin BorderMargin => ReadStruct<FIntMargin>(0x38);
		
		/// <summary>
		/// Name: PerTileSpacing
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public FIntPoint PerTileSpacing => ReadStruct<FIntPoint>(0x48);
		
		/// <summary>
		/// Name: DrawingOffset
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public FIntPoint DrawingOffset => ReadStruct<FIntPoint>(0x50);
		
		/// <summary>
		/// Name: WidthInTiles
		/// Type: IntProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public int WidthInTiles
		{
			get
			{
				return ReadInt32(0x58);
			}
			set
			{
				WriteInt32(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: HeightInTiles
		/// Type: IntProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public int HeightInTiles
		{
			get
			{
				return ReadInt32(0x5C);
			}
			set
			{
				WriteInt32(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: AllocatedWidth
		/// Type: IntProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public int AllocatedWidth
		{
			get
			{
				return ReadInt32(0x60);
			}
			set
			{
				WriteInt32(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: AllocatedHeight
		/// Type: IntProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public int AllocatedHeight
		{
			get
			{
				return ReadInt32(0x64);
			}
			set
			{
				WriteInt32(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: PerTileData
		/// Type: TArray<FPaperTileMetadata>
		/// Offset: 0x68
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FPaperTileMetadata> PerTileData => new TArray<FPaperTileMetadata>(BaseAddress+0x68);
		
		/// <summary>
		/// Name: Terrains
		/// Type: TArray<FPaperTileSetTerrain>
		/// Offset: 0x78
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FPaperTileSetTerrain> Terrains => new TArray<FPaperTileSetTerrain>(BaseAddress+0x78);
		
		/// <summary>
		/// Name: TileWidth
		/// Type: IntProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public int TileWidth
		{
			get
			{
				return ReadInt32(0x88);
			}
			set
			{
				WriteInt32(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: TileHeight
		/// Type: IntProperty
		/// Offset: 0x8C
		/// Size: 0x04
		/// </summary>
		public int TileHeight
		{
			get
			{
				return ReadInt32(0x8C);
			}
			set
			{
				WriteInt32(0x8C,value);
			}
		}
		
		/// <summary>
		/// Name: Margin
		/// Type: IntProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public int Margin
		{
			get
			{
				return ReadInt32(0x90);
			}
			set
			{
				WriteInt32(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: Spacing
		/// Type: IntProperty
		/// Offset: 0x94
		/// Size: 0x04
		/// </summary>
		public int Spacing
		{
			get
			{
				return ReadInt32(0x94);
			}
			set
			{
				WriteInt32(0x94,value);
			}
		}
		
	}


	/// <summary>
	/// UPaperTileLayer:UObject
	/// Size: 0x98
	/// Properties: 15
	/// </summary>
	public class UPaperTileLayer:UObject
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: LayerName
		/// Type: TextProperty
		/// Offset: 0x28
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: LayerWidth
		/// Type: IntProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public int LayerWidth
		{
			get
			{
				return ReadInt32(0x40);
			}
			set
			{
				WriteInt32(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: LayerHeight
		/// Type: IntProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public int LayerHeight
		{
			get
			{
				return ReadInt32(0x44);
			}
			set
			{
				WriteInt32(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: bHiddenInGame
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool bHiddenInGame => (ReadByte(0x0048) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bLayerCollides
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool bLayerCollides => (ReadByte(0x0048) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverrideCollisionThickness
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool bOverrideCollisionThickness => (ReadByte(0x0048) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverrideCollisionOffset
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool bOverrideCollisionOffset => (ReadByte(0x0048) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: CollisionThicknessOverride
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float CollisionThicknessOverride
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: CollisionOffsetOverride
		/// Type: FloatProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public float CollisionOffsetOverride
		{
			get
			{
				return ReadSingle(0x50);
			}
			set
			{
				WriteSingle(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: LayerColor
		/// Type: StructProperty
		/// Offset: 0x54
		/// Size: 0x10
		/// </summary>
		public FLinearColor LayerColor => ReadStruct<FLinearColor>(0x54);
		
		/// <summary>
		/// Name: AllocatedWidth
		/// Type: IntProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public int AllocatedWidth
		{
			get
			{
				return ReadInt32(0x64);
			}
			set
			{
				WriteInt32(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: AllocatedHeight
		/// Type: IntProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public int AllocatedHeight
		{
			get
			{
				return ReadInt32(0x68);
			}
			set
			{
				WriteInt32(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: AllocatedCells
		/// Type: TArray<FPaperTileInfo>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FPaperTileInfo> AllocatedCells => new TArray<FPaperTileInfo>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: TileSet
		/// Type: ObjectProperty
		/// Offset: 0x80
		/// Size: 0x08
		/// </summary>
		public UPaperTileSet TileSet => ReadUObject<UPaperTileSet>(0x80);
		
		/// <summary>
		/// Name: AllocatedGrid
		/// Type: TArray<>
		/// Offset: 0x88
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// UPaperTileMap:UObject
	/// Size: 0xA0
	/// Properties: 16
	/// </summary>
	public class UPaperTileMap:UObject
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: MapWidth
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int MapWidth
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: MapHeight
		/// Type: IntProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public int MapHeight
		{
			get
			{
				return ReadInt32(0x2C);
			}
			set
			{
				WriteInt32(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: TileWidth
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int TileWidth
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: TileHeight
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int TileHeight
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: PixelsPerUnrealUnit
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float PixelsPerUnrealUnit
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: SeparationPerTileX
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float SeparationPerTileX
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: SeparationPerTileY
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float SeparationPerTileY
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: SeparationPerLayer
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float SeparationPerLayer
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: Material
		/// Type: ObjectProperty
		/// Offset: 0x68
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface Material => ReadUObject<UMaterialInterface>(0x68);
		
		/// <summary>
		/// Name: TileLayers
		/// Type: TArray<UPaperTileLayer>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x98
		/// </summary>
		public TArray<UPaperTileLayer> TileLayers => new TArray<UPaperTileLayer>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: CollisionThickness
		/// Type: FloatProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public float CollisionThickness
		{
			get
			{
				return ReadSingle(0x80);
			}
			set
			{
				WriteSingle(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: SpriteCollisionDomain
		/// Type: ByteProperty
		/// Offset: 0x84
		/// Size: 0x01
		/// </summary>
		public byte SpriteCollisionDomain
		{
			get
			{
				return ReadByte(0x84);
			}
			set
			{
				WriteByte(0x84,value);
			}
		}
		
		/// <summary>
		/// Name: ProjectionMode
		/// Type: ByteProperty
		/// Offset: 0x85
		/// Size: 0x01
		/// </summary>
		public byte ProjectionMode
		{
			get
			{
				return ReadByte(0x85);
			}
			set
			{
				WriteByte(0x85,value);
			}
		}
		
		/// <summary>
		/// Name: HexSideLength
		/// Type: IntProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public int HexSideLength
		{
			get
			{
				return ReadInt32(0x88);
			}
			set
			{
				WriteInt32(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: BodySetup
		/// Type: ObjectProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		public UBodySetup BodySetup => ReadUObject<UBodySetup>(0x90);
		
		/// <summary>
		/// Name: LayerNameIndex
		/// Type: IntProperty
		/// Offset: 0x98
		/// Size: 0x04
		/// </summary>
		public int LayerNameIndex
		{
			get
			{
				return ReadInt32(0x98);
			}
			set
			{
				WriteInt32(0x98,value);
			}
		}
		
	}


	/// <summary>
	/// APaperTileMapActor:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class APaperTileMapActor:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: RenderComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UPaperTileMapComponent RenderComponent => ReadUObject<UPaperTileMapComponent>(0x3D0);
		
	}


	/// <summary>
	/// UPaperTileMapComponent:UMeshComponent
	/// Size: 0x6B0
	/// Properties: 11
	/// </summary>
	public class UPaperTileMapComponent:UMeshComponent
	{
		public override int ObjectSize => 1712;
		/// <summary>
		/// Name: MapWidth
		/// Type: IntProperty
		/// Offset: 0x658
		/// Size: 0x04
		/// </summary>
		public int MapWidth
		{
			get
			{
				return ReadInt32(0x658);
			}
			set
			{
				WriteInt32(0x658,value);
			}
		}
		
		/// <summary>
		/// Name: MapHeight
		/// Type: IntProperty
		/// Offset: 0x65C
		/// Size: 0x04
		/// </summary>
		public int MapHeight
		{
			get
			{
				return ReadInt32(0x65C);
			}
			set
			{
				WriteInt32(0x65C,value);
			}
		}
		
		/// <summary>
		/// Name: TileWidth
		/// Type: IntProperty
		/// Offset: 0x660
		/// Size: 0x04
		/// </summary>
		public int TileWidth
		{
			get
			{
				return ReadInt32(0x660);
			}
			set
			{
				WriteInt32(0x660,value);
			}
		}
		
		/// <summary>
		/// Name: TileHeight
		/// Type: IntProperty
		/// Offset: 0x664
		/// Size: 0x04
		/// </summary>
		public int TileHeight
		{
			get
			{
				return ReadInt32(0x664);
			}
			set
			{
				WriteInt32(0x664,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultLayerTileSet
		/// Type: ObjectProperty
		/// Offset: 0x668
		/// Size: 0x08
		/// </summary>
		public UPaperTileSet DefaultLayerTileSet => ReadUObject<UPaperTileSet>(0x668);
		
		/// <summary>
		/// Name: Material
		/// Type: ObjectProperty
		/// Offset: 0x670
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface Material => ReadUObject<UMaterialInterface>(0x670);
		
		/// <summary>
		/// Name: TileLayers
		/// Type: TArray<UPaperTileLayer>
		/// Offset: 0x678
		/// Size: 0x10
		/// SubElement Size: 0x98
		/// </summary>
		public TArray<UPaperTileLayer> TileLayers => new TArray<UPaperTileLayer>(BaseAddress+0x678);
		
		/// <summary>
		/// Name: TileMapColor
		/// Type: StructProperty
		/// Offset: 0x688
		/// Size: 0x10
		/// </summary>
		public FLinearColor TileMapColor => ReadStruct<FLinearColor>(0x688);
		
		/// <summary>
		/// Name: UseSingleLayerIndex
		/// Type: IntProperty
		/// Offset: 0x698
		/// Size: 0x04
		/// </summary>
		public int UseSingleLayerIndex
		{
			get
			{
				return ReadInt32(0x698);
			}
			set
			{
				WriteInt32(0x698,value);
			}
		}
		
		/// <summary>
		/// Name: bUseSingleLayer
		/// Type: BoolProperty
		/// Offset: 0x69C
		/// Size: 0x01
		/// </summary>
		public bool bUseSingleLayer
		{
			get
			{
				return ReadBool(0x69C);
			}
			set
			{
				WriteBool(0x69C,value);
			}
		}
		
		/// <summary>
		/// Name: TileMap
		/// Type: ObjectProperty
		/// Offset: 0x6A0
		/// Size: 0x08
		/// </summary>
		public UPaperTileMap TileMap => ReadUObject<UPaperTileMap>(0x6A0);
		
	}


	/// <summary>
	/// UTileMapBlueprintLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UTileMapBlueprintLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// ULightPropagationVolumeBlendable:UObject
	/// Size: 0x70
	/// Properties: 2
	/// </summary>
	public class ULightPropagationVolumeBlendable:UObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: Settings
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x38
		/// </summary>
		public FLightPropagationVolumeSettings Settings => ReadStruct<FLightPropagationVolumeSettings>(0x30);
		
		/// <summary>
		/// Name: BlendWeight
		/// Type: FloatProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public float BlendWeight
		{
			get
			{
				return ReadSingle(0x68);
			}
			set
			{
				WriteSingle(0x68,value);
			}
		}
		
	}


	/// <summary>
	/// UWebSocketConnection:UNetConnection
	/// Size: 0x336A8
	/// Properties: 0
	/// </summary>
	public class UWebSocketConnection:UNetConnection
	{
		public override int ObjectSize => 210600;
	}


	/// <summary>
	/// UWebSocketNetDriver:UNetDriver
	/// Size: 0x360
	/// Properties: 1
	/// </summary>
	public class UWebSocketNetDriver:UNetDriver
	{
		public override int ObjectSize => 864;
		/// <summary>
		/// Name: WebSocketPort
		/// Type: IntProperty
		/// Offset: 0x350
		/// Size: 0x04
		/// </summary>
		public int WebSocketPort
		{
			get
			{
				return ReadInt32(0x350);
			}
			set
			{
				WriteInt32(0x350,value);
			}
		}
		
	}


	/// <summary>
	/// UUdpMessagingSettings:UObject
	/// Size: 0xA0
	/// Properties: 9
	/// </summary>
	public class UUdpMessagingSettings:UObject
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: EnableTransport
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool EnableTransport
		{
			get
			{
				return ReadBool(0x28);
			}
			set
			{
				WriteBool(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: UnicastEndpoint
		/// Type: StrProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FString UnicastEndpoint => new FString(BaseAddress+0x30);
		
		/// <summary>
		/// Name: MulticastEndpoint
		/// Type: StrProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FString MulticastEndpoint => new FString(BaseAddress+0x40);
		
		/// <summary>
		/// Name: MulticastTimeToLive
		/// Type: ByteProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public byte MulticastTimeToLive
		{
			get
			{
				return ReadByte(0x50);
			}
			set
			{
				WriteByte(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: StaticEndpoints
		/// Type: TArray<>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: EnableTunnel
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool EnableTunnel
		{
			get
			{
				return ReadBool(0x68);
			}
			set
			{
				WriteBool(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: TunnelUnicastEndpoint
		/// Type: StrProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FString TunnelUnicastEndpoint => new FString(BaseAddress+0x70);
		
		/// <summary>
		/// Name: TunnelMulticastEndpoint
		/// Type: StrProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FString TunnelMulticastEndpoint => new FString(BaseAddress+0x80);
		
		/// <summary>
		/// Name: RemoteTunnelEndpoints
		/// Type: TArray<>
		/// Offset: 0x90
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// AArchVisCharacter:ACharacter
	/// Size: 0x850
	/// Properties: 8
	/// </summary>
	public class AArchVisCharacter:ACharacter
	{
		public override int ObjectSize => 2128;
		/// <summary>
		/// Name: LookUpAxisName
		/// Type: StrProperty
		/// Offset: 0x7E0
		/// Size: 0x10
		/// </summary>
		public FString LookUpAxisName => new FString(BaseAddress+0x7E0);
		
		/// <summary>
		/// Name: LookUpAtRateAxisName
		/// Type: StrProperty
		/// Offset: 0x7F0
		/// Size: 0x10
		/// </summary>
		public FString LookUpAtRateAxisName => new FString(BaseAddress+0x7F0);
		
		/// <summary>
		/// Name: TurnAxisName
		/// Type: StrProperty
		/// Offset: 0x800
		/// Size: 0x10
		/// </summary>
		public FString TurnAxisName => new FString(BaseAddress+0x800);
		
		/// <summary>
		/// Name: TurnAtRateAxisName
		/// Type: StrProperty
		/// Offset: 0x810
		/// Size: 0x10
		/// </summary>
		public FString TurnAtRateAxisName => new FString(BaseAddress+0x810);
		
		/// <summary>
		/// Name: MoveForwardAxisName
		/// Type: StrProperty
		/// Offset: 0x820
		/// Size: 0x10
		/// </summary>
		public FString MoveForwardAxisName => new FString(BaseAddress+0x820);
		
		/// <summary>
		/// Name: MoveRightAxisName
		/// Type: StrProperty
		/// Offset: 0x830
		/// Size: 0x10
		/// </summary>
		public FString MoveRightAxisName => new FString(BaseAddress+0x830);
		
		/// <summary>
		/// Name: MouseSensitivityScale_Pitch
		/// Type: FloatProperty
		/// Offset: 0x840
		/// Size: 0x04
		/// </summary>
		public float MouseSensitivityScale_Pitch
		{
			get
			{
				return ReadSingle(0x840);
			}
			set
			{
				WriteSingle(0x840,value);
			}
		}
		
		/// <summary>
		/// Name: MouseSensitivityScale_Yaw
		/// Type: FloatProperty
		/// Offset: 0x844
		/// Size: 0x04
		/// </summary>
		public float MouseSensitivityScale_Yaw
		{
			get
			{
				return ReadSingle(0x844);
			}
			set
			{
				WriteSingle(0x844,value);
			}
		}
		
	}


	/// <summary>
	/// UArchVisCharMovementComponent:UCharacterMovementComponent
	/// Size: 0x790
	/// Properties: 8
	/// </summary>
	public class UArchVisCharMovementComponent:UCharacterMovementComponent
	{
		public override int ObjectSize => 1936;
		/// <summary>
		/// Name: RotationalAcceleration
		/// Type: StructProperty
		/// Offset: 0x738
		/// Size: 0x0C
		/// </summary>
		public FRotator RotationalAcceleration => ReadStruct<FRotator>(0x738);
		
		/// <summary>
		/// Name: RotationalDeceleration
		/// Type: StructProperty
		/// Offset: 0x744
		/// Size: 0x0C
		/// </summary>
		public FRotator RotationalDeceleration => ReadStruct<FRotator>(0x744);
		
		/// <summary>
		/// Name: MaxRotationalVelocity
		/// Type: StructProperty
		/// Offset: 0x750
		/// Size: 0x0C
		/// </summary>
		public FRotator MaxRotationalVelocity => ReadStruct<FRotator>(0x750);
		
		/// <summary>
		/// Name: MinPitch
		/// Type: FloatProperty
		/// Offset: 0x75C
		/// Size: 0x04
		/// </summary>
		public float MinPitch
		{
			get
			{
				return ReadSingle(0x75C);
			}
			set
			{
				WriteSingle(0x75C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxPitch
		/// Type: FloatProperty
		/// Offset: 0x760
		/// Size: 0x04
		/// </summary>
		public float MaxPitch
		{
			get
			{
				return ReadSingle(0x760);
			}
			set
			{
				WriteSingle(0x760,value);
			}
		}
		
		/// <summary>
		/// Name: WalkingFriction
		/// Type: FloatProperty
		/// Offset: 0x764
		/// Size: 0x04
		/// </summary>
		public float WalkingFriction
		{
			get
			{
				return ReadSingle(0x764);
			}
			set
			{
				WriteSingle(0x764,value);
			}
		}
		
		/// <summary>
		/// Name: WalkingSpeed
		/// Type: FloatProperty
		/// Offset: 0x768
		/// Size: 0x04
		/// </summary>
		public float WalkingSpeed
		{
			get
			{
				return ReadSingle(0x768);
			}
			set
			{
				WriteSingle(0x768,value);
			}
		}
		
		/// <summary>
		/// Name: WalkingAcceleration
		/// Type: FloatProperty
		/// Offset: 0x76C
		/// Size: 0x04
		/// </summary>
		public float WalkingAcceleration
		{
			get
			{
				return ReadSingle(0x76C);
			}
			set
			{
				WriteSingle(0x76C,value);
			}
		}
		
	}


	/// <summary>
	/// ACableActor:AActor
	/// Size: 0x3D8
	/// Properties: 1
	/// </summary>
	public class ACableActor:AActor
	{
		public override int ObjectSize => 984;
		/// <summary>
		/// Name: CableComponent
		/// Type: ObjectProperty
		/// Offset: 0x3D0
		/// Size: 0x08
		/// </summary>
		public UCableComponent CableComponent => ReadUObject<UCableComponent>(0x3D0);
		
	}


	/// <summary>
	/// UCableComponent:UMeshComponent
	/// Size: 0x6C0
	/// Properties: 10
	/// </summary>
	public class UCableComponent:UMeshComponent
	{
		public override int ObjectSize => 1728;
		/// <summary>
		/// Name: AttachEndTo
		/// Type: StructProperty
		/// Offset: 0x658
		/// Size: 0x18
		/// </summary>
		public FComponentReference AttachEndTo => ReadStruct<FComponentReference>(0x658);
		
		/// <summary>
		/// Name: EndLocation
		/// Type: StructProperty
		/// Offset: 0x670
		/// Size: 0x0C
		/// </summary>
		public FVector EndLocation => ReadStruct<FVector>(0x670);
		
		/// <summary>
		/// Name: CableLength
		/// Type: FloatProperty
		/// Offset: 0x67C
		/// Size: 0x04
		/// </summary>
		public float CableLength
		{
			get
			{
				return ReadSingle(0x67C);
			}
			set
			{
				WriteSingle(0x67C,value);
			}
		}
		
		/// <summary>
		/// Name: NumSegments
		/// Type: IntProperty
		/// Offset: 0x680
		/// Size: 0x04
		/// </summary>
		public int NumSegments
		{
			get
			{
				return ReadInt32(0x680);
			}
			set
			{
				WriteInt32(0x680,value);
			}
		}
		
		/// <summary>
		/// Name: SubstepTime
		/// Type: FloatProperty
		/// Offset: 0x684
		/// Size: 0x04
		/// </summary>
		public float SubstepTime
		{
			get
			{
				return ReadSingle(0x684);
			}
			set
			{
				WriteSingle(0x684,value);
			}
		}
		
		/// <summary>
		/// Name: SolverIterations
		/// Type: IntProperty
		/// Offset: 0x688
		/// Size: 0x04
		/// </summary>
		public int SolverIterations
		{
			get
			{
				return ReadInt32(0x688);
			}
			set
			{
				WriteInt32(0x688,value);
			}
		}
		
		/// <summary>
		/// Name: CableWidth
		/// Type: FloatProperty
		/// Offset: 0x68C
		/// Size: 0x04
		/// </summary>
		public float CableWidth
		{
			get
			{
				return ReadSingle(0x68C);
			}
			set
			{
				WriteSingle(0x68C,value);
			}
		}
		
		/// <summary>
		/// Name: NumSides
		/// Type: IntProperty
		/// Offset: 0x690
		/// Size: 0x04
		/// </summary>
		public int NumSides
		{
			get
			{
				return ReadInt32(0x690);
			}
			set
			{
				WriteInt32(0x690,value);
			}
		}
		
		/// <summary>
		/// Name: TileMaterial
		/// Type: FloatProperty
		/// Offset: 0x694
		/// Size: 0x04
		/// </summary>
		public float TileMaterial
		{
			get
			{
				return ReadSingle(0x694);
			}
			set
			{
				WriteSingle(0x694,value);
			}
		}
		
		/// <summary>
		/// Name: CableUpDir
		/// Type: StructProperty
		/// Offset: 0x698
		/// Size: 0x0C
		/// </summary>
		public FVector CableUpDir => ReadStruct<FVector>(0x698);
		
	}


	/// <summary>
	/// UCustomMeshComponent:UMeshComponent
	/// Size: 0x670
	/// Properties: 0
	/// </summary>
	public class UCustomMeshComponent:UMeshComponent
	{
		public override int ObjectSize => 1648;
	}


	/// <summary>
	/// UProceduralMeshComponent:UMeshComponent
	/// Size: 0x6A0
	/// Properties: 3
	/// </summary>
	public class UProceduralMeshComponent:UMeshComponent
	{
		public override int ObjectSize => 1696;
		/// <summary>
		/// Name: ProcMeshBodySetup
		/// Type: ObjectProperty
		/// Offset: 0x660
		/// Size: 0x08
		/// </summary>
		public UBodySetup ProcMeshBodySetup => ReadUObject<UBodySetup>(0x660);
		
		/// <summary>
		/// Name: ProcMeshSections
		/// Type: TArray<FProcMeshSection>
		/// Offset: 0x668
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FProcMeshSection> ProcMeshSections => new TArray<FProcMeshSection>(BaseAddress+0x668);
		
		/// <summary>
		/// Name: LocalBounds
		/// Type: StructProperty
		/// Offset: 0x678
		/// Size: 0x1C
		/// </summary>
		public FBoxSphereBounds LocalBounds => ReadStruct<FBoxSphereBounds>(0x678);
		
	}


	/// <summary>
	/// UKismetProceduralMeshLibrary:UBlueprintFunctionLibrary
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class UKismetProceduralMeshLibrary:UBlueprintFunctionLibrary
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// USlateRemoteSettings:UObject
	/// Size: 0x50
	/// Properties: 3
	/// </summary>
	public class USlateRemoteSettings:UObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: EnableRemoteServer
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool EnableRemoteServer
		{
			get
			{
				return ReadBool(0x28);
			}
			set
			{
				WriteBool(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: EditorServerEndpoint
		/// Type: StrProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FString EditorServerEndpoint => new FString(BaseAddress+0x30);
		
		/// <summary>
		/// Name: GameServerEndpoint
		/// Type: StrProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FString GameServerEndpoint => new FString(BaseAddress+0x40);
		
	}


	/// <summary>
	/// FGuid:
	/// Size: 0x10
	/// Properties: 4
	/// </summary>
	public class FGuid:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: A
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int A
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: B
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int B
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: C
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int C
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: D
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int D
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FDefault__ScriptStruct:
	/// Size: 0x00
	/// Properties: 0
	/// </summary>
	public class FDefault__ScriptStruct:MemoryObject
	{
		public override int ObjectSize => 0;
	}


	/// <summary>
	/// FVector:
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FVector:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: X
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float X
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Y
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Y
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Z
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Z
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FVector4:
	/// Size: 0x10
	/// Properties: 4
	/// </summary>
	public class FVector4:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: X
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float X
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Y
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Y
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Z
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Z
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: W
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float W
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FVector2D:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FVector2D:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: X
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float X
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Y
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Y
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FTwoVectors:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FTwoVectors:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: v1
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector v1 => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: v2
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector v2 => ReadStruct<FVector>(0x0C);
		
	}


	/// <summary>
	/// FPlane:FVector
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FPlane:FVector
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: W
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float W
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FRotator:
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FRotator:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: Pitch
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Pitch
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Yaw
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Yaw
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Roll
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Roll
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FQuat:
	/// Size: 0x10
	/// Properties: 4
	/// </summary>
	public class FQuat:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: X
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float X
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Y
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Y
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Z
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Z
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: W
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float W
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FPackedNormal:
	/// Size: 0x04
	/// Properties: 4
	/// </summary>
	public class FPackedNormal:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: X
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte X
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Y
		/// Type: ByteProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public byte Y
		{
			get
			{
				return ReadByte(0x01);
			}
			set
			{
				WriteByte(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: Z
		/// Type: ByteProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public byte Z
		{
			get
			{
				return ReadByte(0x02);
			}
			set
			{
				WriteByte(0x02,value);
			}
		}
		
		/// <summary>
		/// Name: W
		/// Type: ByteProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public byte W
		{
			get
			{
				return ReadByte(0x03);
			}
			set
			{
				WriteByte(0x03,value);
			}
		}
		
	}


	/// <summary>
	/// FPackedRGB10A2N:
	/// Size: 0x04
	/// Properties: 1
	/// </summary>
	public class FPackedRGB10A2N:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: Packed
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int Packed
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
	}


	/// <summary>
	/// FPackedRGBA16N:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FPackedRGBA16N:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: XY
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int XY
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ZW
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int ZW
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FIntPoint:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FIntPoint:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: X
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int X
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Y
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int Y
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FIntVector:
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FIntVector:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: X
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int X
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Y
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int Y
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Z
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int Z
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FColor:
	/// Size: 0x04
	/// Properties: 4
	/// </summary>
	public class FColor:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: B
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte B
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: G
		/// Type: ByteProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public byte G
		{
			get
			{
				return ReadByte(0x01);
			}
			set
			{
				WriteByte(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: R
		/// Type: ByteProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public byte R
		{
			get
			{
				return ReadByte(0x02);
			}
			set
			{
				WriteByte(0x02,value);
			}
		}
		
		/// <summary>
		/// Name: A
		/// Type: ByteProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public byte A
		{
			get
			{
				return ReadByte(0x03);
			}
			set
			{
				WriteByte(0x03,value);
			}
		}
		
	}


	/// <summary>
	/// FLinearColor:
	/// Size: 0x10
	/// Properties: 4
	/// </summary>
	public class FLinearColor:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: R
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float R
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: G
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float G
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: B
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float B
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: A
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float A
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FBox:
	/// Size: 0x1C
	/// Properties: 3
	/// </summary>
	public class FBox:MemoryObject
	{
		public override int ObjectSize => 28;
		/// <summary>
		/// Name: Min
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Min => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: Max
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector Max => ReadStruct<FVector>(0x0C);
		
		/// <summary>
		/// Name: IsValid
		/// Type: ByteProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public byte IsValid
		{
			get
			{
				return ReadByte(0x18);
			}
			set
			{
				WriteByte(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FBox2D:
	/// Size: 0x14
	/// Properties: 3
	/// </summary>
	public class FBox2D:MemoryObject
	{
		public override int ObjectSize => 20;
		/// <summary>
		/// Name: Min
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public FVector2D Min => ReadStruct<FVector2D>(0x00);
		
		/// <summary>
		/// Name: Max
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public FVector2D Max => ReadStruct<FVector2D>(0x08);
		
		/// <summary>
		/// Name: IsValid
		/// Type: ByteProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public byte IsValid
		{
			get
			{
				return ReadByte(0x10);
			}
			set
			{
				WriteByte(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FBoxSphereBounds:
	/// Size: 0x1C
	/// Properties: 3
	/// </summary>
	public class FBoxSphereBounds:MemoryObject
	{
		public override int ObjectSize => 28;
		/// <summary>
		/// Name: Origin
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Origin => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: BoxExtent
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector BoxExtent => ReadStruct<FVector>(0x0C);
		
		/// <summary>
		/// Name: SphereRadius
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float SphereRadius
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FOrientedBox:
	/// Size: 0x3C
	/// Properties: 7
	/// </summary>
	public class FOrientedBox:MemoryObject
	{
		public override int ObjectSize => 60;
		/// <summary>
		/// Name: Center
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Center => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: AxisX
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector AxisX => ReadStruct<FVector>(0x0C);
		
		/// <summary>
		/// Name: AxisY
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x0C
		/// </summary>
		public FVector AxisY => ReadStruct<FVector>(0x18);
		
		/// <summary>
		/// Name: AxisZ
		/// Type: StructProperty
		/// Offset: 0x24
		/// Size: 0x0C
		/// </summary>
		public FVector AxisZ => ReadStruct<FVector>(0x24);
		
		/// <summary>
		/// Name: ExtentX
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float ExtentX
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: ExtentY
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float ExtentY
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: ExtentZ
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float ExtentZ
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// FMatrix:
	/// Size: 0x40
	/// Properties: 4
	/// </summary>
	public class FMatrix:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: XPlane
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FPlane XPlane => ReadStruct<FPlane>(0x00);
		
		/// <summary>
		/// Name: YPlane
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FPlane YPlane => ReadStruct<FPlane>(0x10);
		
		/// <summary>
		/// Name: ZPlane
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FPlane ZPlane => ReadStruct<FPlane>(0x20);
		
		/// <summary>
		/// Name: WPlane
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FPlane WPlane => ReadStruct<FPlane>(0x30);
		
	}


	/// <summary>
	/// FInterpCurvePointFloat:
	/// Size: 0x14
	/// Properties: 5
	/// </summary>
	public class FInterpCurvePointFloat:MemoryObject
	{
		public override int ObjectSize => 20;
		/// <summary>
		/// Name: InVal
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float InVal
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: OutVal
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float OutVal
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: ArriveTangent
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float ArriveTangent
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: LeaveTangent
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float LeaveTangent
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: InterpMode
		/// Type: ByteProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public byte InterpMode
		{
			get
			{
				return ReadByte(0x10);
			}
			set
			{
				WriteByte(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FInterpCurveFloat:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FInterpCurveFloat:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Points
		/// Type: TArray<FInterpCurvePointFloat>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x14
		/// </summary>
		public TArray<FInterpCurvePointFloat> Points => new TArray<FInterpCurvePointFloat>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: bIsLooped
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bIsLooped
		{
			get
			{
				return ReadBool(0x10);
			}
			set
			{
				WriteBool(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: LoopKeyOffset
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float LoopKeyOffset
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
	}


	/// <summary>
	/// FInterpCurvePointVector2D:
	/// Size: 0x20
	/// Properties: 5
	/// </summary>
	public class FInterpCurvePointVector2D:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: InVal
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float InVal
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: OutVal
		/// Type: StructProperty
		/// Offset: 0x04
		/// Size: 0x08
		/// </summary>
		public FVector2D OutVal => ReadStruct<FVector2D>(0x04);
		
		/// <summary>
		/// Name: ArriveTangent
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x08
		/// </summary>
		public FVector2D ArriveTangent => ReadStruct<FVector2D>(0x0C);
		
		/// <summary>
		/// Name: LeaveTangent
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x08
		/// </summary>
		public FVector2D LeaveTangent => ReadStruct<FVector2D>(0x14);
		
		/// <summary>
		/// Name: InterpMode
		/// Type: ByteProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public byte InterpMode
		{
			get
			{
				return ReadByte(0x1C);
			}
			set
			{
				WriteByte(0x1C,value);
			}
		}
		
	}


	/// <summary>
	/// FInterpCurveVector2D:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FInterpCurveVector2D:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Points
		/// Type: TArray<FInterpCurvePointVector2D>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FInterpCurvePointVector2D> Points => new TArray<FInterpCurvePointVector2D>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: bIsLooped
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bIsLooped
		{
			get
			{
				return ReadBool(0x10);
			}
			set
			{
				WriteBool(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: LoopKeyOffset
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float LoopKeyOffset
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
	}


	/// <summary>
	/// FInterpCurvePointVector:
	/// Size: 0x2C
	/// Properties: 5
	/// </summary>
	public class FInterpCurvePointVector:MemoryObject
	{
		public override int ObjectSize => 44;
		/// <summary>
		/// Name: InVal
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float InVal
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: OutVal
		/// Type: StructProperty
		/// Offset: 0x04
		/// Size: 0x0C
		/// </summary>
		public FVector OutVal => ReadStruct<FVector>(0x04);
		
		/// <summary>
		/// Name: ArriveTangent
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x0C
		/// </summary>
		public FVector ArriveTangent => ReadStruct<FVector>(0x10);
		
		/// <summary>
		/// Name: LeaveTangent
		/// Type: StructProperty
		/// Offset: 0x1C
		/// Size: 0x0C
		/// </summary>
		public FVector LeaveTangent => ReadStruct<FVector>(0x1C);
		
		/// <summary>
		/// Name: InterpMode
		/// Type: ByteProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public byte InterpMode
		{
			get
			{
				return ReadByte(0x28);
			}
			set
			{
				WriteByte(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// FInterpCurveVector:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FInterpCurveVector:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Points
		/// Type: TArray<FInterpCurvePointVector>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x2C
		/// </summary>
		public TArray<FInterpCurvePointVector> Points => new TArray<FInterpCurvePointVector>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: bIsLooped
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bIsLooped
		{
			get
			{
				return ReadBool(0x10);
			}
			set
			{
				WriteBool(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: LoopKeyOffset
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float LoopKeyOffset
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
	}


	/// <summary>
	/// FInterpCurvePointQuat:
	/// Size: 0x50
	/// Properties: 5
	/// </summary>
	public class FInterpCurvePointQuat:MemoryObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: InVal
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float InVal
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: OutVal
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FQuat OutVal => ReadStruct<FQuat>(0x10);
		
		/// <summary>
		/// Name: ArriveTangent
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FQuat ArriveTangent => ReadStruct<FQuat>(0x20);
		
		/// <summary>
		/// Name: LeaveTangent
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FQuat LeaveTangent => ReadStruct<FQuat>(0x30);
		
		/// <summary>
		/// Name: InterpMode
		/// Type: ByteProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public byte InterpMode
		{
			get
			{
				return ReadByte(0x40);
			}
			set
			{
				WriteByte(0x40,value);
			}
		}
		
	}


	/// <summary>
	/// FInterpCurveQuat:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FInterpCurveQuat:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Points
		/// Type: TArray<FInterpCurvePointQuat>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x50
		/// </summary>
		public TArray<FInterpCurvePointQuat> Points => new TArray<FInterpCurvePointQuat>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: bIsLooped
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bIsLooped
		{
			get
			{
				return ReadBool(0x10);
			}
			set
			{
				WriteBool(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: LoopKeyOffset
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float LoopKeyOffset
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
	}


	/// <summary>
	/// FInterpCurvePointTwoVectors:
	/// Size: 0x50
	/// Properties: 5
	/// </summary>
	public class FInterpCurvePointTwoVectors:MemoryObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: InVal
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float InVal
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: OutVal
		/// Type: StructProperty
		/// Offset: 0x04
		/// Size: 0x18
		/// </summary>
		public FTwoVectors OutVal => ReadStruct<FTwoVectors>(0x04);
		
		/// <summary>
		/// Name: ArriveTangent
		/// Type: StructProperty
		/// Offset: 0x1C
		/// Size: 0x18
		/// </summary>
		public FTwoVectors ArriveTangent => ReadStruct<FTwoVectors>(0x1C);
		
		/// <summary>
		/// Name: LeaveTangent
		/// Type: StructProperty
		/// Offset: 0x34
		/// Size: 0x18
		/// </summary>
		public FTwoVectors LeaveTangent => ReadStruct<FTwoVectors>(0x34);
		
		/// <summary>
		/// Name: InterpMode
		/// Type: ByteProperty
		/// Offset: 0x4C
		/// Size: 0x01
		/// </summary>
		public byte InterpMode
		{
			get
			{
				return ReadByte(0x4C);
			}
			set
			{
				WriteByte(0x4C,value);
			}
		}
		
	}


	/// <summary>
	/// FInterpCurveTwoVectors:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FInterpCurveTwoVectors:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Points
		/// Type: TArray<FInterpCurvePointTwoVectors>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x50
		/// </summary>
		public TArray<FInterpCurvePointTwoVectors> Points => new TArray<FInterpCurvePointTwoVectors>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: bIsLooped
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bIsLooped
		{
			get
			{
				return ReadBool(0x10);
			}
			set
			{
				WriteBool(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: LoopKeyOffset
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float LoopKeyOffset
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
	}


	/// <summary>
	/// FInterpCurvePointLinearColor:
	/// Size: 0x38
	/// Properties: 5
	/// </summary>
	public class FInterpCurvePointLinearColor:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: InVal
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float InVal
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: OutVal
		/// Type: StructProperty
		/// Offset: 0x04
		/// Size: 0x10
		/// </summary>
		public FLinearColor OutVal => ReadStruct<FLinearColor>(0x04);
		
		/// <summary>
		/// Name: ArriveTangent
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x10
		/// </summary>
		public FLinearColor ArriveTangent => ReadStruct<FLinearColor>(0x14);
		
		/// <summary>
		/// Name: LeaveTangent
		/// Type: StructProperty
		/// Offset: 0x24
		/// Size: 0x10
		/// </summary>
		public FLinearColor LeaveTangent => ReadStruct<FLinearColor>(0x24);
		
		/// <summary>
		/// Name: InterpMode
		/// Type: ByteProperty
		/// Offset: 0x34
		/// Size: 0x01
		/// </summary>
		public byte InterpMode
		{
			get
			{
				return ReadByte(0x34);
			}
			set
			{
				WriteByte(0x34,value);
			}
		}
		
	}


	/// <summary>
	/// FInterpCurveLinearColor:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FInterpCurveLinearColor:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Points
		/// Type: TArray<FInterpCurvePointLinearColor>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FInterpCurvePointLinearColor> Points => new TArray<FInterpCurvePointLinearColor>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: bIsLooped
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bIsLooped
		{
			get
			{
				return ReadBool(0x10);
			}
			set
			{
				WriteBool(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: LoopKeyOffset
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float LoopKeyOffset
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
	}


	/// <summary>
	/// FTransform:
	/// Size: 0x30
	/// Properties: 3
	/// </summary>
	public class FTransform:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FQuat Rotation => ReadStruct<FQuat>(0x00);
		
		/// <summary>
		/// Name: Translation
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x0C
		/// </summary>
		public FVector Translation => ReadStruct<FVector>(0x10);
		
		/// <summary>
		/// Name: Scale3D
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x0C
		/// </summary>
		public FVector Scale3D => ReadStruct<FVector>(0x20);
		
	}


	/// <summary>
	/// FRandomStream:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FRandomStream:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: InitialSeed
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int InitialSeed
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Seed
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int Seed
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FDateTime:
	/// Size: 0x08
	/// Properties: 0
	/// </summary>
	public class FDateTime:MemoryObject
	{
		public override int ObjectSize => 8;
	}


	/// <summary>
	/// FTimespan:
	/// Size: 0x08
	/// Properties: 0
	/// </summary>
	public class FTimespan:MemoryObject
	{
		public override int ObjectSize => 8;
	}


	/// <summary>
	/// FStringAssetReference:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FStringAssetReference:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: AssetLongPathname
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString AssetLongPathname => new FString(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FStringClassReference:FStringAssetReference
	/// Size: 0x10
	/// Properties: 0
	/// </summary>
	public class FStringClassReference:FStringAssetReference
	{
		public override int ObjectSize => 16;
	}


	/// <summary>
	/// FFallbackStruct:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FFallbackStruct:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FFloatRangeBound:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FFloatRangeBound:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Type
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte Type
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Value
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Value
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FFloatRange:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FFloatRange:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: LowerBound
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public FFloatRangeBound LowerBound => ReadStruct<FFloatRangeBound>(0x00);
		
		/// <summary>
		/// Name: UpperBound
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public FFloatRangeBound UpperBound => ReadStruct<FFloatRangeBound>(0x08);
		
	}


	/// <summary>
	/// FInt32RangeBound:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FInt32RangeBound:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Type
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte Type
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Value
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int Value
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FInt32Range:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FInt32Range:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: LowerBound
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public FInt32RangeBound LowerBound => ReadStruct<FInt32RangeBound>(0x00);
		
		/// <summary>
		/// Name: UpperBound
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public FInt32RangeBound UpperBound => ReadStruct<FInt32RangeBound>(0x08);
		
	}


	/// <summary>
	/// FFloatInterval:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FFloatInterval:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Min
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Min
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Max
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Max
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FInt32Interval:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FInt32Interval:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Min
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int Min
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Max
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int Max
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FDistributionLookupTable:
	/// Size: 0x28
	/// Properties: 8
	/// </summary>
	public class FDistributionLookupTable:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Op
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte Op
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: EntryCount
		/// Type: ByteProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public byte EntryCount
		{
			get
			{
				return ReadByte(0x01);
			}
			set
			{
				WriteByte(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: EntryStride
		/// Type: ByteProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public byte EntryStride
		{
			get
			{
				return ReadByte(0x02);
			}
			set
			{
				WriteByte(0x02,value);
			}
		}
		
		/// <summary>
		/// Name: SubEntryStride
		/// Type: ByteProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public byte SubEntryStride
		{
			get
			{
				return ReadByte(0x03);
			}
			set
			{
				WriteByte(0x03,value);
			}
		}
		
		/// <summary>
		/// Name: TimeScale
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float TimeScale
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: TimeBias
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float TimeBias
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: Values
		/// Type: TArray<>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: LockFlag
		/// Type: ByteProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public byte LockFlag
		{
			get
			{
				return ReadByte(0x20);
			}
			set
			{
				WriteByte(0x20,value);
			}
		}
		
	}


	/// <summary>
	/// FRawDistribution:
	/// Size: 0x28
	/// Properties: 1
	/// </summary>
	public class FRawDistribution:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Table
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x28
		/// </summary>
		public FDistributionLookupTable Table => ReadStruct<FDistributionLookupTable>(0x00);
		
	}


	/// <summary>
	/// FFloatDistribution:
	/// Size: 0x28
	/// Properties: 1
	/// </summary>
	public class FFloatDistribution:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Table
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x28
		/// </summary>
		public FDistributionLookupTable Table => ReadStruct<FDistributionLookupTable>(0x00);
		
	}


	/// <summary>
	/// FVectorDistribution:
	/// Size: 0x28
	/// Properties: 1
	/// </summary>
	public class FVectorDistribution:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Table
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x28
		/// </summary>
		public FDistributionLookupTable Table => ReadStruct<FDistributionLookupTable>(0x00);
		
	}


	/// <summary>
	/// FVector4Distribution:
	/// Size: 0x28
	/// Properties: 1
	/// </summary>
	public class FVector4Distribution:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Table
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x28
		/// </summary>
		public FDistributionLookupTable Table => ReadStruct<FDistributionLookupTable>(0x00);
		
	}


	/// <summary>
	/// FExpressionInput:
	/// Size: 0x38
	/// Properties: 8
	/// </summary>
	public class FExpressionInput:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: OutputIndex
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int OutputIndex
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: InputName
		/// Type: StrProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FString InputName => new FString(BaseAddress+0x08);
		
		/// <summary>
		/// Name: Mask
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int Mask
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: MaskR
		/// Type: IntProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public int MaskR
		{
			get
			{
				return ReadInt32(0x1C);
			}
			set
			{
				WriteInt32(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: MaskG
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int MaskG
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: MaskB
		/// Type: IntProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public int MaskB
		{
			get
			{
				return ReadInt32(0x24);
			}
			set
			{
				WriteInt32(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: MaskA
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int MaskA
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: ExpressionName
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FMaterialAttributesInput:FExpressionInput
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class FMaterialAttributesInput:FExpressionInput
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: PropertyConnectedBitmask
		/// Type: IntProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public int PropertyConnectedBitmask
		{
			get
			{
				return ReadInt32(0x38);
			}
			set
			{
				WriteInt32(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// FExpressionOutput:
	/// Size: 0x28
	/// Properties: 6
	/// </summary>
	public class FExpressionOutput:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: OutputName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString OutputName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Mask
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int Mask
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: MaskR
		/// Type: IntProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public int MaskR
		{
			get
			{
				return ReadInt32(0x14);
			}
			set
			{
				WriteInt32(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: MaskG
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int MaskG
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: MaskB
		/// Type: IntProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public int MaskB
		{
			get
			{
				return ReadInt32(0x1C);
			}
			set
			{
				WriteInt32(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: MaskA
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int MaskA
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
	}


	/// <summary>
	/// FFormatArgumentData:
	/// Size: 0x28
	/// Properties: 2
	/// </summary>
	public class FFormatArgumentData:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: ArgumentName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString ArgumentName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: ArgumentValue
		/// Type: TextProperty
		/// Offset: 0x10
		/// Size: 0x18
		/// </summary>
		
	}


	/// <summary>
	/// FMaterialInput:
	/// Size: 0x38
	/// Properties: 8
	/// </summary>
	public class FMaterialInput:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: OutputIndex
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int OutputIndex
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: InputName
		/// Type: StrProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FString InputName => new FString(BaseAddress+0x08);
		
		/// <summary>
		/// Name: Mask
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int Mask
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: MaskR
		/// Type: IntProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public int MaskR
		{
			get
			{
				return ReadInt32(0x1C);
			}
			set
			{
				WriteInt32(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: MaskG
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int MaskG
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: MaskB
		/// Type: IntProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public int MaskB
		{
			get
			{
				return ReadInt32(0x24);
			}
			set
			{
				WriteInt32(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: MaskA
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int MaskA
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: ExpressionName
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FColorMaterialInput:FMaterialInput
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class FColorMaterialInput:FMaterialInput
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: UseConstant
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool UseConstant => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Constant
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public FColor Constant => ReadStruct<FColor>(0x3C);
		
	}


	/// <summary>
	/// FScalarMaterialInput:FMaterialInput
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class FScalarMaterialInput:FMaterialInput
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: UseConstant
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool UseConstant => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Constant
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float Constant
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
	}


	/// <summary>
	/// FVectorMaterialInput:FMaterialInput
	/// Size: 0x48
	/// Properties: 2
	/// </summary>
	public class FVectorMaterialInput:FMaterialInput
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: UseConstant
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool UseConstant => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Constant
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x0C
		/// </summary>
		public FVector Constant => ReadStruct<FVector>(0x3C);
		
	}


	/// <summary>
	/// FVector2MaterialInput:FMaterialInput
	/// Size: 0x48
	/// Properties: 3
	/// </summary>
	public class FVector2MaterialInput:FMaterialInput
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: UseConstant
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool UseConstant => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ConstantX
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float ConstantX
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: ConstantY
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float ConstantY
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
	}


	/// <summary>
	/// FHitResult:
	/// Size: 0x88
	/// Properties: 14
	/// </summary>
	public class FHitResult:MemoryObject
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: bBlockingHit
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bBlockingHit => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bStartPenetrating
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bStartPenetrating => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Distance
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Distance
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantize Location => ReadStruct<FVector_NetQuantize>(0x0C);
		
		/// <summary>
		/// Name: ImpactPoint
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantize ImpactPoint => ReadStruct<FVector_NetQuantize>(0x18);
		
		/// <summary>
		/// Name: Normal
		/// Type: StructProperty
		/// Offset: 0x24
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantizeNormal Normal => ReadStruct<FVector_NetQuantizeNormal>(0x24);
		
		/// <summary>
		/// Name: ImpactNormal
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantizeNormal ImpactNormal => ReadStruct<FVector_NetQuantizeNormal>(0x30);
		
		/// <summary>
		/// Name: TraceStart
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantize TraceStart => ReadStruct<FVector_NetQuantize>(0x3C);
		
		/// <summary>
		/// Name: TraceEnd
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantize TraceEnd => ReadStruct<FVector_NetQuantize>(0x48);
		
		/// <summary>
		/// Name: PenetrationDepth
		/// Type: FloatProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public float PenetrationDepth
		{
			get
			{
				return ReadSingle(0x54);
			}
			set
			{
				WriteSingle(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: Item
		/// Type: IntProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public int Item
		{
			get
			{
				return ReadInt32(0x58);
			}
			set
			{
				WriteInt32(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: BoneName
		/// Type: NameProperty
		/// Offset: 0x78
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: FaceIndex
		/// Type: IntProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public int FaceIndex
		{
			get
			{
				return ReadInt32(0x80);
			}
			set
			{
				WriteInt32(0x80,value);
			}
		}
		
	}


	/// <summary>
	/// FVector_NetQuantize:FVector
	/// Size: 0x0C
	/// Properties: 0
	/// </summary>
	public class FVector_NetQuantize:FVector
	{
		public override int ObjectSize => 12;
	}


	/// <summary>
	/// FVector_NetQuantizeNormal:FVector
	/// Size: 0x0C
	/// Properties: 0
	/// </summary>
	public class FVector_NetQuantizeNormal:FVector
	{
		public override int ObjectSize => 12;
	}


	/// <summary>
	/// FKey:
	/// Size: 0x18
	/// Properties: 1
	/// </summary>
	public class FKey:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: KeyName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FSimpleMemberReference:
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FSimpleMemberReference:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: MemberParent
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UObject MemberParent => ReadUObject<UObject>(0x00);
		
		/// <summary>
		/// Name: MemberName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: MemberGuid
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FGuid MemberGuid => ReadStruct<FGuid>(0x10);
		
	}


	/// <summary>
	/// FActorComponentTickFunction:FTickFunction
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class FActorComponentTickFunction:FTickFunction
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// FTickFunction:
	/// Size: 0x58
	/// Properties: 7
	/// </summary>
	public class FTickFunction:MemoryObject
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: TickGroup
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte TickGroup
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: EndTickGroup
		/// Type: ByteProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public byte EndTickGroup
		{
			get
			{
				return ReadByte(0x09);
			}
			set
			{
				WriteByte(0x09,value);
			}
		}
		
		/// <summary>
		/// Name: bTickEvenWhenPaused
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bTickEvenWhenPaused => (ReadByte(0x000C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bCanEverTick
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bCanEverTick => (ReadByte(0x000C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bStartWithTickEnabled
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bStartWithTickEnabled => (ReadByte(0x000C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bAllowTickOnDedicatedServer
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bAllowTickOnDedicatedServer => (ReadByte(0x000C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: TickInterval
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float TickInterval
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
	}


	/// <summary>
	/// FSubtitleCue:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FSubtitleCue:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: Text
		/// Type: TextProperty
		/// Offset: 0x00
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FInterpControlPoint:
	/// Size: 0x1C
	/// Properties: 2
	/// </summary>
	public class FInterpControlPoint:MemoryObject
	{
		public override int ObjectSize => 28;
		/// <summary>
		/// Name: PositionControlPoint
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector PositionControlPoint => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: bPositionIsRelative
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bPositionIsRelative
		{
			get
			{
				return ReadBool(0x0C);
			}
			set
			{
				WriteBool(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FPlatformInterfaceDelegateResult:
	/// Size: 0x38
	/// Properties: 2
	/// </summary>
	public class FPlatformInterfaceDelegateResult:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: bSuccessful
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bSuccessful
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Data
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x30
		/// </summary>
		public FPlatformInterfaceData Data => ReadStruct<FPlatformInterfaceData>(0x08);
		
	}


	/// <summary>
	/// FPlatformInterfaceData:
	/// Size: 0x30
	/// Properties: 6
	/// </summary>
	public class FPlatformInterfaceData:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: DataName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Type
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte Type
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: IntValue
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int IntValue
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: FloatValue
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float FloatValue
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: StringValue
		/// Type: StrProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FString StringValue => new FString(BaseAddress+0x18);
		
		/// <summary>
		/// Name: ObjectValue
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UObject ObjectValue => ReadUObject<UObject>(0x28);
		
	}


	/// <summary>
	/// FDebugFloatHistory:
	/// Size: 0x20
	/// Properties: 5
	/// </summary>
	public class FDebugFloatHistory:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: Samples
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: MaxSamples
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float MaxSamples
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: MinValue
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float MinValue
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: MaxValue
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float MaxValue
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: bAutoAdjustMinMax
		/// Type: BoolProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public bool bAutoAdjustMinMax
		{
			get
			{
				return ReadBool(0x1C);
			}
			set
			{
				WriteBool(0x1C,value);
			}
		}
		
	}


	/// <summary>
	/// FLatentActionInfo:
	/// Size: 0x18
	/// Properties: 4
	/// </summary>
	public class FLatentActionInfo:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Linkage
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int Linkage
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: UUID
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int UUID
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: ExecutionFunction
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CallbackTarget
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UObject CallbackTarget => ReadUObject<UObject>(0x10);
		
	}


	/// <summary>
	/// FTimerHandle:
	/// Size: 0x08
	/// Properties: 1
	/// </summary>
	public class FTimerHandle:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Handle
		/// Type: UInt64Property
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public ulong Handle
		{
			get
			{
				return ReadUInt64(0x00);
			}
			set
			{
				WriteUInt64(0x00,value);
			}
		}
		
	}


	/// <summary>
	/// FCollisionProfileName:
	/// Size: 0x08
	/// Properties: 1
	/// </summary>
	public class FCollisionProfileName:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FGenericStruct:
	/// Size: 0x04
	/// Properties: 1
	/// </summary>
	public class FGenericStruct:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: Data
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int Data
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
	}


	/// <summary>
	/// FUserActivity:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FUserActivity:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: ActionName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString ActionName => new FString(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FRepAttachment:
	/// Size: 0x40
	/// Properties: 6
	/// </summary>
	public class FRepAttachment:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: AttachParent
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public AActor AttachParent => ReadUObject<AActor>(0x00);
		
		/// <summary>
		/// Name: LocationOffset
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantize100 LocationOffset => ReadStruct<FVector_NetQuantize100>(0x08);
		
		/// <summary>
		/// Name: RelativeScale3D
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantize100 RelativeScale3D => ReadStruct<FVector_NetQuantize100>(0x14);
		
		/// <summary>
		/// Name: RotationOffset
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x0C
		/// </summary>
		public FRotator RotationOffset => ReadStruct<FRotator>(0x20);
		
		/// <summary>
		/// Name: AttachSocket
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AttachComponent
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public USceneComponent AttachComponent => ReadUObject<USceneComponent>(0x38);
		
	}


	/// <summary>
	/// FVector_NetQuantize100:FVector
	/// Size: 0x0C
	/// Properties: 0
	/// </summary>
	public class FVector_NetQuantize100:FVector
	{
		public override int ObjectSize => 12;
	}


	/// <summary>
	/// FRepMovement:
	/// Size: 0x34
	/// Properties: 9
	/// </summary>
	public class FRepMovement:MemoryObject
	{
		public override int ObjectSize => 52;
		/// <summary>
		/// Name: LinearVelocity
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector LinearVelocity => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: AngularVelocity
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector AngularVelocity => ReadStruct<FVector>(0x0C);
		
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x0C
		/// </summary>
		public FVector Location => ReadStruct<FVector>(0x18);
		
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x24
		/// Size: 0x0C
		/// </summary>
		public FRotator Rotation => ReadStruct<FRotator>(0x24);
		
		/// <summary>
		/// Name: bSimulatedPhysicsSleepOrNonPhysicsAngularVelocity
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bSimulatedPhysicsSleepOrNonPhysicsAngularVelocity => (ReadByte(0x0030) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bRepPhysics
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bRepPhysics => (ReadByte(0x0030) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: LocationQuantizationLevel
		/// Type: ByteProperty
		/// Offset: 0x31
		/// Size: 0x01
		/// </summary>
		public byte LocationQuantizationLevel
		{
			get
			{
				return ReadByte(0x31);
			}
			set
			{
				WriteByte(0x31,value);
			}
		}
		
		/// <summary>
		/// Name: VelocityQuantizationLevel
		/// Type: ByteProperty
		/// Offset: 0x32
		/// Size: 0x01
		/// </summary>
		public byte VelocityQuantizationLevel
		{
			get
			{
				return ReadByte(0x32);
			}
			set
			{
				WriteByte(0x32,value);
			}
		}
		
		/// <summary>
		/// Name: RotationQuantizationLevel
		/// Type: ByteProperty
		/// Offset: 0x33
		/// Size: 0x01
		/// </summary>
		public byte RotationQuantizationLevel
		{
			get
			{
				return ReadByte(0x33);
			}
			set
			{
				WriteByte(0x33,value);
			}
		}
		
	}


	/// <summary>
	/// FActorTickFunction:FTickFunction
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class FActorTickFunction:FTickFunction
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// FBuildableHealthEntry:
	/// Size: 0x14
	/// Properties: 5
	/// </summary>
	public class FBuildableHealthEntry:MemoryObject
	{
		public override int ObjectSize => 20;
		/// <summary>
		/// Name: IngredientID
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int IngredientID
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentAmount
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float CurrentAmount
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: MaxAmount
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int MaxAmount
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: Weight
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int Weight
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: HealthContributionPercentage
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float HealthContributionPercentage
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FSlateBrush:
	/// Size: 0x90
	/// Properties: 13
	/// </summary>
	public class FSlateBrush:MemoryObject
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: ImageSize
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public FVector2D ImageSize => ReadStruct<FVector2D>(0x08);
		
		/// <summary>
		/// Name: DrawAs
		/// Type: ByteProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public byte DrawAs
		{
			get
			{
				return ReadByte(0x10);
			}
			set
			{
				WriteByte(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: Margin
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x10
		/// </summary>
		public FMargin Margin => ReadStruct<FMargin>(0x14);
		
		/// <summary>
		/// Name: Tint
		/// Type: StructProperty
		/// Offset: 0x24
		/// Size: 0x10
		/// </summary>
		public FLinearColor Tint => ReadStruct<FLinearColor>(0x24);
		
		/// <summary>
		/// Name: TintColor
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x28
		/// </summary>
		public FSlateColor TintColor => ReadStruct<FSlateColor>(0x38);
		
		/// <summary>
		/// Name: Tiling
		/// Type: ByteProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public byte Tiling
		{
			get
			{
				return ReadByte(0x60);
			}
			set
			{
				WriteByte(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: Mirroring
		/// Type: ByteProperty
		/// Offset: 0x61
		/// Size: 0x01
		/// </summary>
		public byte Mirroring
		{
			get
			{
				return ReadByte(0x61);
			}
			set
			{
				WriteByte(0x61,value);
			}
		}
		
		/// <summary>
		/// Name: ImageType
		/// Type: ByteProperty
		/// Offset: 0x62
		/// Size: 0x01
		/// </summary>
		public byte ImageType
		{
			get
			{
				return ReadByte(0x62);
			}
			set
			{
				WriteByte(0x62,value);
			}
		}
		
		/// <summary>
		/// Name: ResourceObject
		/// Type: ObjectProperty
		/// Offset: 0x68
		/// Size: 0x08
		/// </summary>
		public UObject ResourceObject => ReadUObject<UObject>(0x68);
		
		/// <summary>
		/// Name: ResourceName
		/// Type: NameProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bIsDynamicallyLoaded
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bIsDynamicallyLoaded
		{
			get
			{
				return ReadBool(0x78);
			}
			set
			{
				WriteBool(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: bHasUObject
		/// Type: BoolProperty
		/// Offset: 0x79
		/// Size: 0x01
		/// </summary>
		public bool bHasUObject
		{
			get
			{
				return ReadBool(0x79);
			}
			set
			{
				WriteBool(0x79,value);
			}
		}
		
		/// <summary>
		/// Name: UVRegion
		/// Type: StructProperty
		/// Offset: 0x7C
		/// Size: 0x14
		/// </summary>
		public FBox2D UVRegion => ReadStruct<FBox2D>(0x7C);
		
	}


	/// <summary>
	/// FSlateColor:
	/// Size: 0x28
	/// Properties: 2
	/// </summary>
	public class FSlateColor:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: SpecifiedColor
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FLinearColor SpecifiedColor => ReadStruct<FLinearColor>(0x00);
		
		/// <summary>
		/// Name: ColorUseRule
		/// Type: ByteProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public byte ColorUseRule
		{
			get
			{
				return ReadByte(0x10);
			}
			set
			{
				WriteByte(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FMargin:
	/// Size: 0x10
	/// Properties: 4
	/// </summary>
	public class FMargin:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Left
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Left
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Top
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Top
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Right
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Right
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: Bottom
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float Bottom
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FEventReply:
	/// Size: 0xA8
	/// Properties: 0
	/// </summary>
	public class FEventReply:MemoryObject
	{
		public override int ObjectSize => 168;
	}


	/// <summary>
	/// FPointerEvent:FInputEvent
	/// Size: 0x78
	/// Properties: 0
	/// </summary>
	public class FPointerEvent:FInputEvent
	{
		public override int ObjectSize => 120;
	}


	/// <summary>
	/// FInputEvent:
	/// Size: 0x20
	/// Properties: 0
	/// </summary>
	public class FInputEvent:MemoryObject
	{
		public override int ObjectSize => 32;
	}


	/// <summary>
	/// FGeometry:
	/// Size: 0x34
	/// Properties: 0
	/// </summary>
	public class FGeometry:MemoryObject
	{
		public override int ObjectSize => 52;
	}


	/// <summary>
	/// FWidgetTransform:
	/// Size: 0x1C
	/// Properties: 4
	/// </summary>
	public class FWidgetTransform:MemoryObject
	{
		public override int ObjectSize => 28;
		/// <summary>
		/// Name: Translation
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public FVector2D Translation => ReadStruct<FVector2D>(0x00);
		
		/// <summary>
		/// Name: Scale
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public FVector2D Scale => ReadStruct<FVector2D>(0x08);
		
		/// <summary>
		/// Name: Shear
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public FVector2D Shear => ReadStruct<FVector2D>(0x10);
		
		/// <summary>
		/// Name: Angle
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float Angle
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FComboBoxStyle:FSlateWidgetStyle
	/// Size: 0x450
	/// Properties: 5
	/// </summary>
	public class FComboBoxStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 1104;
		/// <summary>
		/// Name: ComboButtonStyle
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x408
		/// </summary>
		public FComboButtonStyle ComboButtonStyle => ReadStruct<FComboButtonStyle>(0x08);
		
		/// <summary>
		/// Name: PressedSlateSound
		/// Type: StructProperty
		/// Offset: 0x410
		/// Size: 0x18
		/// </summary>
		public FSlateSound PressedSlateSound => ReadStruct<FSlateSound>(0x410);
		
		/// <summary>
		/// Name: SelectionChangeSlateSound
		/// Type: StructProperty
		/// Offset: 0x428
		/// Size: 0x18
		/// </summary>
		public FSlateSound SelectionChangeSlateSound => ReadStruct<FSlateSound>(0x428);
		
		/// <summary>
		/// Name: PressedSound
		/// Type: NameProperty
		/// Offset: 0x440
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SelectionChangeSound
		/// Type: NameProperty
		/// Offset: 0x448
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FSlateWidgetStyle:
	/// Size: 0x08
	/// Properties: 0
	/// </summary>
	public class FSlateWidgetStyle:MemoryObject
	{
		public override int ObjectSize => 8;
	}


	/// <summary>
	/// FSlateSound:
	/// Size: 0x18
	/// Properties: 1
	/// </summary>
	public class FSlateSound:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: ResourceObject
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UObject ResourceObject => ReadUObject<UObject>(0x00);
		
	}


	/// <summary>
	/// FComboButtonStyle:FSlateWidgetStyle
	/// Size: 0x408
	/// Properties: 5
	/// </summary>
	public class FComboButtonStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 1032;
		/// <summary>
		/// Name: ButtonStyle
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x2A8
		/// </summary>
		public FButtonStyle ButtonStyle => ReadStruct<FButtonStyle>(0x08);
		
		/// <summary>
		/// Name: DownArrowImage
		/// Type: StructProperty
		/// Offset: 0x2B0
		/// Size: 0x90
		/// </summary>
		public FSlateBrush DownArrowImage => ReadStruct<FSlateBrush>(0x2B0);
		
		/// <summary>
		/// Name: DownArrowColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x340
		/// Size: 0x28
		/// </summary>
		public FSlateColor DownArrowColorAndOpacity => ReadStruct<FSlateColor>(0x340);
		
		/// <summary>
		/// Name: MenuBorderBrush
		/// Type: StructProperty
		/// Offset: 0x368
		/// Size: 0x90
		/// </summary>
		public FSlateBrush MenuBorderBrush => ReadStruct<FSlateBrush>(0x368);
		
		/// <summary>
		/// Name: MenuBorderPadding
		/// Type: StructProperty
		/// Offset: 0x3F8
		/// Size: 0x10
		/// </summary>
		public FMargin MenuBorderPadding => ReadStruct<FMargin>(0x3F8);
		
	}


	/// <summary>
	/// FButtonStyle:FSlateWidgetStyle
	/// Size: 0x2A8
	/// Properties: 10
	/// </summary>
	public class FButtonStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 680;
		/// <summary>
		/// Name: Normal
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x90
		/// </summary>
		public FSlateBrush Normal => ReadStruct<FSlateBrush>(0x08);
		
		/// <summary>
		/// Name: Hovered
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x90
		/// </summary>
		public FSlateBrush Hovered => ReadStruct<FSlateBrush>(0x98);
		
		/// <summary>
		/// Name: Pressed
		/// Type: StructProperty
		/// Offset: 0x128
		/// Size: 0x90
		/// </summary>
		public FSlateBrush Pressed => ReadStruct<FSlateBrush>(0x128);
		
		/// <summary>
		/// Name: Disabled
		/// Type: StructProperty
		/// Offset: 0x1B8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush Disabled => ReadStruct<FSlateBrush>(0x1B8);
		
		/// <summary>
		/// Name: NormalPadding
		/// Type: StructProperty
		/// Offset: 0x248
		/// Size: 0x10
		/// </summary>
		public FMargin NormalPadding => ReadStruct<FMargin>(0x248);
		
		/// <summary>
		/// Name: PressedPadding
		/// Type: StructProperty
		/// Offset: 0x258
		/// Size: 0x10
		/// </summary>
		public FMargin PressedPadding => ReadStruct<FMargin>(0x258);
		
		/// <summary>
		/// Name: PressedSlateSound
		/// Type: StructProperty
		/// Offset: 0x268
		/// Size: 0x18
		/// </summary>
		public FSlateSound PressedSlateSound => ReadStruct<FSlateSound>(0x268);
		
		/// <summary>
		/// Name: HoveredSlateSound
		/// Type: StructProperty
		/// Offset: 0x280
		/// Size: 0x18
		/// </summary>
		public FSlateSound HoveredSlateSound => ReadStruct<FSlateSound>(0x280);
		
		/// <summary>
		/// Name: PressedSound
		/// Type: NameProperty
		/// Offset: 0x298
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: HoveredSound
		/// Type: NameProperty
		/// Offset: 0x2A0
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FShapedTextOptions:
	/// Size: 0x08
	/// Properties: 4
	/// </summary>
	public class FShapedTextOptions:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: bOverride_TextShapingMethod
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_TextShapingMethod => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_TextFlowDirection
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_TextFlowDirection => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: TextShapingMethod
		/// Type: ByteProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public byte TextShapingMethod
		{
			get
			{
				return ReadByte(0x04);
			}
			set
			{
				WriteByte(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: TextFlowDirection
		/// Type: ByteProperty
		/// Offset: 0x05
		/// Size: 0x01
		/// </summary>
		public byte TextFlowDirection
		{
			get
			{
				return ReadByte(0x05);
			}
			set
			{
				WriteByte(0x05,value);
			}
		}
		
	}


	/// <summary>
	/// FSlateFontInfo:
	/// Size: 0x40
	/// Properties: 6
	/// </summary>
	public class FSlateFontInfo:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: FontObject
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UObject FontObject => ReadUObject<UObject>(0x00);
		
		/// <summary>
		/// Name: FontMaterial
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UObject FontMaterial => ReadUObject<UObject>(0x08);
		
		/// <summary>
		/// Name: TypefaceFontName
		/// Type: NameProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Size
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int Size
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: FontName
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Hinting
		/// Type: ByteProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public byte Hinting
		{
			get
			{
				return ReadByte(0x38);
			}
			set
			{
				WriteByte(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// FEditableTextStyle:FSlateWidgetStyle
	/// Size: 0x220
	/// Properties: 5
	/// </summary>
	public class FEditableTextStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 544;
		/// <summary>
		/// Name: Font
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x40
		/// </summary>
		public FSlateFontInfo Font => ReadStruct<FSlateFontInfo>(0x08);
		
		/// <summary>
		/// Name: ColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x28
		/// </summary>
		public FSlateColor ColorAndOpacity => ReadStruct<FSlateColor>(0x48);
		
		/// <summary>
		/// Name: BackgroundImageSelected
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x90
		/// </summary>
		public FSlateBrush BackgroundImageSelected => ReadStruct<FSlateBrush>(0x70);
		
		/// <summary>
		/// Name: BackgroundImageComposing
		/// Type: StructProperty
		/// Offset: 0x100
		/// Size: 0x90
		/// </summary>
		public FSlateBrush BackgroundImageComposing => ReadStruct<FSlateBrush>(0x100);
		
		/// <summary>
		/// Name: CaretImage
		/// Type: StructProperty
		/// Offset: 0x190
		/// Size: 0x90
		/// </summary>
		public FSlateBrush CaretImage => ReadStruct<FSlateBrush>(0x190);
		
	}


	/// <summary>
	/// FEditableTextBoxStyle:FSlateWidgetStyle
	/// Size: 0x848
	/// Properties: 12
	/// </summary>
	public class FEditableTextBoxStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 2120;
		/// <summary>
		/// Name: BackgroundImageNormal
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x90
		/// </summary>
		public FSlateBrush BackgroundImageNormal => ReadStruct<FSlateBrush>(0x08);
		
		/// <summary>
		/// Name: BackgroundImageHovered
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x90
		/// </summary>
		public FSlateBrush BackgroundImageHovered => ReadStruct<FSlateBrush>(0x98);
		
		/// <summary>
		/// Name: BackgroundImageFocused
		/// Type: StructProperty
		/// Offset: 0x128
		/// Size: 0x90
		/// </summary>
		public FSlateBrush BackgroundImageFocused => ReadStruct<FSlateBrush>(0x128);
		
		/// <summary>
		/// Name: BackgroundImageReadOnly
		/// Type: StructProperty
		/// Offset: 0x1B8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush BackgroundImageReadOnly => ReadStruct<FSlateBrush>(0x1B8);
		
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x248
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x248);
		
		/// <summary>
		/// Name: Font
		/// Type: StructProperty
		/// Offset: 0x258
		/// Size: 0x40
		/// </summary>
		public FSlateFontInfo Font => ReadStruct<FSlateFontInfo>(0x258);
		
		/// <summary>
		/// Name: ForegroundColor
		/// Type: StructProperty
		/// Offset: 0x298
		/// Size: 0x28
		/// </summary>
		public FSlateColor ForegroundColor => ReadStruct<FSlateColor>(0x298);
		
		/// <summary>
		/// Name: BackgroundColor
		/// Type: StructProperty
		/// Offset: 0x2C0
		/// Size: 0x28
		/// </summary>
		public FSlateColor BackgroundColor => ReadStruct<FSlateColor>(0x2C0);
		
		/// <summary>
		/// Name: ReadOnlyForegroundColor
		/// Type: StructProperty
		/// Offset: 0x2E8
		/// Size: 0x28
		/// </summary>
		public FSlateColor ReadOnlyForegroundColor => ReadStruct<FSlateColor>(0x2E8);
		
		/// <summary>
		/// Name: HScrollBarPadding
		/// Type: StructProperty
		/// Offset: 0x310
		/// Size: 0x10
		/// </summary>
		public FMargin HScrollBarPadding => ReadStruct<FMargin>(0x310);
		
		/// <summary>
		/// Name: VScrollBarPadding
		/// Type: StructProperty
		/// Offset: 0x320
		/// Size: 0x10
		/// </summary>
		public FMargin VScrollBarPadding => ReadStruct<FMargin>(0x320);
		
		/// <summary>
		/// Name: ScrollBarStyle
		/// Type: StructProperty
		/// Offset: 0x330
		/// Size: 0x518
		/// </summary>
		public FScrollBarStyle ScrollBarStyle => ReadStruct<FScrollBarStyle>(0x330);
		
	}


	/// <summary>
	/// FScrollBarStyle:FSlateWidgetStyle
	/// Size: 0x518
	/// Properties: 9
	/// </summary>
	public class FScrollBarStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 1304;
		/// <summary>
		/// Name: HorizontalBackgroundImage
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x90
		/// </summary>
		public FSlateBrush HorizontalBackgroundImage => ReadStruct<FSlateBrush>(0x08);
		
		/// <summary>
		/// Name: VerticalBackgroundImage
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x90
		/// </summary>
		public FSlateBrush VerticalBackgroundImage => ReadStruct<FSlateBrush>(0x98);
		
		/// <summary>
		/// Name: VerticalTopSlotImage
		/// Type: StructProperty
		/// Offset: 0x128
		/// Size: 0x90
		/// </summary>
		public FSlateBrush VerticalTopSlotImage => ReadStruct<FSlateBrush>(0x128);
		
		/// <summary>
		/// Name: HorizontalTopSlotImage
		/// Type: StructProperty
		/// Offset: 0x1B8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush HorizontalTopSlotImage => ReadStruct<FSlateBrush>(0x1B8);
		
		/// <summary>
		/// Name: VerticalBottomSlotImage
		/// Type: StructProperty
		/// Offset: 0x248
		/// Size: 0x90
		/// </summary>
		public FSlateBrush VerticalBottomSlotImage => ReadStruct<FSlateBrush>(0x248);
		
		/// <summary>
		/// Name: HorizontalBottomSlotImage
		/// Type: StructProperty
		/// Offset: 0x2D8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush HorizontalBottomSlotImage => ReadStruct<FSlateBrush>(0x2D8);
		
		/// <summary>
		/// Name: NormalThumbImage
		/// Type: StructProperty
		/// Offset: 0x368
		/// Size: 0x90
		/// </summary>
		public FSlateBrush NormalThumbImage => ReadStruct<FSlateBrush>(0x368);
		
		/// <summary>
		/// Name: HoveredThumbImage
		/// Type: StructProperty
		/// Offset: 0x3F8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush HoveredThumbImage => ReadStruct<FSlateBrush>(0x3F8);
		
		/// <summary>
		/// Name: DraggedThumbImage
		/// Type: StructProperty
		/// Offset: 0x488
		/// Size: 0x90
		/// </summary>
		public FSlateBrush DraggedThumbImage => ReadStruct<FSlateBrush>(0x488);
		
	}


	/// <summary>
	/// FInputChord:
	/// Size: 0x20
	/// Properties: 5
	/// </summary>
	public class FInputChord:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: Key
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x18
		/// </summary>
		public FKey Key => ReadStruct<FKey>(0x00);
		
		/// <summary>
		/// Name: bShift
		/// Type: BoolProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public bool bShift => (ReadByte(0x0018) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bCtrl
		/// Type: BoolProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public bool bCtrl => (ReadByte(0x0018) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bAlt
		/// Type: BoolProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public bool bAlt => (ReadByte(0x0018) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bCmd
		/// Type: BoolProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public bool bCmd => (ReadByte(0x0018) & 0x08) == 0x08;
		
	}


	/// <summary>
	/// FTextBlockStyle:FSlateWidgetStyle
	/// Size: 0x150
	/// Properties: 7
	/// </summary>
	public class FTextBlockStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 336;
		/// <summary>
		/// Name: Font
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x40
		/// </summary>
		public FSlateFontInfo Font => ReadStruct<FSlateFontInfo>(0x08);
		
		/// <summary>
		/// Name: ColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x28
		/// </summary>
		public FSlateColor ColorAndOpacity => ReadStruct<FSlateColor>(0x48);
		
		/// <summary>
		/// Name: ShadowOffset
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public FVector2D ShadowOffset => ReadStruct<FVector2D>(0x70);
		
		/// <summary>
		/// Name: ShadowColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x78
		/// Size: 0x10
		/// </summary>
		public FLinearColor ShadowColorAndOpacity => ReadStruct<FLinearColor>(0x78);
		
		/// <summary>
		/// Name: SelectedBackgroundColor
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0x28
		/// </summary>
		public FSlateColor SelectedBackgroundColor => ReadStruct<FSlateColor>(0x88);
		
		/// <summary>
		/// Name: HighlightColor
		/// Type: StructProperty
		/// Offset: 0xB0
		/// Size: 0x10
		/// </summary>
		public FLinearColor HighlightColor => ReadStruct<FLinearColor>(0xB0);
		
		/// <summary>
		/// Name: HighlightShape
		/// Type: StructProperty
		/// Offset: 0xC0
		/// Size: 0x90
		/// </summary>
		public FSlateBrush HighlightShape => ReadStruct<FSlateBrush>(0xC0);
		
	}


	/// <summary>
	/// FSpinBoxStyle:FSlateWidgetStyle
	/// Size: 0x310
	/// Properties: 7
	/// </summary>
	public class FSpinBoxStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 784;
		/// <summary>
		/// Name: BackgroundBrush
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x90
		/// </summary>
		public FSlateBrush BackgroundBrush => ReadStruct<FSlateBrush>(0x08);
		
		/// <summary>
		/// Name: HoveredBackgroundBrush
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x90
		/// </summary>
		public FSlateBrush HoveredBackgroundBrush => ReadStruct<FSlateBrush>(0x98);
		
		/// <summary>
		/// Name: ActiveFillBrush
		/// Type: StructProperty
		/// Offset: 0x128
		/// Size: 0x90
		/// </summary>
		public FSlateBrush ActiveFillBrush => ReadStruct<FSlateBrush>(0x128);
		
		/// <summary>
		/// Name: InactiveFillBrush
		/// Type: StructProperty
		/// Offset: 0x1B8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush InactiveFillBrush => ReadStruct<FSlateBrush>(0x1B8);
		
		/// <summary>
		/// Name: ArrowsImage
		/// Type: StructProperty
		/// Offset: 0x248
		/// Size: 0x90
		/// </summary>
		public FSlateBrush ArrowsImage => ReadStruct<FSlateBrush>(0x248);
		
		/// <summary>
		/// Name: ForegroundColor
		/// Type: StructProperty
		/// Offset: 0x2D8
		/// Size: 0x28
		/// </summary>
		public FSlateColor ForegroundColor => ReadStruct<FSlateColor>(0x2D8);
		
		/// <summary>
		/// Name: TextPadding
		/// Type: StructProperty
		/// Offset: 0x300
		/// Size: 0x10
		/// </summary>
		public FMargin TextPadding => ReadStruct<FMargin>(0x300);
		
	}


	/// <summary>
	/// FAnalogInputEvent:FKeyEvent
	/// Size: 0x48
	/// Properties: 0
	/// </summary>
	public class FAnalogInputEvent:FKeyEvent
	{
		public override int ObjectSize => 72;
	}


	/// <summary>
	/// FKeyEvent:FInputEvent
	/// Size: 0x40
	/// Properties: 0
	/// </summary>
	public class FKeyEvent:FInputEvent
	{
		public override int ObjectSize => 64;
	}


	/// <summary>
	/// FControllerEvent:FInputEvent
	/// Size: 0x40
	/// Properties: 0
	/// </summary>
	public class FControllerEvent:FInputEvent
	{
		public override int ObjectSize => 64;
	}


	/// <summary>
	/// FFocusEvent:
	/// Size: 0x08
	/// Properties: 0
	/// </summary>
	public class FFocusEvent:MemoryObject
	{
		public override int ObjectSize => 8;
	}


	/// <summary>
	/// FCharacterEvent:FInputEvent
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class FCharacterEvent:FInputEvent
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// FMotionEvent:FInputEvent
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class FMotionEvent:FInputEvent
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// FPaintContext:
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class FPaintContext:MemoryObject
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// FAnchors:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FAnchors:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Minimum
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public FVector2D Minimum => ReadStruct<FVector2D>(0x00);
		
		/// <summary>
		/// Name: Maximum
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public FVector2D Maximum => ReadStruct<FVector2D>(0x08);
		
	}


	/// <summary>
	/// FNamedSlotBinding:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FNamedSlotBinding:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Content
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UWidget Content => ReadUObject<UWidget>(0x08);
		
	}


	/// <summary>
	/// FCharacterListData:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FCharacterListData:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: UID
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UUniqueID UID => ReadUObject<UUniqueID>(0x00);
		
		/// <summary>
		/// Name: isAlive
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool isAlive
		{
			get
			{
				return ReadBool(0x08);
			}
			set
			{
				WriteBool(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FStatArrayFloat:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FStatArrayFloat:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: FloatStatArray
		/// Type: TArray<FStatNodeFloat>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FStatNodeFloat> FloatStatArray => new TArray<FStatNodeFloat>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FStatNodeFloat:FStatNode
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FStatNodeFloat:FStatNode
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: m_Value
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float m_Value
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: m_DefaultValue
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float m_DefaultValue
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: m_Modifiers
		/// Type: TArray<FStatModifierFloat>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FStatModifierFloat> m_Modifiers => new TArray<FStatModifierFloat>(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FStatNode:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FStatNode:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: m_ID
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int m_ID
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: m_Flags
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int m_Flags
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FStatModifierFloat:FStatModifier
	/// Size: 0x0C
	/// Properties: 1
	/// </summary>
	public class FStatModifierFloat:FStatModifier
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: m_Value
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float m_Value
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FStatModifier:
	/// Size: 0x08
	/// Properties: 3
	/// </summary>
	public class FStatModifier:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: m_ID
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte m_ID
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: m_Operator
		/// Type: ByteProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public byte m_Operator
		{
			get
			{
				return ReadByte(0x01);
			}
			set
			{
				WriteByte(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: m_Multiplier
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float m_Multiplier
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FStatArrayInt32:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FStatArrayInt32:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: IntStatArray
		/// Type: TArray<FStatNodeInt32>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FStatNodeInt32> IntStatArray => new TArray<FStatNodeInt32>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FStatNodeInt32:FStatNode
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FStatNodeInt32:FStatNode
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: m_Value
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int m_Value
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: m_DefaultValue
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int m_DefaultValue
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: m_Modifiers
		/// Type: TArray<FStatModifierInt32>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FStatModifierInt32> m_Modifiers => new TArray<FStatModifierInt32>(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FStatModifierInt32:FStatModifier
	/// Size: 0x0C
	/// Properties: 1
	/// </summary>
	public class FStatModifierInt32:FStatModifier
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: m_Value
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int m_Value
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FCellLocation:FIntVector
	/// Size: 0x0C
	/// Properties: 0
	/// </summary>
	public class FCellLocation:FIntVector
	{
		public override int ObjectSize => 12;
	}


	/// <summary>
	/// FItemTableRow:FTableRowBase
	/// Size: 0x2E0
	/// Properties: 78
	/// </summary>
	public class FItemTableRow:FTableRowBase
	{
		public override int ObjectSize => 736;
		/// <summary>
		/// Name: Name
		/// Type: TextProperty
		/// Offset: 0x00
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: ShortDesc
		/// Type: TextProperty
		/// Offset: 0x18
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: LongDesc
		/// Type: TextProperty
		/// Offset: 0x30
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: ItemClass
		/// Type: AssetClassProperty
		/// Offset: 0x68
		/// Size: 0x20
		/// </summary>
		
		/// <summary>
		/// Name: BuildingClass
		/// Type: AssetClassProperty
		/// Offset: 0x88
		/// Size: 0x20
		/// </summary>
		
		/// <summary>
		/// Name: VisualObject
		/// Type: AssetClassProperty
		/// Offset: 0xA8
		/// Size: 0x20
		/// </summary>
		
		/// <summary>
		/// Name: ActionBlueprint_Use
		/// Type: AssetClassProperty
		/// Offset: 0xC8
		/// Size: 0x20
		/// </summary>
		
		/// <summary>
		/// Name: MaxStackSize
		/// Type: IntProperty
		/// Offset: 0xE8
		/// Size: 0x04
		/// </summary>
		public int MaxStackSize
		{
			get
			{
				return ReadInt32(0xE8);
			}
			set
			{
				WriteInt32(0xE8,value);
			}
		}
		
		/// <summary>
		/// Name: EquipLocation
		/// Type: IntProperty
		/// Offset: 0xEC
		/// Size: 0x04
		/// </summary>
		public int EquipLocation
		{
			get
			{
				return ReadInt32(0xEC);
			}
			set
			{
				WriteInt32(0xEC,value);
			}
		}
		
		/// <summary>
		/// Name: GUICategory
		/// Type: ByteProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public byte GUICategory
		{
			get
			{
				return ReadByte(0xF0);
			}
			set
			{
				WriteByte(0xF0,value);
			}
		}
		
		/// <summary>
		/// Name: ArmourValue
		/// Type: FloatProperty
		/// Offset: 0xF4
		/// Size: 0x04
		/// </summary>
		public float ArmourValue
		{
			get
			{
				return ReadSingle(0xF4);
			}
			set
			{
				WriteSingle(0xF4,value);
			}
		}
		
		/// <summary>
		/// Name: SoundPhysicalSurface
		/// Type: IntProperty
		/// Offset: 0xF8
		/// Size: 0x04
		/// </summary>
		public int SoundPhysicalSurface
		{
			get
			{
				return ReadInt32(0xF8);
			}
			set
			{
				WriteInt32(0xF8,value);
			}
		}
		
		/// <summary>
		/// Name: WeaponType
		/// Type: ByteProperty
		/// Offset: 0xFC
		/// Size: 0x01
		/// </summary>
		public byte WeaponType
		{
			get
			{
				return ReadByte(0xFC);
			}
			set
			{
				WriteByte(0xFC,value);
			}
		}
		
		/// <summary>
		/// Name: WeaponArcheType
		/// Type: ByteProperty
		/// Offset: 0xFD
		/// Size: 0x01
		/// </summary>
		public byte WeaponArcheType
		{
			get
			{
				return ReadByte(0xFD);
			}
			set
			{
				WriteByte(0xFD,value);
			}
		}
		
		/// <summary>
		/// Name: CompatableAmmunitions
		/// Type: TArray<>
		/// Offset: 0x100
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: WeaponStaminaAttackSingleBasic
		/// Type: IntProperty
		/// Offset: 0x110
		/// Size: 0x04
		/// </summary>
		public int WeaponStaminaAttackSingleBasic
		{
			get
			{
				return ReadInt32(0x110);
			}
			set
			{
				WriteInt32(0x110,value);
			}
		}
		
		/// <summary>
		/// Name: WeaponStaminaAttackSingleSpecial
		/// Type: IntProperty
		/// Offset: 0x114
		/// Size: 0x04
		/// </summary>
		public int WeaponStaminaAttackSingleSpecial
		{
			get
			{
				return ReadInt32(0x114);
			}
			set
			{
				WriteInt32(0x114,value);
			}
		}
		
		/// <summary>
		/// Name: WeaponStaminaAttackDualBasic
		/// Type: IntProperty
		/// Offset: 0x118
		/// Size: 0x04
		/// </summary>
		public int WeaponStaminaAttackDualBasic
		{
			get
			{
				return ReadInt32(0x118);
			}
			set
			{
				WriteInt32(0x118,value);
			}
		}
		
		/// <summary>
		/// Name: WeaponStaminaAttackDualSpecial
		/// Type: IntProperty
		/// Offset: 0x11C
		/// Size: 0x04
		/// </summary>
		public int WeaponStaminaAttackDualSpecial
		{
			get
			{
				return ReadInt32(0x11C);
			}
			set
			{
				WriteInt32(0x11C,value);
			}
		}
		
		/// <summary>
		/// Name: WeaponStaminaHeavyChargedRegenModifier
		/// Type: FloatProperty
		/// Offset: 0x120
		/// Size: 0x04
		/// </summary>
		public float WeaponStaminaHeavyChargedRegenModifier
		{
			get
			{
				return ReadSingle(0x120);
			}
			set
			{
				WriteSingle(0x120,value);
			}
		}
		
		/// <summary>
		/// Name: WeaponSpeedHeavyChargedModifier
		/// Type: FloatProperty
		/// Offset: 0x124
		/// Size: 0x04
		/// </summary>
		public float WeaponSpeedHeavyChargedModifier
		{
			get
			{
				return ReadSingle(0x124);
			}
			set
			{
				WriteSingle(0x124,value);
			}
		}
		
		/// <summary>
		/// Name: EncumbranceWeight
		/// Type: FloatProperty
		/// Offset: 0x128
		/// Size: 0x04
		/// </summary>
		public float EncumbranceWeight
		{
			get
			{
				return ReadSingle(0x128);
			}
			set
			{
				WriteSingle(0x128,value);
			}
		}
		
		/// <summary>
		/// Name: ConeAngle
		/// Type: FloatProperty
		/// Offset: 0x12C
		/// Size: 0x04
		/// </summary>
		public float ConeAngle
		{
			get
			{
				return ReadSingle(0x12C);
			}
			set
			{
				WriteSingle(0x12C,value);
			}
		}
		
		/// <summary>
		/// Name: ConeMaxDistance
		/// Type: FloatProperty
		/// Offset: 0x130
		/// Size: 0x04
		/// </summary>
		public float ConeMaxDistance
		{
			get
			{
				return ReadSingle(0x130);
			}
			set
			{
				WriteSingle(0x130,value);
			}
		}
		
		/// <summary>
		/// Name: DamageHealthLight_OnHit
		/// Type: IntProperty
		/// Offset: 0x134
		/// Size: 0x04
		/// </summary>
		public int DamageHealthLight_OnHit
		{
			get
			{
				return ReadInt32(0x134);
			}
			set
			{
				WriteInt32(0x134,value);
			}
		}
		
		/// <summary>
		/// Name: DamageHealthHeavy_OnHit
		/// Type: IntProperty
		/// Offset: 0x138
		/// Size: 0x04
		/// </summary>
		public int DamageHealthHeavy_OnHit
		{
			get
			{
				return ReadInt32(0x138);
			}
			set
			{
				WriteInt32(0x138,value);
			}
		}
		
		/// <summary>
		/// Name: DamageStaminaLight_OnHit
		/// Type: IntProperty
		/// Offset: 0x13C
		/// Size: 0x04
		/// </summary>
		public int DamageStaminaLight_OnHit
		{
			get
			{
				return ReadInt32(0x13C);
			}
			set
			{
				WriteInt32(0x13C,value);
			}
		}
		
		/// <summary>
		/// Name: DamageStaminaHeavy_OnHit
		/// Type: IntProperty
		/// Offset: 0x140
		/// Size: 0x04
		/// </summary>
		public int DamageStaminaHeavy_OnHit
		{
			get
			{
				return ReadInt32(0x140);
			}
			set
			{
				WriteInt32(0x140,value);
			}
		}
		
		/// <summary>
		/// Name: DamageHealthLight_OnBlock
		/// Type: IntProperty
		/// Offset: 0x144
		/// Size: 0x04
		/// </summary>
		public int DamageHealthLight_OnBlock
		{
			get
			{
				return ReadInt32(0x144);
			}
			set
			{
				WriteInt32(0x144,value);
			}
		}
		
		/// <summary>
		/// Name: DamageHealthHeavy_OnBlock
		/// Type: IntProperty
		/// Offset: 0x148
		/// Size: 0x04
		/// </summary>
		public int DamageHealthHeavy_OnBlock
		{
			get
			{
				return ReadInt32(0x148);
			}
			set
			{
				WriteInt32(0x148,value);
			}
		}
		
		/// <summary>
		/// Name: DamageStaminaLight_OnBlock
		/// Type: IntProperty
		/// Offset: 0x14C
		/// Size: 0x04
		/// </summary>
		public int DamageStaminaLight_OnBlock
		{
			get
			{
				return ReadInt32(0x14C);
			}
			set
			{
				WriteInt32(0x14C,value);
			}
		}
		
		/// <summary>
		/// Name: DamageStaminaHeavy_OnBlock
		/// Type: IntProperty
		/// Offset: 0x150
		/// Size: 0x04
		/// </summary>
		public int DamageStaminaHeavy_OnBlock
		{
			get
			{
				return ReadInt32(0x150);
			}
			set
			{
				WriteInt32(0x150,value);
			}
		}
		
		/// <summary>
		/// Name: HarvestDamage
		/// Type: IntProperty
		/// Offset: 0x154
		/// Size: 0x04
		/// </summary>
		public int HarvestDamage
		{
			get
			{
				return ReadInt32(0x154);
			}
			set
			{
				WriteInt32(0x154,value);
			}
		}
		
		/// <summary>
		/// Name: WeaponUsage
		/// Type: IntProperty
		/// Offset: 0x158
		/// Size: 0x04
		/// </summary>
		public int WeaponUsage
		{
			get
			{
				return ReadInt32(0x158);
			}
			set
			{
				WriteInt32(0x158,value);
			}
		}
		
		/// <summary>
		/// Name: MaxAttackReach
		/// Type: FloatProperty
		/// Offset: 0x15C
		/// Size: 0x04
		/// </summary>
		public float MaxAttackReach
		{
			get
			{
				return ReadSingle(0x15C);
			}
			set
			{
				WriteSingle(0x15C,value);
			}
		}
		
		/// <summary>
		/// Name: MinAttackReach
		/// Type: FloatProperty
		/// Offset: 0x160
		/// Size: 0x04
		/// </summary>
		public float MinAttackReach
		{
			get
			{
				return ReadSingle(0x160);
			}
			set
			{
				WriteSingle(0x160,value);
			}
		}
		
		/// <summary>
		/// Name: MinAttackDistance
		/// Type: FloatProperty
		/// Offset: 0x164
		/// Size: 0x04
		/// </summary>
		public float MinAttackDistance
		{
			get
			{
				return ReadSingle(0x164);
			}
			set
			{
				WriteSingle(0x164,value);
			}
		}
		
		/// <summary>
		/// Name: WeaponEffectWidth
		/// Type: FloatProperty
		/// Offset: 0x168
		/// Size: 0x04
		/// </summary>
		public float WeaponEffectWidth
		{
			get
			{
				return ReadSingle(0x168);
			}
			set
			{
				WriteSingle(0x168,value);
			}
		}
		
		/// <summary>
		/// Name: WeaponEffectHeight
		/// Type: FloatProperty
		/// Offset: 0x16C
		/// Size: 0x04
		/// </summary>
		public float WeaponEffectHeight
		{
			get
			{
				return ReadSingle(0x16C);
			}
			set
			{
				WriteSingle(0x16C,value);
			}
		}
		
		/// <summary>
		/// Name: ItemTier
		/// Type: IntProperty
		/// Offset: 0x170
		/// Size: 0x04
		/// </summary>
		public int ItemTier
		{
			get
			{
				return ReadInt32(0x170);
			}
			set
			{
				WriteInt32(0x170,value);
			}
		}
		
		/// <summary>
		/// Name: ArmorPen
		/// Type: FloatProperty
		/// Offset: 0x174
		/// Size: 0x04
		/// </summary>
		public float ArmorPen
		{
			get
			{
				return ReadSingle(0x174);
			}
			set
			{
				WriteSingle(0x174,value);
			}
		}
		
		/// <summary>
		/// Name: DamageConcussiveLightOnHit
		/// Type: IntProperty
		/// Offset: 0x178
		/// Size: 0x04
		/// </summary>
		public int DamageConcussiveLightOnHit
		{
			get
			{
				return ReadInt32(0x178);
			}
			set
			{
				WriteInt32(0x178,value);
			}
		}
		
		/// <summary>
		/// Name: DamageConcussiveHeavyOnHit
		/// Type: IntProperty
		/// Offset: 0x17C
		/// Size: 0x04
		/// </summary>
		public int DamageConcussiveHeavyOnHit
		{
			get
			{
				return ReadInt32(0x17C);
			}
			set
			{
				WriteInt32(0x17C,value);
			}
		}
		
		/// <summary>
		/// Name: DamageConcussiveLightOnBlock
		/// Type: IntProperty
		/// Offset: 0x180
		/// Size: 0x04
		/// </summary>
		public int DamageConcussiveLightOnBlock
		{
			get
			{
				return ReadInt32(0x180);
			}
			set
			{
				WriteInt32(0x180,value);
			}
		}
		
		/// <summary>
		/// Name: DamageConcussiveHeavyOnBlock
		/// Type: IntProperty
		/// Offset: 0x184
		/// Size: 0x04
		/// </summary>
		public int DamageConcussiveHeavyOnBlock
		{
			get
			{
				return ReadInt32(0x184);
			}
			set
			{
				WriteInt32(0x184,value);
			}
		}
		
		/// <summary>
		/// Name: DamageTier
		/// Type: ByteProperty
		/// Offset: 0x188
		/// Size: 0x01
		/// </summary>
		public byte DamageTier
		{
			get
			{
				return ReadByte(0x188);
			}
			set
			{
				WriteByte(0x188,value);
			}
		}
		
		/// <summary>
		/// Name: KnockbackOffenseBasic
		/// Type: IntProperty
		/// Offset: 0x18C
		/// Size: 0x04
		/// </summary>
		public int KnockbackOffenseBasic
		{
			get
			{
				return ReadInt32(0x18C);
			}
			set
			{
				WriteInt32(0x18C,value);
			}
		}
		
		/// <summary>
		/// Name: KnockbackOffenseSpecial
		/// Type: IntProperty
		/// Offset: 0x190
		/// Size: 0x04
		/// </summary>
		public int KnockbackOffenseSpecial
		{
			get
			{
				return ReadInt32(0x190);
			}
			set
			{
				WriteInt32(0x190,value);
			}
		}
		
		/// <summary>
		/// Name: KnockbackDefense
		/// Type: IntProperty
		/// Offset: 0x194
		/// Size: 0x04
		/// </summary>
		public int KnockbackDefense
		{
			get
			{
				return ReadInt32(0x194);
			}
			set
			{
				WriteInt32(0x194,value);
			}
		}
		
		/// <summary>
		/// Name: WeaponStatusDefault
		/// Type: IntProperty
		/// Offset: 0x1F8
		/// Size: 0x04
		/// </summary>
		public int WeaponStatusDefault
		{
			get
			{
				return ReadInt32(0x1F8);
			}
			set
			{
				WriteInt32(0x1F8,value);
			}
		}
		
		/// <summary>
		/// Name: WeaponStatusCurrent
		/// Type: IntProperty
		/// Offset: 0x1FC
		/// Size: 0x04
		/// </summary>
		public int WeaponStatusCurrent
		{
			get
			{
				return ReadInt32(0x1FC);
			}
			set
			{
				WriteInt32(0x1FC,value);
			}
		}
		
		/// <summary>
		/// Name: WeaponStatusDecrement
		/// Type: IntProperty
		/// Offset: 0x200
		/// Size: 0x04
		/// </summary>
		public int WeaponStatusDecrement
		{
			get
			{
				return ReadInt32(0x200);
			}
			set
			{
				WriteInt32(0x200,value);
			}
		}
		
		/// <summary>
		/// Name: PerishRate
		/// Type: FloatProperty
		/// Offset: 0x204
		/// Size: 0x04
		/// </summary>
		public float PerishRate
		{
			get
			{
				return ReadSingle(0x204);
			}
			set
			{
				WriteSingle(0x204,value);
			}
		}
		
		/// <summary>
		/// Name: PerishTo
		/// Type: IntProperty
		/// Offset: 0x208
		/// Size: 0x04
		/// </summary>
		public int PerishTo
		{
			get
			{
				return ReadInt32(0x208);
			}
			set
			{
				WriteInt32(0x208,value);
			}
		}
		
		/// <summary>
		/// Name: MaxDurability
		/// Type: FloatProperty
		/// Offset: 0x20C
		/// Size: 0x04
		/// </summary>
		public float MaxDurability
		{
			get
			{
				return ReadSingle(0x20C);
			}
			set
			{
				WriteSingle(0x20C,value);
			}
		}
		
		/// <summary>
		/// Name: RepairItem1
		/// Type: IntProperty
		/// Offset: 0x210
		/// Size: 0x04
		/// </summary>
		public int RepairItem1
		{
			get
			{
				return ReadInt32(0x210);
			}
			set
			{
				WriteInt32(0x210,value);
			}
		}
		
		/// <summary>
		/// Name: RepairItem1_Amount
		/// Type: IntProperty
		/// Offset: 0x214
		/// Size: 0x04
		/// </summary>
		public int RepairItem1_Amount
		{
			get
			{
				return ReadInt32(0x214);
			}
			set
			{
				WriteInt32(0x214,value);
			}
		}
		
		/// <summary>
		/// Name: RepairItem1_Weight
		/// Type: IntProperty
		/// Offset: 0x218
		/// Size: 0x04
		/// </summary>
		public int RepairItem1_Weight
		{
			get
			{
				return ReadInt32(0x218);
			}
			set
			{
				WriteInt32(0x218,value);
			}
		}
		
		/// <summary>
		/// Name: RepairItem2
		/// Type: IntProperty
		/// Offset: 0x21C
		/// Size: 0x04
		/// </summary>
		public int RepairItem2
		{
			get
			{
				return ReadInt32(0x21C);
			}
			set
			{
				WriteInt32(0x21C,value);
			}
		}
		
		/// <summary>
		/// Name: RepairItem2_Amount
		/// Type: IntProperty
		/// Offset: 0x220
		/// Size: 0x04
		/// </summary>
		public int RepairItem2_Amount
		{
			get
			{
				return ReadInt32(0x220);
			}
			set
			{
				WriteInt32(0x220,value);
			}
		}
		
		/// <summary>
		/// Name: RepairItem2_Weight
		/// Type: IntProperty
		/// Offset: 0x224
		/// Size: 0x04
		/// </summary>
		public int RepairItem2_Weight
		{
			get
			{
				return ReadInt32(0x224);
			}
			set
			{
				WriteInt32(0x224,value);
			}
		}
		
		/// <summary>
		/// Name: RepairItem3
		/// Type: IntProperty
		/// Offset: 0x228
		/// Size: 0x04
		/// </summary>
		public int RepairItem3
		{
			get
			{
				return ReadInt32(0x228);
			}
			set
			{
				WriteInt32(0x228,value);
			}
		}
		
		/// <summary>
		/// Name: RepairItem3_Amount
		/// Type: IntProperty
		/// Offset: 0x22C
		/// Size: 0x04
		/// </summary>
		public int RepairItem3_Amount
		{
			get
			{
				return ReadInt32(0x22C);
			}
			set
			{
				WriteInt32(0x22C,value);
			}
		}
		
		/// <summary>
		/// Name: RepairItem3_Weight
		/// Type: IntProperty
		/// Offset: 0x230
		/// Size: 0x04
		/// </summary>
		public int RepairItem3_Weight
		{
			get
			{
				return ReadInt32(0x230);
			}
			set
			{
				WriteInt32(0x230,value);
			}
		}
		
		/// <summary>
		/// Name: AffectedByDamageTiers
		/// Type: IntProperty
		/// Offset: 0x234
		/// Size: 0x04
		/// </summary>
		public int AffectedByDamageTiers
		{
			get
			{
				return ReadInt32(0x234);
			}
			set
			{
				WriteInt32(0x234,value);
			}
		}
		
		/// <summary>
		/// Name: BuildingPieceScore
		/// Type: IntProperty
		/// Offset: 0x238
		/// Size: 0x04
		/// </summary>
		public int BuildingPieceScore
		{
			get
			{
				return ReadInt32(0x238);
			}
			set
			{
				WriteInt32(0x238,value);
			}
		}
		
		/// <summary>
		/// Name: BuildingMaxHealth
		/// Type: IntProperty
		/// Offset: 0x23C
		/// Size: 0x04
		/// </summary>
		public int BuildingMaxHealth
		{
			get
			{
				return ReadInt32(0x23C);
			}
			set
			{
				WriteInt32(0x23C,value);
			}
		}
		
		/// <summary>
		/// Name: FirstModifier
		/// Type: TextProperty
		/// Offset: 0x240
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: SecondModifier
		/// Type: TextProperty
		/// Offset: 0x258
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: ThirdModifier
		/// Type: TextProperty
		/// Offset: 0x270
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: FourthModifier
		/// Type: TextProperty
		/// Offset: 0x288
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: FoodAmount
		/// Type: IntProperty
		/// Offset: 0x2A0
		/// Size: 0x04
		/// </summary>
		public int FoodAmount
		{
			get
			{
				return ReadInt32(0x2A0);
			}
			set
			{
				WriteInt32(0x2A0,value);
			}
		}
		
		/// <summary>
		/// Name: DrinkAmount
		/// Type: IntProperty
		/// Offset: 0x2A4
		/// Size: 0x04
		/// </summary>
		public int DrinkAmount
		{
			get
			{
				return ReadInt32(0x2A4);
			}
			set
			{
				WriteInt32(0x2A4,value);
			}
		}
		
		/// <summary>
		/// Name: BurnTime
		/// Type: FloatProperty
		/// Offset: 0x2A8
		/// Size: 0x04
		/// </summary>
		public float BurnTime
		{
			get
			{
				return ReadSingle(0x2A8);
			}
			set
			{
				WriteSingle(0x2A8,value);
			}
		}
		
		/// <summary>
		/// Name: ItemFlags
		/// Type: IntProperty
		/// Offset: 0x2AC
		/// Size: 0x04
		/// </summary>
		public int ItemFlags
		{
			get
			{
				return ReadInt32(0x2AC);
			}
			set
			{
				WriteInt32(0x2AC,value);
			}
		}
		
		/// <summary>
		/// Name: ItemContainerSize
		/// Type: IntProperty
		/// Offset: 0x2B0
		/// Size: 0x04
		/// </summary>
		public int ItemContainerSize
		{
			get
			{
				return ReadInt32(0x2B0);
			}
			set
			{
				WriteInt32(0x2B0,value);
			}
		}
		
		/// <summary>
		/// Name: AvatarType
		/// Type: AssetClassProperty
		/// Offset: 0x2B8
		/// Size: 0x20
		/// </summary>
		
		/// <summary>
		/// Name: DyeColourID
		/// Type: IntProperty
		/// Offset: 0x2D8
		/// Size: 0x04
		/// </summary>
		public int DyeColourID
		{
			get
			{
				return ReadInt32(0x2D8);
			}
			set
			{
				WriteInt32(0x2D8,value);
			}
		}
		
	}


	/// <summary>
	/// FTableRowBase:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FTableRowBase:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FViewTargetTransitionParams:
	/// Size: 0x10
	/// Properties: 4
	/// </summary>
	public class FViewTargetTransitionParams:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: BlendTime
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float BlendTime
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: BlendFunction
		/// Type: ByteProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public byte BlendFunction
		{
			get
			{
				return ReadByte(0x04);
			}
			set
			{
				WriteByte(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: BlendExp
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float BlendExp
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: bLockOutgoing
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bLockOutgoing => (ReadByte(0x000C) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// FActiveForceFeedbackEffect:
	/// Size: 0x18
	/// Properties: 1
	/// </summary>
	public class FActiveForceFeedbackEffect:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: ForceFeedbackEffect
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UForceFeedbackEffect ForceFeedbackEffect => ReadUObject<UForceFeedbackEffect>(0x00);
		
	}


	/// <summary>
	/// FNavMeshTileDrawData:
	/// Size: 0x38
	/// Properties: 6
	/// </summary>
	public class FNavMeshTileDrawData:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Polygons
		/// Type: TArray<FNavMeshPolygonDrawData>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FNavMeshPolygonDrawData> Polygons => new TArray<FNavMeshPolygonDrawData>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: TileX
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int TileX
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: TileY
		/// Type: IntProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public int TileY
		{
			get
			{
				return ReadInt32(0x14);
			}
			set
			{
				WriteInt32(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: Layer
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int Layer
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: Center
		/// Type: StructProperty
		/// Offset: 0x1C
		/// Size: 0x0C
		/// </summary>
		public FVector Center => ReadStruct<FVector>(0x1C);
		
		/// <summary>
		/// Name: Extent
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x0C
		/// </summary>
		public FVector Extent => ReadStruct<FVector>(0x28);
		
	}


	/// <summary>
	/// FNavMeshPolygonDrawData:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FNavMeshPolygonDrawData:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Vertices
		/// Type: TArray<FVector>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> Vertices => new TArray<FVector>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: AreaID
		/// Type: ByteProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public byte AreaID
		{
			get
			{
				return ReadByte(0x10);
			}
			set
			{
				WriteByte(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FPlayerListData:
	/// Size: 0x30
	/// Properties: 3
	/// </summary>
	public class FPlayerListData:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: PlayerNames
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: PlayerIds
		/// Type: TArray<>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: BannedPlayers
		/// Type: TArray<>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FFrameTransformData:
	/// Size: 0x28
	/// Properties: 6
	/// </summary>
	public class FFrameTransformData:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: FrameNumber
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int FrameNumber
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: GameTime
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float GameTime
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Transforms
		/// Type: TArray<FTransformData>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x50
		/// </summary>
		public TArray<FTransformData> Transforms => new TArray<FTransformData>(BaseAddress+0x08);
		
		/// <summary>
		/// Name: A
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float A
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: B
		/// Type: FloatProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public float B
		{
			get
			{
				return ReadSingle(0x1C);
			}
			set
			{
				WriteSingle(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: C
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float C
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
	}


	/// <summary>
	/// FTransformData:
	/// Size: 0x50
	/// Properties: 3
	/// </summary>
	public class FTransformData:MemoryObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: ScopeName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Value
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x30
		/// </summary>
		public FTransform Value => ReadStruct<FTransform>(0x10);
		
		/// <summary>
		/// Name: Mask
		/// Type: ByteProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public byte Mask
		{
			get
			{
				return ReadByte(0x40);
			}
			set
			{
				WriteByte(0x40,value);
			}
		}
		
	}


	/// <summary>
	/// FChatRpcData:
	/// Size: 0x48
	/// Properties: 6
	/// </summary>
	public class FChatRpcData:MemoryObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: timeStamp
		/// Type: UInt64Property
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public ulong timeStamp
		{
			get
			{
				return ReadUInt64(0x00);
			}
			set
			{
				WriteUInt64(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: characterUniqueId
		/// Type: Int64Property
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public long characterUniqueId
		{
			get
			{
				return ReadInt64(0x08);
			}
			set
			{
				WriteInt64(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: targetUniqueId
		/// Type: Int64Property
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public long targetUniqueId
		{
			get
			{
				return ReadInt64(0x10);
			}
			set
			{
				WriteInt64(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: userName
		/// Type: StrProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FString userName => new FString(BaseAddress+0x18);
		
		/// <summary>
		/// Name: Channel
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString Channel => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: Message
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString Message => new FString(BaseAddress+0x38);
		
	}


	/// <summary>
	/// FPendingInventoryUpdate:
	/// Size: 0x20
	/// Properties: 1
	/// </summary>
	public class FPendingInventoryUpdate:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: m_Inventory
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UItemInventory m_Inventory => ReadUObject<UItemInventory>(0x00);
		
	}


	/// <summary>
	/// FBlueprintSessionResult:
	/// Size: 0xC8
	/// Properties: 0
	/// </summary>
	public class FBlueprintSessionResult:MemoryObject
	{
		public override int ObjectSize => 200;
	}


	/// <summary>
	/// FInAppPurchaseProductInfo:
	/// Size: 0xA0
	/// Properties: 10
	/// </summary>
	public class FInAppPurchaseProductInfo:MemoryObject
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: Identifier
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Identifier => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: TransactionIdentifier
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString TransactionIdentifier => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: DisplayName
		/// Type: StrProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FString DisplayName => new FString(BaseAddress+0x20);
		
		/// <summary>
		/// Name: DisplayDescription
		/// Type: StrProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FString DisplayDescription => new FString(BaseAddress+0x30);
		
		/// <summary>
		/// Name: DisplayPrice
		/// Type: StrProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FString DisplayPrice => new FString(BaseAddress+0x40);
		
		/// <summary>
		/// Name: CurrencyCode
		/// Type: StrProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FString CurrencyCode => new FString(BaseAddress+0x50);
		
		/// <summary>
		/// Name: CurrencySymbol
		/// Type: StrProperty
		/// Offset: 0x60
		/// Size: 0x10
		/// </summary>
		public FString CurrencySymbol => new FString(BaseAddress+0x60);
		
		/// <summary>
		/// Name: DecimalSeparator
		/// Type: StrProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FString DecimalSeparator => new FString(BaseAddress+0x70);
		
		/// <summary>
		/// Name: GroupingSeparator
		/// Type: StrProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FString GroupingSeparator => new FString(BaseAddress+0x80);
		
		/// <summary>
		/// Name: ReceiptData
		/// Type: StrProperty
		/// Offset: 0x90
		/// Size: 0x10
		/// </summary>
		public FString ReceiptData => new FString(BaseAddress+0x90);
		
	}


	/// <summary>
	/// FInAppPurchaseRestoreInfo:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FInAppPurchaseRestoreInfo:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: Identifier
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Identifier => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: ReceiptData
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString ReceiptData => new FString(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FServerListViewEntry:
	/// Size: 0xD8
	/// Properties: 6
	/// </summary>
	public class FServerListViewEntry:MemoryObject
	{
		public override int ObjectSize => 216;
		/// <summary>
		/// Name: m_Session
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0xC8
		/// </summary>
		public FBlueprintSessionResult m_Session => ReadStruct<FBlueprintSessionResult>(0x00);
		
		/// <summary>
		/// Name: m_Widget
		/// Type: ObjectProperty
		/// Offset: 0xC8
		/// Size: 0x08
		/// </summary>
		public UServerInfoBase m_Widget => ReadUObject<UServerInfoBase>(0xC8);
		
		/// <summary>
		/// Name: m_ShouldShow
		/// Type: BoolProperty
		/// Offset: 0xD0
		/// Size: 0x01
		/// </summary>
		public bool m_ShouldShow
		{
			get
			{
				return ReadBool(0xD0);
			}
			set
			{
				WriteBool(0xD0,value);
			}
		}
		
		/// <summary>
		/// Name: m_IsFavorite
		/// Type: BoolProperty
		/// Offset: 0xD1
		/// Size: 0x01
		/// </summary>
		public bool m_IsFavorite
		{
			get
			{
				return ReadBool(0xD1);
			}
			set
			{
				WriteBool(0xD1,value);
			}
		}
		
		/// <summary>
		/// Name: m_IsLastPlayedSession
		/// Type: BoolProperty
		/// Offset: 0xD2
		/// Size: 0x01
		/// </summary>
		public bool m_IsLastPlayedSession
		{
			get
			{
				return ReadBool(0xD2);
			}
			set
			{
				WriteBool(0xD2,value);
			}
		}
		
		/// <summary>
		/// Name: m_IsSelected
		/// Type: BoolProperty
		/// Offset: 0xD3
		/// Size: 0x01
		/// </summary>
		public bool m_IsSelected
		{
			get
			{
				return ReadBool(0xD3);
			}
			set
			{
				WriteBool(0xD3,value);
			}
		}
		
	}


	/// <summary>
	/// FModInfo:
	/// Size: 0xE0
	/// Properties: 24
	/// </summary>
	public class FModInfo:MemoryObject
	{
		public override int ObjectSize => 224;
		/// <summary>
		/// Name: Name
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Name => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Description
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString Description => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: ChangeNote
		/// Type: StrProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FString ChangeNote => new FString(BaseAddress+0x20);
		
		/// <summary>
		/// Name: Author
		/// Type: StrProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FString Author => new FString(BaseAddress+0x30);
		
		/// <summary>
		/// Name: AuthorUrl
		/// Type: StrProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FString AuthorUrl => new FString(BaseAddress+0x40);
		
		/// <summary>
		/// Name: VersionString
		/// Type: StrProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FString VersionString => new FString(BaseAddress+0x50);
		
		/// <summary>
		/// Name: VersionMajor
		/// Type: IntProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public int VersionMajor
		{
			get
			{
				return ReadInt32(0x60);
			}
			set
			{
				WriteInt32(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: VersionMinor
		/// Type: IntProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public int VersionMinor
		{
			get
			{
				return ReadInt32(0x64);
			}
			set
			{
				WriteInt32(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: VersionBuild
		/// Type: IntProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public int VersionBuild
		{
			get
			{
				return ReadInt32(0x68);
			}
			set
			{
				WriteInt32(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: SourcePath
		/// Type: StrProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FString SourcePath => new FString(BaseAddress+0x70);
		
		/// <summary>
		/// Name: LoadOrder
		/// Type: IntProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public int LoadOrder
		{
			get
			{
				return ReadInt32(0x80);
			}
			set
			{
				WriteInt32(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: bRequiresLoadOnStartup
		/// Type: BoolProperty
		/// Offset: 0x84
		/// Size: 0x01
		/// </summary>
		public bool bRequiresLoadOnStartup => (ReadByte(0x0084) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bLoadOnStartup
		/// Type: BoolProperty
		/// Offset: 0x84
		/// Size: 0x01
		/// </summary>
		public bool bLoadOnStartup => (ReadByte(0x0084) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bIsLoaded
		/// Type: BoolProperty
		/// Offset: 0x84
		/// Size: 0x01
		/// </summary>
		public bool bIsLoaded => (ReadByte(0x0084) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bWasLoadedOnStartup
		/// Type: BoolProperty
		/// Offset: 0x84
		/// Size: 0x01
		/// </summary>
		public bool bWasLoadedOnStartup => (ReadByte(0x0084) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: IsValid
		/// Type: BoolProperty
		/// Offset: 0x84
		/// Size: 0x01
		/// </summary>
		public bool IsValid => (ReadByte(0x0084) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: PreviewImage
		/// Type: ObjectProperty
		/// Offset: 0x88
		/// Size: 0x08
		/// </summary>
		public UTexture2D PreviewImage => ReadUObject<UTexture2D>(0x88);
		
		/// <summary>
		/// Name: SteamPublishedFileId
		/// Type: StrProperty
		/// Offset: 0x90
		/// Size: 0x10
		/// </summary>
		public FString SteamPublishedFileId => new FString(BaseAddress+0x90);
		
		/// <summary>
		/// Name: SteamVisibility
		/// Type: IntProperty
		/// Offset: 0xA0
		/// Size: 0x04
		/// </summary>
		public int SteamVisibility
		{
			get
			{
				return ReadInt32(0xA0);
			}
			set
			{
				WriteInt32(0xA0,value);
			}
		}
		
		/// <summary>
		/// Name: FolderName
		/// Type: StrProperty
		/// Offset: 0xA8
		/// Size: 0x10
		/// </summary>
		public FString FolderName => new FString(BaseAddress+0xA8);
		
		/// <summary>
		/// Name: MD5Hash
		/// Type: StrProperty
		/// Offset: 0xB8
		/// Size: 0x10
		/// </summary>
		public FString MD5Hash => new FString(BaseAddress+0xB8);
		
		/// <summary>
		/// Name: Source
		/// Type: StrProperty
		/// Offset: 0xC8
		/// Size: 0x10
		/// </summary>
		public FString Source => new FString(BaseAddress+0xC8);
		
		/// <summary>
		/// Name: RevisionNumber
		/// Type: IntProperty
		/// Offset: 0xD8
		/// Size: 0x04
		/// </summary>
		public int RevisionNumber
		{
			get
			{
				return ReadInt32(0xD8);
			}
			set
			{
				WriteInt32(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: SnapshotID
		/// Type: IntProperty
		/// Offset: 0xDC
		/// Size: 0x04
		/// </summary>
		public int SnapshotID
		{
			get
			{
				return ReadInt32(0xDC);
			}
			set
			{
				WriteInt32(0xDC,value);
			}
		}
		
	}


	/// <summary>
	/// FServerModList:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FServerModList:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: ModList
		/// Type: TArray<FModInfo>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0xE0
		/// </summary>
		public TArray<FModInfo> ModList => new TArray<FModInfo>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: SteamModsCount
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int SteamModsCount
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: NonSteamModsCount
		/// Type: IntProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public int NonSteamModsCount
		{
			get
			{
				return ReadInt32(0x14);
			}
			set
			{
				WriteInt32(0x14,value);
			}
		}
		
	}


	/// <summary>
	/// FRepRootMotionMontage:
	/// Size: 0x160
	/// Properties: 12
	/// </summary>
	public class FRepRootMotionMontage:MemoryObject
	{
		public override int ObjectSize => 352;
		/// <summary>
		/// Name: bIsActive
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bIsActive
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: AnimMontage
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UAnimMontage AnimMontage => ReadUObject<UAnimMontage>(0x08);
		
		/// <summary>
		/// Name: Position
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float Position
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantize100 Location => ReadStruct<FVector_NetQuantize100>(0x14);
		
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x0C
		/// </summary>
		public FRotator Rotation => ReadStruct<FRotator>(0x20);
		
		/// <summary>
		/// Name: MovementBase
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UPrimitiveComponent MovementBase => ReadUObject<UPrimitiveComponent>(0x30);
		
		/// <summary>
		/// Name: MovementBaseBoneName
		/// Type: NameProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bRelativePosition
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bRelativePosition
		{
			get
			{
				return ReadBool(0x40);
			}
			set
			{
				WriteBool(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: bRelativeRotation
		/// Type: BoolProperty
		/// Offset: 0x41
		/// Size: 0x01
		/// </summary>
		public bool bRelativeRotation
		{
			get
			{
				return ReadBool(0x41);
			}
			set
			{
				WriteBool(0x41,value);
			}
		}
		
		/// <summary>
		/// Name: AuthoritativeRootMotion
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x100
		/// </summary>
		public FRootMotionSourceGroup AuthoritativeRootMotion => ReadStruct<FRootMotionSourceGroup>(0x48);
		
		/// <summary>
		/// Name: Acceleration
		/// Type: StructProperty
		/// Offset: 0x148
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantize10 Acceleration => ReadStruct<FVector_NetQuantize10>(0x148);
		
		/// <summary>
		/// Name: LinearVelocity
		/// Type: StructProperty
		/// Offset: 0x154
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantize10 LinearVelocity => ReadStruct<FVector_NetQuantize10>(0x154);
		
	}


	/// <summary>
	/// FVector_NetQuantize10:FVector
	/// Size: 0x0C
	/// Properties: 0
	/// </summary>
	public class FVector_NetQuantize10:FVector
	{
		public override int ObjectSize => 12;
	}


	/// <summary>
	/// FRootMotionSourceGroup:
	/// Size: 0x100
	/// Properties: 5
	/// </summary>
	public class FRootMotionSourceGroup:MemoryObject
	{
		public override int ObjectSize => 256;
		/// <summary>
		/// Name: bHasAdditiveSources
		/// Type: BoolProperty
		/// Offset: 0xE8
		/// Size: 0x01
		/// </summary>
		public bool bHasAdditiveSources
		{
			get
			{
				return ReadBool(0xE8);
			}
			set
			{
				WriteBool(0xE8,value);
			}
		}
		
		/// <summary>
		/// Name: bHasOverrideSources
		/// Type: BoolProperty
		/// Offset: 0xE9
		/// Size: 0x01
		/// </summary>
		public bool bHasOverrideSources
		{
			get
			{
				return ReadBool(0xE9);
			}
			set
			{
				WriteBool(0xE9,value);
			}
		}
		
		/// <summary>
		/// Name: LastPreAdditiveVelocity
		/// Type: StructProperty
		/// Offset: 0xEC
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantize10 LastPreAdditiveVelocity => ReadStruct<FVector_NetQuantize10>(0xEC);
		
		/// <summary>
		/// Name: bIsAdditiveVelocityApplied
		/// Type: BoolProperty
		/// Offset: 0xF8
		/// Size: 0x01
		/// </summary>
		public bool bIsAdditiveVelocityApplied
		{
			get
			{
				return ReadBool(0xF8);
			}
			set
			{
				WriteBool(0xF8,value);
			}
		}
		
		/// <summary>
		/// Name: LastAccumulatedSettings
		/// Type: StructProperty
		/// Offset: 0xF9
		/// Size: 0x01
		/// </summary>
		public FRootMotionSourceSettings LastAccumulatedSettings => ReadStruct<FRootMotionSourceSettings>(0xF9);
		
	}


	/// <summary>
	/// FRootMotionSourceSettings:
	/// Size: 0x01
	/// Properties: 1
	/// </summary>
	public class FRootMotionSourceSettings:MemoryObject
	{
		public override int ObjectSize => 1;
		/// <summary>
		/// Name: flags
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte flags
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
	}


	/// <summary>
	/// FSimulatedRootMotionReplicatedMove:
	/// Size: 0x168
	/// Properties: 2
	/// </summary>
	public class FSimulatedRootMotionReplicatedMove:MemoryObject
	{
		public override int ObjectSize => 360;
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: RootMotion
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x160
		/// </summary>
		public FRepRootMotionMontage RootMotion => ReadStruct<FRepRootMotionMontage>(0x08);
		
	}


	/// <summary>
	/// FRootMotionMovementParams:
	/// Size: 0x40
	/// Properties: 3
	/// </summary>
	public class FRootMotionMovementParams:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: bHasRootMotion
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bHasRootMotion
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: BlendWeight
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float BlendWeight
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: RootMotionTransform
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x30
		/// </summary>
		public FTransform RootMotionTransform => ReadStruct<FTransform>(0x10);
		
	}


	/// <summary>
	/// FBasedMovementInfo:
	/// Size: 0x30
	/// Properties: 7
	/// </summary>
	public class FBasedMovementInfo:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: MovementBase
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UPrimitiveComponent MovementBase => ReadUObject<UPrimitiveComponent>(0x00);
		
		/// <summary>
		/// Name: BoneName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantize100 Location => ReadStruct<FVector_NetQuantize100>(0x10);
		
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x1C
		/// Size: 0x0C
		/// </summary>
		public FRotator Rotation => ReadStruct<FRotator>(0x1C);
		
		/// <summary>
		/// Name: bServerHasBaseComponent
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bServerHasBaseComponent
		{
			get
			{
				return ReadBool(0x28);
			}
			set
			{
				WriteBool(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: bRelativeRotation
		/// Type: BoolProperty
		/// Offset: 0x29
		/// Size: 0x01
		/// </summary>
		public bool bRelativeRotation
		{
			get
			{
				return ReadBool(0x29);
			}
			set
			{
				WriteBool(0x29,value);
			}
		}
		
		/// <summary>
		/// Name: bServerHasVelocity
		/// Type: BoolProperty
		/// Offset: 0x2A
		/// Size: 0x01
		/// </summary>
		public bool bServerHasVelocity
		{
			get
			{
				return ReadBool(0x2A);
			}
			set
			{
				WriteBool(0x2A,value);
			}
		}
		
	}


	/// <summary>
	/// FCharacterLayout:
	/// Size: 0x124
	/// Properties: 8
	/// </summary>
	public class FCharacterLayout:MemoryObject
	{
		public override int ObjectSize => 292;
		/// <summary>
		/// Name: MeshLayout
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x28
		/// </summary>
		public FCharacterMeshLayout MeshLayout => ReadStruct<FCharacterMeshLayout>(0x00);
		
		/// <summary>
		/// Name: TextureLayout
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x14
		/// </summary>
		public FCharacterTextureLayout TextureLayout => ReadStruct<FCharacterTextureLayout>(0x28);
		
		/// <summary>
		/// Name: TintLayout
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x20
		/// </summary>
		public FCharacterTintLayout TintLayout => ReadStruct<FCharacterTintLayout>(0x3C);
		
		/// <summary>
		/// Name: BoolParams
		/// Type: StructProperty
		/// Offset: 0x5C
		/// Size: 0x01
		/// </summary>
		public FCharacterBoolParameters BoolParams => ReadStruct<FCharacterBoolParameters>(0x5C);
		
		/// <summary>
		/// Name: IntParams
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x08
		/// </summary>
		public FCharacterIntParameters IntParams => ReadStruct<FCharacterIntParameters>(0x60);
		
		/// <summary>
		/// Name: ScalarParams
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x44
		/// </summary>
		public FCharacterScalarParameters ScalarParams => ReadStruct<FCharacterScalarParameters>(0x68);
		
		/// <summary>
		/// Name: EnumParams
		/// Type: StructProperty
		/// Offset: 0xAC
		/// Size: 0x05
		/// </summary>
		public FCharacterEnumParameters EnumParams => ReadStruct<FCharacterEnumParameters>(0xAC);
		
		/// <summary>
		/// Name: ArmourDyeParams
		/// Type: StructProperty
		/// Offset: 0xB4
		/// Size: 0x70
		/// </summary>
		public FCharacterArmourDyeParams ArmourDyeParams => ReadStruct<FCharacterArmourDyeParams>(0xB4);
		
	}


	/// <summary>
	/// FCharacterArmourDyeParams:
	/// Size: 0x70
	/// Properties: 7
	/// </summary>
	public class FCharacterArmourDyeParams:MemoryObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: Helmet
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FArmourSlotDyeParams Helmet => ReadStruct<FArmourSlotDyeParams>(0x00);
		
		/// <summary>
		/// Name: Forearms
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FArmourSlotDyeParams Forearms => ReadStruct<FArmourSlotDyeParams>(0x10);
		
		/// <summary>
		/// Name: Hands
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FArmourSlotDyeParams Hands => ReadStruct<FArmourSlotDyeParams>(0x20);
		
		/// <summary>
		/// Name: UpperBody
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FArmourSlotDyeParams UpperBody => ReadStruct<FArmourSlotDyeParams>(0x30);
		
		/// <summary>
		/// Name: LowerBody
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FArmourSlotDyeParams LowerBody => ReadStruct<FArmourSlotDyeParams>(0x40);
		
		/// <summary>
		/// Name: Legs
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FArmourSlotDyeParams Legs => ReadStruct<FArmourSlotDyeParams>(0x50);
		
		/// <summary>
		/// Name: Feet
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x10
		/// </summary>
		public FArmourSlotDyeParams Feet => ReadStruct<FArmourSlotDyeParams>(0x60);
		
	}


	/// <summary>
	/// FArmourSlotDyeParams:
	/// Size: 0x10
	/// Properties: 4
	/// </summary>
	public class FArmourSlotDyeParams:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Channel1
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int Channel1
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Channel2
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int Channel2
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Channel3
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int Channel3
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: Channel4
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int Channel4
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FCharacterEnumParameters:
	/// Size: 0x05
	/// Properties: 5
	/// </summary>
	public class FCharacterEnumParameters:MemoryObject
	{
		public override int ObjectSize => 5;
		/// <summary>
		/// Name: God
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte God
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Race
		/// Type: ByteProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public byte Race
		{
			get
			{
				return ReadByte(0x01);
			}
			set
			{
				WriteByte(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: CrimeOne
		/// Type: ByteProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public byte CrimeOne
		{
			get
			{
				return ReadByte(0x02);
			}
			set
			{
				WriteByte(0x02,value);
			}
		}
		
		/// <summary>
		/// Name: CrimeTwo
		/// Type: ByteProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public byte CrimeTwo
		{
			get
			{
				return ReadByte(0x03);
			}
			set
			{
				WriteByte(0x03,value);
			}
		}
		
		/// <summary>
		/// Name: CrimeThree
		/// Type: ByteProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public byte CrimeThree
		{
			get
			{
				return ReadByte(0x04);
			}
			set
			{
				WriteByte(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FCharacterScalarParameters:
	/// Size: 0x44
	/// Properties: 17
	/// </summary>
	public class FCharacterScalarParameters:MemoryObject
	{
		public override int ObjectSize => 68;
		/// <summary>
		/// Name: Height
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Height
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Bust
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Bust
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Dick
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Dick
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: EyeAngle
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float EyeAngle
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: EyeSize
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float EyeSize
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: EyeDepth
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float EyeDepth
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: NoseWidth
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float NoseWidth
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: NoseSize
		/// Type: FloatProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public float NoseSize
		{
			get
			{
				return ReadSingle(0x1C);
			}
			set
			{
				WriteSingle(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: NoseCurve
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float NoseCurve
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: JawWidth
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float JawWidth
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: CheekHeight
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float CheekHeight
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: CheekWidth
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float CheekWidth
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: ChinWidth
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float ChinWidth
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: EarAngle
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float EarAngle
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: EarSize
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float EarSize
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: LipSize
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float LipSize
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: Pitch
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float Pitch
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
	}


	/// <summary>
	/// FCharacterIntParameters:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FCharacterIntParameters:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Physique
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int Physique
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Voice
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int Voice
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FCharacterBoolParameters:
	/// Size: 0x01
	/// Properties: 1
	/// </summary>
	public class FCharacterBoolParameters:MemoryObject
	{
		public override int ObjectSize => 1;
		/// <summary>
		/// Name: IsFemale
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool IsFemale
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
	}


	/// <summary>
	/// FCharacterTintLayout:
	/// Size: 0x20
	/// Properties: 8
	/// </summary>
	public class FCharacterTintLayout:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: Skin
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int Skin
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Hair
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int Hair
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: FacialHair
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int FacialHair
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: Eyes
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int Eyes
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: Eyebrows
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int Eyebrows
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: EyeMakeup
		/// Type: IntProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public int EyeMakeup
		{
			get
			{
				return ReadInt32(0x14);
			}
			set
			{
				WriteInt32(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: LipMakeup
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int LipMakeup
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: Warpaint
		/// Type: IntProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public int Warpaint
		{
			get
			{
				return ReadInt32(0x1C);
			}
			set
			{
				WriteInt32(0x1C,value);
			}
		}
		
	}


	/// <summary>
	/// FCharacterTextureLayout:
	/// Size: 0x14
	/// Properties: 5
	/// </summary>
	public class FCharacterTextureLayout:MemoryObject
	{
		public override int ObjectSize => 20;
		/// <summary>
		/// Name: EyebrowTexture
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int EyebrowTexture
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: EyeTexture
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int EyeTexture
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: LipTexture
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int LipTexture
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: WarpaintTexture
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int WarpaintTexture
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: HairlineTexture
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int HairlineTexture
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FCharacterMeshLayout:
	/// Size: 0x28
	/// Properties: 10
	/// </summary>
	public class FCharacterMeshLayout:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Helmet
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int Helmet
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Hair
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int Hair
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: FacialHair
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int FacialHair
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: Head
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int Head
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: Forearms
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int Forearms
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: Hands
		/// Type: IntProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public int Hands
		{
			get
			{
				return ReadInt32(0x14);
			}
			set
			{
				WriteInt32(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: UpperBody
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int UpperBody
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: LowerBody
		/// Type: IntProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public int LowerBody
		{
			get
			{
				return ReadInt32(0x1C);
			}
			set
			{
				WriteInt32(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: Legs
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int Legs
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: Feet
		/// Type: IntProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public int Feet
		{
			get
			{
				return ReadInt32(0x24);
			}
			set
			{
				WriteInt32(0x24,value);
			}
		}
		
	}


	/// <summary>
	/// FPlayerInfo:
	/// Size: 0x30
	/// Properties: 6
	/// </summary>
	public class FPlayerInfo:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: CharacterName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString CharacterName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: PlayerNickname
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString PlayerNickname => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: Level
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int Level
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: IsOnline
		/// Type: BoolProperty
		/// Offset: 0x24
		/// Size: 0x01
		/// </summary>
		public bool IsOnline
		{
			get
			{
				return ReadBool(0x24);
			}
			set
			{
				WriteBool(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: Rank
		/// Type: ByteProperty
		/// Offset: 0x25
		/// Size: 0x01
		/// </summary>
		public byte Rank
		{
			get
			{
				return ReadByte(0x25);
			}
			set
			{
				WriteByte(0x25,value);
			}
		}
		
		/// <summary>
		/// Name: PlayerId
		/// Type: Int64Property
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public long PlayerId
		{
			get
			{
				return ReadInt64(0x28);
			}
			set
			{
				WriteInt64(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// FDBResult:
	/// Size: 0x10
	/// Properties: 0
	/// </summary>
	public class FDBResult:MemoryObject
	{
		public override int ObjectSize => 16;
	}


	/// <summary>
	/// FThrallTableRow:FTableRowBase
	/// Size: 0x38
	/// Properties: 3
	/// </summary>
	public class FThrallTableRow:FTableRowBase
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: ThrallActor
		/// Type: ClassProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ThrallComponent
		/// Type: ClassProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: NPCBehaviorParameters
		/// Type: ClassProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FThrallInfo:
	/// Size: 0x80
	/// Properties: 10
	/// </summary>
	public class FThrallInfo:MemoryObject
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: ThrallName
		/// Type: TextProperty
		/// Offset: 0x00
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: ThrallIcon
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference ThrallIcon => ReadStruct<FStringAssetReference>(0x18);
		
		/// <summary>
		/// Name: ThrallTier
		/// Type: ByteProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public byte ThrallTier
		{
			get
			{
				return ReadByte(0x28);
			}
			set
			{
				WriteByte(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: ThrallBuff
		/// Type: StrProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FString ThrallBuff => new FString(BaseAddress+0x30);
		
		/// <summary>
		/// Name: ThrallProfession
		/// Type: ByteProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public byte ThrallProfession
		{
			get
			{
				return ReadByte(0x40);
			}
			set
			{
				WriteByte(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: BonusRecipes
		/// Type: TArray<>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: CraftingGroups
		/// Type: TArray<>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: ThrallTemplateID
		/// Type: IntProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public int ThrallTemplateID
		{
			get
			{
				return ReadInt32(0x68);
			}
			set
			{
				WriteInt32(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: SpawnTableID
		/// Type: NameProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: IsFemale
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool IsFemale
		{
			get
			{
				return ReadBool(0x78);
			}
			set
			{
				WriteBool(0x78,value);
			}
		}
		
	}


	/// <summary>
	/// FFCButtonStyle:
	/// Size: 0x6C0
	/// Properties: 4
	/// </summary>
	public class FFCButtonStyle:MemoryObject
	{
		public override int ObjectSize => 1728;
		/// <summary>
		/// Name: StyleButton
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x300
		/// </summary>
		public FFCButtonStyleButton StyleButton => ReadStruct<FFCButtonStyleButton>(0x00);
		
		/// <summary>
		/// Name: StyleCheckbox
		/// Type: StructProperty
		/// Offset: 0x300
		/// Size: 0x390
		/// </summary>
		public FFCButtonStyleCheckbox StyleCheckbox => ReadStruct<FFCButtonStyleCheckbox>(0x300);
		
		/// <summary>
		/// Name: PressedSlateSound
		/// Type: StructProperty
		/// Offset: 0x690
		/// Size: 0x18
		/// </summary>
		public FSlateSound PressedSlateSound => ReadStruct<FSlateSound>(0x690);
		
		/// <summary>
		/// Name: HoveredSlateSound
		/// Type: StructProperty
		/// Offset: 0x6A8
		/// Size: 0x18
		/// </summary>
		public FSlateSound HoveredSlateSound => ReadStruct<FSlateSound>(0x6A8);
		
	}


	/// <summary>
	/// FFCButtonStyleCheckbox:
	/// Size: 0x390
	/// Properties: 9
	/// </summary>
	public class FFCButtonStyleCheckbox:MemoryObject
	{
		public override int ObjectSize => 912;
		/// <summary>
		/// Name: Checked
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x90
		/// </summary>
		public FSlateBrush Checked => ReadStruct<FSlateBrush>(0x00);
		
		/// <summary>
		/// Name: CheckedHovered
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x90
		/// </summary>
		public FSlateBrush CheckedHovered => ReadStruct<FSlateBrush>(0x90);
		
		/// <summary>
		/// Name: CheckedPressed
		/// Type: StructProperty
		/// Offset: 0x120
		/// Size: 0x90
		/// </summary>
		public FSlateBrush CheckedPressed => ReadStruct<FSlateBrush>(0x120);
		
		/// <summary>
		/// Name: UnChecked
		/// Type: StructProperty
		/// Offset: 0x1B0
		/// Size: 0x90
		/// </summary>
		public FSlateBrush UnChecked => ReadStruct<FSlateBrush>(0x1B0);
		
		/// <summary>
		/// Name: UnCheckedHovered
		/// Type: StructProperty
		/// Offset: 0x240
		/// Size: 0x90
		/// </summary>
		public FSlateBrush UnCheckedHovered => ReadStruct<FSlateBrush>(0x240);
		
		/// <summary>
		/// Name: UnCheckedPressed
		/// Type: StructProperty
		/// Offset: 0x2D0
		/// Size: 0x90
		/// </summary>
		public FSlateBrush UnCheckedPressed => ReadStruct<FSlateBrush>(0x2D0);
		
		/// <summary>
		/// Name: NormalPadding
		/// Type: StructProperty
		/// Offset: 0x360
		/// Size: 0x10
		/// </summary>
		public FMargin NormalPadding => ReadStruct<FMargin>(0x360);
		
		/// <summary>
		/// Name: PressedPadding
		/// Type: StructProperty
		/// Offset: 0x370
		/// Size: 0x10
		/// </summary>
		public FMargin PressedPadding => ReadStruct<FMargin>(0x370);
		
		/// <summary>
		/// Name: ContentPadding
		/// Type: StructProperty
		/// Offset: 0x380
		/// Size: 0x10
		/// </summary>
		public FMargin ContentPadding => ReadStruct<FMargin>(0x380);
		
	}


	/// <summary>
	/// FFCButtonStyleButton:
	/// Size: 0x300
	/// Properties: 8
	/// </summary>
	public class FFCButtonStyleButton:MemoryObject
	{
		public override int ObjectSize => 768;
		/// <summary>
		/// Name: Normal
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x90
		/// </summary>
		public FSlateBrush Normal => ReadStruct<FSlateBrush>(0x00);
		
		/// <summary>
		/// Name: Hovered
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x90
		/// </summary>
		public FSlateBrush Hovered => ReadStruct<FSlateBrush>(0x90);
		
		/// <summary>
		/// Name: Pressed
		/// Type: StructProperty
		/// Offset: 0x120
		/// Size: 0x90
		/// </summary>
		public FSlateBrush Pressed => ReadStruct<FSlateBrush>(0x120);
		
		/// <summary>
		/// Name: PressedHovered
		/// Type: StructProperty
		/// Offset: 0x1B0
		/// Size: 0x90
		/// </summary>
		public FSlateBrush PressedHovered => ReadStruct<FSlateBrush>(0x1B0);
		
		/// <summary>
		/// Name: Disabled
		/// Type: StructProperty
		/// Offset: 0x240
		/// Size: 0x90
		/// </summary>
		public FSlateBrush Disabled => ReadStruct<FSlateBrush>(0x240);
		
		/// <summary>
		/// Name: NormalPadding
		/// Type: StructProperty
		/// Offset: 0x2D0
		/// Size: 0x10
		/// </summary>
		public FMargin NormalPadding => ReadStruct<FMargin>(0x2D0);
		
		/// <summary>
		/// Name: PressedPadding
		/// Type: StructProperty
		/// Offset: 0x2E0
		/// Size: 0x10
		/// </summary>
		public FMargin PressedPadding => ReadStruct<FMargin>(0x2E0);
		
		/// <summary>
		/// Name: ContentPadding
		/// Type: StructProperty
		/// Offset: 0x2F0
		/// Size: 0x10
		/// </summary>
		public FMargin ContentPadding => ReadStruct<FMargin>(0x2F0);
		
	}


	/// <summary>
	/// FGameplayResourceSet:
	/// Size: 0x02
	/// Properties: 0
	/// </summary>
	public class FGameplayResourceSet:MemoryObject
	{
		public override int ObjectSize => 2;
	}


	/// <summary>
	/// FAIRequestID:
	/// Size: 0x04
	/// Properties: 1
	/// </summary>
	public class FAIRequestID:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: RequestID
		/// Type: UInt32Property
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		
	}


	/// <summary>
	/// FAIStimulus:
	/// Size: 0x48
	/// Properties: 7
	/// </summary>
	public class FAIStimulus:MemoryObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: Age
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Age
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ExpirationAge
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float ExpirationAge
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Strength
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Strength
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: StimulusLocation
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector StimulusLocation => ReadStruct<FVector>(0x0C);
		
		/// <summary>
		/// Name: ReceiverLocation
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x0C
		/// </summary>
		public FVector ReceiverLocation => ReadStruct<FVector>(0x18);
		
		/// <summary>
		/// Name: Tag
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bSuccessfullySensed
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bSuccessfullySensed => (ReadByte(0x0040) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// FBuildingSocketData:
	/// Size: 0x70
	/// Properties: 4
	/// </summary>
	public class FBuildingSocketData:MemoryObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: m_CurrentSocketTypes
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int m_CurrentSocketTypes
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: WorldTransform
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x30
		/// </summary>
		public FTransform WorldTransform => ReadStruct<FTransform>(0x10);
		
		/// <summary>
		/// Name: BestAttachStability
		/// Type: Int8Property
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		
		/// <summary>
		/// Name: m_AttachedModules
		/// Type: TArray<FAttachedModuleData>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FAttachedModuleData> m_AttachedModules => new TArray<FAttachedModuleData>(BaseAddress+0x50);
		
	}


	/// <summary>
	/// FAttachedModuleData:
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FAttachedModuleData:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: module
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UBuildingModuleData module => ReadUObject<UBuildingModuleData>(0x00);
		
		/// <summary>
		/// Name: AttachToCost
		/// Type: Int8Property
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		
		/// <summary>
		/// Name: AttachCost
		/// Type: Int8Property
		/// Offset: 0x19
		/// Size: 0x01
		/// </summary>
		
	}


	/// <summary>
	/// FSocketStaticData:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FSocketStaticData:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: SocketTypes
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: AttachToCost
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int AttachToCost
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: AttachCost
		/// Type: IntProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public int AttachCost
		{
			get
			{
				return ReadInt32(0x14);
			}
			set
			{
				WriteInt32(0x14,value);
			}
		}
		
	}


	/// <summary>
	/// FSocketlessConnection:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FSocketlessConnection:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Actor
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public ABuildableBase Actor => ReadUObject<ABuildableBase>(0x00);
		
		/// <summary>
		/// Name: ModuleData
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UBuildingModuleData ModuleData => ReadUObject<UBuildingModuleData>(0x08);
		
	}


	/// <summary>
	/// FUIModuleTableRow:FTableRowBase
	/// Size: 0x50
	/// Properties: 17
	/// </summary>
	public class FUIModuleTableRow:FTableRowBase
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: WidgetClass
		/// Type: AssetClassProperty
		/// Offset: 0x00
		/// Size: 0x20
		/// </summary>
		
		/// <summary>
		/// Name: ToggleActionName
		/// Type: NameProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CloseOnShortcutRelease
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool CloseOnShortcutRelease
		{
			get
			{
				return ReadBool(0x28);
			}
			set
			{
				WriteBool(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: CloseOnESC
		/// Type: BoolProperty
		/// Offset: 0x29
		/// Size: 0x01
		/// </summary>
		public bool CloseOnESC
		{
			get
			{
				return ReadBool(0x29);
			}
			set
			{
				WriteBool(0x29,value);
			}
		}
		
		/// <summary>
		/// Name: CloseOnEndPlay
		/// Type: BoolProperty
		/// Offset: 0x2A
		/// Size: 0x01
		/// </summary>
		public bool CloseOnEndPlay
		{
			get
			{
				return ReadBool(0x2A);
			}
			set
			{
				WriteBool(0x2A,value);
			}
		}
		
		/// <summary>
		/// Name: PreloadOnStartup
		/// Type: BoolProperty
		/// Offset: 0x2B
		/// Size: 0x01
		/// </summary>
		public bool PreloadOnStartup
		{
			get
			{
				return ReadBool(0x2B);
			}
			set
			{
				WriteBool(0x2B,value);
			}
		}
		
		/// <summary>
		/// Name: ShowInStartupState
		/// Type: BoolProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public bool ShowInStartupState
		{
			get
			{
				return ReadBool(0x2C);
			}
			set
			{
				WriteBool(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: ShowInMainMenuState
		/// Type: BoolProperty
		/// Offset: 0x2D
		/// Size: 0x01
		/// </summary>
		public bool ShowInMainMenuState
		{
			get
			{
				return ReadBool(0x2D);
			}
			set
			{
				WriteBool(0x2D,value);
			}
		}
		
		/// <summary>
		/// Name: ShowInLoadingScreenState
		/// Type: BoolProperty
		/// Offset: 0x2E
		/// Size: 0x01
		/// </summary>
		public bool ShowInLoadingScreenState
		{
			get
			{
				return ReadBool(0x2E);
			}
			set
			{
				WriteBool(0x2E,value);
			}
		}
		
		/// <summary>
		/// Name: ShowInPlayingState
		/// Type: BoolProperty
		/// Offset: 0x2F
		/// Size: 0x01
		/// </summary>
		public bool ShowInPlayingState
		{
			get
			{
				return ReadBool(0x2F);
			}
			set
			{
				WriteBool(0x2F,value);
			}
		}
		
		/// <summary>
		/// Name: ShowInServerListState
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool ShowInServerListState
		{
			get
			{
				return ReadBool(0x30);
			}
			set
			{
				WriteBool(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: ShowInCharacterCreationState
		/// Type: BoolProperty
		/// Offset: 0x31
		/// Size: 0x01
		/// </summary>
		public bool ShowInCharacterCreationState
		{
			get
			{
				return ReadBool(0x31);
			}
			set
			{
				WriteBool(0x31,value);
			}
		}
		
		/// <summary>
		/// Name: IsPersistent
		/// Type: BoolProperty
		/// Offset: 0x32
		/// Size: 0x01
		/// </summary>
		public bool IsPersistent
		{
			get
			{
				return ReadBool(0x32);
			}
			set
			{
				WriteBool(0x32,value);
			}
		}
		
		/// <summary>
		/// Name: Category
		/// Type: ByteProperty
		/// Offset: 0x33
		/// Size: 0x01
		/// </summary>
		public byte Category
		{
			get
			{
				return ReadByte(0x33);
			}
			set
			{
				WriteByte(0x33,value);
			}
		}
		
		/// <summary>
		/// Name: FullscreenGUIAction
		/// Type: ByteProperty
		/// Offset: 0x34
		/// Size: 0x01
		/// </summary>
		public byte FullscreenGUIAction
		{
			get
			{
				return ReadByte(0x34);
			}
			set
			{
				WriteByte(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: AutoshownInStates
		/// Type: TArray<>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: ZOrder
		/// Type: IntProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public int ZOrder
		{
			get
			{
				return ReadInt32(0x48);
			}
			set
			{
				WriteInt32(0x48,value);
			}
		}
		
	}


	/// <summary>
	/// FPersistenceBuildingInstance:
	/// Size: 0x90
	/// Properties: 5
	/// </summary>
	public class FPersistenceBuildingInstance:MemoryObject
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: Class
		/// Type: ClassProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SpawnTransform
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x30
		/// </summary>
		public FTransform SpawnTransform => ReadStruct<FTransform>(0x10);
		
		/// <summary>
		/// Name: MeshTransform
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x30
		/// </summary>
		public FTransform MeshTransform => ReadStruct<FTransform>(0x40);
		
		/// <summary>
		/// Name: HealthPool
		/// Type: TArray<FBuildableHealthEntry>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x14
		/// </summary>
		public TArray<FBuildableHealthEntry> HealthPool => new TArray<FBuildableHealthEntry>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: FoundationOrPillarThatHitGround
		/// Type: BoolProperty
		/// Offset: 0x88
		/// Size: 0x01
		/// </summary>
		public bool FoundationOrPillarThatHitGround
		{
			get
			{
				return ReadBool(0x88);
			}
			set
			{
				WriteBool(0x88,value);
			}
		}
		
	}


	/// <summary>
	/// FBuildingModuleReference:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FBuildingModuleReference:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: OwnerComponent
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UInstancedBuildingComponent OwnerComponent => ReadUObject<UInstancedBuildingComponent>(0x00);
		
		/// <summary>
		/// Name: InstanceIndex
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int InstanceIndex
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FBoxBounds:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FBoxBounds:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Origin
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Origin => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: BoxExtent
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector BoxExtent => ReadStruct<FVector>(0x0C);
		
	}


	/// <summary>
	/// FTargetArea:
	/// Size: 0x20
	/// Properties: 4
	/// </summary>
	public class FTargetArea:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: SphereCenter
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector SphereCenter => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: Normal
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector Normal => ReadStruct<FVector>(0x0C);
		
		/// <summary>
		/// Name: SphereRadius
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float SphereRadius
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: ConeHalfAngleRadians
		/// Type: FloatProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public float ConeHalfAngleRadians
		{
			get
			{
				return ReadSingle(0x1C);
			}
			set
			{
				WriteSingle(0x1C,value);
			}
		}
		
	}


	/// <summary>
	/// FMotionHistory:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FMotionHistory:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Samples
		/// Type: TArray<FMotionSample>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x1C
		/// </summary>
		public TArray<FMotionSample> Samples => new TArray<FMotionSample>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: MaxSampleAge
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float MaxSampleAge
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FMotionSample:
	/// Size: 0x1C
	/// Properties: 3
	/// </summary>
	public class FMotionSample:MemoryObject
	{
		public override int ObjectSize => 28;
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Location => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FRotator Rotation => ReadStruct<FRotator>(0x0C);
		
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FPredictedObstacle:
	/// Size: 0x28
	/// Properties: 4
	/// </summary>
	public class FPredictedObstacle:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: ObstacleActor
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public AActor ObstacleActor => ReadUObject<AActor>(0x00);
		
		/// <summary>
		/// Name: ProbeCollisionLocation
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x0C
		/// </summary>
		public FVector ProbeCollisionLocation => ReadStruct<FVector>(0x08);
		
		/// <summary>
		/// Name: ObstacleCollisionLocation
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x0C
		/// </summary>
		public FVector ObstacleCollisionLocation => ReadStruct<FVector>(0x14);
		
		/// <summary>
		/// Name: TimeOfCollision
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float TimeOfCollision
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
	}


	/// <summary>
	/// FAwakeTickFunction:FTickFunction
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class FAwakeTickFunction:FTickFunction
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// FLandClaimCellData:
	/// Size: 0x10
	/// Properties: 3
	/// </summary>
	public class FLandClaimCellData:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: X
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int X
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Y
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int Y
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: OwnershipParams
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public FClaimOwnershipParams OwnershipParams => ReadStruct<FClaimOwnershipParams>(0x08);
		
	}


	/// <summary>
	/// FClaimOwnershipParams:
	/// Size: 0x08
	/// Properties: 1
	/// </summary>
	public class FClaimOwnershipParams:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: UniqueID
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UUniqueID UniqueID => ReadUObject<UUniqueID>(0x00);
		
	}


	/// <summary>
	/// FBaseEnergy:
	/// Size: 0x24
	/// Properties: 13
	/// </summary>
	public class FBaseEnergy:MemoryObject
	{
		public override int ObjectSize => 36;
		/// <summary>
		/// Name: EnergyType
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte EnergyType
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: force
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float force
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: MinRadius
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float MinRadius
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: MaxRadius
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float MaxRadius
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: UseStatForce
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool UseStatForce
		{
			get
			{
				return ReadBool(0x10);
			}
			set
			{
				WriteBool(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: DynamicForceStat
		/// Type: ByteProperty
		/// Offset: 0x11
		/// Size: 0x01
		/// </summary>
		public byte DynamicForceStat
		{
			get
			{
				return ReadByte(0x11);
			}
			set
			{
				WriteByte(0x11,value);
			}
		}
		
		/// <summary>
		/// Name: LimitUpper
		/// Type: BoolProperty
		/// Offset: 0x12
		/// Size: 0x01
		/// </summary>
		public bool LimitUpper
		{
			get
			{
				return ReadBool(0x12);
			}
			set
			{
				WriteBool(0x12,value);
			}
		}
		
		/// <summary>
		/// Name: MaxEnergy
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float MaxEnergy
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: LimitLower
		/// Type: BoolProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public bool LimitLower
		{
			get
			{
				return ReadBool(0x18);
			}
			set
			{
				WriteBool(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: MinEnergy
		/// Type: FloatProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public float MinEnergy
		{
			get
			{
				return ReadSingle(0x1C);
			}
			set
			{
				WriteSingle(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: UseEnergyReceiverMinMax
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool UseEnergyReceiverMinMax
		{
			get
			{
				return ReadBool(0x20);
			}
			set
			{
				WriteBool(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: UseStatMinMax
		/// Type: BoolProperty
		/// Offset: 0x21
		/// Size: 0x01
		/// </summary>
		public bool UseStatMinMax
		{
			get
			{
				return ReadBool(0x21);
			}
			set
			{
				WriteBool(0x21,value);
			}
		}
		
		/// <summary>
		/// Name: StatMinMaxEnergy
		/// Type: ByteProperty
		/// Offset: 0x22
		/// Size: 0x01
		/// </summary>
		public byte StatMinMaxEnergy
		{
			get
			{
				return ReadByte(0x22);
			}
			set
			{
				WriteByte(0x22,value);
			}
		}
		
	}


	/// <summary>
	/// FEnergyEventTableRow:FTableRowBase
	/// Size: 0x30
	/// Properties: 5
	/// </summary>
	public class FEnergyEventTableRow:FTableRowBase
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: Type
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte Type
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: TriggerValue
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float TriggerValue
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: GUITrigger
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference GUITrigger => ReadStruct<FStringAssetReference>(0x08);
		
		/// <summary>
		/// Name: Buff
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference Buff => ReadStruct<FStringAssetReference>(0x18);
		
		/// <summary>
		/// Name: BuffPotency
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int BuffPotency
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// FSpawnerIndex:
	/// Size: 0x10
	/// Properties: 3
	/// </summary>
	public class FSpawnerIndex:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: SpawnerName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SpawnPointStartIndex
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int SpawnPointStartIndex
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: RoamingPathStartIndex
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int RoamingPathStartIndex
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FRoamingPath:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FRoamingPath:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Points
		/// Type: TArray<FVector>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> Points => new TArray<FVector>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FDebugSpawnProbabilityGroup:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FDebugSpawnProbabilityGroup:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: NormalizedWeight
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float NormalizedWeight
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ActualWeight
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int ActualWeight
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Members
		/// Type: TArray<>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FSpawnProbabilityBand:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FSpawnProbabilityBand:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Radius
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Radius
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Weight
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int Weight
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FSpatialQueryTickFunction:FTickFunction
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class FSpatialQueryTickFunction:FTickFunction
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// FSuspendCallbackComponentEntry:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FSuspendCallbackComponentEntry:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Callbacks
		/// Type: TArray<FSuspendCallback>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FSuspendCallback> Callbacks => new TArray<FSuspendCallback>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FSuspendCallback:
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FSuspendCallback:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: TimeoutSeconds
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float TimeoutSeconds
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: TimerHandle
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public FTimerHandle TimerHandle => ReadStruct<FTimerHandle>(0x08);
		
		/// <summary>
		/// Name: Delegate
		/// Type: DelegateProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		
	}


	/// <summary>
	/// FAILODInfo:
	/// Size: 0x10
	/// Properties: 3
	/// </summary>
	public class FAILODInfo:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Actor
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public AActor Actor => ReadUObject<AActor>(0x00);
		
		/// <summary>
		/// Name: AILOD
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte AILOD
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: NetCullDistanceSquared
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float NetCullDistanceSquared
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FAINewSightEvent:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FAINewSightEvent:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: SeenActor
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public AActor SeenActor => ReadUObject<AActor>(0x08);
		
		/// <summary>
		/// Name: Observer
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public AActor Observer => ReadUObject<AActor>(0x10);
		
	}


	/// <summary>
	/// FValidSocketResult:
	/// Size: 0x80
	/// Properties: 7
	/// </summary>
	public class FValidSocketResult:MemoryObject
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: SocketIndex
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int SocketIndex
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: TargetSocketIndex
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int TargetSocketIndex
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: ActorTransform
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x30
		/// </summary>
		public FTransform ActorTransform => ReadStruct<FTransform>(0x10);
		
		/// <summary>
		/// Name: MeshTransform
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x30
		/// </summary>
		public FTransform MeshTransform => ReadStruct<FTransform>(0x40);
		
		/// <summary>
		/// Name: TargetActor
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public ABuildableBase TargetActor => ReadUObject<ABuildableBase>(0x70);
		
		/// <summary>
		/// Name: Configuration
		/// Type: ByteProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public byte Configuration
		{
			get
			{
				return ReadByte(0x78);
			}
			set
			{
				WriteByte(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: IsTierUpgrade
		/// Type: BoolProperty
		/// Offset: 0x79
		/// Size: 0x01
		/// </summary>
		public bool IsTierUpgrade
		{
			get
			{
				return ReadBool(0x79);
			}
			set
			{
				WriteBool(0x79,value);
			}
		}
		
	}


	/// <summary>
	/// FCharacterLayoutSerializationHelper:
	/// Size: 0x124
	/// Properties: 1
	/// </summary>
	public class FCharacterLayoutSerializationHelper:MemoryObject
	{
		public override int ObjectSize => 292;
		/// <summary>
		/// Name: Layout
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x124
		/// </summary>
		public FCharacterLayout Layout => ReadStruct<FCharacterLayout>(0x00);
		
	}


	/// <summary>
	/// FDyeColourTableRow:FTableRowBase
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FDyeColourTableRow:FTableRowBase
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Colour
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FLinearColor Colour => ReadStruct<FLinearColor>(0x00);
		
	}


	/// <summary>
	/// FCharacterMaterialParams:
	/// Size: 0xF8
	/// Properties: 3
	/// </summary>
	public class FCharacterMaterialParams:MemoryObject
	{
		public override int ObjectSize => 248;
		/// <summary>
		/// Name: Textures
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x30
		/// </summary>
		public FCharacterResolvedTextures Textures => ReadStruct<FCharacterResolvedTextures>(0x00);
		
		/// <summary>
		/// Name: Tints
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x80
		/// </summary>
		public FCharacterResolvedTints Tints => ReadStruct<FCharacterResolvedTints>(0x30);
		
		/// <summary>
		/// Name: ScalarParams
		/// Type: StructProperty
		/// Offset: 0xB0
		/// Size: 0x44
		/// </summary>
		public FCharacterScalarParameters ScalarParams => ReadStruct<FCharacterScalarParameters>(0xB0);
		
	}


	/// <summary>
	/// FCharacterResolvedTints:
	/// Size: 0x80
	/// Properties: 8
	/// </summary>
	public class FCharacterResolvedTints:MemoryObject
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: SkinColour
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FLinearColor SkinColour => ReadStruct<FLinearColor>(0x00);
		
		/// <summary>
		/// Name: HairColour
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FLinearColor HairColour => ReadStruct<FLinearColor>(0x10);
		
		/// <summary>
		/// Name: FacialHairColour
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FLinearColor FacialHairColour => ReadStruct<FLinearColor>(0x20);
		
		/// <summary>
		/// Name: EyeColour
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FLinearColor EyeColour => ReadStruct<FLinearColor>(0x30);
		
		/// <summary>
		/// Name: EyebrowColour
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FLinearColor EyebrowColour => ReadStruct<FLinearColor>(0x40);
		
		/// <summary>
		/// Name: MakeupEyeColour
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FLinearColor MakeupEyeColour => ReadStruct<FLinearColor>(0x50);
		
		/// <summary>
		/// Name: MakeupLipColour
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x10
		/// </summary>
		public FLinearColor MakeupLipColour => ReadStruct<FLinearColor>(0x60);
		
		/// <summary>
		/// Name: WarpaintColour
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FLinearColor WarpaintColour => ReadStruct<FLinearColor>(0x70);
		
	}


	/// <summary>
	/// FCharacterResolvedTextures:
	/// Size: 0x30
	/// Properties: 6
	/// </summary>
	public class FCharacterResolvedTextures:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: EyebrowDiffuse
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UTexture EyebrowDiffuse => ReadUObject<UTexture>(0x00);
		
		/// <summary>
		/// Name: EyebrowNormal
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UTexture EyebrowNormal => ReadUObject<UTexture>(0x08);
		
		/// <summary>
		/// Name: EyeMask
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UTexture EyeMask => ReadUObject<UTexture>(0x10);
		
		/// <summary>
		/// Name: LipMask
		/// Type: ObjectProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		public UTexture LipMask => ReadUObject<UTexture>(0x18);
		
		/// <summary>
		/// Name: WarpaintMask
		/// Type: ObjectProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public UTexture WarpaintMask => ReadUObject<UTexture>(0x20);
		
		/// <summary>
		/// Name: Hairline
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UTexture Hairline => ReadUObject<UTexture>(0x28);
		
	}


	/// <summary>
	/// FCharacterResolvedMeshes:
	/// Size: 0x50
	/// Properties: 10
	/// </summary>
	public class FCharacterResolvedMeshes:MemoryObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: Helmet
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public USkeletalMesh Helmet => ReadUObject<USkeletalMesh>(0x00);
		
		/// <summary>
		/// Name: Hair
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public USkeletalMesh Hair => ReadUObject<USkeletalMesh>(0x08);
		
		/// <summary>
		/// Name: FacialHair
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public USkeletalMesh FacialHair => ReadUObject<USkeletalMesh>(0x10);
		
		/// <summary>
		/// Name: Head
		/// Type: ObjectProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		public USkeletalMesh Head => ReadUObject<USkeletalMesh>(0x18);
		
		/// <summary>
		/// Name: Forearms
		/// Type: ObjectProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public USkeletalMesh Forearms => ReadUObject<USkeletalMesh>(0x20);
		
		/// <summary>
		/// Name: Hands
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public USkeletalMesh Hands => ReadUObject<USkeletalMesh>(0x28);
		
		/// <summary>
		/// Name: UpperBody
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public USkeletalMesh UpperBody => ReadUObject<USkeletalMesh>(0x30);
		
		/// <summary>
		/// Name: LowerBody
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public USkeletalMesh LowerBody => ReadUObject<USkeletalMesh>(0x38);
		
		/// <summary>
		/// Name: Legs
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public USkeletalMesh Legs => ReadUObject<USkeletalMesh>(0x40);
		
		/// <summary>
		/// Name: Feet
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public USkeletalMesh Feet => ReadUObject<USkeletalMesh>(0x48);
		
	}


	/// <summary>
	/// FPoseSnapshot:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FPoseSnapshot:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: LocalAtoms
		/// Type: TArray<FTransform>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FTransform> LocalAtoms => new TArray<FTransform>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FEmpty:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FEmpty:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FMeshOption:FTableRowBase
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FMeshOption:FTableRowBase
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Mesh
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public USkeletalMesh Mesh => ReadUObject<USkeletalMesh>(0x00);
		
		/// <summary>
		/// Name: HighQualityMesh
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public USkeletalMesh HighQualityMesh => ReadUObject<USkeletalMesh>(0x08);
		
		/// <summary>
		/// Name: Icon
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UTexture2D Icon => ReadUObject<UTexture2D>(0x10);
		
	}


	/// <summary>
	/// FColorOption:FTableRowBase
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FColorOption:FTableRowBase
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Color
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FLinearColor Color => ReadStruct<FLinearColor>(0x00);
		
	}


	/// <summary>
	/// FSelections:FTableRowBase
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FSelections:FTableRowBase
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Path
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Path => new FString(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FPointOfInterestCollection:
	/// Size: 0xC0
	/// Properties: 6
	/// </summary>
	public class FPointOfInterestCollection:MemoryObject
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: MemoryLifeTimeSeconds
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int MemoryLifeTimeSeconds
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: HateInertia
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int HateInertia
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: HateLimitDistance
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int HateLimitDistance
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: m_SensedPOIs
		/// Type: MapProperty
		/// Offset: 0x10
		/// Size: 0x50
		/// </summary>
		
		/// <summary>
		/// Name: m_RememberedPOIs
		/// Type: MapProperty
		/// Offset: 0x60
		/// Size: 0x50
		/// </summary>
		
		/// <summary>
		/// Name: m_MostHatedPOI
		/// Type: ObjectProperty
		/// Offset: 0xB0
		/// Size: 0x08
		/// </summary>
		public AActor m_MostHatedPOI => ReadUObject<AActor>(0xB0);
		
	}


	/// <summary>
	/// FPointOfInterestData:
	/// Size: 0x14
	/// Properties: 3
	/// </summary>
	public class FPointOfInterestData:MemoryObject
	{
		public override int ObjectSize => 20;
		/// <summary>
		/// Name: SensingStoppedTime
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int SensingStoppedTime
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: LastSensedLocation
		/// Type: StructProperty
		/// Offset: 0x04
		/// Size: 0x0C
		/// </summary>
		public FVector LastSensedLocation => ReadStruct<FVector>(0x04);
		
		/// <summary>
		/// Name: DamageTotal
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int DamageTotal
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FLootTableRow:FTableRowBase
	/// Size: 0x48
	/// Properties: 9
	/// </summary>
	public class FLootTableRow:FTableRowBase
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: UseTable
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool UseTable
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Table
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FDataTableRowHandle Table => ReadStruct<FDataTableRowHandle>(0x08);
		
		/// <summary>
		/// Name: ItemName
		/// Type: TextProperty
		/// Offset: 0x18
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: ItemID
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int ItemID
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: Min
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int Min
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: Max
		/// Type: IntProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public int Max
		{
			get
			{
				return ReadInt32(0x38);
			}
			set
			{
				WriteInt32(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: PercentChance
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float PercentChance
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: MinDurability
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float MinDurability
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: MaxDurability
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float MaxDurability
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
	}


	/// <summary>
	/// FDataTableRowHandle:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FDataTableRowHandle:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: DataTable
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UDataTable DataTable => ReadUObject<UDataTable>(0x00);
		
		/// <summary>
		/// Name: RowName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FLootTableWeightedRow:FTableRowBase
	/// Size: 0x48
	/// Properties: 10
	/// </summary>
	public class FLootTableWeightedRow:FTableRowBase
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: UseWeightTable
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool UseWeightTable
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: UsePercentTable
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool UsePercentTable
		{
			get
			{
				return ReadBool(0x01);
			}
			set
			{
				WriteBool(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: Table
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FDataTableRowHandle Table => ReadStruct<FDataTableRowHandle>(0x08);
		
		/// <summary>
		/// Name: ItemName
		/// Type: TextProperty
		/// Offset: 0x18
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: ItemID
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int ItemID
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: Min
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int Min
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: Max
		/// Type: IntProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public int Max
		{
			get
			{
				return ReadInt32(0x38);
			}
			set
			{
				WriteInt32(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: Weight
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float Weight
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: MinDurability
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float MinDurability
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: MaxDurability
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float MaxDurability
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
	}


	/// <summary>
	/// FProfessionTemplateTableRow:FTableRowBase
	/// Size: 0x78
	/// Properties: 8
	/// </summary>
	public class FProfessionTemplateTableRow:FTableRowBase
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: ThrallType
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int ThrallType
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ThrallTier
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int ThrallTier
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: ThrallProfession
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte ThrallProfession
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: BonusRecipes
		/// Type: TArray<>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: CraftingGroups
		/// Type: TArray<>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: StatTemplate
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: StatModifierTemplate
		/// Type: TArray<FName>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> StatModifierTemplate => new TArray<FName>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: BuffClass
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x10
		/// </summary>
		public FStringAssetReference BuffClass => ReadStruct<FStringAssetReference>(0x68);
		
	}


	/// <summary>
	/// FFCDamageEvent:FDamageEvent
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FFCDamageEvent:FDamageEvent
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: FCDamageType
		/// Type: ByteProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public byte FCDamageType
		{
			get
			{
				return ReadByte(0x10);
			}
			set
			{
				WriteByte(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: Origin
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x0C
		/// </summary>
		public FVector Origin => ReadStruct<FVector>(0x14);
		
	}


	/// <summary>
	/// FDamageEvent:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FDamageEvent:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: DamageTypeClass
		/// Type: ClassProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FFCDamageParams:
	/// Size: 0x01
	/// Properties: 1
	/// </summary>
	public class FFCDamageParams:MemoryObject
	{
		public override int ObjectSize => 1;
		/// <summary>
		/// Name: FCDamageType
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte FCDamageType
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
	}


	/// <summary>
	/// FEventInfo:
	/// Size: 0x40
	/// Properties: 4
	/// </summary>
	public class FEventInfo:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: PlayerNickname
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString PlayerNickname => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: EventMessage
		/// Type: TextProperty
		/// Offset: 0x10
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: EventDate
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString EventDate => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: PlayerId
		/// Type: Int64Property
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public long PlayerId
		{
			get
			{
				return ReadInt64(0x38);
			}
			set
			{
				WriteInt64(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// FEmoteTableRow:FTableRowBase
	/// Size: 0x90
	/// Properties: 4
	/// </summary>
	public class FEmoteTableRow:FTableRowBase
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: emoteID
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte emoteID
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Name
		/// Type: TextProperty
		/// Offset: 0x08
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: EmoteFlags
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int EmoteFlags
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: EmoteCategory
		/// Type: ByteProperty
		/// Offset: 0x88
		/// Size: 0x01
		/// </summary>
		public byte EmoteCategory
		{
			get
			{
				return ReadByte(0x88);
			}
			set
			{
				WriteByte(0x88,value);
			}
		}
		
	}


	/// <summary>
	/// FPlayerCorpse:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FPlayerCorpse:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: timeStamp
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public FDateTime timeStamp => ReadStruct<FDateTime>(0x00);
		
		/// <summary>
		/// Name: IsRegistered
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool IsRegistered
		{
			get
			{
				return ReadBool(0x08);
			}
			set
			{
				WriteBool(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FTextureWrapper:
	/// Size: 0x08
	/// Properties: 1
	/// </summary>
	public class FTextureWrapper:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: m_Texture
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UTexture m_Texture => ReadUObject<UTexture>(0x00);
		
	}


	/// <summary>
	/// FRecipeTableRow:FTableRowBase
	/// Size: 0xD8
	/// Properties: 24
	/// </summary>
	public class FRecipeTableRow:FTableRowBase
	{
		public override int ObjectSize => 216;
		/// <summary>
		/// Name: RecipeName
		/// Type: TextProperty
		/// Offset: 0x00
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: ShortDesc
		/// Type: TextProperty
		/// Offset: 0x18
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: LongDesc
		/// Type: TextProperty
		/// Offset: 0x30
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: RecipeType
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte RecipeType
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: TimeToCraft
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float TimeToCraft
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: Tier
		/// Type: IntProperty
		/// Offset: 0x50
		/// Size: 0x04
		/// </summary>
		public int Tier
		{
			get
			{
				return ReadInt32(0x50);
			}
			set
			{
				WriteInt32(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: CraftXP
		/// Type: IntProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public int CraftXP
		{
			get
			{
				return ReadInt32(0x54);
			}
			set
			{
				WriteInt32(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: CraftingStations
		/// Type: IntProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public int CraftingStations
		{
			get
			{
				return ReadInt32(0x58);
			}
			set
			{
				WriteInt32(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: RequiredFuel
		/// Type: IntProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public int RequiredFuel
		{
			get
			{
				return ReadInt32(0x5C);
			}
			set
			{
				WriteInt32(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: BuildingModule
		/// Type: AssetClassProperty
		/// Offset: 0x80
		/// Size: 0x20
		/// </summary>
		
		/// <summary>
		/// Name: DestroyStationOnComplete
		/// Type: BoolProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public bool DestroyStationOnComplete
		{
			get
			{
				return ReadBool(0xA0);
			}
			set
			{
				WriteBool(0xA0,value);
			}
		}
		
		/// <summary>
		/// Name: Ingredient1ID
		/// Type: IntProperty
		/// Offset: 0xA4
		/// Size: 0x04
		/// </summary>
		public int Ingredient1ID
		{
			get
			{
				return ReadInt32(0xA4);
			}
			set
			{
				WriteInt32(0xA4,value);
			}
		}
		
		/// <summary>
		/// Name: Ingredient1Quantity
		/// Type: IntProperty
		/// Offset: 0xA8
		/// Size: 0x04
		/// </summary>
		public int Ingredient1Quantity
		{
			get
			{
				return ReadInt32(0xA8);
			}
			set
			{
				WriteInt32(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: Ingredient2ID
		/// Type: IntProperty
		/// Offset: 0xAC
		/// Size: 0x04
		/// </summary>
		public int Ingredient2ID
		{
			get
			{
				return ReadInt32(0xAC);
			}
			set
			{
				WriteInt32(0xAC,value);
			}
		}
		
		/// <summary>
		/// Name: Ingredient2Quantity
		/// Type: IntProperty
		/// Offset: 0xB0
		/// Size: 0x04
		/// </summary>
		public int Ingredient2Quantity
		{
			get
			{
				return ReadInt32(0xB0);
			}
			set
			{
				WriteInt32(0xB0,value);
			}
		}
		
		/// <summary>
		/// Name: Ingredient3ID
		/// Type: IntProperty
		/// Offset: 0xB4
		/// Size: 0x04
		/// </summary>
		public int Ingredient3ID
		{
			get
			{
				return ReadInt32(0xB4);
			}
			set
			{
				WriteInt32(0xB4,value);
			}
		}
		
		/// <summary>
		/// Name: Ingredient3Quantity
		/// Type: IntProperty
		/// Offset: 0xB8
		/// Size: 0x04
		/// </summary>
		public int Ingredient3Quantity
		{
			get
			{
				return ReadInt32(0xB8);
			}
			set
			{
				WriteInt32(0xB8,value);
			}
		}
		
		/// <summary>
		/// Name: Ingredient4ID
		/// Type: IntProperty
		/// Offset: 0xBC
		/// Size: 0x04
		/// </summary>
		public int Ingredient4ID
		{
			get
			{
				return ReadInt32(0xBC);
			}
			set
			{
				WriteInt32(0xBC,value);
			}
		}
		
		/// <summary>
		/// Name: Ingredient4Quantity
		/// Type: IntProperty
		/// Offset: 0xC0
		/// Size: 0x04
		/// </summary>
		public int Ingredient4Quantity
		{
			get
			{
				return ReadInt32(0xC0);
			}
			set
			{
				WriteInt32(0xC0,value);
			}
		}
		
		/// <summary>
		/// Name: Result1ID
		/// Type: IntProperty
		/// Offset: 0xC4
		/// Size: 0x04
		/// </summary>
		public int Result1ID
		{
			get
			{
				return ReadInt32(0xC4);
			}
			set
			{
				WriteInt32(0xC4,value);
			}
		}
		
		/// <summary>
		/// Name: Result1Quantity
		/// Type: IntProperty
		/// Offset: 0xC8
		/// Size: 0x04
		/// </summary>
		public int Result1Quantity
		{
			get
			{
				return ReadInt32(0xC8);
			}
			set
			{
				WriteInt32(0xC8,value);
			}
		}
		
		/// <summary>
		/// Name: Result2ID
		/// Type: IntProperty
		/// Offset: 0xCC
		/// Size: 0x04
		/// </summary>
		public int Result2ID
		{
			get
			{
				return ReadInt32(0xCC);
			}
			set
			{
				WriteInt32(0xCC,value);
			}
		}
		
		/// <summary>
		/// Name: Result2Quantity
		/// Type: IntProperty
		/// Offset: 0xD0
		/// Size: 0x04
		/// </summary>
		public int Result2Quantity
		{
			get
			{
				return ReadInt32(0xD0);
			}
			set
			{
				WriteInt32(0xD0,value);
			}
		}
		
		/// <summary>
		/// Name: ThrallRecipeFeatRequirement
		/// Type: IntProperty
		/// Offset: 0xD4
		/// Size: 0x04
		/// </summary>
		public int ThrallRecipeFeatRequirement
		{
			get
			{
				return ReadInt32(0xD4);
			}
			set
			{
				WriteInt32(0xD4,value);
			}
		}
		
	}


	/// <summary>
	/// FFeatTableRow:FTableRowBase
	/// Size: 0xB0
	/// Properties: 8
	/// </summary>
	public class FFeatTableRow:FTableRowBase
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: FeatName
		/// Type: TextProperty
		/// Offset: 0x00
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: Description
		/// Type: TextProperty
		/// Offset: 0x18
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: GiveOnSpawn
		/// Type: BoolProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public bool GiveOnSpawn
		{
			get
			{
				return ReadBool(0x70);
			}
			set
			{
				WriteBool(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: LevelRequirement
		/// Type: IntProperty
		/// Offset: 0x74
		/// Size: 0x04
		/// </summary>
		public int LevelRequirement
		{
			get
			{
				return ReadInt32(0x74);
			}
			set
			{
				WriteInt32(0x74,value);
			}
		}
		
		/// <summary>
		/// Name: FeatCost
		/// Type: IntProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public int FeatCost
		{
			get
			{
				return ReadInt32(0x78);
			}
			set
			{
				WriteInt32(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: Categories
		/// Type: TArray<>
		/// Offset: 0x80
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: PrerequisiteFeat
		/// Type: TArray<>
		/// Offset: 0x90
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: RewardRecipe
		/// Type: TArray<>
		/// Offset: 0xA0
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FIngredientEntry:
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FIngredientEntry:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: IngredientID
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int IngredientID
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: IngredientQuantity
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int IngredientQuantity
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: IsResult
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool IsResult
		{
			get
			{
				return ReadBool(0x08);
			}
			set
			{
				WriteBool(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FGameItemRef:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FGameItemRef:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: inventory
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UItemInventory inventory => ReadUObject<UItemInventory>(0x00);
		
		/// <summary>
		/// Name: ItemIndex
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int ItemIndex
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FEquipmentGenderVariations:FTableRowBase
	/// Size: 0x50
	/// Properties: 4
	/// </summary>
	public class FEquipmentGenderVariations:FTableRowBase
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: SlotType
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte SlotType
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: MalePath
		/// Type: StrProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FString MalePath => new FString(BaseAddress+0x08);
		
		/// <summary>
		/// Name: FemalePath
		/// Type: StrProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FString FemalePath => new FString(BaseAddress+0x18);
		
		/// <summary>
		/// Name: DyeFlags
		/// Type: IntProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public int DyeFlags
		{
			get
			{
				return ReadInt32(0x48);
			}
			set
			{
				WriteInt32(0x48,value);
			}
		}
		
	}


	/// <summary>
	/// FoliageRespawnParams:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FoliageRespawnParams:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: InitialReceived
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool InitialReceived
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: HiddenOnServer
		/// Type: TArray<>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FHarvestFoliageInfo:
	/// Size: 0x70
	/// Properties: 1
	/// </summary>
	public class FHarvestFoliageInfo:MemoryObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: AABB
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x1C
		/// </summary>
		public FBox AABB => ReadStruct<FBox>(0x00);
		
	}


	/// <summary>
	/// FCircularProgressbarSegment:
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FCircularProgressbarSegment:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: Texture
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UTexture2D Texture => ReadUObject<UTexture2D>(0x00);
		
		/// <summary>
		/// Name: ColorAndOpacity
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FLinearColor ColorAndOpacity => ReadStruct<FLinearColor>(0x08);
		
		/// <summary>
		/// Name: EndProgress
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float EndProgress
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FFCProgressbarSegment:
	/// Size: 0x1C0
	/// Properties: 2
	/// </summary>
	public class FFCProgressbarSegment:MemoryObject
	{
		public override int ObjectSize => 448;
		/// <summary>
		/// Name: Style
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x1B8
		/// </summary>
		public FProgressBarStyle Style => ReadStruct<FProgressBarStyle>(0x00);
		
		/// <summary>
		/// Name: EndProgress
		/// Type: FloatProperty
		/// Offset: 0x1B8
		/// Size: 0x04
		/// </summary>
		public float EndProgress
		{
			get
			{
				return ReadSingle(0x1B8);
			}
			set
			{
				WriteSingle(0x1B8,value);
			}
		}
		
	}


	/// <summary>
	/// FProgressBarStyle:FSlateWidgetStyle
	/// Size: 0x1B8
	/// Properties: 3
	/// </summary>
	public class FProgressBarStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 440;
		/// <summary>
		/// Name: BackgroundImage
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x90
		/// </summary>
		public FSlateBrush BackgroundImage => ReadStruct<FSlateBrush>(0x08);
		
		/// <summary>
		/// Name: FillImage
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x90
		/// </summary>
		public FSlateBrush FillImage => ReadStruct<FSlateBrush>(0x98);
		
		/// <summary>
		/// Name: MarqueeImage
		/// Type: StructProperty
		/// Offset: 0x128
		/// Size: 0x90
		/// </summary>
		public FSlateBrush MarqueeImage => ReadStruct<FSlateBrush>(0x128);
		
	}


	/// <summary>
	/// FHotkeyIconPlatform:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FHotkeyIconPlatform:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Platform
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte Platform
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ParentPlatform
		/// Type: ByteProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public byte ParentPlatform
		{
			get
			{
				return ReadByte(0x01);
			}
			set
			{
				WriteByte(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: Keys
		/// Type: TArray<FHotkeyIconKeyIcon>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0xA8
		/// </summary>
		public TArray<FHotkeyIconKeyIcon> Keys => new TArray<FHotkeyIconKeyIcon>(BaseAddress+0x08);
		
	}


	/// <summary>
	/// FHotkeyIconKeyIcon:
	/// Size: 0xA8
	/// Properties: 2
	/// </summary>
	public class FHotkeyIconKeyIcon:MemoryObject
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Key
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x18
		/// </summary>
		public FKey Key => ReadStruct<FKey>(0x00);
		
		/// <summary>
		/// Name: Icon
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x90
		/// </summary>
		public FSlateBrush Icon => ReadStruct<FSlateBrush>(0x18);
		
	}


	/// <summary>
	/// FKeyMappingCategory:FTableRowBase
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FKeyMappingCategory:FTableRowBase
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: ActionMappings
		/// Type: TArray<FMappingDisplayName>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FMappingDisplayName> ActionMappings => new TArray<FMappingDisplayName>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FMappingDisplayName:FTableRowBase
	/// Size: 0x28
	/// Properties: 3
	/// </summary>
	public class FMappingDisplayName:FTableRowBase
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: ActionMapping
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: DisplayName
		/// Type: TextProperty
		/// Offset: 0x08
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: Invert
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool Invert
		{
			get
			{
				return ReadBool(0x20);
			}
			set
			{
				WriteBool(0x20,value);
			}
		}
		
	}


	/// <summary>
	/// FEmotesMenuCategoryNode:
	/// Size: 0x28
	/// Properties: 3
	/// </summary>
	public class FEmotesMenuCategoryNode:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Category
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte Category
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Icon
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UTexture2D Icon => ReadUObject<UTexture2D>(0x08);
		
		/// <summary>
		/// Name: label
		/// Type: TextProperty
		/// Offset: 0x10
		/// Size: 0x18
		/// </summary>
		
	}


	/// <summary>
	/// FWeightedTableEntry:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FWeightedTableEntry:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: SpawnTableID
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: NextWeightedTableID
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Weight
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float Weight
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FStatFloatEntry:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FStatFloatEntry:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: statID
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte statID
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Value
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Value
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FStatIntEntry:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FStatIntEntry:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: statID
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte statID
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Value
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Value
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FTargetAreaAllocationData:
	/// Size: 0x38
	/// Properties: 3
	/// </summary>
	public class FTargetAreaAllocationData:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: AreaAndSource
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x28
		/// </summary>
		public FTargetAreaWithSource AreaAndSource => ReadStruct<FTargetAreaWithSource>(0x00);
		
		/// <summary>
		/// Name: Owner
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public AActor Owner => ReadUObject<AActor>(0x28);
		
		/// <summary>
		/// Name: MaxDistance
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float MaxDistance
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
	}


	/// <summary>
	/// FTargetAreaWithSource:
	/// Size: 0x28
	/// Properties: 2
	/// </summary>
	public class FTargetAreaWithSource:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Area
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x20
		/// </summary>
		public FTargetArea Area => ReadStruct<FTargetArea>(0x00);
		
		/// <summary>
		/// Name: SourceComponent
		/// Type: ObjectProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public USceneComponent SourceComponent => ReadUObject<USceneComponent>(0x20);
		
	}


	/// <summary>
	/// FEnergyDataTableRow:FTableRowBase
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FEnergyDataTableRow:FTableRowBase
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: Type
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte Type
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: MinValue
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float MinValue
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: MaxValue
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float MaxValue
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FCraftingStationNameTableRow:FTableRowBase
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class FCraftingStationNameTableRow:FTableRowBase
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: StationName
		/// Type: TextProperty
		/// Offset: 0x00
		/// Size: 0x18
		/// </summary>
		
	}


	/// <summary>
	/// FRaceTemplateTableRow:FTableRowBase
	/// Size: 0x230
	/// Properties: 44
	/// </summary>
	public class FRaceTemplateTableRow:FTableRowBase
	{
		public override int ObjectSize => 560;
		/// <summary>
		/// Name: StatModifierTemplate
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Hair
		/// Type: TArray<>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: FacialHair
		/// Type: TArray<>
		/// Offset: 0x18
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Head
		/// Type: TArray<>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Forearms
		/// Type: TArray<>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Hands
		/// Type: TArray<>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: UpperBody
		/// Type: TArray<>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: LowerBody
		/// Type: TArray<>
		/// Offset: 0x68
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Legs
		/// Type: TArray<>
		/// Offset: 0x78
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Feet
		/// Type: TArray<>
		/// Offset: 0x88
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: EyebrowTexture
		/// Type: TArray<>
		/// Offset: 0x98
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: EyeTexture
		/// Type: TArray<>
		/// Offset: 0xA8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: LipTexture
		/// Type: TArray<>
		/// Offset: 0xB8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: WarpaintTexture
		/// Type: TArray<>
		/// Offset: 0xC8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Skin
		/// Type: TArray<>
		/// Offset: 0xD8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: HairTint
		/// Type: TArray<>
		/// Offset: 0xE8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: FacialHairTint
		/// Type: TArray<>
		/// Offset: 0xF8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Eyes
		/// Type: TArray<>
		/// Offset: 0x108
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Eyebrows
		/// Type: TArray<>
		/// Offset: 0x118
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: EyeMakeup
		/// Type: TArray<>
		/// Offset: 0x128
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: LipMakeup
		/// Type: TArray<>
		/// Offset: 0x138
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Warpaint
		/// Type: TArray<>
		/// Offset: 0x148
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: IsFemale
		/// Type: TArray<>
		/// Offset: 0x158
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Physique
		/// Type: TArray<>
		/// Offset: 0x168
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Voice
		/// Type: TArray<>
		/// Offset: 0x178
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Height
		/// Type: StructProperty
		/// Offset: 0x188
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange Height => ReadStruct<FSpawnTableRange>(0x188);
		
		/// <summary>
		/// Name: Bust
		/// Type: StructProperty
		/// Offset: 0x190
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange Bust => ReadStruct<FSpawnTableRange>(0x190);
		
		/// <summary>
		/// Name: Dick
		/// Type: StructProperty
		/// Offset: 0x198
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange Dick => ReadStruct<FSpawnTableRange>(0x198);
		
		/// <summary>
		/// Name: EyeAngle
		/// Type: StructProperty
		/// Offset: 0x1A0
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange EyeAngle => ReadStruct<FSpawnTableRange>(0x1A0);
		
		/// <summary>
		/// Name: EyeSize
		/// Type: StructProperty
		/// Offset: 0x1A8
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange EyeSize => ReadStruct<FSpawnTableRange>(0x1A8);
		
		/// <summary>
		/// Name: EyeDepth
		/// Type: StructProperty
		/// Offset: 0x1B0
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange EyeDepth => ReadStruct<FSpawnTableRange>(0x1B0);
		
		/// <summary>
		/// Name: NoseWidth
		/// Type: StructProperty
		/// Offset: 0x1B8
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange NoseWidth => ReadStruct<FSpawnTableRange>(0x1B8);
		
		/// <summary>
		/// Name: NoseSize
		/// Type: StructProperty
		/// Offset: 0x1C0
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange NoseSize => ReadStruct<FSpawnTableRange>(0x1C0);
		
		/// <summary>
		/// Name: NoseCurve
		/// Type: StructProperty
		/// Offset: 0x1C8
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange NoseCurve => ReadStruct<FSpawnTableRange>(0x1C8);
		
		/// <summary>
		/// Name: JawWidth
		/// Type: StructProperty
		/// Offset: 0x1D0
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange JawWidth => ReadStruct<FSpawnTableRange>(0x1D0);
		
		/// <summary>
		/// Name: CheekHeight
		/// Type: StructProperty
		/// Offset: 0x1D8
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange CheekHeight => ReadStruct<FSpawnTableRange>(0x1D8);
		
		/// <summary>
		/// Name: CheekWidth
		/// Type: StructProperty
		/// Offset: 0x1E0
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange CheekWidth => ReadStruct<FSpawnTableRange>(0x1E0);
		
		/// <summary>
		/// Name: ChinWidth
		/// Type: StructProperty
		/// Offset: 0x1E8
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange ChinWidth => ReadStruct<FSpawnTableRange>(0x1E8);
		
		/// <summary>
		/// Name: EarAngle
		/// Type: StructProperty
		/// Offset: 0x1F0
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange EarAngle => ReadStruct<FSpawnTableRange>(0x1F0);
		
		/// <summary>
		/// Name: EarSize
		/// Type: StructProperty
		/// Offset: 0x1F8
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange EarSize => ReadStruct<FSpawnTableRange>(0x1F8);
		
		/// <summary>
		/// Name: LipSize
		/// Type: StructProperty
		/// Offset: 0x200
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange LipSize => ReadStruct<FSpawnTableRange>(0x200);
		
		/// <summary>
		/// Name: Pitch
		/// Type: StructProperty
		/// Offset: 0x208
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange Pitch => ReadStruct<FSpawnTableRange>(0x208);
		
		/// <summary>
		/// Name: God
		/// Type: TArray<>
		/// Offset: 0x210
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Race
		/// Type: TArray<>
		/// Offset: 0x220
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FSpawnTableRange:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FSpawnTableRange:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Min
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Min
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Max
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Max
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FEquipmentTemplateTableRow:FTableRowBase
	/// Size: 0x88
	/// Properties: 9
	/// </summary>
	public class FEquipmentTemplateTableRow:FTableRowBase
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: MainHand
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: OffHand
		/// Type: TArray<>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Helmet
		/// Type: TArray<>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Torso
		/// Type: TArray<>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Legs
		/// Type: TArray<>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Hands
		/// Type: TArray<>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Feet
		/// Type: TArray<>
		/// Offset: 0x60
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Backpack
		/// Type: TArray<>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: durability
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x08
		/// </summary>
		public FSpawnTableRange durability => ReadStruct<FSpawnTableRange>(0x80);
		
	}


	/// <summary>
	/// FSpawnTableRow:FTableRowBase
	/// Size: 0xF8
	/// Properties: 11
	/// </summary>
	public class FSpawnTableRow:FTableRowBase
	{
		public override int ObjectSize => 248;
		/// <summary>
		/// Name: Name
		/// Type: TextProperty
		/// Offset: 0x00
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: MaleRaceTemplate
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FRaceEntry MaleRaceTemplate => ReadStruct<FRaceEntry>(0x18);
		
		/// <summary>
		/// Name: FemaleRaceTemplate
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FRaceEntry FemaleRaceTemplate => ReadStruct<FRaceEntry>(0x28);
		
		/// <summary>
		/// Name: EquipmentTemplates
		/// Type: TArray<FName>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> EquipmentTemplates => new TArray<FName>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: ProfessionTemplate
		/// Type: NameProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: StatTemplate
		/// Type: NameProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: StatModifierTemplate
		/// Type: TArray<FName>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> StatModifierTemplate => new TArray<FName>(BaseAddress+0x58);
		
		/// <summary>
		/// Name: NPCClass
		/// Type: AssetClassProperty
		/// Offset: 0x68
		/// Size: 0x20
		/// </summary>
		
		/// <summary>
		/// Name: AIController
		/// Type: AssetClassProperty
		/// Offset: 0xA8
		/// Size: 0x20
		/// </summary>
		
		/// <summary>
		/// Name: NPCBehaviorParameters
		/// Type: AssetClassProperty
		/// Offset: 0xC8
		/// Size: 0x20
		/// </summary>
		
		/// <summary>
		/// Name: LootTable
		/// Type: StructProperty
		/// Offset: 0xE8
		/// Size: 0x10
		/// </summary>
		public FDataTableRowHandle LootTable => ReadStruct<FDataTableRowHandle>(0xE8);
		
	}


	/// <summary>
	/// FRaceEntry:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FRaceEntry:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: RaceTemplate
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Weight
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Weight
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FStatTemplateTableRow:FTableRowBase
	/// Size: 0x18
	/// Properties: 4
	/// </summary>
	public class FStatTemplateTableRow:FTableRowBase
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: TemplateId
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Type
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte Type
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: statID
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int statID
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: Value
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float Value
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FWeightedSpawnTableRow:FTableRowBase
	/// Size: 0x20
	/// Properties: 4
	/// </summary>
	public class FWeightedSpawnTableRow:FTableRowBase
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: WeightedTableID
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: NextWeightedTableID
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SpawnTableID
		/// Type: NameProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Weight
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float Weight
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FCompositeFont:
	/// Size: 0x28
	/// Properties: 2
	/// </summary>
	public class FCompositeFont:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: DefaultTypeface
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FTypeface DefaultTypeface => ReadStruct<FTypeface>(0x00);
		
		/// <summary>
		/// Name: SubTypefaces
		/// Type: TArray<FCompositeSubFont>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FCompositeSubFont> SubTypefaces => new TArray<FCompositeSubFont>(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FCompositeSubFont:
	/// Size: 0x28
	/// Properties: 3
	/// </summary>
	public class FCompositeSubFont:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Typeface
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FTypeface Typeface => ReadStruct<FTypeface>(0x00);
		
		/// <summary>
		/// Name: CharacterRanges
		/// Type: TArray<FInt32Range>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FInt32Range> CharacterRanges => new TArray<FInt32Range>(BaseAddress+0x10);
		
		/// <summary>
		/// Name: ScalingFactor
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float ScalingFactor
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
	}


	/// <summary>
	/// FTypeface:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FTypeface:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Fonts
		/// Type: TArray<FTypefaceEntry>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FTypefaceEntry> Fonts => new TArray<FTypefaceEntry>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FTypefaceEntry:
	/// Size: 0x38
	/// Properties: 2
	/// </summary>
	public class FTypefaceEntry:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Font
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x30
		/// </summary>
		public FFontData Font => ReadStruct<FFontData>(0x08);
		
	}


	/// <summary>
	/// FFontData:
	/// Size: 0x30
	/// Properties: 4
	/// </summary>
	public class FFontData:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: FontFilename
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString FontFilename => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: BulkDataPtr
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UFontBulkData BulkDataPtr => ReadUObject<UFontBulkData>(0x10);
		
		/// <summary>
		/// Name: Hinting
		/// Type: ByteProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public byte Hinting
		{
			get
			{
				return ReadByte(0x18);
			}
			set
			{
				WriteByte(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: FontData
		/// Type: TArray<>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FWindowStyle:FSlateWidgetStyle
	/// Size: 0x1010
	/// Properties: 13
	/// </summary>
	public class FWindowStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 4112;
		/// <summary>
		/// Name: MinimizeButtonStyle
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x2A8
		/// </summary>
		public FButtonStyle MinimizeButtonStyle => ReadStruct<FButtonStyle>(0x08);
		
		/// <summary>
		/// Name: MaximizeButtonStyle
		/// Type: StructProperty
		/// Offset: 0x2B0
		/// Size: 0x2A8
		/// </summary>
		public FButtonStyle MaximizeButtonStyle => ReadStruct<FButtonStyle>(0x2B0);
		
		/// <summary>
		/// Name: RestoreButtonStyle
		/// Type: StructProperty
		/// Offset: 0x558
		/// Size: 0x2A8
		/// </summary>
		public FButtonStyle RestoreButtonStyle => ReadStruct<FButtonStyle>(0x558);
		
		/// <summary>
		/// Name: CloseButtonStyle
		/// Type: StructProperty
		/// Offset: 0x800
		/// Size: 0x2A8
		/// </summary>
		public FButtonStyle CloseButtonStyle => ReadStruct<FButtonStyle>(0x800);
		
		/// <summary>
		/// Name: TitleTextStyle
		/// Type: StructProperty
		/// Offset: 0xAA8
		/// Size: 0x150
		/// </summary>
		public FTextBlockStyle TitleTextStyle => ReadStruct<FTextBlockStyle>(0xAA8);
		
		/// <summary>
		/// Name: ActiveTitleBrush
		/// Type: StructProperty
		/// Offset: 0xBF8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush ActiveTitleBrush => ReadStruct<FSlateBrush>(0xBF8);
		
		/// <summary>
		/// Name: InactiveTitleBrush
		/// Type: StructProperty
		/// Offset: 0xC88
		/// Size: 0x90
		/// </summary>
		public FSlateBrush InactiveTitleBrush => ReadStruct<FSlateBrush>(0xC88);
		
		/// <summary>
		/// Name: FlashTitleBrush
		/// Type: StructProperty
		/// Offset: 0xD18
		/// Size: 0x90
		/// </summary>
		public FSlateBrush FlashTitleBrush => ReadStruct<FSlateBrush>(0xD18);
		
		/// <summary>
		/// Name: OutlineBrush
		/// Type: StructProperty
		/// Offset: 0xDA8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush OutlineBrush => ReadStruct<FSlateBrush>(0xDA8);
		
		/// <summary>
		/// Name: OutlineColor
		/// Type: StructProperty
		/// Offset: 0xE38
		/// Size: 0x28
		/// </summary>
		public FSlateColor OutlineColor => ReadStruct<FSlateColor>(0xE38);
		
		/// <summary>
		/// Name: BorderBrush
		/// Type: StructProperty
		/// Offset: 0xE60
		/// Size: 0x90
		/// </summary>
		public FSlateBrush BorderBrush => ReadStruct<FSlateBrush>(0xE60);
		
		/// <summary>
		/// Name: BackgroundBrush
		/// Type: StructProperty
		/// Offset: 0xEF0
		/// Size: 0x90
		/// </summary>
		public FSlateBrush BackgroundBrush => ReadStruct<FSlateBrush>(0xEF0);
		
		/// <summary>
		/// Name: ChildBackgroundBrush
		/// Type: StructProperty
		/// Offset: 0xF80
		/// Size: 0x90
		/// </summary>
		public FSlateBrush ChildBackgroundBrush => ReadStruct<FSlateBrush>(0xF80);
		
	}


	/// <summary>
	/// FScrollBorderStyle:FSlateWidgetStyle
	/// Size: 0x128
	/// Properties: 2
	/// </summary>
	public class FScrollBorderStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 296;
		/// <summary>
		/// Name: TopShadowBrush
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x90
		/// </summary>
		public FSlateBrush TopShadowBrush => ReadStruct<FSlateBrush>(0x08);
		
		/// <summary>
		/// Name: BottomShadowBrush
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x90
		/// </summary>
		public FSlateBrush BottomShadowBrush => ReadStruct<FSlateBrush>(0x98);
		
	}


	/// <summary>
	/// FScrollBoxStyle:FSlateWidgetStyle
	/// Size: 0x248
	/// Properties: 4
	/// </summary>
	public class FScrollBoxStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 584;
		/// <summary>
		/// Name: TopShadowBrush
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x90
		/// </summary>
		public FSlateBrush TopShadowBrush => ReadStruct<FSlateBrush>(0x08);
		
		/// <summary>
		/// Name: BottomShadowBrush
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x90
		/// </summary>
		public FSlateBrush BottomShadowBrush => ReadStruct<FSlateBrush>(0x98);
		
		/// <summary>
		/// Name: LeftShadowBrush
		/// Type: StructProperty
		/// Offset: 0x128
		/// Size: 0x90
		/// </summary>
		public FSlateBrush LeftShadowBrush => ReadStruct<FSlateBrush>(0x128);
		
		/// <summary>
		/// Name: RightShadowBrush
		/// Type: StructProperty
		/// Offset: 0x1B8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush RightShadowBrush => ReadStruct<FSlateBrush>(0x1B8);
		
	}


	/// <summary>
	/// FDockTabStyle:FSlateWidgetStyle
	/// Size: 0x6E0
	/// Properties: 11
	/// </summary>
	public class FDockTabStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 1760;
		/// <summary>
		/// Name: CloseButtonStyle
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x2A8
		/// </summary>
		public FButtonStyle CloseButtonStyle => ReadStruct<FButtonStyle>(0x08);
		
		/// <summary>
		/// Name: NormalBrush
		/// Type: StructProperty
		/// Offset: 0x2B0
		/// Size: 0x90
		/// </summary>
		public FSlateBrush NormalBrush => ReadStruct<FSlateBrush>(0x2B0);
		
		/// <summary>
		/// Name: ActiveBrush
		/// Type: StructProperty
		/// Offset: 0x340
		/// Size: 0x90
		/// </summary>
		public FSlateBrush ActiveBrush => ReadStruct<FSlateBrush>(0x340);
		
		/// <summary>
		/// Name: ColorOverlayBrush
		/// Type: StructProperty
		/// Offset: 0x3D0
		/// Size: 0x90
		/// </summary>
		public FSlateBrush ColorOverlayBrush => ReadStruct<FSlateBrush>(0x3D0);
		
		/// <summary>
		/// Name: ForegroundBrush
		/// Type: StructProperty
		/// Offset: 0x460
		/// Size: 0x90
		/// </summary>
		public FSlateBrush ForegroundBrush => ReadStruct<FSlateBrush>(0x460);
		
		/// <summary>
		/// Name: HoveredBrush
		/// Type: StructProperty
		/// Offset: 0x4F0
		/// Size: 0x90
		/// </summary>
		public FSlateBrush HoveredBrush => ReadStruct<FSlateBrush>(0x4F0);
		
		/// <summary>
		/// Name: ContentAreaBrush
		/// Type: StructProperty
		/// Offset: 0x580
		/// Size: 0x90
		/// </summary>
		public FSlateBrush ContentAreaBrush => ReadStruct<FSlateBrush>(0x580);
		
		/// <summary>
		/// Name: TabWellBrush
		/// Type: StructProperty
		/// Offset: 0x610
		/// Size: 0x90
		/// </summary>
		public FSlateBrush TabWellBrush => ReadStruct<FSlateBrush>(0x610);
		
		/// <summary>
		/// Name: TabPadding
		/// Type: StructProperty
		/// Offset: 0x6A0
		/// Size: 0x10
		/// </summary>
		public FMargin TabPadding => ReadStruct<FMargin>(0x6A0);
		
		/// <summary>
		/// Name: OverlapWidth
		/// Type: FloatProperty
		/// Offset: 0x6B0
		/// Size: 0x04
		/// </summary>
		public float OverlapWidth
		{
			get
			{
				return ReadSingle(0x6B0);
			}
			set
			{
				WriteSingle(0x6B0,value);
			}
		}
		
		/// <summary>
		/// Name: FlashColor
		/// Type: StructProperty
		/// Offset: 0x6B8
		/// Size: 0x28
		/// </summary>
		public FSlateColor FlashColor => ReadStruct<FSlateColor>(0x6B8);
		
	}


	/// <summary>
	/// FHeaderRowStyle:FSlateWidgetStyle
	/// Size: 0xC18
	/// Properties: 5
	/// </summary>
	public class FHeaderRowStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 3096;
		/// <summary>
		/// Name: ColumnStyle
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x518
		/// </summary>
		public FTableColumnHeaderStyle ColumnStyle => ReadStruct<FTableColumnHeaderStyle>(0x08);
		
		/// <summary>
		/// Name: LastColumnStyle
		/// Type: StructProperty
		/// Offset: 0x520
		/// Size: 0x518
		/// </summary>
		public FTableColumnHeaderStyle LastColumnStyle => ReadStruct<FTableColumnHeaderStyle>(0x520);
		
		/// <summary>
		/// Name: ColumnSplitterStyle
		/// Type: StructProperty
		/// Offset: 0xA38
		/// Size: 0x128
		/// </summary>
		public FSplitterStyle ColumnSplitterStyle => ReadStruct<FSplitterStyle>(0xA38);
		
		/// <summary>
		/// Name: BackgroundBrush
		/// Type: StructProperty
		/// Offset: 0xB60
		/// Size: 0x90
		/// </summary>
		public FSlateBrush BackgroundBrush => ReadStruct<FSlateBrush>(0xB60);
		
		/// <summary>
		/// Name: ForegroundColor
		/// Type: StructProperty
		/// Offset: 0xBF0
		/// Size: 0x28
		/// </summary>
		public FSlateColor ForegroundColor => ReadStruct<FSlateColor>(0xBF0);
		
	}


	/// <summary>
	/// FSplitterStyle:FSlateWidgetStyle
	/// Size: 0x128
	/// Properties: 2
	/// </summary>
	public class FSplitterStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 296;
		/// <summary>
		/// Name: HandleNormalBrush
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x90
		/// </summary>
		public FSlateBrush HandleNormalBrush => ReadStruct<FSlateBrush>(0x08);
		
		/// <summary>
		/// Name: HandleHighlightBrush
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x90
		/// </summary>
		public FSlateBrush HandleHighlightBrush => ReadStruct<FSlateBrush>(0x98);
		
	}


	/// <summary>
	/// FTableColumnHeaderStyle:FSlateWidgetStyle
	/// Size: 0x518
	/// Properties: 9
	/// </summary>
	public class FTableColumnHeaderStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 1304;
		/// <summary>
		/// Name: SortPrimaryAscendingImage
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x90
		/// </summary>
		public FSlateBrush SortPrimaryAscendingImage => ReadStruct<FSlateBrush>(0x08);
		
		/// <summary>
		/// Name: SortPrimaryDescendingImage
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x90
		/// </summary>
		public FSlateBrush SortPrimaryDescendingImage => ReadStruct<FSlateBrush>(0x98);
		
		/// <summary>
		/// Name: SortSecondaryAscendingImage
		/// Type: StructProperty
		/// Offset: 0x128
		/// Size: 0x90
		/// </summary>
		public FSlateBrush SortSecondaryAscendingImage => ReadStruct<FSlateBrush>(0x128);
		
		/// <summary>
		/// Name: SortSecondaryDescendingImage
		/// Type: StructProperty
		/// Offset: 0x1B8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush SortSecondaryDescendingImage => ReadStruct<FSlateBrush>(0x1B8);
		
		/// <summary>
		/// Name: NormalBrush
		/// Type: StructProperty
		/// Offset: 0x248
		/// Size: 0x90
		/// </summary>
		public FSlateBrush NormalBrush => ReadStruct<FSlateBrush>(0x248);
		
		/// <summary>
		/// Name: HoveredBrush
		/// Type: StructProperty
		/// Offset: 0x2D8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush HoveredBrush => ReadStruct<FSlateBrush>(0x2D8);
		
		/// <summary>
		/// Name: MenuDropdownImage
		/// Type: StructProperty
		/// Offset: 0x368
		/// Size: 0x90
		/// </summary>
		public FSlateBrush MenuDropdownImage => ReadStruct<FSlateBrush>(0x368);
		
		/// <summary>
		/// Name: MenuDropdownNormalBorderBrush
		/// Type: StructProperty
		/// Offset: 0x3F8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush MenuDropdownNormalBorderBrush => ReadStruct<FSlateBrush>(0x3F8);
		
		/// <summary>
		/// Name: MenuDropdownHoveredBorderBrush
		/// Type: StructProperty
		/// Offset: 0x488
		/// Size: 0x90
		/// </summary>
		public FSlateBrush MenuDropdownHoveredBorderBrush => ReadStruct<FSlateBrush>(0x488);
		
	}


	/// <summary>
	/// FTableRowStyle:FSlateWidgetStyle
	/// Size: 0x718
	/// Properties: 14
	/// </summary>
	public class FTableRowStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 1816;
		/// <summary>
		/// Name: SelectorFocusedBrush
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x90
		/// </summary>
		public FSlateBrush SelectorFocusedBrush => ReadStruct<FSlateBrush>(0x08);
		
		/// <summary>
		/// Name: ActiveHoveredBrush
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x90
		/// </summary>
		public FSlateBrush ActiveHoveredBrush => ReadStruct<FSlateBrush>(0x98);
		
		/// <summary>
		/// Name: ActiveBrush
		/// Type: StructProperty
		/// Offset: 0x128
		/// Size: 0x90
		/// </summary>
		public FSlateBrush ActiveBrush => ReadStruct<FSlateBrush>(0x128);
		
		/// <summary>
		/// Name: InactiveHoveredBrush
		/// Type: StructProperty
		/// Offset: 0x1B8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush InactiveHoveredBrush => ReadStruct<FSlateBrush>(0x1B8);
		
		/// <summary>
		/// Name: InactiveBrush
		/// Type: StructProperty
		/// Offset: 0x248
		/// Size: 0x90
		/// </summary>
		public FSlateBrush InactiveBrush => ReadStruct<FSlateBrush>(0x248);
		
		/// <summary>
		/// Name: EvenRowBackgroundHoveredBrush
		/// Type: StructProperty
		/// Offset: 0x2D8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush EvenRowBackgroundHoveredBrush => ReadStruct<FSlateBrush>(0x2D8);
		
		/// <summary>
		/// Name: EvenRowBackgroundBrush
		/// Type: StructProperty
		/// Offset: 0x368
		/// Size: 0x90
		/// </summary>
		public FSlateBrush EvenRowBackgroundBrush => ReadStruct<FSlateBrush>(0x368);
		
		/// <summary>
		/// Name: OddRowBackgroundHoveredBrush
		/// Type: StructProperty
		/// Offset: 0x3F8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush OddRowBackgroundHoveredBrush => ReadStruct<FSlateBrush>(0x3F8);
		
		/// <summary>
		/// Name: OddRowBackgroundBrush
		/// Type: StructProperty
		/// Offset: 0x488
		/// Size: 0x90
		/// </summary>
		public FSlateBrush OddRowBackgroundBrush => ReadStruct<FSlateBrush>(0x488);
		
		/// <summary>
		/// Name: TextColor
		/// Type: StructProperty
		/// Offset: 0x518
		/// Size: 0x28
		/// </summary>
		public FSlateColor TextColor => ReadStruct<FSlateColor>(0x518);
		
		/// <summary>
		/// Name: SelectedTextColor
		/// Type: StructProperty
		/// Offset: 0x540
		/// Size: 0x28
		/// </summary>
		public FSlateColor SelectedTextColor => ReadStruct<FSlateColor>(0x540);
		
		/// <summary>
		/// Name: DropIndicator_Above
		/// Type: StructProperty
		/// Offset: 0x568
		/// Size: 0x90
		/// </summary>
		public FSlateBrush DropIndicator_Above => ReadStruct<FSlateBrush>(0x568);
		
		/// <summary>
		/// Name: DropIndicator_Onto
		/// Type: StructProperty
		/// Offset: 0x5F8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush DropIndicator_Onto => ReadStruct<FSlateBrush>(0x5F8);
		
		/// <summary>
		/// Name: DropIndicator_Below
		/// Type: StructProperty
		/// Offset: 0x688
		/// Size: 0x90
		/// </summary>
		public FSlateBrush DropIndicator_Below => ReadStruct<FSlateBrush>(0x688);
		
	}


	/// <summary>
	/// FInlineTextImageStyle:FSlateWidgetStyle
	/// Size: 0xA0
	/// Properties: 2
	/// </summary>
	public class FInlineTextImageStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: Image
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x90
		/// </summary>
		public FSlateBrush Image => ReadStruct<FSlateBrush>(0x08);
		
		/// <summary>
		/// Name: Baseline
		/// Type: Int16Property
		/// Offset: 0x98
		/// Size: 0x02
		/// </summary>
		public short Baseline
		{
			get
			{
				return ReadInt16(0x98);
			}
			set
			{
				WriteInt16(0x98,value);
			}
		}
		
	}


	/// <summary>
	/// FVolumeControlStyle:FSlateWidgetStyle
	/// Size: 0x528
	/// Properties: 6
	/// </summary>
	public class FVolumeControlStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 1320;
		/// <summary>
		/// Name: SliderStyle
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x250
		/// </summary>
		public FSliderStyle SliderStyle => ReadStruct<FSliderStyle>(0x08);
		
		/// <summary>
		/// Name: HighVolumeImage
		/// Type: StructProperty
		/// Offset: 0x258
		/// Size: 0x90
		/// </summary>
		public FSlateBrush HighVolumeImage => ReadStruct<FSlateBrush>(0x258);
		
		/// <summary>
		/// Name: MidVolumeImage
		/// Type: StructProperty
		/// Offset: 0x2E8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush MidVolumeImage => ReadStruct<FSlateBrush>(0x2E8);
		
		/// <summary>
		/// Name: LowVolumeImage
		/// Type: StructProperty
		/// Offset: 0x378
		/// Size: 0x90
		/// </summary>
		public FSlateBrush LowVolumeImage => ReadStruct<FSlateBrush>(0x378);
		
		/// <summary>
		/// Name: NoVolumeImage
		/// Type: StructProperty
		/// Offset: 0x408
		/// Size: 0x90
		/// </summary>
		public FSlateBrush NoVolumeImage => ReadStruct<FSlateBrush>(0x408);
		
		/// <summary>
		/// Name: MutedImage
		/// Type: StructProperty
		/// Offset: 0x498
		/// Size: 0x90
		/// </summary>
		public FSlateBrush MutedImage => ReadStruct<FSlateBrush>(0x498);
		
	}


	/// <summary>
	/// FSliderStyle:FSlateWidgetStyle
	/// Size: 0x250
	/// Properties: 5
	/// </summary>
	public class FSliderStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 592;
		/// <summary>
		/// Name: NormalBarImage
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x90
		/// </summary>
		public FSlateBrush NormalBarImage => ReadStruct<FSlateBrush>(0x08);
		
		/// <summary>
		/// Name: DisabledBarImage
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x90
		/// </summary>
		public FSlateBrush DisabledBarImage => ReadStruct<FSlateBrush>(0x98);
		
		/// <summary>
		/// Name: NormalThumbImage
		/// Type: StructProperty
		/// Offset: 0x128
		/// Size: 0x90
		/// </summary>
		public FSlateBrush NormalThumbImage => ReadStruct<FSlateBrush>(0x128);
		
		/// <summary>
		/// Name: DisabledThumbImage
		/// Type: StructProperty
		/// Offset: 0x1B8
		/// Size: 0x90
		/// </summary>
		public FSlateBrush DisabledThumbImage => ReadStruct<FSlateBrush>(0x1B8);
		
		/// <summary>
		/// Name: BarThickness
		/// Type: FloatProperty
		/// Offset: 0x248
		/// Size: 0x04
		/// </summary>
		public float BarThickness
		{
			get
			{
				return ReadSingle(0x248);
			}
			set
			{
				WriteSingle(0x248,value);
			}
		}
		
	}


	/// <summary>
	/// FSearchBoxStyle:FSlateWidgetStyle
	/// Size: 0xAE8
	/// Properties: 8
	/// </summary>
	public class FSearchBoxStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 2792;
		/// <summary>
		/// Name: TextBoxStyle
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x848
		/// </summary>
		public FEditableTextBoxStyle TextBoxStyle => ReadStruct<FEditableTextBoxStyle>(0x08);
		
		/// <summary>
		/// Name: ActiveFontInfo
		/// Type: StructProperty
		/// Offset: 0x850
		/// Size: 0x40
		/// </summary>
		public FSlateFontInfo ActiveFontInfo => ReadStruct<FSlateFontInfo>(0x850);
		
		/// <summary>
		/// Name: UpArrowImage
		/// Type: StructProperty
		/// Offset: 0x890
		/// Size: 0x90
		/// </summary>
		public FSlateBrush UpArrowImage => ReadStruct<FSlateBrush>(0x890);
		
		/// <summary>
		/// Name: DownArrowImage
		/// Type: StructProperty
		/// Offset: 0x920
		/// Size: 0x90
		/// </summary>
		public FSlateBrush DownArrowImage => ReadStruct<FSlateBrush>(0x920);
		
		/// <summary>
		/// Name: GlassImage
		/// Type: StructProperty
		/// Offset: 0x9B0
		/// Size: 0x90
		/// </summary>
		public FSlateBrush GlassImage => ReadStruct<FSlateBrush>(0x9B0);
		
		/// <summary>
		/// Name: ClearImage
		/// Type: StructProperty
		/// Offset: 0xA40
		/// Size: 0x90
		/// </summary>
		public FSlateBrush ClearImage => ReadStruct<FSlateBrush>(0xA40);
		
		/// <summary>
		/// Name: ImagePadding
		/// Type: StructProperty
		/// Offset: 0xAD0
		/// Size: 0x10
		/// </summary>
		public FMargin ImagePadding => ReadStruct<FMargin>(0xAD0);
		
		/// <summary>
		/// Name: bLeftAlignButtons
		/// Type: BoolProperty
		/// Offset: 0xAE0
		/// Size: 0x01
		/// </summary>
		public bool bLeftAlignButtons
		{
			get
			{
				return ReadBool(0xAE0);
			}
			set
			{
				WriteBool(0xAE0,value);
			}
		}
		
	}


	/// <summary>
	/// FExpandableAreaStyle:FSlateWidgetStyle
	/// Size: 0x128
	/// Properties: 2
	/// </summary>
	public class FExpandableAreaStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 296;
		/// <summary>
		/// Name: CollapsedImage
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x90
		/// </summary>
		public FSlateBrush CollapsedImage => ReadStruct<FSlateBrush>(0x08);
		
		/// <summary>
		/// Name: ExpandedImage
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x90
		/// </summary>
		public FSlateBrush ExpandedImage => ReadStruct<FSlateBrush>(0x98);
		
	}


	/// <summary>
	/// FInlineEditableTextBlockStyle:FSlateWidgetStyle
	/// Size: 0x9A0
	/// Properties: 2
	/// </summary>
	public class FInlineEditableTextBlockStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 2464;
		/// <summary>
		/// Name: EditableTextBoxStyle
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x848
		/// </summary>
		public FEditableTextBoxStyle EditableTextBoxStyle => ReadStruct<FEditableTextBoxStyle>(0x08);
		
		/// <summary>
		/// Name: TextStyle
		/// Type: StructProperty
		/// Offset: 0x850
		/// Size: 0x150
		/// </summary>
		public FTextBlockStyle TextStyle => ReadStruct<FTextBlockStyle>(0x850);
		
	}


	/// <summary>
	/// FHyperlinkStyle:FSlateWidgetStyle
	/// Size: 0x410
	/// Properties: 3
	/// </summary>
	public class FHyperlinkStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 1040;
		/// <summary>
		/// Name: UnderlineStyle
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x2A8
		/// </summary>
		public FButtonStyle UnderlineStyle => ReadStruct<FButtonStyle>(0x08);
		
		/// <summary>
		/// Name: TextStyle
		/// Type: StructProperty
		/// Offset: 0x2B0
		/// Size: 0x150
		/// </summary>
		public FTextBlockStyle TextStyle => ReadStruct<FTextBlockStyle>(0x2B0);
		
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x400
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x400);
		
	}


	/// <summary>
	/// FCheckBoxStyle:FSlateWidgetStyle
	/// Size: 0x5E0
	/// Properties: 19
	/// </summary>
	public class FCheckBoxStyle:FSlateWidgetStyle
	{
		public override int ObjectSize => 1504;
		/// <summary>
		/// Name: CheckBoxType
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte CheckBoxType
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: UnCheckedImage
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x90
		/// </summary>
		public FSlateBrush UnCheckedImage => ReadStruct<FSlateBrush>(0x10);
		
		/// <summary>
		/// Name: UnCheckedHoveredImage
		/// Type: StructProperty
		/// Offset: 0xA0
		/// Size: 0x90
		/// </summary>
		public FSlateBrush UnCheckedHoveredImage => ReadStruct<FSlateBrush>(0xA0);
		
		/// <summary>
		/// Name: UnCheckedPressedImage
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x90
		/// </summary>
		public FSlateBrush UnCheckedPressedImage => ReadStruct<FSlateBrush>(0x130);
		
		/// <summary>
		/// Name: CheckedImage
		/// Type: StructProperty
		/// Offset: 0x1C0
		/// Size: 0x90
		/// </summary>
		public FSlateBrush CheckedImage => ReadStruct<FSlateBrush>(0x1C0);
		
		/// <summary>
		/// Name: CheckedHoveredImage
		/// Type: StructProperty
		/// Offset: 0x250
		/// Size: 0x90
		/// </summary>
		public FSlateBrush CheckedHoveredImage => ReadStruct<FSlateBrush>(0x250);
		
		/// <summary>
		/// Name: CheckedPressedImage
		/// Type: StructProperty
		/// Offset: 0x2E0
		/// Size: 0x90
		/// </summary>
		public FSlateBrush CheckedPressedImage => ReadStruct<FSlateBrush>(0x2E0);
		
		/// <summary>
		/// Name: UndeterminedImage
		/// Type: StructProperty
		/// Offset: 0x370
		/// Size: 0x90
		/// </summary>
		public FSlateBrush UndeterminedImage => ReadStruct<FSlateBrush>(0x370);
		
		/// <summary>
		/// Name: UndeterminedHoveredImage
		/// Type: StructProperty
		/// Offset: 0x400
		/// Size: 0x90
		/// </summary>
		public FSlateBrush UndeterminedHoveredImage => ReadStruct<FSlateBrush>(0x400);
		
		/// <summary>
		/// Name: UndeterminedPressedImage
		/// Type: StructProperty
		/// Offset: 0x490
		/// Size: 0x90
		/// </summary>
		public FSlateBrush UndeterminedPressedImage => ReadStruct<FSlateBrush>(0x490);
		
		/// <summary>
		/// Name: Padding
		/// Type: StructProperty
		/// Offset: 0x520
		/// Size: 0x10
		/// </summary>
		public FMargin Padding => ReadStruct<FMargin>(0x520);
		
		/// <summary>
		/// Name: ForegroundColor
		/// Type: StructProperty
		/// Offset: 0x530
		/// Size: 0x28
		/// </summary>
		public FSlateColor ForegroundColor => ReadStruct<FSlateColor>(0x530);
		
		/// <summary>
		/// Name: BorderBackgroundColor
		/// Type: StructProperty
		/// Offset: 0x558
		/// Size: 0x28
		/// </summary>
		public FSlateColor BorderBackgroundColor => ReadStruct<FSlateColor>(0x558);
		
		/// <summary>
		/// Name: CheckedSlateSound
		/// Type: StructProperty
		/// Offset: 0x580
		/// Size: 0x18
		/// </summary>
		public FSlateSound CheckedSlateSound => ReadStruct<FSlateSound>(0x580);
		
		/// <summary>
		/// Name: UnCheckedSlateSound
		/// Type: StructProperty
		/// Offset: 0x598
		/// Size: 0x18
		/// </summary>
		public FSlateSound UnCheckedSlateSound => ReadStruct<FSlateSound>(0x598);
		
		/// <summary>
		/// Name: HoveredSlateSound
		/// Type: StructProperty
		/// Offset: 0x5B0
		/// Size: 0x18
		/// </summary>
		public FSlateSound HoveredSlateSound => ReadStruct<FSlateSound>(0x5B0);
		
		/// <summary>
		/// Name: CheckedSound
		/// Type: NameProperty
		/// Offset: 0x5C8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: UnCheckedSound
		/// Type: NameProperty
		/// Offset: 0x5D0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: HoveredSound
		/// Type: NameProperty
		/// Offset: 0x5D8
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FNavigationEvent:FInputEvent
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class FNavigationEvent:FInputEvent
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// FWidgetSnapshotResponse:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FWidgetSnapshotResponse:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: SnapshotRequestId
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FGuid SnapshotRequestId => ReadStruct<FGuid>(0x00);
		
		/// <summary>
		/// Name: SnapshotData
		/// Type: TArray<>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FWidgetSnapshotRequest:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FWidgetSnapshotRequest:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: TargetInstanceId
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FGuid TargetInstanceId => ReadStruct<FGuid>(0x00);
		
		/// <summary>
		/// Name: SnapshotRequestId
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FGuid SnapshotRequestId => ReadStruct<FGuid>(0x10);
		
	}


	/// <summary>
	/// FMaterialQualityOverrides:
	/// Size: 0x05
	/// Properties: 5
	/// </summary>
	public class FMaterialQualityOverrides:MemoryObject
	{
		public override int ObjectSize => 5;
		/// <summary>
		/// Name: bEnableOverride
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bEnableOverride
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: bForceFullyRough
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bForceFullyRough
		{
			get
			{
				return ReadBool(0x01);
			}
			set
			{
				WriteBool(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: bForceNonMetal
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bForceNonMetal
		{
			get
			{
				return ReadBool(0x02);
			}
			set
			{
				WriteBool(0x02,value);
			}
		}
		
		/// <summary>
		/// Name: bForceDisableLMDirectionality
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bForceDisableLMDirectionality
		{
			get
			{
				return ReadBool(0x03);
			}
			set
			{
				WriteBool(0x03,value);
			}
		}
		
		/// <summary>
		/// Name: bForceLQReflections
		/// Type: BoolProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public bool bForceLQReflections
		{
			get
			{
				return ReadBool(0x04);
			}
			set
			{
				WriteBool(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FShaderQualityOverridesListItem:
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FShaderQualityOverridesListItem:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: RangeName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString RangeName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: QualityProperty
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UBoolProperty QualityProperty => ReadUObject<UBoolProperty>(0x10);
		
		/// <summary>
		/// Name: SettingContainer
		/// Type: ObjectProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		public UShaderPlatformQualitySettings SettingContainer => ReadUObject<UShaderPlatformQualitySettings>(0x18);
		
	}


	/// <summary>
	/// FFoliageVertexColorChannelMask:
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FFoliageVertexColorChannelMask:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: UseMask
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool UseMask => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: MaskThreshold
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float MaskThreshold
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: InvertMask
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool InvertMask => (ReadByte(0x0008) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// FProceduralFoliageInstance:
	/// Size: 0x60
	/// Properties: 6
	/// </summary>
	public class FProceduralFoliageInstance:MemoryObject
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Location => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FQuat Rotation => ReadStruct<FQuat>(0x10);
		
		/// <summary>
		/// Name: Normal
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x0C
		/// </summary>
		public FVector Normal => ReadStruct<FVector>(0x20);
		
		/// <summary>
		/// Name: Age
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float Age
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: Scale
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float Scale
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: Type
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UFoliageType_InstancedStaticMesh Type => ReadUObject<UFoliageType_InstancedStaticMesh>(0x38);
		
	}


	/// <summary>
	/// FFoliageTypeObject:
	/// Size: 0x20
	/// Properties: 4
	/// </summary>
	public class FFoliageTypeObject:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: FoliageTypeObject
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UObject FoliageTypeObject => ReadUObject<UObject>(0x00);
		
		/// <summary>
		/// Name: TypeInstance
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UFoliageType_InstancedStaticMesh TypeInstance => ReadUObject<UFoliageType_InstancedStaticMesh>(0x08);
		
		/// <summary>
		/// Name: bIsAsset
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bIsAsset
		{
			get
			{
				return ReadBool(0x10);
			}
			set
			{
				WriteBool(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: Type
		/// Type: ClassProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FGrassVariety:
	/// Size: 0x40
	/// Properties: 14
	/// </summary>
	public class FGrassVariety:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: GrassMesh
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UStaticMesh GrassMesh => ReadUObject<UStaticMesh>(0x00);
		
		/// <summary>
		/// Name: GrassDensity
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float GrassDensity
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: bUseGrid
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bUseGrid
		{
			get
			{
				return ReadBool(0x0C);
			}
			set
			{
				WriteBool(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: PlacementJitter
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float PlacementJitter
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: StartCullDistance
		/// Type: IntProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public int StartCullDistance
		{
			get
			{
				return ReadInt32(0x14);
			}
			set
			{
				WriteInt32(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: EndCullDistance
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int EndCullDistance
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: MinLOD
		/// Type: IntProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public int MinLOD
		{
			get
			{
				return ReadInt32(0x1C);
			}
			set
			{
				WriteInt32(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: Scaling
		/// Type: ByteProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public byte Scaling
		{
			get
			{
				return ReadByte(0x20);
			}
			set
			{
				WriteByte(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: ScaleX
		/// Type: StructProperty
		/// Offset: 0x24
		/// Size: 0x08
		/// </summary>
		public FFloatInterval ScaleX => ReadStruct<FFloatInterval>(0x24);
		
		/// <summary>
		/// Name: ScaleY
		/// Type: StructProperty
		/// Offset: 0x2C
		/// Size: 0x08
		/// </summary>
		public FFloatInterval ScaleY => ReadStruct<FFloatInterval>(0x2C);
		
		/// <summary>
		/// Name: ScaleZ
		/// Type: StructProperty
		/// Offset: 0x34
		/// Size: 0x08
		/// </summary>
		public FFloatInterval ScaleZ => ReadStruct<FFloatInterval>(0x34);
		
		/// <summary>
		/// Name: RandomRotation
		/// Type: BoolProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public bool RandomRotation
		{
			get
			{
				return ReadBool(0x3C);
			}
			set
			{
				WriteBool(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: AlignToSurface
		/// Type: BoolProperty
		/// Offset: 0x3D
		/// Size: 0x01
		/// </summary>
		public bool AlignToSurface
		{
			get
			{
				return ReadBool(0x3D);
			}
			set
			{
				WriteBool(0x3D,value);
			}
		}
		
		/// <summary>
		/// Name: bUseLandscapeLightmap
		/// Type: BoolProperty
		/// Offset: 0x3E
		/// Size: 0x01
		/// </summary>
		public bool bUseLandscapeLightmap
		{
			get
			{
				return ReadBool(0x3E);
			}
			set
			{
				WriteBool(0x3E,value);
			}
		}
		
	}


	/// <summary>
	/// FWeightmapLayerAllocationInfo:
	/// Size: 0x10
	/// Properties: 4
	/// </summary>
	public class FWeightmapLayerAllocationInfo:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: LayerInfo
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public ULandscapeLayerInfoObject LayerInfo => ReadUObject<ULandscapeLayerInfoObject>(0x00);
		
		/// <summary>
		/// Name: WeightmapTextureIndex
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte WeightmapTextureIndex
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: WeightmapTextureChannel
		/// Type: ByteProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public byte WeightmapTextureChannel
		{
			get
			{
				return ReadByte(0x09);
			}
			set
			{
				WriteByte(0x09,value);
			}
		}
		
		/// <summary>
		/// Name: GrassMapChannelIndex
		/// Type: ByteProperty
		/// Offset: 0x0A
		/// Size: 0x01
		/// </summary>
		public byte GrassMapChannelIndex
		{
			get
			{
				return ReadByte(0x0A);
			}
			set
			{
				WriteByte(0x0A,value);
			}
		}
		
	}


	/// <summary>
	/// FGizmoSelectData:
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class FGizmoSelectData:MemoryObject
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// FLandscapeInfoLayerSettings:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FLandscapeInfoLayerSettings:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: LayerInfoObj
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public ULandscapeLayerInfoObject LayerInfoObj => ReadUObject<ULandscapeLayerInfoObject>(0x00);
		
		/// <summary>
		/// Name: LayerName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FLandscapeImportLayerInfo:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FLandscapeImportLayerInfo:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FLandscapeLayerStruct:
	/// Size: 0x08
	/// Properties: 1
	/// </summary>
	public class FLandscapeLayerStruct:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: LayerInfoObj
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public ULandscapeLayerInfoObject LayerInfoObj => ReadUObject<ULandscapeLayerInfoObject>(0x00);
		
	}


	/// <summary>
	/// FLandscapeEditorLayerSettings:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FLandscapeEditorLayerSettings:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FLandscapeWeightmapUsage:
	/// Size: 0x20
	/// Properties: 1
	/// </summary>
	public class FLandscapeWeightmapUsage:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: ChannelUsage
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public ULandscapeComponent ChannelUsage => ReadUObject<ULandscapeComponent>(0x00);
		
	}


	/// <summary>
	/// FLandscapeSplineMeshEntry:
	/// Size: 0x38
	/// Properties: 9
	/// </summary>
	public class FLandscapeSplineMeshEntry:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Mesh
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UStaticMesh Mesh => ReadUObject<UStaticMesh>(0x00);
		
		/// <summary>
		/// Name: MaterialOverrides
		/// Type: TArray<UMaterialInterface>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x58
		/// </summary>
		public TArray<UMaterialInterface> MaterialOverrides => new TArray<UMaterialInterface>(BaseAddress+0x08);
		
		/// <summary>
		/// Name: bCenterH
		/// Type: BoolProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public bool bCenterH => (ReadByte(0x0018) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CenterAdjust
		/// Type: StructProperty
		/// Offset: 0x1C
		/// Size: 0x08
		/// </summary>
		public FVector2D CenterAdjust => ReadStruct<FVector2D>(0x1C);
		
		/// <summary>
		/// Name: bScaleToWidth
		/// Type: BoolProperty
		/// Offset: 0x24
		/// Size: 0x01
		/// </summary>
		public bool bScaleToWidth => (ReadByte(0x0024) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Scale
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x0C
		/// </summary>
		public FVector Scale => ReadStruct<FVector>(0x28);
		
		/// <summary>
		/// Name: Orientation
		/// Type: ByteProperty
		/// Offset: 0x34
		/// Size: 0x01
		/// </summary>
		public byte Orientation
		{
			get
			{
				return ReadByte(0x34);
			}
			set
			{
				WriteByte(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: ForwardAxis
		/// Type: ByteProperty
		/// Offset: 0x35
		/// Size: 0x01
		/// </summary>
		public byte ForwardAxis
		{
			get
			{
				return ReadByte(0x35);
			}
			set
			{
				WriteByte(0x35,value);
			}
		}
		
		/// <summary>
		/// Name: UpAxis
		/// Type: ByteProperty
		/// Offset: 0x36
		/// Size: 0x01
		/// </summary>
		public byte UpAxis
		{
			get
			{
				return ReadByte(0x36);
			}
			set
			{
				WriteByte(0x36,value);
			}
		}
		
	}


	/// <summary>
	/// FLandscapeSplineSegmentConnection:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FLandscapeSplineSegmentConnection:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: ControlPoint
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public ULandscapeSplineControlPoint ControlPoint => ReadUObject<ULandscapeSplineControlPoint>(0x00);
		
		/// <summary>
		/// Name: TangentLen
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float TangentLen
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: SocketName
		/// Type: NameProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FLandscapeSplineInterpPoint:
	/// Size: 0x40
	/// Properties: 6
	/// </summary>
	public class FLandscapeSplineInterpPoint:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Center
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Center => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: Left
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector Left => ReadStruct<FVector>(0x0C);
		
		/// <summary>
		/// Name: Right
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x0C
		/// </summary>
		public FVector Right => ReadStruct<FVector>(0x18);
		
		/// <summary>
		/// Name: FalloffLeft
		/// Type: StructProperty
		/// Offset: 0x24
		/// Size: 0x0C
		/// </summary>
		public FVector FalloffLeft => ReadStruct<FVector>(0x24);
		
		/// <summary>
		/// Name: FalloffRight
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x0C
		/// </summary>
		public FVector FalloffRight => ReadStruct<FVector>(0x30);
		
		/// <summary>
		/// Name: StartEndFalloff
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float StartEndFalloff
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
	}


	/// <summary>
	/// FLandscapeSplineConnection:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FLandscapeSplineConnection:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Segment
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public ULandscapeSplineSegment Segment => ReadUObject<ULandscapeSplineSegment>(0x00);
		
		/// <summary>
		/// Name: End
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool End => (ReadByte(0x0008) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// FForeignWorldSplineData:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FForeignWorldSplineData:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FForeignSplineSegmentData:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FForeignSplineSegmentData:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FForeignControlPointData:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FForeignControlPointData:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FGrassInput:
	/// Size: 0x48
	/// Properties: 3
	/// </summary>
	public class FGrassInput:MemoryObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: GrassType
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public ULandscapeGrassType GrassType => ReadUObject<ULandscapeGrassType>(0x08);
		
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x10);
		
	}


	/// <summary>
	/// FLayerBlendInput:
	/// Size: 0x98
	/// Properties: 7
	/// </summary>
	public class FLayerBlendInput:MemoryObject
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: LayerName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: BlendType
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte BlendType
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: LayerInput
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x38
		/// </summary>
		public FExpressionInput LayerInput => ReadStruct<FExpressionInput>(0x10);
		
		/// <summary>
		/// Name: HeightInput
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x38
		/// </summary>
		public FExpressionInput HeightInput => ReadStruct<FExpressionInput>(0x48);
		
		/// <summary>
		/// Name: PreviewWeight
		/// Type: FloatProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public float PreviewWeight
		{
			get
			{
				return ReadSingle(0x80);
			}
			set
			{
				WriteSingle(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: ConstLayerInput
		/// Type: StructProperty
		/// Offset: 0x84
		/// Size: 0x0C
		/// </summary>
		public FVector ConstLayerInput => ReadStruct<FVector>(0x84);
		
		/// <summary>
		/// Name: ConstHeightInput
		/// Type: FloatProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public float ConstHeightInput
		{
			get
			{
				return ReadSingle(0x90);
			}
			set
			{
				WriteSingle(0x90,value);
			}
		}
		
	}


	/// <summary>
	/// FMovieSceneBinding:
	/// Size: 0x30
	/// Properties: 3
	/// </summary>
	public class FMovieSceneBinding:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: ObjectGuid
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FGuid ObjectGuid => ReadStruct<FGuid>(0x00);
		
		/// <summary>
		/// Name: BindingName
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString BindingName => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: Tracks
		/// Type: TArray<UMovieSceneTrack>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UMovieSceneTrack> Tracks => new TArray<UMovieSceneTrack>(BaseAddress+0x20);
		
	}


	/// <summary>
	/// FMovieScenePossessable:
	/// Size: 0x38
	/// Properties: 4
	/// </summary>
	public class FMovieScenePossessable:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Guid
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FGuid Guid => ReadStruct<FGuid>(0x00);
		
		/// <summary>
		/// Name: Name
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString Name => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: PossessedObjectClass
		/// Type: ClassProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ParentGuid
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FGuid ParentGuid => ReadStruct<FGuid>(0x28);
		
	}


	/// <summary>
	/// FMovieSceneSpawnable:
	/// Size: 0x40
	/// Properties: 5
	/// </summary>
	public class FMovieSceneSpawnable:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Guid
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FGuid Guid => ReadStruct<FGuid>(0x00);
		
		/// <summary>
		/// Name: Name
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString Name => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: ObjectTemplate
		/// Type: ObjectProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public UObject ObjectTemplate => ReadUObject<UObject>(0x20);
		
		/// <summary>
		/// Name: ChildPossessables
		/// Type: TArray<FGuid>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FGuid> ChildPossessables => new TArray<FGuid>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: Ownership
		/// Type: ByteProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public byte Ownership
		{
			get
			{
				return ReadByte(0x38);
			}
			set
			{
				WriteByte(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// FMovieSceneTrackLabels:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FMovieSceneTrackLabels:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Strings
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FMovieSceneEditorData:
	/// Size: 0x70
	/// Properties: 3
	/// </summary>
	public class FMovieSceneEditorData:MemoryObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: ExpansionStates
		/// Type: MapProperty
		/// Offset: 0x00
		/// Size: 0x50
		/// </summary>
		
		/// <summary>
		/// Name: WorkingRange
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FFloatRange WorkingRange => ReadStruct<FFloatRange>(0x50);
		
		/// <summary>
		/// Name: ViewRange
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x10
		/// </summary>
		public FFloatRange ViewRange => ReadStruct<FFloatRange>(0x60);
		
	}


	/// <summary>
	/// FMovieSceneExpansionState:
	/// Size: 0x01
	/// Properties: 1
	/// </summary>
	public class FMovieSceneExpansionState:MemoryObject
	{
		public override int ObjectSize => 1;
		/// <summary>
		/// Name: bExpanded
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bExpanded
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
	}


	/// <summary>
	/// FMovieSceneKeyStruct:
	/// Size: 0x08
	/// Properties: 0
	/// </summary>
	public class FMovieSceneKeyStruct:MemoryObject
	{
		public override int ObjectSize => 8;
	}


	/// <summary>
	/// FMovieScene3DTransformKeyStruct:FMovieSceneKeyStruct
	/// Size: 0x78
	/// Properties: 3
	/// </summary>
	public class FMovieScene3DTransformKeyStruct:FMovieSceneKeyStruct
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x0C
		/// </summary>
		public FVector Location => ReadStruct<FVector>(0x08);
		
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x0C
		/// </summary>
		public FRotator Rotation => ReadStruct<FRotator>(0x14);
		
		/// <summary>
		/// Name: Scale
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x0C
		/// </summary>
		public FVector Scale => ReadStruct<FVector>(0x20);
		
	}


	/// <summary>
	/// FMovieScene3DScaleKeyStruct:FMovieSceneKeyStruct
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class FMovieScene3DScaleKeyStruct:FMovieSceneKeyStruct
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: Scale
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x0C
		/// </summary>
		public FVector Scale => ReadStruct<FVector>(0x08);
		
	}


	/// <summary>
	/// FMovieScene3DRotationKeyStruct:FMovieSceneKeyStruct
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class FMovieScene3DRotationKeyStruct:FMovieSceneKeyStruct
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x0C
		/// </summary>
		public FRotator Rotation => ReadStruct<FRotator>(0x08);
		
	}


	/// <summary>
	/// FMovieScene3DLocationKeyStruct:FMovieSceneKeyStruct
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class FMovieScene3DLocationKeyStruct:FMovieSceneKeyStruct
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x0C
		/// </summary>
		public FVector Location => ReadStruct<FVector>(0x08);
		
	}


	/// <summary>
	/// FMovieSceneColorKeyStruct:FMovieSceneKeyStruct
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class FMovieSceneColorKeyStruct:FMovieSceneKeyStruct
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Color
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FLinearColor Color => ReadStruct<FLinearColor>(0x08);
		
	}


	/// <summary>
	/// FColorParameterNameAndCurves:
	/// Size: 0x1F0
	/// Properties: 6
	/// </summary>
	public class FColorParameterNameAndCurves:MemoryObject
	{
		public override int ObjectSize => 496;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Index
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int Index
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: RedCurve
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x78
		/// </summary>
		public FRichCurve RedCurve => ReadStruct<FRichCurve>(0x10);
		
		/// <summary>
		/// Name: GreenCurve
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0x78
		/// </summary>
		public FRichCurve GreenCurve => ReadStruct<FRichCurve>(0x88);
		
		/// <summary>
		/// Name: BlueCurve
		/// Type: StructProperty
		/// Offset: 0x100
		/// Size: 0x78
		/// </summary>
		public FRichCurve BlueCurve => ReadStruct<FRichCurve>(0x100);
		
		/// <summary>
		/// Name: AlphaCurve
		/// Type: StructProperty
		/// Offset: 0x178
		/// Size: 0x78
		/// </summary>
		public FRichCurve AlphaCurve => ReadStruct<FRichCurve>(0x178);
		
	}


	/// <summary>
	/// FRichCurve:FIndexedCurve
	/// Size: 0x78
	/// Properties: 4
	/// </summary>
	public class FRichCurve:FIndexedCurve
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: PreInfinityExtrap
		/// Type: ByteProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public byte PreInfinityExtrap
		{
			get
			{
				return ReadByte(0x58);
			}
			set
			{
				WriteByte(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: PostInfinityExtrap
		/// Type: ByteProperty
		/// Offset: 0x59
		/// Size: 0x01
		/// </summary>
		public byte PostInfinityExtrap
		{
			get
			{
				return ReadByte(0x59);
			}
			set
			{
				WriteByte(0x59,value);
			}
		}
		
		/// <summary>
		/// Name: Keys
		/// Type: TArray<FRichCurveKey>
		/// Offset: 0x60
		/// Size: 0x10
		/// SubElement Size: 0x1C
		/// </summary>
		public TArray<FRichCurveKey> Keys => new TArray<FRichCurveKey>(BaseAddress+0x60);
		
		/// <summary>
		/// Name: DefaultValue
		/// Type: FloatProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public float DefaultValue
		{
			get
			{
				return ReadSingle(0x70);
			}
			set
			{
				WriteSingle(0x70,value);
			}
		}
		
	}


	/// <summary>
	/// FIndexedCurve:
	/// Size: 0x58
	/// Properties: 1
	/// </summary>
	public class FIndexedCurve:MemoryObject
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: KeyHandlesToIndices
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x50
		/// </summary>
		public FKeyHandleMap KeyHandlesToIndices => ReadStruct<FKeyHandleMap>(0x08);
		
	}


	/// <summary>
	/// FKeyHandleMap:
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class FKeyHandleMap:MemoryObject
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// FRichCurveKey:
	/// Size: 0x1C
	/// Properties: 9
	/// </summary>
	public class FRichCurveKey:MemoryObject
	{
		public override int ObjectSize => 28;
		/// <summary>
		/// Name: InterpMode
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte InterpMode
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: TangentMode
		/// Type: ByteProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public byte TangentMode
		{
			get
			{
				return ReadByte(0x01);
			}
			set
			{
				WriteByte(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: TangentWeightMode
		/// Type: ByteProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public byte TangentWeightMode
		{
			get
			{
				return ReadByte(0x02);
			}
			set
			{
				WriteByte(0x02,value);
			}
		}
		
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Value
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Value
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: ArriveTangent
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float ArriveTangent
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: ArriveTangentWeight
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float ArriveTangentWeight
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: LeaveTangent
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float LeaveTangent
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: LeaveTangentWeight
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float LeaveTangentWeight
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FVectorParameterNameAndCurves:
	/// Size: 0x178
	/// Properties: 5
	/// </summary>
	public class FVectorParameterNameAndCurves:MemoryObject
	{
		public override int ObjectSize => 376;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Index
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int Index
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: XCurve
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x78
		/// </summary>
		public FRichCurve XCurve => ReadStruct<FRichCurve>(0x10);
		
		/// <summary>
		/// Name: YCurve
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0x78
		/// </summary>
		public FRichCurve YCurve => ReadStruct<FRichCurve>(0x88);
		
		/// <summary>
		/// Name: ZCurve
		/// Type: StructProperty
		/// Offset: 0x100
		/// Size: 0x78
		/// </summary>
		public FRichCurve ZCurve => ReadStruct<FRichCurve>(0x100);
		
	}


	/// <summary>
	/// FScalarParameterNameAndCurve:
	/// Size: 0x88
	/// Properties: 3
	/// </summary>
	public class FScalarParameterNameAndCurve:MemoryObject
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Index
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int Index
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: ParameterCurve
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x78
		/// </summary>
		public FRichCurve ParameterCurve => ReadStruct<FRichCurve>(0x10);
		
	}


	/// <summary>
	/// FMovieSceneVectorKeyStruct:FMovieSceneKeyStruct
	/// Size: 0x40
	/// Properties: 1
	/// </summary>
	public class FMovieSceneVectorKeyStruct:FMovieSceneKeyStruct
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Vector
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FVector4 Vector => ReadStruct<FVector4>(0x10);
		
	}


	/// <summary>
	/// FDynamicPropertyPath:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FDynamicPropertyPath:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Segments
		/// Type: TArray<FPropertyPathSegment>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FPropertyPathSegment> Segments => new TArray<FPropertyPathSegment>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FPropertyPathSegment:
	/// Size: 0x20
	/// Properties: 4
	/// </summary>
	public class FPropertyPathSegment:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ArrayIndex
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int ArrayIndex
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: Struct
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UStruct Struct => ReadUObject<UStruct>(0x10);
		
		/// <summary>
		/// Name: Field
		/// Type: ObjectProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		public UField Field => ReadUObject<UField>(0x18);
		
	}


	/// <summary>
	/// FSlateChildSize:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FSlateChildSize:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Value
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Value
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: SizeRule
		/// Type: ByteProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public byte SizeRule
		{
			get
			{
				return ReadByte(0x04);
			}
			set
			{
				WriteByte(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FSlateMeshVertex:
	/// Size: 0x3C
	/// Properties: 8
	/// </summary>
	public class FSlateMeshVertex:MemoryObject
	{
		public override int ObjectSize => 60;
		/// <summary>
		/// Name: Position
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public FVector2D Position => ReadStruct<FVector2D>(0x00);
		
		/// <summary>
		/// Name: Color
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public FColor Color => ReadStruct<FColor>(0x08);
		
		/// <summary>
		/// Name: UV0
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x08
		/// </summary>
		public FVector2D UV0 => ReadStruct<FVector2D>(0x0C);
		
		/// <summary>
		/// Name: UV1
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x08
		/// </summary>
		public FVector2D UV1 => ReadStruct<FVector2D>(0x14);
		
		/// <summary>
		/// Name: UV2
		/// Type: StructProperty
		/// Offset: 0x1C
		/// Size: 0x08
		/// </summary>
		public FVector2D UV2 => ReadStruct<FVector2D>(0x1C);
		
		/// <summary>
		/// Name: UV3
		/// Type: StructProperty
		/// Offset: 0x24
		/// Size: 0x08
		/// </summary>
		public FVector2D UV3 => ReadStruct<FVector2D>(0x24);
		
		/// <summary>
		/// Name: UV4
		/// Type: StructProperty
		/// Offset: 0x2C
		/// Size: 0x08
		/// </summary>
		public FVector2D UV4 => ReadStruct<FVector2D>(0x2C);
		
		/// <summary>
		/// Name: UV5
		/// Type: StructProperty
		/// Offset: 0x34
		/// Size: 0x08
		/// </summary>
		public FVector2D UV5 => ReadStruct<FVector2D>(0x34);
		
	}


	/// <summary>
	/// FAnchorData:
	/// Size: 0x28
	/// Properties: 3
	/// </summary>
	public class FAnchorData:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Offsets
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FMargin Offsets => ReadStruct<FMargin>(0x00);
		
		/// <summary>
		/// Name: Anchors
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FAnchors Anchors => ReadStruct<FAnchors>(0x10);
		
		/// <summary>
		/// Name: Alignment
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public FVector2D Alignment => ReadStruct<FVector2D>(0x20);
		
	}


	/// <summary>
	/// FWidgetAnimationBinding:
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FWidgetAnimationBinding:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: WidgetName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SlotWidgetName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AnimationGuid
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FGuid AnimationGuid => ReadStruct<FGuid>(0x10);
		
	}


	/// <summary>
	/// FDelegateRuntimeBinding:
	/// Size: 0x38
	/// Properties: 5
	/// </summary>
	public class FDelegateRuntimeBinding:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: ObjectName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString ObjectName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: PropertyName
		/// Type: NameProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: FunctionName
		/// Type: NameProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SourcePath
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FDynamicPropertyPath SourcePath => ReadStruct<FDynamicPropertyPath>(0x20);
		
		/// <summary>
		/// Name: Kind
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte Kind
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
	}


	/// <summary>
	/// FWidgetNavigationData:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FWidgetNavigationData:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Rule
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte Rule
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: WidgetToFocus
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FNiagaraDataSetID:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FNiagaraDataSetID:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Type
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte Type
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FNiagaraVariableInfo:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FNiagaraVariableInfo:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Type
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte Type
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FNiagaraConstants:
	/// Size: 0x40
	/// Properties: 4
	/// </summary>
	public class FNiagaraConstants:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: ScalarConstants
		/// Type: TArray<FNiagaraConstants_Float>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FNiagaraConstants_Float> ScalarConstants => new TArray<FNiagaraConstants_Float>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: VectorConstants
		/// Type: TArray<FNiagaraConstants_Vector>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FNiagaraConstants_Vector> VectorConstants => new TArray<FNiagaraConstants_Vector>(BaseAddress+0x10);
		
		/// <summary>
		/// Name: MatrixConstants
		/// Type: TArray<FNiagaraConstants_Matrix>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x50
		/// </summary>
		public TArray<FNiagaraConstants_Matrix> MatrixConstants => new TArray<FNiagaraConstants_Matrix>(BaseAddress+0x20);
		
		/// <summary>
		/// Name: DataObjectConstants
		/// Type: TArray<FNiagaraConstants_DataObject>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FNiagaraConstants_DataObject> DataObjectConstants => new TArray<FNiagaraConstants_DataObject>(BaseAddress+0x30);
		
	}


	/// <summary>
	/// FNiagaraConstants_DataObject:FNiagaraConstantBase
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FNiagaraConstants_DataObject:FNiagaraConstantBase
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Value
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UNiagaraDataObject Value => ReadUObject<UNiagaraDataObject>(0x08);
		
	}


	/// <summary>
	/// FNiagaraConstantBase:
	/// Size: 0x08
	/// Properties: 1
	/// </summary>
	public class FNiagaraConstantBase:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FNiagaraConstants_Matrix:FNiagaraConstantBase
	/// Size: 0x50
	/// Properties: 1
	/// </summary>
	public class FNiagaraConstants_Matrix:FNiagaraConstantBase
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: Value
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x40
		/// </summary>
		public FMatrix Value => ReadStruct<FMatrix>(0x10);
		
	}


	/// <summary>
	/// FNiagaraConstants_Vector:FNiagaraConstantBase
	/// Size: 0x20
	/// Properties: 1
	/// </summary>
	public class FNiagaraConstants_Vector:FNiagaraConstantBase
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: Value
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FVector4 Value => ReadStruct<FVector4>(0x10);
		
	}


	/// <summary>
	/// FNiagaraConstants_Float:FNiagaraConstantBase
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FNiagaraConstants_Float:FNiagaraConstantBase
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Value
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Value
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FDeprecatedNiagaraConstants:
	/// Size: 0x80
	/// Properties: 6
	/// </summary>
	public class FDeprecatedNiagaraConstants:MemoryObject
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: ScalarConstantsInfo
		/// Type: TArray<FNiagaraVariableInfo>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FNiagaraVariableInfo> ScalarConstantsInfo => new TArray<FNiagaraVariableInfo>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: VectorConstantsInfo
		/// Type: TArray<FNiagaraVariableInfo>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FNiagaraVariableInfo> VectorConstantsInfo => new TArray<FNiagaraVariableInfo>(BaseAddress+0x10);
		
		/// <summary>
		/// Name: MatrixConstantsInfo
		/// Type: TArray<FNiagaraVariableInfo>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FNiagaraVariableInfo> MatrixConstantsInfo => new TArray<FNiagaraVariableInfo>(BaseAddress+0x20);
		
		/// <summary>
		/// Name: ScalarConstants
		/// Type: TArray<>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: VectorConstants
		/// Type: TArray<FVector4>
		/// Offset: 0x50
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FVector4> VectorConstants => new TArray<FVector4>(BaseAddress+0x50);
		
		/// <summary>
		/// Name: MatrixConstants
		/// Type: TArray<FMatrix>
		/// Offset: 0x60
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FMatrix> MatrixConstants => new TArray<FMatrix>(BaseAddress+0x60);
		
	}


	/// <summary>
	/// FNiagaraConstantMap:
	/// Size: 0x148
	/// Properties: 0
	/// </summary>
	public class FNiagaraConstantMap:MemoryObject
	{
		public override int ObjectSize => 328;
	}


	/// <summary>
	/// FNiagaraScriptConstantData:
	/// Size: 0x180
	/// Properties: 4
	/// </summary>
	public class FNiagaraScriptConstantData:MemoryObject
	{
		public override int ObjectSize => 384;
		/// <summary>
		/// Name: ExternalConstants
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x80
		/// </summary>
		public FDeprecatedNiagaraConstants ExternalConstants => ReadStruct<FDeprecatedNiagaraConstants>(0x00);
		
		/// <summary>
		/// Name: InternalConstants
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x80
		/// </summary>
		public FDeprecatedNiagaraConstants InternalConstants => ReadStruct<FDeprecatedNiagaraConstants>(0x80);
		
		/// <summary>
		/// Name: ExternalConstantsNew
		/// Type: StructProperty
		/// Offset: 0x100
		/// Size: 0x40
		/// </summary>
		public FNiagaraConstants ExternalConstantsNew => ReadStruct<FNiagaraConstants>(0x100);
		
		/// <summary>
		/// Name: InternalConstantsNew
		/// Type: StructProperty
		/// Offset: 0x140
		/// Size: 0x40
		/// </summary>
		public FNiagaraConstants InternalConstantsNew => ReadStruct<FNiagaraConstants>(0x140);
		
	}


	/// <summary>
	/// FNiagaraScriptUsageInfo:
	/// Size: 0x01
	/// Properties: 1
	/// </summary>
	public class FNiagaraScriptUsageInfo:MemoryObject
	{
		public override int ObjectSize => 1;
		/// <summary>
		/// Name: bReadsAttriubteData
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bReadsAttriubteData
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
	}


	/// <summary>
	/// FNiagaraDataSetProperties:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FNiagaraDataSetProperties:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: ID
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FNiagaraDataSetID ID => ReadStruct<FNiagaraDataSetID>(0x00);
		
		/// <summary>
		/// Name: Variables
		/// Type: TArray<FNiagaraVariableInfo>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FNiagaraVariableInfo> Variables => new TArray<FNiagaraVariableInfo>(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FDeprecatedNiagaraEmitterProperties:
	/// Size: 0x2E0
	/// Properties: 13
	/// </summary>
	public class FDeprecatedNiagaraEmitterProperties:MemoryObject
	{
		public override int ObjectSize => 736;
		/// <summary>
		/// Name: Name
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Name => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: bIsEnabled
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bIsEnabled
		{
			get
			{
				return ReadBool(0x10);
			}
			set
			{
				WriteBool(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: SpawnRate
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float SpawnRate
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: UpdateScript
		/// Type: ObjectProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		public UNiagaraScript UpdateScript => ReadUObject<UNiagaraScript>(0x18);
		
		/// <summary>
		/// Name: SpawnScript
		/// Type: ObjectProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public UNiagaraScript SpawnScript => ReadUObject<UNiagaraScript>(0x20);
		
		/// <summary>
		/// Name: Material
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UMaterial Material => ReadUObject<UMaterial>(0x28);
		
		/// <summary>
		/// Name: RenderModuleType
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte RenderModuleType
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: StartTime
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float StartTime
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: EndTime
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float EndTime
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: RendererProperties
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UNiagaraEffectRendererProperties RendererProperties => ReadUObject<UNiagaraEffectRendererProperties>(0x40);
		
		/// <summary>
		/// Name: ExternalConstants
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x148
		/// </summary>
		public FNiagaraConstantMap ExternalConstants => ReadStruct<FNiagaraConstantMap>(0x48);
		
		/// <summary>
		/// Name: ExternalSpawnConstants
		/// Type: StructProperty
		/// Offset: 0x190
		/// Size: 0x148
		/// </summary>
		public FNiagaraConstantMap ExternalSpawnConstants => ReadStruct<FNiagaraConstantMap>(0x190);
		
		/// <summary>
		/// Name: NumLoops
		/// Type: IntProperty
		/// Offset: 0x2D8
		/// Size: 0x04
		/// </summary>
		public int NumLoops
		{
			get
			{
				return ReadInt32(0x2D8);
			}
			set
			{
				WriteInt32(0x2D8,value);
			}
		}
		
	}


	/// <summary>
	/// FNiagaraEmitterScriptProperties:
	/// Size: 0x68
	/// Properties: 4
	/// </summary>
	public class FNiagaraEmitterScriptProperties:MemoryObject
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: Script
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UNiagaraScript Script => ReadUObject<UNiagaraScript>(0x00);
		
		/// <summary>
		/// Name: ExternalConstants
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x40
		/// </summary>
		public FNiagaraConstants ExternalConstants => ReadStruct<FNiagaraConstants>(0x08);
		
		/// <summary>
		/// Name: EventReceivers
		/// Type: TArray<FNiagaraEventReceiverProperties>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FNiagaraEventReceiverProperties> EventReceivers => new TArray<FNiagaraEventReceiverProperties>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: EventGenerators
		/// Type: TArray<FNiagaraEventGeneratorProperties>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FNiagaraEventGeneratorProperties> EventGenerators => new TArray<FNiagaraEventGeneratorProperties>(BaseAddress+0x58);
		
	}


	/// <summary>
	/// FNiagaraEventGeneratorProperties:FNiagaraDataSetProperties
	/// Size: 0x28
	/// Properties: 1
	/// </summary>
	public class FNiagaraEventGeneratorProperties:FNiagaraDataSetProperties
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: MaxEventsPerFrame
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int MaxEventsPerFrame
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
	}


	/// <summary>
	/// FNiagaraEventReceiverProperties:
	/// Size: 0x28
	/// Properties: 4
	/// </summary>
	public class FNiagaraEventReceiverProperties:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SourceEventGenerator
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SourceEmitter
		/// Type: NameProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: EmitterActions
		/// Type: TArray<UNiagaraEventReceiverEmitterAction>
		/// Offset: 0x18
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UNiagaraEventReceiverEmitterAction> EmitterActions => new TArray<UNiagaraEventReceiverEmitterAction>(BaseAddress+0x18);
		
	}


	/// <summary>
	/// FCameraLookatTrackingSettings:
	/// Size: 0x30
	/// Properties: 5
	/// </summary>
	public class FCameraLookatTrackingSettings:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: bEnableLookAtTracking
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bEnableLookAtTracking => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDrawDebugLookAtTrackingPosition
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bDrawDebugLookAtTrackingPosition => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: LookAtTrackingInterpSpeed
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float LookAtTrackingInterpSpeed
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: ActorToTrack
		/// Type: ObjectProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		public AActor ActorToTrack => ReadUObject<AActor>(0x18);
		
		/// <summary>
		/// Name: RelativeOffset
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x0C
		/// </summary>
		public FVector RelativeOffset => ReadStruct<FVector>(0x20);
		
	}


	/// <summary>
	/// FCameraFocusSettings:
	/// Size: 0x30
	/// Properties: 6
	/// </summary>
	public class FCameraFocusSettings:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: FocusMethod
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte FocusMethod
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ManualFocusDistance
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float ManualFocusDistance
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: TrackingFocusSettings
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x18
		/// </summary>
		public FCameraTrackingFocusSettings TrackingFocusSettings => ReadStruct<FCameraTrackingFocusSettings>(0x08);
		
		/// <summary>
		/// Name: bSmoothFocusChanges
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool bSmoothFocusChanges => (ReadByte(0x0020) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: FocusSmoothingInterpSpeed
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float FocusSmoothingInterpSpeed
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: FocusOffset
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float FocusOffset
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// FCameraTrackingFocusSettings:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FCameraTrackingFocusSettings:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: ActorToTrack
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public AActor ActorToTrack => ReadUObject<AActor>(0x00);
		
		/// <summary>
		/// Name: RelativeOffset
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x0C
		/// </summary>
		public FVector RelativeOffset => ReadStruct<FVector>(0x08);
		
		/// <summary>
		/// Name: bDrawDebugTrackingFocusPoint
		/// Type: BoolProperty
		/// Offset: 0x14
		/// Size: 0x01
		/// </summary>
		public bool bDrawDebugTrackingFocusPoint => (ReadByte(0x0014) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// FNamedLensPreset:
	/// Size: 0x28
	/// Properties: 2
	/// </summary>
	public class FNamedLensPreset:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Name
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Name => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: LensSettings
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x14
		/// </summary>
		public FCameraLensSettings LensSettings => ReadStruct<FCameraLensSettings>(0x10);
		
	}


	/// <summary>
	/// FCameraLensSettings:
	/// Size: 0x14
	/// Properties: 5
	/// </summary>
	public class FCameraLensSettings:MemoryObject
	{
		public override int ObjectSize => 20;
		/// <summary>
		/// Name: MinFocalLength
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float MinFocalLength
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: MaxFocalLength
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float MaxFocalLength
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: MinFStop
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float MinFStop
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: MaxFStop
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float MaxFStop
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: MinimumFocusDistance
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float MinimumFocusDistance
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FNamedFilmbackPreset:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FNamedFilmbackPreset:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: Name
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Name => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: FilmbackSettings
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x0C
		/// </summary>
		public FCameraFilmbackSettings FilmbackSettings => ReadStruct<FCameraFilmbackSettings>(0x10);
		
	}


	/// <summary>
	/// FCameraFilmbackSettings:
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FCameraFilmbackSettings:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: SensorWidth
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float SensorWidth
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: SensorHeight
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float SensorHeight
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: SensorAspectRatio
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float SensorAspectRatio
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FEngineServiceNotification:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FEngineServiceNotification:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Text
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Text => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: TimeSeconds
		/// Type: DoubleProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public double TimeSeconds
		{
			get
			{
				return ReadDouble(0x10);
			}
			set
			{
				WriteDouble(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FEngineServiceTerminate:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FEngineServiceTerminate:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: userName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString userName => new FString(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FEngineServiceExecuteCommand:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FEngineServiceExecuteCommand:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: Command
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Command => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: userName
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString userName => new FString(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FEngineServiceAuthGrant:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FEngineServiceAuthGrant:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: userName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString userName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: UserToGrant
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString UserToGrant => new FString(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FEngineServiceAuthDeny:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FEngineServiceAuthDeny:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: userName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString userName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: UserToDeny
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString UserToDeny => new FString(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FEngineServicePong:
	/// Size: 0x50
	/// Properties: 7
	/// </summary>
	public class FEngineServicePong:MemoryObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: CurrentLevel
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString CurrentLevel => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: EngineVersion
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int EngineVersion
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: HasBegunPlay
		/// Type: BoolProperty
		/// Offset: 0x14
		/// Size: 0x01
		/// </summary>
		public bool HasBegunPlay
		{
			get
			{
				return ReadBool(0x14);
			}
			set
			{
				WriteBool(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: InstanceId
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FGuid InstanceId => ReadStruct<FGuid>(0x18);
		
		/// <summary>
		/// Name: InstanceType
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString InstanceType => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: SessionId
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FGuid SessionId => ReadStruct<FGuid>(0x38);
		
		/// <summary>
		/// Name: WorldTimeSeconds
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float WorldTimeSeconds
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
	}


	/// <summary>
	/// FEngineServicePing:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FEngineServicePing:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FAutoCompleteCommand:
	/// Size: 0x28
	/// Properties: 2
	/// </summary>
	public class FAutoCompleteCommand:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Command
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Command => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Desc
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString Desc => new FString(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FGameplayTagQuery:
	/// Size: 0x48
	/// Properties: 5
	/// </summary>
	public class FGameplayTagQuery:MemoryObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: TokenStreamVersion
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int TokenStreamVersion
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: TagDictionary
		/// Type: TArray<FGameplayTag>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FGameplayTag> TagDictionary => new TArray<FGameplayTag>(BaseAddress+0x08);
		
		/// <summary>
		/// Name: QueryTokenStream
		/// Type: TArray<>
		/// Offset: 0x18
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: UserDescription
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString UserDescription => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: AutoDescription
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString AutoDescription => new FString(BaseAddress+0x38);
		
	}


	/// <summary>
	/// FGameplayTag:
	/// Size: 0x08
	/// Properties: 1
	/// </summary>
	public class FGameplayTag:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: TagName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FGameplayTagContainer:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FGameplayTagContainer:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: GameplayTags
		/// Type: TArray<FGameplayTag>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FGameplayTag> GameplayTags => new TArray<FGameplayTag>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Tags
		/// Type: TArray<FName>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> Tags => new TArray<FName>(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FGameplayTagNode:
	/// Size: 0x70
	/// Properties: 0
	/// </summary>
	public class FGameplayTagNode:MemoryObject
	{
		public override int ObjectSize => 112;
	}


	/// <summary>
	/// FGameplayTagTableRow:FTableRowBase
	/// Size: 0x38
	/// Properties: 3
	/// </summary>
	public class FGameplayTagTableRow:FTableRowBase
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Tag
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Tag => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: CategoryText
		/// Type: TextProperty
		/// Offset: 0x10
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: DevComment
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString DevComment => new FString(BaseAddress+0x28);
		
	}


	/// <summary>
	/// FAIMoveRequest:
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class FAIMoveRequest:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: GoalActor
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public AActor GoalActor => ReadUObject<AActor>(0x00);
		
	}


	/// <summary>
	/// FPawnActionStack:
	/// Size: 0x08
	/// Properties: 1
	/// </summary>
	public class FPawnActionStack:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: TopAction
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UPawnAction TopAction => ReadUObject<UPawnAction>(0x00);
		
	}


	/// <summary>
	/// FPawnActionEvent:
	/// Size: 0x18
	/// Properties: 1
	/// </summary>
	public class FPawnActionEvent:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Action
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UPawnAction Action => ReadUObject<UPawnAction>(0x00);
		
	}


	/// <summary>
	/// FBlackboardKeySelector:
	/// Size: 0x28
	/// Properties: 5
	/// </summary>
	public class FBlackboardKeySelector:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: AllowedTypes
		/// Type: TArray<UBlackboardKeyType>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<UBlackboardKeyType> AllowedTypes => new TArray<UBlackboardKeyType>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: SelectedKeyName
		/// Type: NameProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SelectedKeyType
		/// Type: ClassProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SelectedKeyID
		/// Type: ByteProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public byte SelectedKeyID
		{
			get
			{
				return ReadByte(0x20);
			}
			set
			{
				WriteByte(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: bNoneIsAllowedValue
		/// Type: BoolProperty
		/// Offset: 0x24
		/// Size: 0x01
		/// </summary>
		public bool bNoneIsAllowedValue => (ReadByte(0x0024) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// FGenericTeamId:
	/// Size: 0x01
	/// Properties: 1
	/// </summary>
	public class FGenericTeamId:MemoryObject
	{
		public override int ObjectSize => 1;
		/// <summary>
		/// Name: TeamID
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte TeamID
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
	}


	/// <summary>
	/// FAIDataProviderBoolValue:FAIDataProviderTypedValue
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class FAIDataProviderBoolValue:FAIDataProviderTypedValue
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: DefaultValue
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool DefaultValue
		{
			get
			{
				return ReadBool(0x28);
			}
			set
			{
				WriteBool(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// FAIDataProviderTypedValue:FAIDataProviderValue
	/// Size: 0x28
	/// Properties: 1
	/// </summary>
	public class FAIDataProviderTypedValue:FAIDataProviderValue
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: PropertyType
		/// Type: ClassProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FAIDataProviderValue:
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FAIDataProviderValue:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: CachedProperty
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UProperty CachedProperty => ReadUObject<UProperty>(0x08);
		
		/// <summary>
		/// Name: DataBinding
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UAIDataProvider DataBinding => ReadUObject<UAIDataProvider>(0x10);
		
		/// <summary>
		/// Name: DataField
		/// Type: NameProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FAIDataProviderFloatValue:FAIDataProviderTypedValue
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class FAIDataProviderFloatValue:FAIDataProviderTypedValue
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: DefaultValue
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float DefaultValue
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// FAIDataProviderIntValue:FAIDataProviderTypedValue
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class FAIDataProviderIntValue:FAIDataProviderTypedValue
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: DefaultValue
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int DefaultValue
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// FAIDataProviderStructValue:FAIDataProviderValue
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class FAIDataProviderStructValue:FAIDataProviderValue
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// FAISenseAffiliationFilter:
	/// Size: 0x04
	/// Properties: 3
	/// </summary>
	public class FAISenseAffiliationFilter:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: bDetectEnemies
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bDetectEnemies => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bDetectNeutrals
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bDetectNeutrals => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bDetectFriendlies
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bDetectFriendlies => (ReadByte(0x0000) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// FActorPerceptionBlueprintInfo:
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FActorPerceptionBlueprintInfo:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: Target
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public AActor Target => ReadUObject<AActor>(0x00);
		
		/// <summary>
		/// Name: LastSensedStimuli
		/// Type: TArray<FAIStimulus>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x48
		/// </summary>
		public TArray<FAIStimulus> LastSensedStimuli => new TArray<FAIStimulus>(BaseAddress+0x08);
		
		/// <summary>
		/// Name: bIsHostile
		/// Type: BoolProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public bool bIsHostile => (ReadByte(0x0018) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// FAIDamageEvent:
	/// Size: 0x30
	/// Properties: 5
	/// </summary>
	public class FAIDamageEvent:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: amount
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float amount
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x04
		/// Size: 0x0C
		/// </summary>
		public FVector Location => ReadStruct<FVector>(0x04);
		
		/// <summary>
		/// Name: HitLocation
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x0C
		/// </summary>
		public FVector HitLocation => ReadStruct<FVector>(0x10);
		
		/// <summary>
		/// Name: DamagedActor
		/// Type: ObjectProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public AActor DamagedActor => ReadUObject<AActor>(0x20);
		
		/// <summary>
		/// Name: Instigator
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public AActor Instigator => ReadUObject<AActor>(0x28);
		
	}


	/// <summary>
	/// FAINoiseEvent:
	/// Size: 0x30
	/// Properties: 5
	/// </summary>
	public class FAINoiseEvent:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: NoiseLocation
		/// Type: StructProperty
		/// Offset: 0x04
		/// Size: 0x0C
		/// </summary>
		public FVector NoiseLocation => ReadStruct<FVector>(0x04);
		
		/// <summary>
		/// Name: Loudness
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float Loudness
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: MaxRange
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float MaxRange
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: Instigator
		/// Type: ObjectProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		public AActor Instigator => ReadUObject<AActor>(0x18);
		
		/// <summary>
		/// Name: Tag
		/// Type: NameProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FAIPredictionEvent:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FAIPredictionEvent:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Requestor
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public AActor Requestor => ReadUObject<AActor>(0x00);
		
		/// <summary>
		/// Name: PredictedActor
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public AActor PredictedActor => ReadUObject<AActor>(0x08);
		
	}


	/// <summary>
	/// FAISightEvent:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FAISightEvent:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: SeenActor
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public AActor SeenActor => ReadUObject<AActor>(0x08);
		
		/// <summary>
		/// Name: Observer
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public AActor Observer => ReadUObject<AActor>(0x10);
		
	}


	/// <summary>
	/// FAITeamStimulusEvent:
	/// Size: 0x38
	/// Properties: 2
	/// </summary>
	public class FAITeamStimulusEvent:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Broadcaster
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public AActor Broadcaster => ReadUObject<AActor>(0x28);
		
		/// <summary>
		/// Name: Enemy
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public AActor Enemy => ReadUObject<AActor>(0x30);
		
	}


	/// <summary>
	/// FAITouchEvent:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FAITouchEvent:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: TouchReceiver
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public AActor TouchReceiver => ReadUObject<AActor>(0x10);
		
		/// <summary>
		/// Name: OtherActor
		/// Type: ObjectProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		public AActor OtherActor => ReadUObject<AActor>(0x18);
		
	}


	/// <summary>
	/// FBTCompositeChild:
	/// Size: 0x30
	/// Properties: 4
	/// </summary>
	public class FBTCompositeChild:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: ChildComposite
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UBTCompositeNode ChildComposite => ReadUObject<UBTCompositeNode>(0x00);
		
		/// <summary>
		/// Name: ChildTask
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UBTTaskNode ChildTask => ReadUObject<UBTTaskNode>(0x08);
		
		/// <summary>
		/// Name: Decorators
		/// Type: TArray<UBTDecorator>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x68
		/// </summary>
		public TArray<UBTDecorator> Decorators => new TArray<UBTDecorator>(BaseAddress+0x10);
		
		/// <summary>
		/// Name: DecoratorOps
		/// Type: TArray<FBTDecoratorLogic>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x04
		/// </summary>
		public TArray<FBTDecoratorLogic> DecoratorOps => new TArray<FBTDecoratorLogic>(BaseAddress+0x20);
		
	}


	/// <summary>
	/// FBTDecoratorLogic:
	/// Size: 0x04
	/// Properties: 2
	/// </summary>
	public class FBTDecoratorLogic:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: Operation
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte Operation
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Number
		/// Type: UInt16Property
		/// Offset: 0x02
		/// Size: 0x02
		/// </summary>
		public ushort Number
		{
			get
			{
				return ReadUInt16(0x02);
			}
			set
			{
				WriteUInt16(0x02,value);
			}
		}
		
	}


	/// <summary>
	/// FBehaviorTreeTemplateInfo:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FBehaviorTreeTemplateInfo:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Asset
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UBehaviorTree Asset => ReadUObject<UBehaviorTree>(0x00);
		
		/// <summary>
		/// Name: Template
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UBTCompositeNode Template => ReadUObject<UBTCompositeNode>(0x08);
		
	}


	/// <summary>
	/// FBlackboardEntry:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FBlackboardEntry:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: EntryName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: KeyType
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UBlackboardKeyType KeyType => ReadUObject<UBlackboardKeyType>(0x08);
		
		/// <summary>
		/// Name: bInstanceSynced
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bInstanceSynced => (ReadByte(0x0010) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// FEQSParametrizedQueryExecutionRequest:
	/// Size: 0x48
	/// Properties: 5
	/// </summary>
	public class FEQSParametrizedQueryExecutionRequest:MemoryObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: QueryTemplate
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UEnvQuery QueryTemplate => ReadUObject<UEnvQuery>(0x00);
		
		/// <summary>
		/// Name: QueryConfig
		/// Type: TArray<FAIDynamicParam>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FAIDynamicParam> QueryConfig => new TArray<FAIDynamicParam>(BaseAddress+0x08);
		
		/// <summary>
		/// Name: EQSQueryBlackboardKey
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector EQSQueryBlackboardKey => ReadStruct<FBlackboardKeySelector>(0x18);
		
		/// <summary>
		/// Name: RunMode
		/// Type: ByteProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public byte RunMode
		{
			get
			{
				return ReadByte(0x40);
			}
			set
			{
				WriteByte(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: bUseBBKeyForQueryTemplate
		/// Type: BoolProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public bool bUseBBKeyForQueryTemplate => (ReadByte(0x0044) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// FAIDynamicParam:
	/// Size: 0x38
	/// Properties: 4
	/// </summary>
	public class FAIDynamicParam:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: ParamName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ParamType
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte ParamType
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: Value
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float Value
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: BBKey
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x28
		/// </summary>
		public FBlackboardKeySelector BBKey => ReadStruct<FBlackboardKeySelector>(0x10);
		
	}


	/// <summary>
	/// FEnvBoolParam:FEnvBoolParam_DEPRECATED
	/// Size: 0x10
	/// Properties: 0
	/// </summary>
	public class FEnvBoolParam:FEnvBoolParam_DEPRECATED
	{
		public override int ObjectSize => 16;
	}


	/// <summary>
	/// FEnvBoolParam_DEPRECATED:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FEnvBoolParam_DEPRECATED:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Value
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool Value
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ParamName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FEnvIntParam:FEnvIntParam_DEPRECATED
	/// Size: 0x10
	/// Properties: 0
	/// </summary>
	public class FEnvIntParam:FEnvIntParam_DEPRECATED
	{
		public override int ObjectSize => 16;
	}


	/// <summary>
	/// FEnvIntParam_DEPRECATED:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FEnvIntParam_DEPRECATED:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Value
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int Value
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ParamName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FEnvFloatParam:FEnvFloatParam_DEPRECATED
	/// Size: 0x10
	/// Properties: 0
	/// </summary>
	public class FEnvFloatParam:FEnvFloatParam_DEPRECATED
	{
		public override int ObjectSize => 16;
	}


	/// <summary>
	/// FEnvFloatParam_DEPRECATED:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FEnvFloatParam_DEPRECATED:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Value
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Value
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ParamName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FEnvQueryResult:
	/// Size: 0x40
	/// Properties: 3
	/// </summary>
	public class FEnvQueryResult:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: ItemType
		/// Type: ClassProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: OptionIndex
		/// Type: IntProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public int OptionIndex
		{
			get
			{
				return ReadInt32(0x2C);
			}
			set
			{
				WriteInt32(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: QueryID
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int QueryID
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
	}


	/// <summary>
	/// FEnvOverlapData:
	/// Size: 0x20
	/// Properties: 8
	/// </summary>
	public class FEnvOverlapData:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: ExtentX
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float ExtentX
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ExtentY
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float ExtentY
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: ExtentZ
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float ExtentZ
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: ShapeOffset
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector ShapeOffset => ReadStruct<FVector>(0x0C);
		
		/// <summary>
		/// Name: OverlapChannel
		/// Type: ByteProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public byte OverlapChannel
		{
			get
			{
				return ReadByte(0x18);
			}
			set
			{
				WriteByte(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: OverlapShape
		/// Type: ByteProperty
		/// Offset: 0x19
		/// Size: 0x01
		/// </summary>
		public byte OverlapShape
		{
			get
			{
				return ReadByte(0x19);
			}
			set
			{
				WriteByte(0x19,value);
			}
		}
		
		/// <summary>
		/// Name: bOnlyBlockingHits
		/// Type: BoolProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public bool bOnlyBlockingHits => (ReadByte(0x001C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverlapComplex
		/// Type: BoolProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public bool bOverlapComplex => (ReadByte(0x001C) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// FEnvTraceData:
	/// Size: 0x30
	/// Properties: 18
	/// </summary>
	public class FEnvTraceData:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: VersionNum
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int VersionNum
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: NavigationFilter
		/// Type: ClassProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ProjectDown
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float ProjectDown
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: ProjectUp
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float ProjectUp
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: ExtentX
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float ExtentX
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: ExtentY
		/// Type: FloatProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public float ExtentY
		{
			get
			{
				return ReadSingle(0x1C);
			}
			set
			{
				WriteSingle(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: ExtentZ
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float ExtentZ
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: PostProjectionVerticalOffset
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float PostProjectionVerticalOffset
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: TraceChannel
		/// Type: ByteProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public byte TraceChannel
		{
			get
			{
				return ReadByte(0x28);
			}
			set
			{
				WriteByte(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: SerializedChannel
		/// Type: ByteProperty
		/// Offset: 0x29
		/// Size: 0x01
		/// </summary>
		public byte SerializedChannel
		{
			get
			{
				return ReadByte(0x29);
			}
			set
			{
				WriteByte(0x29,value);
			}
		}
		
		/// <summary>
		/// Name: TraceShape
		/// Type: ByteProperty
		/// Offset: 0x2A
		/// Size: 0x01
		/// </summary>
		public byte TraceShape
		{
			get
			{
				return ReadByte(0x2A);
			}
			set
			{
				WriteByte(0x2A,value);
			}
		}
		
		/// <summary>
		/// Name: TraceMode
		/// Type: ByteProperty
		/// Offset: 0x2B
		/// Size: 0x01
		/// </summary>
		public byte TraceMode
		{
			get
			{
				return ReadByte(0x2B);
			}
			set
			{
				WriteByte(0x2B,value);
			}
		}
		
		/// <summary>
		/// Name: bTraceComplex
		/// Type: BoolProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public bool bTraceComplex => (ReadByte(0x002C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOnlyBlockingHits
		/// Type: BoolProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public bool bOnlyBlockingHits => (ReadByte(0x002C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bCanTraceOnNavMesh
		/// Type: BoolProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public bool bCanTraceOnNavMesh => (ReadByte(0x002C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bCanTraceOnGeometry
		/// Type: BoolProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public bool bCanTraceOnGeometry => (ReadByte(0x002C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bCanDisableTrace
		/// Type: BoolProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public bool bCanDisableTrace => (ReadByte(0x002C) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bCanProjectDown
		/// Type: BoolProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public bool bCanProjectDown => (ReadByte(0x002C) & 0x20) == 0x20;
		
	}


	/// <summary>
	/// FEnvDirection:
	/// Size: 0x20
	/// Properties: 4
	/// </summary>
	public class FEnvDirection:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: LineFrom
		/// Type: ClassProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: LineTo
		/// Type: ClassProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Rotation
		/// Type: ClassProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: DirMode
		/// Type: ByteProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public byte DirMode
		{
			get
			{
				return ReadByte(0x18);
			}
			set
			{
				WriteByte(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FEnvNamedValue:
	/// Size: 0x10
	/// Properties: 3
	/// </summary>
	public class FEnvNamedValue:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: ParamName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ParamType
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte ParamType
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: Value
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float Value
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FCrowdAvoidanceSamplingPattern:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FCrowdAvoidanceSamplingPattern:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: Angles
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Radii
		/// Type: TArray<>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FCrowdAvoidanceConfig:
	/// Size: 0x1C
	/// Properties: 10
	/// </summary>
	public class FCrowdAvoidanceConfig:MemoryObject
	{
		public override int ObjectSize => 28;
		/// <summary>
		/// Name: VelocityBias
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float VelocityBias
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: DesiredVelocityWeight
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float DesiredVelocityWeight
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentVelocityWeight
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float CurrentVelocityWeight
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: SideBiasWeight
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float SideBiasWeight
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: ImpactTimeWeight
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float ImpactTimeWeight
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: ImpactTimeRange
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float ImpactTimeRange
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: CustomPatternIdx
		/// Type: ByteProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public byte CustomPatternIdx
		{
			get
			{
				return ReadByte(0x18);
			}
			set
			{
				WriteByte(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: AdaptiveDivisions
		/// Type: ByteProperty
		/// Offset: 0x19
		/// Size: 0x01
		/// </summary>
		public byte AdaptiveDivisions
		{
			get
			{
				return ReadByte(0x19);
			}
			set
			{
				WriteByte(0x19,value);
			}
		}
		
		/// <summary>
		/// Name: AdaptiveRings
		/// Type: ByteProperty
		/// Offset: 0x1A
		/// Size: 0x01
		/// </summary>
		public byte AdaptiveRings
		{
			get
			{
				return ReadByte(0x1A);
			}
			set
			{
				WriteByte(0x1A,value);
			}
		}
		
		/// <summary>
		/// Name: AdaptiveDepth
		/// Type: ByteProperty
		/// Offset: 0x1B
		/// Size: 0x01
		/// </summary>
		public byte AdaptiveDepth
		{
			get
			{
				return ReadByte(0x1B);
			}
			set
			{
				WriteByte(0x1B,value);
			}
		}
		
	}


	/// <summary>
	/// FEnvQueryInstanceCache:
	/// Size: 0x1D0
	/// Properties: 1
	/// </summary>
	public class FEnvQueryInstanceCache:MemoryObject
	{
		public override int ObjectSize => 464;
		/// <summary>
		/// Name: Template
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UEnvQuery Template => ReadUObject<UEnvQuery>(0x00);
		
	}


	/// <summary>
	/// FEnvQueryRequest:
	/// Size: 0x68
	/// Properties: 3
	/// </summary>
	public class FEnvQueryRequest:MemoryObject
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: QueryTemplate
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UEnvQuery QueryTemplate => ReadUObject<UEnvQuery>(0x00);
		
		/// <summary>
		/// Name: Owner
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UObject Owner => ReadUObject<UObject>(0x08);
		
		/// <summary>
		/// Name: World
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UWorld World => ReadUObject<UWorld>(0x10);
		
	}


	/// <summary>
	/// FAnimNode_ApplyAdditive:FAnimNode_Base
	/// Size: 0x78
	/// Properties: 6
	/// </summary>
	public class FAnimNode_ApplyAdditive:FAnimNode_Base
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: Base
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x18
		/// </summary>
		public FPoseLink Base => ReadStruct<FPoseLink>(0x30);
		
		/// <summary>
		/// Name: Additive
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x18
		/// </summary>
		public FPoseLink Additive => ReadStruct<FPoseLink>(0x48);
		
		/// <summary>
		/// Name: Alpha
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float Alpha
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: AlphaScaleBias
		/// Type: StructProperty
		/// Offset: 0x64
		/// Size: 0x08
		/// </summary>
		public FInputScaleBias AlphaScaleBias => ReadStruct<FInputScaleBias>(0x64);
		
		/// <summary>
		/// Name: LODThreshold
		/// Type: IntProperty
		/// Offset: 0x6C
		/// Size: 0x04
		/// </summary>
		public int LODThreshold
		{
			get
			{
				return ReadInt32(0x6C);
			}
			set
			{
				WriteInt32(0x6C,value);
			}
		}
		
		/// <summary>
		/// Name: ActualAlpha
		/// Type: FloatProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public float ActualAlpha
		{
			get
			{
				return ReadSingle(0x70);
			}
			set
			{
				WriteSingle(0x70,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_Base:
	/// Size: 0x30
	/// Properties: 1
	/// </summary>
	public class FAnimNode_Base:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: EvaluateGraphExposedInputs
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x28
		/// </summary>
		public FExposedValueHandler EvaluateGraphExposedInputs => ReadStruct<FExposedValueHandler>(0x08);
		
	}


	/// <summary>
	/// FExposedValueHandler:
	/// Size: 0x28
	/// Properties: 2
	/// </summary>
	public class FExposedValueHandler:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: BoundFunction
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CopyRecords
		/// Type: TArray<FExposedValueCopyRecord>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x68
		/// </summary>
		public TArray<FExposedValueCopyRecord> CopyRecords => new TArray<FExposedValueCopyRecord>(BaseAddress+0x08);
		
	}


	/// <summary>
	/// FExposedValueCopyRecord:
	/// Size: 0x68
	/// Properties: 10
	/// </summary>
	public class FExposedValueCopyRecord:MemoryObject
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: SourceProperty
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UProperty SourceProperty => ReadUObject<UProperty>(0x00);
		
		/// <summary>
		/// Name: SourcePropertyName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SourceSubPropertyName
		/// Type: NameProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SourceArrayIndex
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int SourceArrayIndex
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: DestProperty
		/// Type: ObjectProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public UProperty DestProperty => ReadUObject<UProperty>(0x20);
		
		/// <summary>
		/// Name: DestArrayIndex
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int DestArrayIndex
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: Size
		/// Type: IntProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public int Size
		{
			get
			{
				return ReadInt32(0x2C);
			}
			set
			{
				WriteInt32(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: PostCopyOperation
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte PostCopyOperation
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: CachedBoolSourceProperty
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UBoolProperty CachedBoolSourceProperty => ReadUObject<UBoolProperty>(0x38);
		
		/// <summary>
		/// Name: CachedBoolDestProperty
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UBoolProperty CachedBoolDestProperty => ReadUObject<UBoolProperty>(0x40);
		
	}


	/// <summary>
	/// FInputScaleBias:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FInputScaleBias:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Scale
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Scale
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Bias
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Bias
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FPoseLink:FPoseLinkBase
	/// Size: 0x18
	/// Properties: 0
	/// </summary>
	public class FPoseLink:FPoseLinkBase
	{
		public override int ObjectSize => 24;
	}


	/// <summary>
	/// FPoseLinkBase:
	/// Size: 0x18
	/// Properties: 1
	/// </summary>
	public class FPoseLinkBase:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: LinkID
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int LinkID
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_BlendListBase:FAnimNode_Base
	/// Size: 0xC8
	/// Properties: 11
	/// </summary>
	public class FAnimNode_BlendListBase:FAnimNode_Base
	{
		public override int ObjectSize => 200;
		/// <summary>
		/// Name: BlendPose
		/// Type: TArray<FPoseLink>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FPoseLink> BlendPose => new TArray<FPoseLink>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: BlendTime
		/// Type: TArray<>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: BlendType
		/// Type: ByteProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public byte BlendType
		{
			get
			{
				return ReadByte(0x50);
			}
			set
			{
				WriteByte(0x50,value);
			}
		}
		
		/// <summary>
		/// Name: CustomBlendCurve
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UCurveFloat CustomBlendCurve => ReadUObject<UCurveFloat>(0x58);
		
		/// <summary>
		/// Name: BlendProfile
		/// Type: ObjectProperty
		/// Offset: 0x60
		/// Size: 0x08
		/// </summary>
		public UBlendProfile BlendProfile => ReadUObject<UBlendProfile>(0x60);
		
		/// <summary>
		/// Name: Blends
		/// Type: TArray<FAlphaBlend>
		/// Offset: 0x68
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FAlphaBlend> Blends => new TArray<FAlphaBlend>(BaseAddress+0x68);
		
		/// <summary>
		/// Name: BlendWeights
		/// Type: TArray<>
		/// Offset: 0x78
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: RemainingBlendTimes
		/// Type: TArray<>
		/// Offset: 0x88
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: LastActiveChildIndex
		/// Type: IntProperty
		/// Offset: 0x98
		/// Size: 0x04
		/// </summary>
		public int LastActiveChildIndex
		{
			get
			{
				return ReadInt32(0x98);
			}
			set
			{
				WriteInt32(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: PerBoneSampleData
		/// Type: TArray<FBlendSampleData>
		/// Offset: 0xA0
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FBlendSampleData> PerBoneSampleData => new TArray<FBlendSampleData>(BaseAddress+0xA0);
		
		/// <summary>
		/// Name: bResetChildOnActivation
		/// Type: BoolProperty
		/// Offset: 0xC0
		/// Size: 0x01
		/// </summary>
		public bool bResetChildOnActivation
		{
			get
			{
				return ReadBool(0xC0);
			}
			set
			{
				WriteBool(0xC0,value);
			}
		}
		
	}


	/// <summary>
	/// FBlendSampleData:
	/// Size: 0x40
	/// Properties: 5
	/// </summary>
	public class FBlendSampleData:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: SampleDataIndex
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int SampleDataIndex
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Animation
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UAnimSequence Animation => ReadUObject<UAnimSequence>(0x08);
		
		/// <summary>
		/// Name: TotalWeight
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float TotalWeight
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: PreviousTime
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float PreviousTime
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FAlphaBlend:
	/// Size: 0x38
	/// Properties: 3
	/// </summary>
	public class FAlphaBlend:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: BlendOption
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte BlendOption
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: CustomCurve
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UCurveFloat CustomCurve => ReadUObject<UCurveFloat>(0x08);
		
		/// <summary>
		/// Name: BlendTime
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float BlendTime
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_BlendListByBool:FAnimNode_BlendListBase
	/// Size: 0xD0
	/// Properties: 1
	/// </summary>
	public class FAnimNode_BlendListByBool:FAnimNode_BlendListBase
	{
		public override int ObjectSize => 208;
		/// <summary>
		/// Name: bActiveValue
		/// Type: BoolProperty
		/// Offset: 0xC8
		/// Size: 0x01
		/// </summary>
		public bool bActiveValue
		{
			get
			{
				return ReadBool(0xC8);
			}
			set
			{
				WriteBool(0xC8,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_BlendListByEnum:FAnimNode_BlendListBase
	/// Size: 0xE0
	/// Properties: 2
	/// </summary>
	public class FAnimNode_BlendListByEnum:FAnimNode_BlendListBase
	{
		public override int ObjectSize => 224;
		/// <summary>
		/// Name: EnumToPoseIndex
		/// Type: TArray<>
		/// Offset: 0xC8
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: ActiveEnumValue
		/// Type: ByteProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public byte ActiveEnumValue
		{
			get
			{
				return ReadByte(0xD8);
			}
			set
			{
				WriteByte(0xD8,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_BlendListByInt:FAnimNode_BlendListBase
	/// Size: 0xD0
	/// Properties: 1
	/// </summary>
	public class FAnimNode_BlendListByInt:FAnimNode_BlendListBase
	{
		public override int ObjectSize => 208;
		/// <summary>
		/// Name: ActiveChildIndex
		/// Type: IntProperty
		/// Offset: 0xC8
		/// Size: 0x04
		/// </summary>
		public int ActiveChildIndex
		{
			get
			{
				return ReadInt32(0xC8);
			}
			set
			{
				WriteInt32(0xC8,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_BlendSpacePlayer:FAnimNode_AssetPlayerBase
	/// Size: 0x130
	/// Properties: 12
	/// </summary>
	public class FAnimNode_BlendSpacePlayer:FAnimNode_AssetPlayerBase
	{
		public override int ObjectSize => 304;
		/// <summary>
		/// Name: X
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float X
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: Y
		/// Type: FloatProperty
		/// Offset: 0x5C
		/// Size: 0x04
		/// </summary>
		public float Y
		{
			get
			{
				return ReadSingle(0x5C);
			}
			set
			{
				WriteSingle(0x5C,value);
			}
		}
		
		/// <summary>
		/// Name: Z
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float Z
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: PlayRate
		/// Type: FloatProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public float PlayRate
		{
			get
			{
				return ReadSingle(0x64);
			}
			set
			{
				WriteSingle(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: bLoop
		/// Type: BoolProperty
		/// Offset: 0x68
		/// Size: 0x01
		/// </summary>
		public bool bLoop
		{
			get
			{
				return ReadBool(0x68);
			}
			set
			{
				WriteBool(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: StartPosition
		/// Type: FloatProperty
		/// Offset: 0x6C
		/// Size: 0x04
		/// </summary>
		public float StartPosition
		{
			get
			{
				return ReadSingle(0x6C);
			}
			set
			{
				WriteSingle(0x6C,value);
			}
		}
		
		/// <summary>
		/// Name: ResetInternalTimeCounter
		/// Type: IntProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public int ResetInternalTimeCounter
		{
			get
			{
				return ReadInt32(0x70);
			}
			set
			{
				WriteInt32(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: BlendSpace
		/// Type: ObjectProperty
		/// Offset: 0x78
		/// Size: 0x08
		/// </summary>
		public UBlendSpaceBase BlendSpace => ReadUObject<UBlendSpaceBase>(0x78);
		
		/// <summary>
		/// Name: BlendFilter
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x90
		/// </summary>
		public FBlendFilter BlendFilter => ReadStruct<FBlendFilter>(0x80);
		
		/// <summary>
		/// Name: BlendSampleDataCache
		/// Type: TArray<FBlendSampleData>
		/// Offset: 0x110
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FBlendSampleData> BlendSampleDataCache => new TArray<FBlendSampleData>(BaseAddress+0x110);
		
		/// <summary>
		/// Name: PreviousBlendSpace
		/// Type: ObjectProperty
		/// Offset: 0x120
		/// Size: 0x08
		/// </summary>
		public UBlendSpaceBase PreviousBlendSpace => ReadUObject<UBlendSpaceBase>(0x120);
		
		/// <summary>
		/// Name: InternalResetInternalTimeCounter
		/// Type: IntProperty
		/// Offset: 0x128
		/// Size: 0x04
		/// </summary>
		public int InternalResetInternalTimeCounter
		{
			get
			{
				return ReadInt32(0x128);
			}
			set
			{
				WriteInt32(0x128,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_AssetPlayerBase:FAnimNode_Base
	/// Size: 0x58
	/// Properties: 5
	/// </summary>
	public class FAnimNode_AssetPlayerBase:FAnimNode_Base
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: bIgnoreForRelevancyTest
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreForRelevancyTest
		{
			get
			{
				return ReadBool(0x30);
			}
			set
			{
				WriteBool(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: GroupIndex
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int GroupIndex
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: GroupRole
		/// Type: ByteProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public byte GroupRole
		{
			get
			{
				return ReadByte(0x38);
			}
			set
			{
				WriteByte(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: BlendWeight
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float BlendWeight
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: InternalTimeAccumulator
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float InternalTimeAccumulator
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
	}


	/// <summary>
	/// FBlendFilter:
	/// Size: 0x90
	/// Properties: 0
	/// </summary>
	public class FBlendFilter:MemoryObject
	{
		public override int ObjectSize => 144;
	}


	/// <summary>
	/// FAnimNode_BlendSpaceEvaluator:FAnimNode_BlendSpacePlayer
	/// Size: 0x138
	/// Properties: 1
	/// </summary>
	public class FAnimNode_BlendSpaceEvaluator:FAnimNode_BlendSpacePlayer
	{
		public override int ObjectSize => 312;
		/// <summary>
		/// Name: NormalizedTime
		/// Type: FloatProperty
		/// Offset: 0x130
		/// Size: 0x04
		/// </summary>
		public float NormalizedTime
		{
			get
			{
				return ReadSingle(0x130);
			}
			set
			{
				WriteSingle(0x130,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_SkeletalControlBase:FAnimNode_Base
	/// Size: 0x70
	/// Properties: 5
	/// </summary>
	public class FAnimNode_SkeletalControlBase:FAnimNode_Base
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: ComponentPose
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x18
		/// </summary>
		public FComponentSpacePoseLink ComponentPose => ReadStruct<FComponentSpacePoseLink>(0x30);
		
		/// <summary>
		/// Name: Alpha
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float Alpha
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: AlphaScaleBias
		/// Type: StructProperty
		/// Offset: 0x4C
		/// Size: 0x08
		/// </summary>
		public FInputScaleBias AlphaScaleBias => ReadStruct<FInputScaleBias>(0x4C);
		
		/// <summary>
		/// Name: LODThreshold
		/// Type: IntProperty
		/// Offset: 0x54
		/// Size: 0x04
		/// </summary>
		public int LODThreshold
		{
			get
			{
				return ReadInt32(0x54);
			}
			set
			{
				WriteInt32(0x54,value);
			}
		}
		
		/// <summary>
		/// Name: ActualAlpha
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float ActualAlpha
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
	}


	/// <summary>
	/// FComponentSpacePoseLink:FPoseLinkBase
	/// Size: 0x18
	/// Properties: 0
	/// </summary>
	public class FComponentSpacePoseLink:FPoseLinkBase
	{
		public override int ObjectSize => 24;
	}


	/// <summary>
	/// FAnimNode_CopyPoseFromMesh:FAnimNode_Base
	/// Size: 0x90
	/// Properties: 1
	/// </summary>
	public class FAnimNode_CopyPoseFromMesh:FAnimNode_Base
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: SourceMeshComponent
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public USkeletalMeshComponent SourceMeshComponent => ReadUObject<USkeletalMeshComponent>(0x30);
		
	}


	/// <summary>
	/// FAnimNode_LayeredBoneBlend:FAnimNode_Base
	/// Size: 0xA0
	/// Properties: 7
	/// </summary>
	public class FAnimNode_LayeredBoneBlend:FAnimNode_Base
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: BasePose
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x18
		/// </summary>
		public FPoseLink BasePose => ReadStruct<FPoseLink>(0x30);
		
		/// <summary>
		/// Name: BlendPoses
		/// Type: TArray<FPoseLink>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FPoseLink> BlendPoses => new TArray<FPoseLink>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: LayerSetup
		/// Type: TArray<FInputBlendPose>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FInputBlendPose> LayerSetup => new TArray<FInputBlendPose>(BaseAddress+0x58);
		
		/// <summary>
		/// Name: BlendWeights
		/// Type: TArray<>
		/// Offset: 0x68
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: bMeshSpaceRotationBlend
		/// Type: BoolProperty
		/// Offset: 0x78
		/// Size: 0x01
		/// </summary>
		public bool bMeshSpaceRotationBlend
		{
			get
			{
				return ReadBool(0x78);
			}
			set
			{
				WriteBool(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: CurveBlendOption
		/// Type: ByteProperty
		/// Offset: 0x79
		/// Size: 0x01
		/// </summary>
		public byte CurveBlendOption
		{
			get
			{
				return ReadByte(0x79);
			}
			set
			{
				WriteByte(0x79,value);
			}
		}
		
		/// <summary>
		/// Name: bHasRelevantPoses
		/// Type: BoolProperty
		/// Offset: 0x7A
		/// Size: 0x01
		/// </summary>
		public bool bHasRelevantPoses
		{
			get
			{
				return ReadBool(0x7A);
			}
			set
			{
				WriteBool(0x7A,value);
			}
		}
		
	}


	/// <summary>
	/// FInputBlendPose:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FInputBlendPose:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: BranchFilters
		/// Type: TArray<FBranchFilter>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FBranchFilter> BranchFilters => new TArray<FBranchFilter>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FBranchFilter:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FBranchFilter:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: BoneName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: BlendDepth
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int BlendDepth
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_RandomPlayer:FAnimNode_Base
	/// Size: 0x90
	/// Properties: 2
	/// </summary>
	public class FAnimNode_RandomPlayer:FAnimNode_Base
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: bShuffleMode
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bShuffleMode
		{
			get
			{
				return ReadBool(0x30);
			}
			set
			{
				WriteBool(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: Entries
		/// Type: TArray<FRandomPlayerSequenceEntry>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x58
		/// </summary>
		public TArray<FRandomPlayerSequenceEntry> Entries => new TArray<FRandomPlayerSequenceEntry>(BaseAddress+0x38);
		
	}


	/// <summary>
	/// FRandomPlayerSequenceEntry:
	/// Size: 0x58
	/// Properties: 7
	/// </summary>
	public class FRandomPlayerSequenceEntry:MemoryObject
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: Sequence
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UAnimSequence Sequence => ReadUObject<UAnimSequence>(0x00);
		
		/// <summary>
		/// Name: ChanceToPlay
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float ChanceToPlay
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: MinLoopCount
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int MinLoopCount
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxLoopCount
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int MaxLoopCount
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: MinPlayRate
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float MinPlayRate
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: MaxPlayRate
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float MaxPlayRate
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: BlendIn
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x38
		/// </summary>
		public FAlphaBlend BlendIn => ReadStruct<FAlphaBlend>(0x20);
		
	}


	/// <summary>
	/// FAnimNode_MeshSpaceRefPose:FAnimNode_Base
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class FAnimNode_MeshSpaceRefPose:FAnimNode_Base
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// FAnimNode_RefPose:FAnimNode_Base
	/// Size: 0x38
	/// Properties: 1
	/// </summary>
	public class FAnimNode_RefPose:FAnimNode_Base
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: RefPoseType
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte RefPoseType
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_Root:FAnimNode_Base
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class FAnimNode_Root:FAnimNode_Base
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: Result
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x18
		/// </summary>
		public FPoseLink Result => ReadStruct<FPoseLink>(0x30);
		
	}


	/// <summary>
	/// FAnimNode_RotateRootBone:FAnimNode_Base
	/// Size: 0x60
	/// Properties: 4
	/// </summary>
	public class FAnimNode_RotateRootBone:FAnimNode_Base
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: BasePose
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x18
		/// </summary>
		public FPoseLink BasePose => ReadStruct<FPoseLink>(0x30);
		
		/// <summary>
		/// Name: Pitch
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float Pitch
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: Yaw
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float Yaw
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: MeshToComponent
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x0C
		/// </summary>
		public FRotator MeshToComponent => ReadStruct<FRotator>(0x50);
		
	}


	/// <summary>
	/// FAnimNode_RotationOffsetBlendSpace:FAnimNode_BlendSpacePlayer
	/// Size: 0x150
	/// Properties: 3
	/// </summary>
	public class FAnimNode_RotationOffsetBlendSpace:FAnimNode_BlendSpacePlayer
	{
		public override int ObjectSize => 336;
		/// <summary>
		/// Name: BasePose
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x18
		/// </summary>
		public FPoseLink BasePose => ReadStruct<FPoseLink>(0x130);
		
		/// <summary>
		/// Name: LODThreshold
		/// Type: IntProperty
		/// Offset: 0x148
		/// Size: 0x04
		/// </summary>
		public int LODThreshold
		{
			get
			{
				return ReadInt32(0x148);
			}
			set
			{
				WriteInt32(0x148,value);
			}
		}
		
		/// <summary>
		/// Name: bIsLODEnabled
		/// Type: BoolProperty
		/// Offset: 0x14C
		/// Size: 0x01
		/// </summary>
		public bool bIsLODEnabled
		{
			get
			{
				return ReadBool(0x14C);
			}
			set
			{
				WriteBool(0x14C,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_SaveCachedPose:FAnimNode_Base
	/// Size: 0x90
	/// Properties: 1
	/// </summary>
	public class FAnimNode_SaveCachedPose:FAnimNode_Base
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: Pose
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x18
		/// </summary>
		public FPoseLink Pose => ReadStruct<FPoseLink>(0x30);
		
	}


	/// <summary>
	/// FAnimNode_SequenceEvaluator:FAnimNode_AssetPlayerBase
	/// Size: 0x70
	/// Properties: 7
	/// </summary>
	public class FAnimNode_SequenceEvaluator:FAnimNode_AssetPlayerBase
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: Sequence
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UAnimSequenceBase Sequence => ReadUObject<UAnimSequenceBase>(0x58);
		
		/// <summary>
		/// Name: ExplicitTime
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float ExplicitTime
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: bShouldLoopWhenInSyncGroup
		/// Type: BoolProperty
		/// Offset: 0x64
		/// Size: 0x01
		/// </summary>
		public bool bShouldLoopWhenInSyncGroup
		{
			get
			{
				return ReadBool(0x64);
			}
			set
			{
				WriteBool(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: bTeleportToExplicitTime
		/// Type: BoolProperty
		/// Offset: 0x65
		/// Size: 0x01
		/// </summary>
		public bool bTeleportToExplicitTime
		{
			get
			{
				return ReadBool(0x65);
			}
			set
			{
				WriteBool(0x65,value);
			}
		}
		
		/// <summary>
		/// Name: StartPosition
		/// Type: FloatProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public float StartPosition
		{
			get
			{
				return ReadSingle(0x68);
			}
			set
			{
				WriteSingle(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: ReinitializationBehavior
		/// Type: ByteProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public byte ReinitializationBehavior
		{
			get
			{
				return ReadByte(0x6C);
			}
			set
			{
				WriteByte(0x6C,value);
			}
		}
		
		/// <summary>
		/// Name: bReinitialized
		/// Type: BoolProperty
		/// Offset: 0x6D
		/// Size: 0x01
		/// </summary>
		public bool bReinitialized
		{
			get
			{
				return ReadBool(0x6D);
			}
			set
			{
				WriteBool(0x6D,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_Slot:FAnimNode_Base
	/// Size: 0x60
	/// Properties: 2
	/// </summary>
	public class FAnimNode_Slot:FAnimNode_Base
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: Source
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x18
		/// </summary>
		public FPoseLink Source => ReadStruct<FPoseLink>(0x30);
		
		/// <summary>
		/// Name: SlotName
		/// Type: NameProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FAnimationNode_TwoWayBlend:FAnimNode_Base
	/// Size: 0x70
	/// Properties: 4
	/// </summary>
	public class FAnimationNode_TwoWayBlend:FAnimNode_Base
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: A
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x18
		/// </summary>
		public FPoseLink A => ReadStruct<FPoseLink>(0x30);
		
		/// <summary>
		/// Name: B
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x18
		/// </summary>
		public FPoseLink B => ReadStruct<FPoseLink>(0x48);
		
		/// <summary>
		/// Name: Alpha
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float Alpha
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: AlphaScaleBias
		/// Type: StructProperty
		/// Offset: 0x64
		/// Size: 0x08
		/// </summary>
		public FInputScaleBias AlphaScaleBias => ReadStruct<FInputScaleBias>(0x64);
		
	}


	/// <summary>
	/// FAnimNode_AnimDynamics:FAnimNode_SkeletalControlBase
	/// Size: 0x220
	/// Properties: 28
	/// </summary>
	public class FAnimNode_AnimDynamics:FAnimNode_SkeletalControlBase
	{
		public override int ObjectSize => 544;
		/// <summary>
		/// Name: SimulationSpace
		/// Type: ByteProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public byte SimulationSpace
		{
			get
			{
				return ReadByte(0x70);
			}
			set
			{
				WriteByte(0x70,value);
			}
		}
		
		/// <summary>
		/// Name: RelativeSpaceBone
		/// Type: StructProperty
		/// Offset: 0x78
		/// Size: 0x10
		/// </summary>
		public FBoneReference RelativeSpaceBone => ReadStruct<FBoneReference>(0x78);
		
		/// <summary>
		/// Name: bChain
		/// Type: BoolProperty
		/// Offset: 0x88
		/// Size: 0x01
		/// </summary>
		public bool bChain
		{
			get
			{
				return ReadBool(0x88);
			}
			set
			{
				WriteBool(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: BoundBone
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x10
		/// </summary>
		public FBoneReference BoundBone => ReadStruct<FBoneReference>(0x90);
		
		/// <summary>
		/// Name: ChainEnd
		/// Type: StructProperty
		/// Offset: 0xA0
		/// Size: 0x10
		/// </summary>
		public FBoneReference ChainEnd => ReadStruct<FBoneReference>(0xA0);
		
		/// <summary>
		/// Name: BoxExtents
		/// Type: StructProperty
		/// Offset: 0xB0
		/// Size: 0x0C
		/// </summary>
		public FVector BoxExtents => ReadStruct<FVector>(0xB0);
		
		/// <summary>
		/// Name: LocalJointOffset
		/// Type: StructProperty
		/// Offset: 0xBC
		/// Size: 0x0C
		/// </summary>
		public FVector LocalJointOffset => ReadStruct<FVector>(0xBC);
		
		/// <summary>
		/// Name: GravityScale
		/// Type: FloatProperty
		/// Offset: 0xC8
		/// Size: 0x04
		/// </summary>
		public float GravityScale
		{
			get
			{
				return ReadSingle(0xC8);
			}
			set
			{
				WriteSingle(0xC8,value);
			}
		}
		
		/// <summary>
		/// Name: bLinearSpring
		/// Type: BoolProperty
		/// Offset: 0xCC
		/// Size: 0x01
		/// </summary>
		public bool bLinearSpring
		{
			get
			{
				return ReadBool(0xCC);
			}
			set
			{
				WriteBool(0xCC,value);
			}
		}
		
		/// <summary>
		/// Name: bAngularSpring
		/// Type: BoolProperty
		/// Offset: 0xCD
		/// Size: 0x01
		/// </summary>
		public bool bAngularSpring
		{
			get
			{
				return ReadBool(0xCD);
			}
			set
			{
				WriteBool(0xCD,value);
			}
		}
		
		/// <summary>
		/// Name: LinearSpringConstant
		/// Type: FloatProperty
		/// Offset: 0xD0
		/// Size: 0x04
		/// </summary>
		public float LinearSpringConstant
		{
			get
			{
				return ReadSingle(0xD0);
			}
			set
			{
				WriteSingle(0xD0,value);
			}
		}
		
		/// <summary>
		/// Name: AngularSpringConstant
		/// Type: FloatProperty
		/// Offset: 0xD4
		/// Size: 0x04
		/// </summary>
		public float AngularSpringConstant
		{
			get
			{
				return ReadSingle(0xD4);
			}
			set
			{
				WriteSingle(0xD4,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableWind
		/// Type: BoolProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public bool bEnableWind
		{
			get
			{
				return ReadBool(0xD8);
			}
			set
			{
				WriteBool(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: WindScale
		/// Type: FloatProperty
		/// Offset: 0xDC
		/// Size: 0x04
		/// </summary>
		public float WindScale
		{
			get
			{
				return ReadSingle(0xDC);
			}
			set
			{
				WriteSingle(0xDC,value);
			}
		}
		
		/// <summary>
		/// Name: bOverrideLinearDamping
		/// Type: BoolProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public bool bOverrideLinearDamping
		{
			get
			{
				return ReadBool(0xE0);
			}
			set
			{
				WriteBool(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: LinearDampingOverride
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float LinearDampingOverride
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
		/// <summary>
		/// Name: bOverrideAngularDamping
		/// Type: BoolProperty
		/// Offset: 0xE8
		/// Size: 0x01
		/// </summary>
		public bool bOverrideAngularDamping
		{
			get
			{
				return ReadBool(0xE8);
			}
			set
			{
				WriteBool(0xE8,value);
			}
		}
		
		/// <summary>
		/// Name: AngularDampingOverride
		/// Type: FloatProperty
		/// Offset: 0xEC
		/// Size: 0x04
		/// </summary>
		public float AngularDampingOverride
		{
			get
			{
				return ReadSingle(0xEC);
			}
			set
			{
				WriteSingle(0xEC,value);
			}
		}
		
		/// <summary>
		/// Name: bDoUpdate
		/// Type: BoolProperty
		/// Offset: 0xF0
		/// Size: 0x01
		/// </summary>
		public bool bDoUpdate
		{
			get
			{
				return ReadBool(0xF0);
			}
			set
			{
				WriteBool(0xF0,value);
			}
		}
		
		/// <summary>
		/// Name: bDoEval
		/// Type: BoolProperty
		/// Offset: 0xF1
		/// Size: 0x01
		/// </summary>
		public bool bDoEval
		{
			get
			{
				return ReadBool(0xF1);
			}
			set
			{
				WriteBool(0xF1,value);
			}
		}
		
		/// <summary>
		/// Name: NumSolverIterationsPreUpdate
		/// Type: IntProperty
		/// Offset: 0xF4
		/// Size: 0x04
		/// </summary>
		public int NumSolverIterationsPreUpdate
		{
			get
			{
				return ReadInt32(0xF4);
			}
			set
			{
				WriteInt32(0xF4,value);
			}
		}
		
		/// <summary>
		/// Name: NumSolverIterationsPostUpdate
		/// Type: IntProperty
		/// Offset: 0xF8
		/// Size: 0x04
		/// </summary>
		public int NumSolverIterationsPostUpdate
		{
			get
			{
				return ReadInt32(0xF8);
			}
			set
			{
				WriteInt32(0xF8,value);
			}
		}
		
		/// <summary>
		/// Name: ConstraintSetup
		/// Type: StructProperty
		/// Offset: 0xFC
		/// Size: 0x5C
		/// </summary>
		public FAnimPhysConstraintSetup ConstraintSetup => ReadStruct<FAnimPhysConstraintSetup>(0xFC);
		
		/// <summary>
		/// Name: bUsePlanarLimit
		/// Type: BoolProperty
		/// Offset: 0x158
		/// Size: 0x01
		/// </summary>
		public bool bUsePlanarLimit
		{
			get
			{
				return ReadBool(0x158);
			}
			set
			{
				WriteBool(0x158,value);
			}
		}
		
		/// <summary>
		/// Name: PlanarLimits
		/// Type: TArray<FAnimPhysPlanarLimit>
		/// Offset: 0x160
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FAnimPhysPlanarLimit> PlanarLimits => new TArray<FAnimPhysPlanarLimit>(BaseAddress+0x160);
		
		/// <summary>
		/// Name: CollisionType
		/// Type: ByteProperty
		/// Offset: 0x170
		/// Size: 0x01
		/// </summary>
		public byte CollisionType
		{
			get
			{
				return ReadByte(0x170);
			}
			set
			{
				WriteByte(0x170,value);
			}
		}
		
		/// <summary>
		/// Name: SphereCollisionRadius
		/// Type: FloatProperty
		/// Offset: 0x174
		/// Size: 0x04
		/// </summary>
		public float SphereCollisionRadius
		{
			get
			{
				return ReadSingle(0x174);
			}
			set
			{
				WriteSingle(0x174,value);
			}
		}
		
		/// <summary>
		/// Name: ExternalForce
		/// Type: StructProperty
		/// Offset: 0x178
		/// Size: 0x0C
		/// </summary>
		public FVector ExternalForce => ReadStruct<FVector>(0x178);
		
	}


	/// <summary>
	/// FAnimPhysPlanarLimit:
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class FAnimPhysPlanarLimit:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: DrivingBone
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FBoneReference DrivingBone => ReadStruct<FBoneReference>(0x00);
		
		/// <summary>
		/// Name: PlaneTransform
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x30
		/// </summary>
		public FTransform PlaneTransform => ReadStruct<FTransform>(0x10);
		
	}


	/// <summary>
	/// FBoneReference:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FBoneReference:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: BoneName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FAnimPhysConstraintSetup:
	/// Size: 0x5C
	/// Properties: 16
	/// </summary>
	public class FAnimPhysConstraintSetup:MemoryObject
	{
		public override int ObjectSize => 92;
		/// <summary>
		/// Name: LinearXLimitType
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte LinearXLimitType
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: LinearYLimitType
		/// Type: ByteProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public byte LinearYLimitType
		{
			get
			{
				return ReadByte(0x01);
			}
			set
			{
				WriteByte(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: LinearZLimitType
		/// Type: ByteProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public byte LinearZLimitType
		{
			get
			{
				return ReadByte(0x02);
			}
			set
			{
				WriteByte(0x02,value);
			}
		}
		
		/// <summary>
		/// Name: LinearAxesMin
		/// Type: StructProperty
		/// Offset: 0x04
		/// Size: 0x0C
		/// </summary>
		public FVector LinearAxesMin => ReadStruct<FVector>(0x04);
		
		/// <summary>
		/// Name: LinearAxesMax
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x0C
		/// </summary>
		public FVector LinearAxesMax => ReadStruct<FVector>(0x10);
		
		/// <summary>
		/// Name: AngularConstraintType
		/// Type: ByteProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public byte AngularConstraintType
		{
			get
			{
				return ReadByte(0x1C);
			}
			set
			{
				WriteByte(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: TwistAxis
		/// Type: ByteProperty
		/// Offset: 0x1D
		/// Size: 0x01
		/// </summary>
		public byte TwistAxis
		{
			get
			{
				return ReadByte(0x1D);
			}
			set
			{
				WriteByte(0x1D,value);
			}
		}
		
		/// <summary>
		/// Name: ConeAngle
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float ConeAngle
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: AngularXAngle
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float AngularXAngle
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: AngularYAngle
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float AngularYAngle
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: AngularZAngle
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float AngularZAngle
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: AngularLimitsMin
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x0C
		/// </summary>
		public FVector AngularLimitsMin => ReadStruct<FVector>(0x30);
		
		/// <summary>
		/// Name: AngularLimitsMax
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x0C
		/// </summary>
		public FVector AngularLimitsMax => ReadStruct<FVector>(0x3C);
		
		/// <summary>
		/// Name: AngularTargetAxis
		/// Type: ByteProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public byte AngularTargetAxis
		{
			get
			{
				return ReadByte(0x48);
			}
			set
			{
				WriteByte(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: AngularTarget
		/// Type: StructProperty
		/// Offset: 0x4C
		/// Size: 0x0C
		/// </summary>
		public FVector AngularTarget => ReadStruct<FVector>(0x4C);
		
		/// <summary>
		/// Name: bLinearFullyLocked
		/// Type: BoolProperty
		/// Offset: 0x58
		/// Size: 0x01
		/// </summary>
		public bool bLinearFullyLocked
		{
			get
			{
				return ReadBool(0x58);
			}
			set
			{
				WriteBool(0x58,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_BoneDrivenController:FAnimNode_SkeletalControlBase
	/// Size: 0xD8
	/// Properties: 23
	/// </summary>
	public class FAnimNode_BoneDrivenController:FAnimNode_SkeletalControlBase
	{
		public override int ObjectSize => 216;
		/// <summary>
		/// Name: SourceBone
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FBoneReference SourceBone => ReadStruct<FBoneReference>(0x70);
		
		/// <summary>
		/// Name: SourceComponent
		/// Type: ByteProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public byte SourceComponent
		{
			get
			{
				return ReadByte(0x80);
			}
			set
			{
				WriteByte(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: DrivingCurve
		/// Type: ObjectProperty
		/// Offset: 0x88
		/// Size: 0x08
		/// </summary>
		public UCurveFloat DrivingCurve => ReadUObject<UCurveFloat>(0x88);
		
		/// <summary>
		/// Name: Multiplier
		/// Type: FloatProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public float Multiplier
		{
			get
			{
				return ReadSingle(0x90);
			}
			set
			{
				WriteSingle(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: bUseRange
		/// Type: BoolProperty
		/// Offset: 0x94
		/// Size: 0x01
		/// </summary>
		public bool bUseRange
		{
			get
			{
				return ReadBool(0x94);
			}
			set
			{
				WriteBool(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: RangeMin
		/// Type: FloatProperty
		/// Offset: 0x98
		/// Size: 0x04
		/// </summary>
		public float RangeMin
		{
			get
			{
				return ReadSingle(0x98);
			}
			set
			{
				WriteSingle(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: RangeMax
		/// Type: FloatProperty
		/// Offset: 0x9C
		/// Size: 0x04
		/// </summary>
		public float RangeMax
		{
			get
			{
				return ReadSingle(0x9C);
			}
			set
			{
				WriteSingle(0x9C,value);
			}
		}
		
		/// <summary>
		/// Name: RemappedMin
		/// Type: FloatProperty
		/// Offset: 0xA0
		/// Size: 0x04
		/// </summary>
		public float RemappedMin
		{
			get
			{
				return ReadSingle(0xA0);
			}
			set
			{
				WriteSingle(0xA0,value);
			}
		}
		
		/// <summary>
		/// Name: RemappedMax
		/// Type: FloatProperty
		/// Offset: 0xA4
		/// Size: 0x04
		/// </summary>
		public float RemappedMax
		{
			get
			{
				return ReadSingle(0xA4);
			}
			set
			{
				WriteSingle(0xA4,value);
			}
		}
		
		/// <summary>
		/// Name: DestinationMode
		/// Type: ByteProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public byte DestinationMode
		{
			get
			{
				return ReadByte(0xA8);
			}
			set
			{
				WriteByte(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0xB0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: TargetBone
		/// Type: StructProperty
		/// Offset: 0xB8
		/// Size: 0x10
		/// </summary>
		public FBoneReference TargetBone => ReadStruct<FBoneReference>(0xB8);
		
		/// <summary>
		/// Name: TargetComponent
		/// Type: ByteProperty
		/// Offset: 0xC8
		/// Size: 0x01
		/// </summary>
		public byte TargetComponent
		{
			get
			{
				return ReadByte(0xC8);
			}
			set
			{
				WriteByte(0xC8,value);
			}
		}
		
		/// <summary>
		/// Name: bAffectTargetTranslationX
		/// Type: BoolProperty
		/// Offset: 0xCC
		/// Size: 0x01
		/// </summary>
		public bool bAffectTargetTranslationX => (ReadByte(0x00CC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bAffectTargetTranslationY
		/// Type: BoolProperty
		/// Offset: 0xCC
		/// Size: 0x01
		/// </summary>
		public bool bAffectTargetTranslationY => (ReadByte(0x00CC) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bAffectTargetTranslationZ
		/// Type: BoolProperty
		/// Offset: 0xCC
		/// Size: 0x01
		/// </summary>
		public bool bAffectTargetTranslationZ => (ReadByte(0x00CC) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bAffectTargetRotationX
		/// Type: BoolProperty
		/// Offset: 0xCC
		/// Size: 0x01
		/// </summary>
		public bool bAffectTargetRotationX => (ReadByte(0x00CC) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bAffectTargetRotationY
		/// Type: BoolProperty
		/// Offset: 0xCC
		/// Size: 0x01
		/// </summary>
		public bool bAffectTargetRotationY => (ReadByte(0x00CC) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bAffectTargetRotationZ
		/// Type: BoolProperty
		/// Offset: 0xCC
		/// Size: 0x01
		/// </summary>
		public bool bAffectTargetRotationZ => (ReadByte(0x00CC) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bAffectTargetScaleX
		/// Type: BoolProperty
		/// Offset: 0xCC
		/// Size: 0x01
		/// </summary>
		public bool bAffectTargetScaleX => (ReadByte(0x00CC) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bAffectTargetScaleY
		/// Type: BoolProperty
		/// Offset: 0xCC
		/// Size: 0x01
		/// </summary>
		public bool bAffectTargetScaleY => (ReadByte(0x00CC) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bAffectTargetScaleZ
		/// Type: BoolProperty
		/// Offset: 0xCD
		/// Size: 0x01
		/// </summary>
		public bool bAffectTargetScaleZ => (ReadByte(0x00CD) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ModificationMode
		/// Type: ByteProperty
		/// Offset: 0xD0
		/// Size: 0x01
		/// </summary>
		public byte ModificationMode
		{
			get
			{
				return ReadByte(0xD0);
			}
			set
			{
				WriteByte(0xD0,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_CopyBone:FAnimNode_SkeletalControlBase
	/// Size: 0x98
	/// Properties: 6
	/// </summary>
	public class FAnimNode_CopyBone:FAnimNode_SkeletalControlBase
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: SourceBone
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FBoneReference SourceBone => ReadStruct<FBoneReference>(0x70);
		
		/// <summary>
		/// Name: TargetBone
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FBoneReference TargetBone => ReadStruct<FBoneReference>(0x80);
		
		/// <summary>
		/// Name: bCopyTranslation
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool bCopyTranslation
		{
			get
			{
				return ReadBool(0x90);
			}
			set
			{
				WriteBool(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: bCopyRotation
		/// Type: BoolProperty
		/// Offset: 0x91
		/// Size: 0x01
		/// </summary>
		public bool bCopyRotation
		{
			get
			{
				return ReadBool(0x91);
			}
			set
			{
				WriteBool(0x91,value);
			}
		}
		
		/// <summary>
		/// Name: bCopyScale
		/// Type: BoolProperty
		/// Offset: 0x92
		/// Size: 0x01
		/// </summary>
		public bool bCopyScale
		{
			get
			{
				return ReadBool(0x92);
			}
			set
			{
				WriteBool(0x92,value);
			}
		}
		
		/// <summary>
		/// Name: ControlSpace
		/// Type: ByteProperty
		/// Offset: 0x93
		/// Size: 0x01
		/// </summary>
		public byte ControlSpace
		{
			get
			{
				return ReadByte(0x93);
			}
			set
			{
				WriteByte(0x93,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_CopyBoneDelta:FAnimNode_SkeletalControlBase
	/// Size: 0xA0
	/// Properties: 9
	/// </summary>
	public class FAnimNode_CopyBoneDelta:FAnimNode_SkeletalControlBase
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: SourceBone
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FBoneReference SourceBone => ReadStruct<FBoneReference>(0x70);
		
		/// <summary>
		/// Name: TargetBone
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FBoneReference TargetBone => ReadStruct<FBoneReference>(0x80);
		
		/// <summary>
		/// Name: bCopyTranslation
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool bCopyTranslation
		{
			get
			{
				return ReadBool(0x90);
			}
			set
			{
				WriteBool(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: bCopyRotation
		/// Type: BoolProperty
		/// Offset: 0x91
		/// Size: 0x01
		/// </summary>
		public bool bCopyRotation
		{
			get
			{
				return ReadBool(0x91);
			}
			set
			{
				WriteBool(0x91,value);
			}
		}
		
		/// <summary>
		/// Name: bCopyScale
		/// Type: BoolProperty
		/// Offset: 0x92
		/// Size: 0x01
		/// </summary>
		public bool bCopyScale
		{
			get
			{
				return ReadBool(0x92);
			}
			set
			{
				WriteBool(0x92,value);
			}
		}
		
		/// <summary>
		/// Name: CopyMode
		/// Type: ByteProperty
		/// Offset: 0x93
		/// Size: 0x01
		/// </summary>
		public byte CopyMode
		{
			get
			{
				return ReadByte(0x93);
			}
			set
			{
				WriteByte(0x93,value);
			}
		}
		
		/// <summary>
		/// Name: TranslationMultiplier
		/// Type: FloatProperty
		/// Offset: 0x94
		/// Size: 0x04
		/// </summary>
		public float TranslationMultiplier
		{
			get
			{
				return ReadSingle(0x94);
			}
			set
			{
				WriteSingle(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: RotationMultiplier
		/// Type: FloatProperty
		/// Offset: 0x98
		/// Size: 0x04
		/// </summary>
		public float RotationMultiplier
		{
			get
			{
				return ReadSingle(0x98);
			}
			set
			{
				WriteSingle(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: ScaleMultiplier
		/// Type: FloatProperty
		/// Offset: 0x9C
		/// Size: 0x04
		/// </summary>
		public float ScaleMultiplier
		{
			get
			{
				return ReadSingle(0x9C);
			}
			set
			{
				WriteSingle(0x9C,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_Fabrik:FAnimNode_SkeletalControlBase
	/// Size: 0xF0
	/// Properties: 9
	/// </summary>
	public class FAnimNode_Fabrik:FAnimNode_SkeletalControlBase
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: EffectorTransform
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x30
		/// </summary>
		public FTransform EffectorTransform => ReadStruct<FTransform>(0x70);
		
		/// <summary>
		/// Name: EffectorTransformSpace
		/// Type: ByteProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public byte EffectorTransformSpace
		{
			get
			{
				return ReadByte(0xA0);
			}
			set
			{
				WriteByte(0xA0,value);
			}
		}
		
		/// <summary>
		/// Name: EffectorTransformBone
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x10
		/// </summary>
		public FBoneReference EffectorTransformBone => ReadStruct<FBoneReference>(0xA8);
		
		/// <summary>
		/// Name: EffectorRotationSource
		/// Type: ByteProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public byte EffectorRotationSource
		{
			get
			{
				return ReadByte(0xB8);
			}
			set
			{
				WriteByte(0xB8,value);
			}
		}
		
		/// <summary>
		/// Name: TipBone
		/// Type: StructProperty
		/// Offset: 0xC0
		/// Size: 0x10
		/// </summary>
		public FBoneReference TipBone => ReadStruct<FBoneReference>(0xC0);
		
		/// <summary>
		/// Name: RootBone
		/// Type: StructProperty
		/// Offset: 0xD0
		/// Size: 0x10
		/// </summary>
		public FBoneReference RootBone => ReadStruct<FBoneReference>(0xD0);
		
		/// <summary>
		/// Name: Precision
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float Precision
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: MaxIterations
		/// Type: IntProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public int MaxIterations
		{
			get
			{
				return ReadInt32(0xE4);
			}
			set
			{
				WriteInt32(0xE4,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableDebugDraw
		/// Type: BoolProperty
		/// Offset: 0xE8
		/// Size: 0x01
		/// </summary>
		public bool bEnableDebugDraw
		{
			get
			{
				return ReadBool(0xE8);
			}
			set
			{
				WriteBool(0xE8,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_HandIKRetargeting:FAnimNode_SkeletalControlBase
	/// Size: 0xC8
	/// Properties: 6
	/// </summary>
	public class FAnimNode_HandIKRetargeting:FAnimNode_SkeletalControlBase
	{
		public override int ObjectSize => 200;
		/// <summary>
		/// Name: RightHandFK
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FBoneReference RightHandFK => ReadStruct<FBoneReference>(0x70);
		
		/// <summary>
		/// Name: LeftHandFK
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FBoneReference LeftHandFK => ReadStruct<FBoneReference>(0x80);
		
		/// <summary>
		/// Name: RightHandIK
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x10
		/// </summary>
		public FBoneReference RightHandIK => ReadStruct<FBoneReference>(0x90);
		
		/// <summary>
		/// Name: LeftHandIK
		/// Type: StructProperty
		/// Offset: 0xA0
		/// Size: 0x10
		/// </summary>
		public FBoneReference LeftHandIK => ReadStruct<FBoneReference>(0xA0);
		
		/// <summary>
		/// Name: IKBonesToMove
		/// Type: TArray<FBoneReference>
		/// Offset: 0xB0
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FBoneReference> IKBonesToMove => new TArray<FBoneReference>(BaseAddress+0xB0);
		
		/// <summary>
		/// Name: HandFKWeight
		/// Type: FloatProperty
		/// Offset: 0xC0
		/// Size: 0x04
		/// </summary>
		public float HandFKWeight
		{
			get
			{
				return ReadSingle(0xC0);
			}
			set
			{
				WriteSingle(0xC0,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_LookAt:FAnimNode_SkeletalControlBase
	/// Size: 0x120
	/// Properties: 12
	/// </summary>
	public class FAnimNode_LookAt:FAnimNode_SkeletalControlBase
	{
		public override int ObjectSize => 288;
		/// <summary>
		/// Name: BoneToModify
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FBoneReference BoneToModify => ReadStruct<FBoneReference>(0x70);
		
		/// <summary>
		/// Name: LookAtBone
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FBoneReference LookAtBone => ReadStruct<FBoneReference>(0x80);
		
		/// <summary>
		/// Name: LookAtSocket
		/// Type: NameProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: LookAtLocation
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x0C
		/// </summary>
		public FVector LookAtLocation => ReadStruct<FVector>(0x98);
		
		/// <summary>
		/// Name: LookAtAxis
		/// Type: ByteProperty
		/// Offset: 0xA4
		/// Size: 0x01
		/// </summary>
		public byte LookAtAxis
		{
			get
			{
				return ReadByte(0xA4);
			}
			set
			{
				WriteByte(0xA4,value);
			}
		}
		
		/// <summary>
		/// Name: bUseLookUpAxis
		/// Type: BoolProperty
		/// Offset: 0xA5
		/// Size: 0x01
		/// </summary>
		public bool bUseLookUpAxis
		{
			get
			{
				return ReadBool(0xA5);
			}
			set
			{
				WriteBool(0xA5,value);
			}
		}
		
		/// <summary>
		/// Name: LookUpAxis
		/// Type: ByteProperty
		/// Offset: 0xA6
		/// Size: 0x01
		/// </summary>
		public byte LookUpAxis
		{
			get
			{
				return ReadByte(0xA6);
			}
			set
			{
				WriteByte(0xA6,value);
			}
		}
		
		/// <summary>
		/// Name: LookAtClamp
		/// Type: FloatProperty
		/// Offset: 0xA8
		/// Size: 0x04
		/// </summary>
		public float LookAtClamp
		{
			get
			{
				return ReadSingle(0xA8);
			}
			set
			{
				WriteSingle(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: InterpolationType
		/// Type: ByteProperty
		/// Offset: 0xAC
		/// Size: 0x01
		/// </summary>
		public byte InterpolationType
		{
			get
			{
				return ReadByte(0xAC);
			}
			set
			{
				WriteByte(0xAC,value);
			}
		}
		
		/// <summary>
		/// Name: InterpolationTime
		/// Type: FloatProperty
		/// Offset: 0xB0
		/// Size: 0x04
		/// </summary>
		public float InterpolationTime
		{
			get
			{
				return ReadSingle(0xB0);
			}
			set
			{
				WriteSingle(0xB0,value);
			}
		}
		
		/// <summary>
		/// Name: InterpolationTriggerThreashold
		/// Type: FloatProperty
		/// Offset: 0xB4
		/// Size: 0x04
		/// </summary>
		public float InterpolationTriggerThreashold
		{
			get
			{
				return ReadSingle(0xB4);
			}
			set
			{
				WriteSingle(0xB4,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableDebug
		/// Type: BoolProperty
		/// Offset: 0xB8
		/// Size: 0x01
		/// </summary>
		public bool bEnableDebug
		{
			get
			{
				return ReadBool(0xB8);
			}
			set
			{
				WriteBool(0xB8,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_ModifyBone:FAnimNode_SkeletalControlBase
	/// Size: 0xB0
	/// Properties: 10
	/// </summary>
	public class FAnimNode_ModifyBone:FAnimNode_SkeletalControlBase
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: BoneToModify
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FBoneReference BoneToModify => ReadStruct<FBoneReference>(0x70);
		
		/// <summary>
		/// Name: Translation
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x0C
		/// </summary>
		public FVector Translation => ReadStruct<FVector>(0x80);
		
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x8C
		/// Size: 0x0C
		/// </summary>
		public FRotator Rotation => ReadStruct<FRotator>(0x8C);
		
		/// <summary>
		/// Name: Scale
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x0C
		/// </summary>
		public FVector Scale => ReadStruct<FVector>(0x98);
		
		/// <summary>
		/// Name: TranslationMode
		/// Type: ByteProperty
		/// Offset: 0xA4
		/// Size: 0x01
		/// </summary>
		public byte TranslationMode
		{
			get
			{
				return ReadByte(0xA4);
			}
			set
			{
				WriteByte(0xA4,value);
			}
		}
		
		/// <summary>
		/// Name: RotationMode
		/// Type: ByteProperty
		/// Offset: 0xA5
		/// Size: 0x01
		/// </summary>
		public byte RotationMode
		{
			get
			{
				return ReadByte(0xA5);
			}
			set
			{
				WriteByte(0xA5,value);
			}
		}
		
		/// <summary>
		/// Name: ScaleMode
		/// Type: ByteProperty
		/// Offset: 0xA6
		/// Size: 0x01
		/// </summary>
		public byte ScaleMode
		{
			get
			{
				return ReadByte(0xA6);
			}
			set
			{
				WriteByte(0xA6,value);
			}
		}
		
		/// <summary>
		/// Name: TranslationSpace
		/// Type: ByteProperty
		/// Offset: 0xA7
		/// Size: 0x01
		/// </summary>
		public byte TranslationSpace
		{
			get
			{
				return ReadByte(0xA7);
			}
			set
			{
				WriteByte(0xA7,value);
			}
		}
		
		/// <summary>
		/// Name: RotationSpace
		/// Type: ByteProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public byte RotationSpace
		{
			get
			{
				return ReadByte(0xA8);
			}
			set
			{
				WriteByte(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: ScaleSpace
		/// Type: ByteProperty
		/// Offset: 0xA9
		/// Size: 0x01
		/// </summary>
		public byte ScaleSpace
		{
			get
			{
				return ReadByte(0xA9);
			}
			set
			{
				WriteByte(0xA9,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_ObserveBone:FAnimNode_SkeletalControlBase
	/// Size: 0xA8
	/// Properties: 6
	/// </summary>
	public class FAnimNode_ObserveBone:FAnimNode_SkeletalControlBase
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: BoneToObserve
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FBoneReference BoneToObserve => ReadStruct<FBoneReference>(0x70);
		
		/// <summary>
		/// Name: DisplaySpace
		/// Type: ByteProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public byte DisplaySpace
		{
			get
			{
				return ReadByte(0x80);
			}
			set
			{
				WriteByte(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: bRelativeToRefPose
		/// Type: BoolProperty
		/// Offset: 0x81
		/// Size: 0x01
		/// </summary>
		public bool bRelativeToRefPose
		{
			get
			{
				return ReadBool(0x81);
			}
			set
			{
				WriteBool(0x81,value);
			}
		}
		
		/// <summary>
		/// Name: Translation
		/// Type: StructProperty
		/// Offset: 0x84
		/// Size: 0x0C
		/// </summary>
		public FVector Translation => ReadStruct<FVector>(0x84);
		
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x0C
		/// </summary>
		public FRotator Rotation => ReadStruct<FRotator>(0x90);
		
		/// <summary>
		/// Name: Scale
		/// Type: StructProperty
		/// Offset: 0x9C
		/// Size: 0x0C
		/// </summary>
		public FVector Scale => ReadStruct<FVector>(0x9C);
		
	}


	/// <summary>
	/// FAnimNode_RotationMultiplier:FAnimNode_SkeletalControlBase
	/// Size: 0x98
	/// Properties: 5
	/// </summary>
	public class FAnimNode_RotationMultiplier:FAnimNode_SkeletalControlBase
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: TargetBone
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FBoneReference TargetBone => ReadStruct<FBoneReference>(0x70);
		
		/// <summary>
		/// Name: SourceBone
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FBoneReference SourceBone => ReadStruct<FBoneReference>(0x80);
		
		/// <summary>
		/// Name: Multiplier
		/// Type: FloatProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public float Multiplier
		{
			get
			{
				return ReadSingle(0x90);
			}
			set
			{
				WriteSingle(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: RotationAxisToRefer
		/// Type: ByteProperty
		/// Offset: 0x94
		/// Size: 0x01
		/// </summary>
		public byte RotationAxisToRefer
		{
			get
			{
				return ReadByte(0x94);
			}
			set
			{
				WriteByte(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: bIsAdditive
		/// Type: BoolProperty
		/// Offset: 0x95
		/// Size: 0x01
		/// </summary>
		public bool bIsAdditive
		{
			get
			{
				return ReadBool(0x95);
			}
			set
			{
				WriteBool(0x95,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_SpringBone:FAnimNode_SkeletalControlBase
	/// Size: 0xC8
	/// Properties: 13
	/// </summary>
	public class FAnimNode_SpringBone:FAnimNode_SkeletalControlBase
	{
		public override int ObjectSize => 200;
		/// <summary>
		/// Name: SpringBone
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FBoneReference SpringBone => ReadStruct<FBoneReference>(0x70);
		
		/// <summary>
		/// Name: bLimitDisplacement
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bLimitDisplacement
		{
			get
			{
				return ReadBool(0x80);
			}
			set
			{
				WriteBool(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: MaxDisplacement
		/// Type: FloatProperty
		/// Offset: 0x84
		/// Size: 0x04
		/// </summary>
		public float MaxDisplacement
		{
			get
			{
				return ReadSingle(0x84);
			}
			set
			{
				WriteSingle(0x84,value);
			}
		}
		
		/// <summary>
		/// Name: SpringStiffness
		/// Type: FloatProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public float SpringStiffness
		{
			get
			{
				return ReadSingle(0x88);
			}
			set
			{
				WriteSingle(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: SpringDamping
		/// Type: FloatProperty
		/// Offset: 0x8C
		/// Size: 0x04
		/// </summary>
		public float SpringDamping
		{
			get
			{
				return ReadSingle(0x8C);
			}
			set
			{
				WriteSingle(0x8C,value);
			}
		}
		
		/// <summary>
		/// Name: ErrorResetThresh
		/// Type: FloatProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public float ErrorResetThresh
		{
			get
			{
				return ReadSingle(0x90);
			}
			set
			{
				WriteSingle(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: bNoZSpring
		/// Type: BoolProperty
		/// Offset: 0x94
		/// Size: 0x01
		/// </summary>
		public bool bNoZSpring
		{
			get
			{
				return ReadBool(0x94);
			}
			set
			{
				WriteBool(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: bTranslateX
		/// Type: BoolProperty
		/// Offset: 0x95
		/// Size: 0x01
		/// </summary>
		public bool bTranslateX
		{
			get
			{
				return ReadBool(0x95);
			}
			set
			{
				WriteBool(0x95,value);
			}
		}
		
		/// <summary>
		/// Name: bTranslateY
		/// Type: BoolProperty
		/// Offset: 0x96
		/// Size: 0x01
		/// </summary>
		public bool bTranslateY
		{
			get
			{
				return ReadBool(0x96);
			}
			set
			{
				WriteBool(0x96,value);
			}
		}
		
		/// <summary>
		/// Name: bTranslateZ
		/// Type: BoolProperty
		/// Offset: 0x97
		/// Size: 0x01
		/// </summary>
		public bool bTranslateZ
		{
			get
			{
				return ReadBool(0x97);
			}
			set
			{
				WriteBool(0x97,value);
			}
		}
		
		/// <summary>
		/// Name: bRotateX
		/// Type: BoolProperty
		/// Offset: 0x98
		/// Size: 0x01
		/// </summary>
		public bool bRotateX
		{
			get
			{
				return ReadBool(0x98);
			}
			set
			{
				WriteBool(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: bRotateY
		/// Type: BoolProperty
		/// Offset: 0x99
		/// Size: 0x01
		/// </summary>
		public bool bRotateY
		{
			get
			{
				return ReadBool(0x99);
			}
			set
			{
				WriteBool(0x99,value);
			}
		}
		
		/// <summary>
		/// Name: bRotateZ
		/// Type: BoolProperty
		/// Offset: 0x9A
		/// Size: 0x01
		/// </summary>
		public bool bRotateZ
		{
			get
			{
				return ReadBool(0x9A);
			}
			set
			{
				WriteBool(0x9A,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_Trail:FAnimNode_SkeletalControlBase
	/// Size: 0x1A0
	/// Properties: 11
	/// </summary>
	public class FAnimNode_Trail:FAnimNode_SkeletalControlBase
	{
		public override int ObjectSize => 416;
		/// <summary>
		/// Name: TrailBone
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FBoneReference TrailBone => ReadStruct<FBoneReference>(0x70);
		
		/// <summary>
		/// Name: ChainLength
		/// Type: IntProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public int ChainLength
		{
			get
			{
				return ReadInt32(0x80);
			}
			set
			{
				WriteInt32(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: ChainBoneAxis
		/// Type: ByteProperty
		/// Offset: 0x84
		/// Size: 0x01
		/// </summary>
		public byte ChainBoneAxis
		{
			get
			{
				return ReadByte(0x84);
			}
			set
			{
				WriteByte(0x84,value);
			}
		}
		
		/// <summary>
		/// Name: bInvertChainBoneAxis
		/// Type: BoolProperty
		/// Offset: 0x85
		/// Size: 0x01
		/// </summary>
		public bool bInvertChainBoneAxis
		{
			get
			{
				return ReadBool(0x85);
			}
			set
			{
				WriteBool(0x85,value);
			}
		}
		
		/// <summary>
		/// Name: TrailRelaxation
		/// Type: FloatProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public float TrailRelaxation
		{
			get
			{
				return ReadSingle(0x88);
			}
			set
			{
				WriteSingle(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: TrailRelaxationSpeed
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x80
		/// </summary>
		public FRuntimeFloatCurve TrailRelaxationSpeed => ReadStruct<FRuntimeFloatCurve>(0x90);
		
		/// <summary>
		/// Name: bLimitStretch
		/// Type: BoolProperty
		/// Offset: 0x110
		/// Size: 0x01
		/// </summary>
		public bool bLimitStretch
		{
			get
			{
				return ReadBool(0x110);
			}
			set
			{
				WriteBool(0x110,value);
			}
		}
		
		/// <summary>
		/// Name: StretchLimit
		/// Type: FloatProperty
		/// Offset: 0x114
		/// Size: 0x04
		/// </summary>
		public float StretchLimit
		{
			get
			{
				return ReadSingle(0x114);
			}
			set
			{
				WriteSingle(0x114,value);
			}
		}
		
		/// <summary>
		/// Name: FakeVelocity
		/// Type: StructProperty
		/// Offset: 0x118
		/// Size: 0x0C
		/// </summary>
		public FVector FakeVelocity => ReadStruct<FVector>(0x118);
		
		/// <summary>
		/// Name: bActorSpaceFakeVel
		/// Type: BoolProperty
		/// Offset: 0x124
		/// Size: 0x01
		/// </summary>
		public bool bActorSpaceFakeVel
		{
			get
			{
				return ReadBool(0x124);
			}
			set
			{
				WriteBool(0x124,value);
			}
		}
		
		/// <summary>
		/// Name: BaseJoint
		/// Type: StructProperty
		/// Offset: 0x128
		/// Size: 0x10
		/// </summary>
		public FBoneReference BaseJoint => ReadStruct<FBoneReference>(0x128);
		
	}


	/// <summary>
	/// FRuntimeFloatCurve:
	/// Size: 0x80
	/// Properties: 2
	/// </summary>
	public class FRuntimeFloatCurve:MemoryObject
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: EditorCurveData
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x78
		/// </summary>
		public FRichCurve EditorCurveData => ReadStruct<FRichCurve>(0x00);
		
		/// <summary>
		/// Name: ExternalCurve
		/// Type: ObjectProperty
		/// Offset: 0x78
		/// Size: 0x08
		/// </summary>
		public UCurveFloat ExternalCurve => ReadUObject<UCurveFloat>(0x78);
		
	}


	/// <summary>
	/// FAnimNode_TwistCorrectiveNode:FAnimNode_SkeletalControlBase
	/// Size: 0xE8
	/// Properties: 7
	/// </summary>
	public class FAnimNode_TwistCorrectiveNode:FAnimNode_SkeletalControlBase
	{
		public override int ObjectSize => 232;
		/// <summary>
		/// Name: BaseFrame
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x20
		/// </summary>
		public FReferenceBoneFrame BaseFrame => ReadStruct<FReferenceBoneFrame>(0x70);
		
		/// <summary>
		/// Name: TwistFrame
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x20
		/// </summary>
		public FReferenceBoneFrame TwistFrame => ReadStruct<FReferenceBoneFrame>(0x90);
		
		/// <summary>
		/// Name: TwistPlaneNormalAxis
		/// Type: StructProperty
		/// Offset: 0xB0
		/// Size: 0x10
		/// </summary>
		public FAxis TwistPlaneNormalAxis => ReadStruct<FAxis>(0xB0);
		
		/// <summary>
		/// Name: RangeMax
		/// Type: FloatProperty
		/// Offset: 0xC0
		/// Size: 0x04
		/// </summary>
		public float RangeMax
		{
			get
			{
				return ReadSingle(0xC0);
			}
			set
			{
				WriteSingle(0xC0,value);
			}
		}
		
		/// <summary>
		/// Name: RemappedMin
		/// Type: FloatProperty
		/// Offset: 0xC4
		/// Size: 0x04
		/// </summary>
		public float RemappedMin
		{
			get
			{
				return ReadSingle(0xC4);
			}
			set
			{
				WriteSingle(0xC4,value);
			}
		}
		
		/// <summary>
		/// Name: RemappedMax
		/// Type: FloatProperty
		/// Offset: 0xC8
		/// Size: 0x04
		/// </summary>
		public float RemappedMax
		{
			get
			{
				return ReadSingle(0xC8);
			}
			set
			{
				WriteSingle(0xC8,value);
			}
		}
		
		/// <summary>
		/// Name: Curve
		/// Type: StructProperty
		/// Offset: 0xD0
		/// Size: 0x10
		/// </summary>
		public FAnimCurveParam Curve => ReadStruct<FAnimCurveParam>(0xD0);
		
	}


	/// <summary>
	/// FAnimCurveParam:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FAnimCurveParam:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Type
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x03
		/// </summary>
		public FAnimCurveType Type => ReadStruct<FAnimCurveType>(0x08);
		
	}


	/// <summary>
	/// FAnimCurveType:
	/// Size: 0x03
	/// Properties: 3
	/// </summary>
	public class FAnimCurveType:MemoryObject
	{
		public override int ObjectSize => 3;
		/// <summary>
		/// Name: bMorphtarget
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bMorphtarget
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: bEvent
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bEvent
		{
			get
			{
				return ReadBool(0x01);
			}
			set
			{
				WriteBool(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: bMaterial
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bMaterial
		{
			get
			{
				return ReadBool(0x02);
			}
			set
			{
				WriteBool(0x02,value);
			}
		}
		
	}


	/// <summary>
	/// FAxis:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FAxis:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Axis
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Axis => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: bInLocalSpace
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bInLocalSpace
		{
			get
			{
				return ReadBool(0x0C);
			}
			set
			{
				WriteBool(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FReferenceBoneFrame:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FReferenceBoneFrame:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: Bone
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FBoneReference Bone => ReadStruct<FBoneReference>(0x00);
		
		/// <summary>
		/// Name: Axis
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FAxis Axis => ReadStruct<FAxis>(0x10);
		
	}


	/// <summary>
	/// FAnimNode_TwoBoneIK:FAnimNode_SkeletalControlBase
	/// Size: 0xB8
	/// Properties: 11
	/// </summary>
	public class FAnimNode_TwoBoneIK:FAnimNode_SkeletalControlBase
	{
		public override int ObjectSize => 184;
		/// <summary>
		/// Name: IKBone
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FBoneReference IKBone => ReadStruct<FBoneReference>(0x70);
		
		/// <summary>
		/// Name: EffectorLocation
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x0C
		/// </summary>
		public FVector EffectorLocation => ReadStruct<FVector>(0x80);
		
		/// <summary>
		/// Name: JointTargetLocation
		/// Type: StructProperty
		/// Offset: 0x8C
		/// Size: 0x0C
		/// </summary>
		public FVector JointTargetLocation => ReadStruct<FVector>(0x8C);
		
		/// <summary>
		/// Name: StretchLimits
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x08
		/// </summary>
		public FVector2D StretchLimits => ReadStruct<FVector2D>(0x98);
		
		/// <summary>
		/// Name: EffectorSpaceBoneName
		/// Type: NameProperty
		/// Offset: 0xA0
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bTakeRotationFromEffectorSpace
		/// Type: BoolProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public bool bTakeRotationFromEffectorSpace => (ReadByte(0x00A8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bMaintainEffectorRelRot
		/// Type: BoolProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public bool bMaintainEffectorRelRot => (ReadByte(0x00A8) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bAllowStretching
		/// Type: BoolProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public bool bAllowStretching => (ReadByte(0x00A8) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: EffectorLocationSpace
		/// Type: ByteProperty
		/// Offset: 0xAC
		/// Size: 0x01
		/// </summary>
		public byte EffectorLocationSpace
		{
			get
			{
				return ReadByte(0xAC);
			}
			set
			{
				WriteByte(0xAC,value);
			}
		}
		
		/// <summary>
		/// Name: JointTargetLocationSpace
		/// Type: ByteProperty
		/// Offset: 0xAD
		/// Size: 0x01
		/// </summary>
		public byte JointTargetLocationSpace
		{
			get
			{
				return ReadByte(0xAD);
			}
			set
			{
				WriteByte(0xAD,value);
			}
		}
		
		/// <summary>
		/// Name: JointTargetSpaceBoneName
		/// Type: NameProperty
		/// Offset: 0xB0
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FAnimNode_WheelHandler:FAnimNode_SkeletalControlBase
	/// Size: 0x88
	/// Properties: 1
	/// </summary>
	public class FAnimNode_WheelHandler:FAnimNode_SkeletalControlBase
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: VehicleSimComponent
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public UWheeledVehicleMovementComponent VehicleSimComponent => ReadUObject<UWheeledVehicleMovementComponent>(0x70);
		
	}


	/// <summary>
	/// FJsonObjectWrapper:
	/// Size: 0x10
	/// Properties: 0
	/// </summary>
	public class FJsonObjectWrapper:MemoryObject
	{
		public override int ObjectSize => 16;
	}


	/// <summary>
	/// FLevelSequenceObject:
	/// Size: 0x38
	/// Properties: 2
	/// </summary>
	public class FLevelSequenceObject:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: ObjectOrOwner
		/// Type: LazyObjectProperty
		/// Offset: 0x00
		/// Size: 0x1C
		/// </summary>
		
		/// <summary>
		/// Name: ComponentName
		/// Type: StrProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FString ComponentName => new FString(BaseAddress+0x20);
		
	}


	/// <summary>
	/// FLevelSequenceObjectReferenceMap:
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class FLevelSequenceObjectReferenceMap:MemoryObject
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// FLevelSequenceObjectReference:
	/// Size: 0x20
	/// Properties: 0
	/// </summary>
	public class FLevelSequenceObjectReference:MemoryObject
	{
		public override int ObjectSize => 32;
	}


	/// <summary>
	/// FLevelSequencePlaybackSettings:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FLevelSequencePlaybackSettings:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: LoopCount
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int LoopCount
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: PlayRate
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float PlayRate
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FMovieSceneCaptureSettings:
	/// Size: 0x48
	/// Properties: 14
	/// </summary>
	public class FMovieSceneCaptureSettings:MemoryObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: OutputDirectory
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FDirectoryPath OutputDirectory => ReadStruct<FDirectoryPath>(0x00);
		
		/// <summary>
		/// Name: bCreateTemporaryCopiesOfLevels
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bCreateTemporaryCopiesOfLevels
		{
			get
			{
				return ReadBool(0x10);
			}
			set
			{
				WriteBool(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: GameModeOverride
		/// Type: ClassProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: OutputFormat
		/// Type: StrProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FString OutputFormat => new FString(BaseAddress+0x20);
		
		/// <summary>
		/// Name: bOverwriteExisting
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bOverwriteExisting
		{
			get
			{
				return ReadBool(0x30);
			}
			set
			{
				WriteBool(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: bUseRelativeFrameNumbers
		/// Type: BoolProperty
		/// Offset: 0x31
		/// Size: 0x01
		/// </summary>
		public bool bUseRelativeFrameNumbers
		{
			get
			{
				return ReadBool(0x31);
			}
			set
			{
				WriteBool(0x31,value);
			}
		}
		
		/// <summary>
		/// Name: FrameRate
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int FrameRate
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: Resolution
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public FCaptureResolution Resolution => ReadStruct<FCaptureResolution>(0x38);
		
		/// <summary>
		/// Name: bEnableTextureStreaming
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bEnableTextureStreaming
		{
			get
			{
				return ReadBool(0x40);
			}
			set
			{
				WriteBool(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: bCinematicMode
		/// Type: BoolProperty
		/// Offset: 0x41
		/// Size: 0x01
		/// </summary>
		public bool bCinematicMode
		{
			get
			{
				return ReadBool(0x41);
			}
			set
			{
				WriteBool(0x41,value);
			}
		}
		
		/// <summary>
		/// Name: bAllowMovement
		/// Type: BoolProperty
		/// Offset: 0x42
		/// Size: 0x01
		/// </summary>
		public bool bAllowMovement
		{
			get
			{
				return ReadBool(0x42);
			}
			set
			{
				WriteBool(0x42,value);
			}
		}
		
		/// <summary>
		/// Name: bAllowTurning
		/// Type: BoolProperty
		/// Offset: 0x43
		/// Size: 0x01
		/// </summary>
		public bool bAllowTurning
		{
			get
			{
				return ReadBool(0x43);
			}
			set
			{
				WriteBool(0x43,value);
			}
		}
		
		/// <summary>
		/// Name: bShowPlayer
		/// Type: BoolProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public bool bShowPlayer
		{
			get
			{
				return ReadBool(0x44);
			}
			set
			{
				WriteBool(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: bShowHUD
		/// Type: BoolProperty
		/// Offset: 0x45
		/// Size: 0x01
		/// </summary>
		public bool bShowHUD
		{
			get
			{
				return ReadBool(0x45);
			}
			set
			{
				WriteBool(0x45,value);
			}
		}
		
	}


	/// <summary>
	/// FCaptureResolution:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FCaptureResolution:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: ResX
		/// Type: UInt32Property
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: ResY
		/// Type: UInt32Property
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		
	}


	/// <summary>
	/// FDirectoryPath:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FDirectoryPath:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Path
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Path => new FString(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FCaptureProtocolID:
	/// Size: 0x08
	/// Properties: 1
	/// </summary>
	public class FCaptureProtocolID:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Identifier
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FCompositionGraphCapturePasses:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FCompositionGraphCapturePasses:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Value
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FNamedInterfaceDef:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FNamedInterfaceDef:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: InterfaceName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: InterfaceClassName
		/// Type: StrProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FString InterfaceClassName => new FString(BaseAddress+0x08);
		
	}


	/// <summary>
	/// FNamedInterface:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FNamedInterface:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: InterfaceName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: InterfaceObject
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UObject InterfaceObject => ReadUObject<UObject>(0x08);
		
	}


	/// <summary>
	/// FInAppPurchaseProductRequest:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FInAppPurchaseProductRequest:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: ProductIdentifier
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString ProductIdentifier => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: bIsConsumable
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bIsConsumable
		{
			get
			{
				return ReadBool(0x10);
			}
			set
			{
				WriteBool(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FJoinabilitySettings:
	/// Size: 0x18
	/// Properties: 7
	/// </summary>
	public class FJoinabilitySettings:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: SessionName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bPublicSearchable
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bPublicSearchable
		{
			get
			{
				return ReadBool(0x08);
			}
			set
			{
				WriteBool(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: bAllowInvites
		/// Type: BoolProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public bool bAllowInvites
		{
			get
			{
				return ReadBool(0x09);
			}
			set
			{
				WriteBool(0x09,value);
			}
		}
		
		/// <summary>
		/// Name: bJoinViaPresence
		/// Type: BoolProperty
		/// Offset: 0x0A
		/// Size: 0x01
		/// </summary>
		public bool bJoinViaPresence
		{
			get
			{
				return ReadBool(0x0A);
			}
			set
			{
				WriteBool(0x0A,value);
			}
		}
		
		/// <summary>
		/// Name: bJoinViaPresenceFriendsOnly
		/// Type: BoolProperty
		/// Offset: 0x0B
		/// Size: 0x01
		/// </summary>
		public bool bJoinViaPresenceFriendsOnly
		{
			get
			{
				return ReadBool(0x0B);
			}
			set
			{
				WriteBool(0x0B,value);
			}
		}
		
		/// <summary>
		/// Name: MaxPlayers
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int MaxPlayers
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxPartySize
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int MaxPartySize
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FPartyReservation:
	/// Size: 0x28
	/// Properties: 3
	/// </summary>
	public class FPartyReservation:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: TeamNum
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int TeamNum
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: PartyLeader
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FUniqueNetIdRepl PartyLeader => ReadStruct<FUniqueNetIdRepl>(0x08);
		
		/// <summary>
		/// Name: PartyMembers
		/// Type: TArray<FPlayerReservation>
		/// Offset: 0x18
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<FPlayerReservation> PartyMembers => new TArray<FPlayerReservation>(BaseAddress+0x18);
		
	}


	/// <summary>
	/// FPlayerReservation:
	/// Size: 0x28
	/// Properties: 3
	/// </summary>
	public class FPlayerReservation:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: UniqueID
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FUniqueNetIdRepl UniqueID => ReadStruct<FUniqueNetIdRepl>(0x00);
		
		/// <summary>
		/// Name: ValidationStr
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString ValidationStr => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: ElapsedTime
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float ElapsedTime
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
	}


	/// <summary>
	/// FUniqueNetIdRepl:
	/// Size: 0x10
	/// Properties: 0
	/// </summary>
	public class FUniqueNetIdRepl:MemoryObject
	{
		public override int ObjectSize => 16;
	}


	/// <summary>
	/// FPIELoginSettingsInternal:
	/// Size: 0x40
	/// Properties: 4
	/// </summary>
	public class FPIELoginSettingsInternal:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: ID
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString ID => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Token
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString Token => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: Type
		/// Type: StrProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FString Type => new FString(BaseAddress+0x20);
		
		/// <summary>
		/// Name: TokenBytes
		/// Type: TArray<>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FBlueprintLiveStreamInfo:
	/// Size: 0x30
	/// Properties: 3
	/// </summary>
	public class FBlueprintLiveStreamInfo:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: GameName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString GameName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: StreamName
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString StreamName => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: URL
		/// Type: StrProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FString URL => new FString(BaseAddress+0x20);
		
	}


	/// <summary>
	/// FExposureSettings:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FExposureSettings:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: LogOffset
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int LogOffset
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: bFixed
		/// Type: BoolProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public bool bFixed
		{
			get
			{
				return ReadBool(0x04);
			}
			set
			{
				WriteBool(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FURL:
	/// Size: 0x70
	/// Properties: 8
	/// </summary>
	public class FURL:MemoryObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: Protocol
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Protocol => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Host
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString Host => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: Port
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int Port
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: Map
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString Map => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: RedirectURL
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString RedirectURL => new FString(BaseAddress+0x38);
		
		/// <summary>
		/// Name: Op
		/// Type: TArray<>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Portal
		/// Type: StrProperty
		/// Offset: 0x58
		/// Size: 0x10
		/// </summary>
		public FString Portal => new FString(BaseAddress+0x58);
		
		/// <summary>
		/// Name: Valid
		/// Type: IntProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public int Valid
		{
			get
			{
				return ReadInt32(0x68);
			}
			set
			{
				WriteInt32(0x68,value);
			}
		}
		
	}


	/// <summary>
	/// FPrimitiveComponentPostPhysicsTickFunction:FTickFunction
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class FPrimitiveComponentPostPhysicsTickFunction:FTickFunction
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// FTickPrerequisite:
	/// Size: 0x10
	/// Properties: 0
	/// </summary>
	public class FTickPrerequisite:MemoryObject
	{
		public override int ObjectSize => 16;
	}


	/// <summary>
	/// FFastArraySerializer:
	/// Size: 0xA8
	/// Properties: 0
	/// </summary>
	public class FFastArraySerializer:MemoryObject
	{
		public override int ObjectSize => 168;
	}


	/// <summary>
	/// FFastArraySerializerItem:
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FFastArraySerializerItem:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: ReplicationID
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int ReplicationID
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ReplicationKey
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int ReplicationKey
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: MostRecentArrayReplicationKey
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int MostRecentArrayReplicationKey
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FCanvasUVTri:
	/// Size: 0x60
	/// Properties: 9
	/// </summary>
	public class FCanvasUVTri:MemoryObject
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: V0_Pos
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public FVector2D V0_Pos => ReadStruct<FVector2D>(0x00);
		
		/// <summary>
		/// Name: V0_UV
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public FVector2D V0_UV => ReadStruct<FVector2D>(0x08);
		
		/// <summary>
		/// Name: V0_Color
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FLinearColor V0_Color => ReadStruct<FLinearColor>(0x10);
		
		/// <summary>
		/// Name: V1_Pos
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public FVector2D V1_Pos => ReadStruct<FVector2D>(0x20);
		
		/// <summary>
		/// Name: V1_UV
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public FVector2D V1_UV => ReadStruct<FVector2D>(0x28);
		
		/// <summary>
		/// Name: V1_Color
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FLinearColor V1_Color => ReadStruct<FLinearColor>(0x30);
		
		/// <summary>
		/// Name: V2_Pos
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public FVector2D V2_Pos => ReadStruct<FVector2D>(0x40);
		
		/// <summary>
		/// Name: V2_UV
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public FVector2D V2_UV => ReadStruct<FVector2D>(0x48);
		
		/// <summary>
		/// Name: V2_Color
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FLinearColor V2_Color => ReadStruct<FLinearColor>(0x50);
		
	}


	/// <summary>
	/// FFontRenderInfo:
	/// Size: 0x28
	/// Properties: 3
	/// </summary>
	public class FFontRenderInfo:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: bClipText
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bClipText => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bEnableShadow
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bEnableShadow => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: GlowInfo
		/// Type: StructProperty
		/// Offset: 0x04
		/// Size: 0x24
		/// </summary>
		public FDepthFieldGlowInfo GlowInfo => ReadStruct<FDepthFieldGlowInfo>(0x04);
		
	}


	/// <summary>
	/// FDepthFieldGlowInfo:
	/// Size: 0x24
	/// Properties: 4
	/// </summary>
	public class FDepthFieldGlowInfo:MemoryObject
	{
		public override int ObjectSize => 36;
		/// <summary>
		/// Name: bEnableGlow
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bEnableGlow => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: GlowColor
		/// Type: StructProperty
		/// Offset: 0x04
		/// Size: 0x10
		/// </summary>
		public FLinearColor GlowColor => ReadStruct<FLinearColor>(0x04);
		
		/// <summary>
		/// Name: GlowOuterRadius
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x08
		/// </summary>
		public FVector2D GlowOuterRadius => ReadStruct<FVector2D>(0x14);
		
		/// <summary>
		/// Name: GlowInnerRadius
		/// Type: StructProperty
		/// Offset: 0x1C
		/// Size: 0x08
		/// </summary>
		public FVector2D GlowInnerRadius => ReadStruct<FVector2D>(0x1C);
		
	}


	/// <summary>
	/// FRedirector:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FRedirector:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: OldName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: newName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FFilePath:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FFilePath:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: FilePath
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString FilePath => new FString(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FComponentReference:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FComponentReference:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: OtherActor
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public AActor OtherActor => ReadUObject<AActor>(0x00);
		
		/// <summary>
		/// Name: ComponentProperty
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FConstrainComponentPropName:
	/// Size: 0x08
	/// Properties: 1
	/// </summary>
	public class FConstrainComponentPropName:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: ComponentName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FWalkableSlopeOverride:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FWalkableSlopeOverride:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: WalkableSlopeBehavior
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte WalkableSlopeBehavior
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: WalkableSlopeAngle
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float WalkableSlopeAngle
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FRadialDamageEvent:FDamageEvent
	/// Size: 0x40
	/// Properties: 3
	/// </summary>
	public class FRadialDamageEvent:FDamageEvent
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Params
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x14
		/// </summary>
		public FRadialDamageParams Params => ReadStruct<FRadialDamageParams>(0x10);
		
		/// <summary>
		/// Name: Origin
		/// Type: StructProperty
		/// Offset: 0x24
		/// Size: 0x0C
		/// </summary>
		public FVector Origin => ReadStruct<FVector>(0x24);
		
		/// <summary>
		/// Name: ComponentHits
		/// Type: TArray<FHitResult>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x88
		/// </summary>
		public TArray<FHitResult> ComponentHits => new TArray<FHitResult>(BaseAddress+0x30);
		
	}


	/// <summary>
	/// FRadialDamageParams:
	/// Size: 0x14
	/// Properties: 5
	/// </summary>
	public class FRadialDamageParams:MemoryObject
	{
		public override int ObjectSize => 20;
		/// <summary>
		/// Name: BaseDamage
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float BaseDamage
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: MinimumDamage
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float MinimumDamage
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: InnerRadius
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float InnerRadius
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: OuterRadius
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float OuterRadius
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: DamageFalloff
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float DamageFalloff
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FPointDamageEvent:FDamageEvent
	/// Size: 0xA8
	/// Properties: 3
	/// </summary>
	public class FPointDamageEvent:FDamageEvent
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: Damage
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float Damage
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: ShotDirection
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantizeNormal ShotDirection => ReadStruct<FVector_NetQuantizeNormal>(0x14);
		
		/// <summary>
		/// Name: HitInfo
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x88
		/// </summary>
		public FHitResult HitInfo => ReadStruct<FHitResult>(0x20);
		
	}


	/// <summary>
	/// FMeshBuildSettings:
	/// Size: 0x38
	/// Properties: 17
	/// </summary>
	public class FMeshBuildSettings:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: bUseMikkTSpace
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bUseMikkTSpace
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: bRecomputeNormals
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bRecomputeNormals
		{
			get
			{
				return ReadBool(0x01);
			}
			set
			{
				WriteBool(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: bRecomputeTangents
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bRecomputeTangents
		{
			get
			{
				return ReadBool(0x02);
			}
			set
			{
				WriteBool(0x02,value);
			}
		}
		
		/// <summary>
		/// Name: bRemoveDegenerates
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bRemoveDegenerates
		{
			get
			{
				return ReadBool(0x03);
			}
			set
			{
				WriteBool(0x03,value);
			}
		}
		
		/// <summary>
		/// Name: bBuildAdjacencyBuffer
		/// Type: BoolProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public bool bBuildAdjacencyBuffer
		{
			get
			{
				return ReadBool(0x04);
			}
			set
			{
				WriteBool(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: bBuildReversedIndexBuffer
		/// Type: BoolProperty
		/// Offset: 0x05
		/// Size: 0x01
		/// </summary>
		public bool bBuildReversedIndexBuffer
		{
			get
			{
				return ReadBool(0x05);
			}
			set
			{
				WriteBool(0x05,value);
			}
		}
		
		/// <summary>
		/// Name: bUseHighPrecisionTangentBasis
		/// Type: BoolProperty
		/// Offset: 0x06
		/// Size: 0x01
		/// </summary>
		public bool bUseHighPrecisionTangentBasis
		{
			get
			{
				return ReadBool(0x06);
			}
			set
			{
				WriteBool(0x06,value);
			}
		}
		
		/// <summary>
		/// Name: bUseFullPrecisionUVs
		/// Type: BoolProperty
		/// Offset: 0x07
		/// Size: 0x01
		/// </summary>
		public bool bUseFullPrecisionUVs
		{
			get
			{
				return ReadBool(0x07);
			}
			set
			{
				WriteBool(0x07,value);
			}
		}
		
		/// <summary>
		/// Name: bGenerateLightmapUVs
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bGenerateLightmapUVs
		{
			get
			{
				return ReadBool(0x08);
			}
			set
			{
				WriteBool(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: MinLightmapResolution
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int MinLightmapResolution
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: SrcLightmapIndex
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int SrcLightmapIndex
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: DstLightmapIndex
		/// Type: IntProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public int DstLightmapIndex
		{
			get
			{
				return ReadInt32(0x14);
			}
			set
			{
				WriteInt32(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: BuildScale
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float BuildScale
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: BuildScale3D
		/// Type: StructProperty
		/// Offset: 0x1C
		/// Size: 0x0C
		/// </summary>
		public FVector BuildScale3D => ReadStruct<FVector>(0x1C);
		
		/// <summary>
		/// Name: DistanceFieldResolutionScale
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float DistanceFieldResolutionScale
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: bGenerateDistanceFieldAsIfTwoSided
		/// Type: BoolProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public bool bGenerateDistanceFieldAsIfTwoSided
		{
			get
			{
				return ReadBool(0x2C);
			}
			set
			{
				WriteBool(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: DistanceFieldReplacementMesh
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UStaticMesh DistanceFieldReplacementMesh => ReadUObject<UStaticMesh>(0x30);
		
	}


	/// <summary>
	/// FPOV:
	/// Size: 0x1C
	/// Properties: 3
	/// </summary>
	public class FPOV:MemoryObject
	{
		public override int ObjectSize => 28;
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Location => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FRotator Rotation => ReadStruct<FRotator>(0x0C);
		
		/// <summary>
		/// Name: FOV
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float FOV
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimUpdateRateParameters:
	/// Size: 0x88
	/// Properties: 13
	/// </summary>
	public class FAnimUpdateRateParameters:MemoryObject
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: UpdateRate
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int UpdateRate
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: EvaluationRate
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int EvaluationRate
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: bInterpolateSkippedFrames
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bInterpolateSkippedFrames
		{
			get
			{
				return ReadBool(0x0C);
			}
			set
			{
				WriteBool(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: bShouldUseLodMap
		/// Type: BoolProperty
		/// Offset: 0x0D
		/// Size: 0x01
		/// </summary>
		public bool bShouldUseLodMap
		{
			get
			{
				return ReadBool(0x0D);
			}
			set
			{
				WriteBool(0x0D,value);
			}
		}
		
		/// <summary>
		/// Name: bSkipUpdate
		/// Type: BoolProperty
		/// Offset: 0x0E
		/// Size: 0x01
		/// </summary>
		public bool bSkipUpdate
		{
			get
			{
				return ReadBool(0x0E);
			}
			set
			{
				WriteBool(0x0E,value);
			}
		}
		
		/// <summary>
		/// Name: bSkipEvaluation
		/// Type: BoolProperty
		/// Offset: 0x0F
		/// Size: 0x01
		/// </summary>
		public bool bSkipEvaluation
		{
			get
			{
				return ReadBool(0x0F);
			}
			set
			{
				WriteBool(0x0F,value);
			}
		}
		
		/// <summary>
		/// Name: TickedPoseOffestTime
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float TickedPoseOffestTime
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: AdditionalTime
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float AdditionalTime
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: BaseNonRenderedUpdateRate
		/// Type: IntProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public int BaseNonRenderedUpdateRate
		{
			get
			{
				return ReadInt32(0x1C);
			}
			set
			{
				WriteInt32(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: BaseVisibleDistanceFactorThesholds
		/// Type: TArray<>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: LODToFrameSkipMap
		/// Type: MapProperty
		/// Offset: 0x30
		/// Size: 0x50
		/// </summary>
		
		/// <summary>
		/// Name: MaxEvalRateForInterpolation
		/// Type: IntProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public int MaxEvalRateForInterpolation
		{
			get
			{
				return ReadInt32(0x80);
			}
			set
			{
				WriteInt32(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: ShiftBucket
		/// Type: ByteProperty
		/// Offset: 0x84
		/// Size: 0x01
		/// </summary>
		public byte ShiftBucket
		{
			get
			{
				return ReadByte(0x84);
			}
			set
			{
				WriteByte(0x84,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimSlotDesc:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FAnimSlotDesc:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: SlotName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: NumChannels
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int NumChannels
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimSlotInfo:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FAnimSlotInfo:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: SlotName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ChannelWeights
		/// Type: TArray<>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FMTDResult:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FMTDResult:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Direction
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Direction => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: Distance
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float Distance
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FOverlapResult:
	/// Size: 0x18
	/// Properties: 1
	/// </summary>
	public class FOverlapResult:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: bBlockingHit
		/// Type: BoolProperty
		/// Offset: 0x14
		/// Size: 0x01
		/// </summary>
		public bool bBlockingHit => (ReadByte(0x0014) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// FPrimitiveMaterialRef:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FPrimitiveMaterialRef:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Primitive
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UPrimitiveComponent Primitive => ReadUObject<UPrimitiveComponent>(0x00);
		
		/// <summary>
		/// Name: Decal
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UDecalComponent Decal => ReadUObject<UDecalComponent>(0x08);
		
		/// <summary>
		/// Name: ElementIndex
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int ElementIndex
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FSwarmDebugOptions:
	/// Size: 0x04
	/// Properties: 3
	/// </summary>
	public class FSwarmDebugOptions:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: bDistributionEnabled
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bDistributionEnabled => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bForceContentExport
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bForceContentExport => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bInitialized
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bInitialized => (ReadByte(0x0000) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// FLightmassDebugOptions:
	/// Size: 0x10
	/// Properties: 16
	/// </summary>
	public class FLightmassDebugOptions:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: bDebugMode
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bDebugMode => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bStatsEnabled
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bStatsEnabled => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bGatherBSPSurfacesAcrossComponents
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bGatherBSPSurfacesAcrossComponents => (ReadByte(0x0000) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: CoplanarTolerance
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float CoplanarTolerance
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: bUseImmediateImport
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bUseImmediateImport => (ReadByte(0x0008) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bImmediateProcessMappings
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bImmediateProcessMappings => (ReadByte(0x0008) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bSortMappings
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bSortMappings => (ReadByte(0x0008) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bDumpBinaryFiles
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bDumpBinaryFiles => (ReadByte(0x0008) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bDebugMaterials
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bDebugMaterials => (ReadByte(0x0008) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bPadMappings
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bPadMappings => (ReadByte(0x0008) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bDebugPaddings
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bDebugPaddings => (ReadByte(0x0008) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOnlyCalcDebugTexelMappings
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bOnlyCalcDebugTexelMappings => (ReadByte(0x0008) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bUseRandomColors
		/// Type: BoolProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public bool bUseRandomColors => (ReadByte(0x0009) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bColorBordersGreen
		/// Type: BoolProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public bool bColorBordersGreen => (ReadByte(0x0009) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bColorByExecutionTime
		/// Type: BoolProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public bool bColorByExecutionTime => (ReadByte(0x0009) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: ExecutionTimeDivisor
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float ExecutionTimeDivisor
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FLightmassPrimitiveSettings:
	/// Size: 0x18
	/// Properties: 9
	/// </summary>
	public class FLightmassPrimitiveSettings:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: bUseTwoSidedLighting
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bUseTwoSidedLighting => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bShadowIndirectOnly
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bShadowIndirectOnly => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bUseEmissiveForStaticLighting
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bUseEmissiveForStaticLighting => (ReadByte(0x0000) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bUseVertexNormalForHemisphereGather
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bUseVertexNormalForHemisphereGather => (ReadByte(0x0000) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: EmissiveLightFalloffExponent
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float EmissiveLightFalloffExponent
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: EmissiveLightExplicitInfluenceRadius
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float EmissiveLightExplicitInfluenceRadius
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: EmissiveBoost
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float EmissiveBoost
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: DiffuseBoost
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float DiffuseBoost
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: FullyOccludedSamplesFraction
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float FullyOccludedSamplesFraction
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
	}


	/// <summary>
	/// FLightmassDirectionalLightSettings:FLightmassLightSettings
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FLightmassDirectionalLightSettings:FLightmassLightSettings
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: LightSourceAngle
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float LightSourceAngle
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FLightmassLightSettings:
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FLightmassLightSettings:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: IndirectLightingSaturation
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float IndirectLightingSaturation
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ShadowExponent
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float ShadowExponent
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: bUseAreaShadowsForStationaryLight
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bUseAreaShadowsForStationaryLight
		{
			get
			{
				return ReadBool(0x08);
			}
			set
			{
				WriteBool(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FLightmassPointLightSettings:FLightmassLightSettings
	/// Size: 0x0C
	/// Properties: 0
	/// </summary>
	public class FLightmassPointLightSettings:FLightmassLightSettings
	{
		public override int ObjectSize => 12;
	}


	/// <summary>
	/// FLocalizedSubtitle:
	/// Size: 0x28
	/// Properties: 5
	/// </summary>
	public class FLocalizedSubtitle:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: LanguageExt
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString LanguageExt => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Subtitles
		/// Type: TArray<FSubtitleCue>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FSubtitleCue> Subtitles => new TArray<FSubtitleCue>(BaseAddress+0x10);
		
		/// <summary>
		/// Name: bMature
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool bMature => (ReadByte(0x0020) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bManualWordWrap
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool bManualWordWrap => (ReadByte(0x0020) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bSingleLine
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool bSingleLine => (ReadByte(0x0020) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// FBasedPosition:
	/// Size: 0x38
	/// Properties: 5
	/// </summary>
	public class FBasedPosition:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Base
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public AActor Base => ReadUObject<AActor>(0x00);
		
		/// <summary>
		/// Name: Position
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x0C
		/// </summary>
		public FVector Position => ReadStruct<FVector>(0x08);
		
		/// <summary>
		/// Name: CachedBaseLocation
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x0C
		/// </summary>
		public FVector CachedBaseLocation => ReadStruct<FVector>(0x14);
		
		/// <summary>
		/// Name: CachedBaseRotation
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x0C
		/// </summary>
		public FRotator CachedBaseRotation => ReadStruct<FRotator>(0x20);
		
		/// <summary>
		/// Name: CachedTransPosition
		/// Type: StructProperty
		/// Offset: 0x2C
		/// Size: 0x0C
		/// </summary>
		public FVector CachedTransPosition => ReadStruct<FVector>(0x2C);
		
	}


	/// <summary>
	/// FFractureEffect:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FFractureEffect:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: ParticleSystem
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UParticleSystem ParticleSystem => ReadUObject<UParticleSystem>(0x00);
		
		/// <summary>
		/// Name: Sound
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public USoundBase Sound => ReadUObject<USoundBase>(0x08);
		
	}


	/// <summary>
	/// FCollisionImpactData:
	/// Size: 0x28
	/// Properties: 3
	/// </summary>
	public class FCollisionImpactData:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: ContactInfos
		/// Type: TArray<FRigidBodyContactInfo>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FRigidBodyContactInfo> ContactInfos => new TArray<FRigidBodyContactInfo>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: TotalNormalImpulse
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x0C
		/// </summary>
		public FVector TotalNormalImpulse => ReadStruct<FVector>(0x10);
		
		/// <summary>
		/// Name: TotalFrictionImpulse
		/// Type: StructProperty
		/// Offset: 0x1C
		/// Size: 0x0C
		/// </summary>
		public FVector TotalFrictionImpulse => ReadStruct<FVector>(0x1C);
		
	}


	/// <summary>
	/// FRigidBodyContactInfo:
	/// Size: 0x30
	/// Properties: 4
	/// </summary>
	public class FRigidBodyContactInfo:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: ContactPosition
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector ContactPosition => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: ContactNormal
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector ContactNormal => ReadStruct<FVector>(0x0C);
		
		/// <summary>
		/// Name: ContactPenetration
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float ContactPenetration
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: PhysMaterial
		/// Type: ObjectProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public UPhysicalMaterial PhysMaterial => ReadUObject<UPhysicalMaterial>(0x20);
		
	}


	/// <summary>
	/// FRigidBodyErrorCorrection:
	/// Size: 0x1C
	/// Properties: 7
	/// </summary>
	public class FRigidBodyErrorCorrection:MemoryObject
	{
		public override int ObjectSize => 28;
		/// <summary>
		/// Name: LinearDeltaThresholdSq
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float LinearDeltaThresholdSq
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: LinearInterpAlpha
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float LinearInterpAlpha
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: LinearRecipFixTime
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float LinearRecipFixTime
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: AngularDeltaThreshold
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float AngularDeltaThreshold
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: AngularInterpAlpha
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float AngularInterpAlpha
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: AngularRecipFixTime
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float AngularRecipFixTime
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: BodySpeedThresholdSq
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float BodySpeedThresholdSq
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FRigidBodyState:
	/// Size: 0x40
	/// Properties: 5
	/// </summary>
	public class FRigidBodyState:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Position
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantize100 Position => ReadStruct<FVector_NetQuantize100>(0x00);
		
		/// <summary>
		/// Name: Quaternion
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FQuat Quaternion => ReadStruct<FQuat>(0x10);
		
		/// <summary>
		/// Name: LinVel
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantize100 LinVel => ReadStruct<FVector_NetQuantize100>(0x20);
		
		/// <summary>
		/// Name: AngVel
		/// Type: StructProperty
		/// Offset: 0x2C
		/// Size: 0x0C
		/// </summary>
		public FVector_NetQuantize100 AngVel => ReadStruct<FVector_NetQuantize100>(0x2C);
		
		/// <summary>
		/// Name: flags
		/// Type: ByteProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public byte flags
		{
			get
			{
				return ReadByte(0x38);
			}
			set
			{
				WriteByte(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// FCollisionResponseContainer:
	/// Size: 0x20
	/// Properties: 32
	/// </summary>
	public class FCollisionResponseContainer:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: WorldStatic
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte WorldStatic
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: WorldDynamic
		/// Type: ByteProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public byte WorldDynamic
		{
			get
			{
				return ReadByte(0x01);
			}
			set
			{
				WriteByte(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: Pawn
		/// Type: ByteProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public byte Pawn
		{
			get
			{
				return ReadByte(0x02);
			}
			set
			{
				WriteByte(0x02,value);
			}
		}
		
		/// <summary>
		/// Name: Visibility
		/// Type: ByteProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public byte Visibility
		{
			get
			{
				return ReadByte(0x03);
			}
			set
			{
				WriteByte(0x03,value);
			}
		}
		
		/// <summary>
		/// Name: Camera
		/// Type: ByteProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public byte Camera
		{
			get
			{
				return ReadByte(0x04);
			}
			set
			{
				WriteByte(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: PhysicsBody
		/// Type: ByteProperty
		/// Offset: 0x05
		/// Size: 0x01
		/// </summary>
		public byte PhysicsBody
		{
			get
			{
				return ReadByte(0x05);
			}
			set
			{
				WriteByte(0x05,value);
			}
		}
		
		/// <summary>
		/// Name: Vehicle
		/// Type: ByteProperty
		/// Offset: 0x06
		/// Size: 0x01
		/// </summary>
		public byte Vehicle
		{
			get
			{
				return ReadByte(0x06);
			}
			set
			{
				WriteByte(0x06,value);
			}
		}
		
		/// <summary>
		/// Name: Destructible
		/// Type: ByteProperty
		/// Offset: 0x07
		/// Size: 0x01
		/// </summary>
		public byte Destructible
		{
			get
			{
				return ReadByte(0x07);
			}
			set
			{
				WriteByte(0x07,value);
			}
		}
		
		/// <summary>
		/// Name: EngineTraceChannel1
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte EngineTraceChannel1
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: EngineTraceChannel2
		/// Type: ByteProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public byte EngineTraceChannel2
		{
			get
			{
				return ReadByte(0x09);
			}
			set
			{
				WriteByte(0x09,value);
			}
		}
		
		/// <summary>
		/// Name: EngineTraceChannel3
		/// Type: ByteProperty
		/// Offset: 0x0A
		/// Size: 0x01
		/// </summary>
		public byte EngineTraceChannel3
		{
			get
			{
				return ReadByte(0x0A);
			}
			set
			{
				WriteByte(0x0A,value);
			}
		}
		
		/// <summary>
		/// Name: EngineTraceChannel4
		/// Type: ByteProperty
		/// Offset: 0x0B
		/// Size: 0x01
		/// </summary>
		public byte EngineTraceChannel4
		{
			get
			{
				return ReadByte(0x0B);
			}
			set
			{
				WriteByte(0x0B,value);
			}
		}
		
		/// <summary>
		/// Name: EngineTraceChannel5
		/// Type: ByteProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public byte EngineTraceChannel5
		{
			get
			{
				return ReadByte(0x0C);
			}
			set
			{
				WriteByte(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: EngineTraceChannel6
		/// Type: ByteProperty
		/// Offset: 0x0D
		/// Size: 0x01
		/// </summary>
		public byte EngineTraceChannel6
		{
			get
			{
				return ReadByte(0x0D);
			}
			set
			{
				WriteByte(0x0D,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel1
		/// Type: ByteProperty
		/// Offset: 0x0E
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel1
		{
			get
			{
				return ReadByte(0x0E);
			}
			set
			{
				WriteByte(0x0E,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel2
		/// Type: ByteProperty
		/// Offset: 0x0F
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel2
		{
			get
			{
				return ReadByte(0x0F);
			}
			set
			{
				WriteByte(0x0F,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel3
		/// Type: ByteProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel3
		{
			get
			{
				return ReadByte(0x10);
			}
			set
			{
				WriteByte(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel4
		/// Type: ByteProperty
		/// Offset: 0x11
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel4
		{
			get
			{
				return ReadByte(0x11);
			}
			set
			{
				WriteByte(0x11,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel5
		/// Type: ByteProperty
		/// Offset: 0x12
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel5
		{
			get
			{
				return ReadByte(0x12);
			}
			set
			{
				WriteByte(0x12,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel6
		/// Type: ByteProperty
		/// Offset: 0x13
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel6
		{
			get
			{
				return ReadByte(0x13);
			}
			set
			{
				WriteByte(0x13,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel7
		/// Type: ByteProperty
		/// Offset: 0x14
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel7
		{
			get
			{
				return ReadByte(0x14);
			}
			set
			{
				WriteByte(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel8
		/// Type: ByteProperty
		/// Offset: 0x15
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel8
		{
			get
			{
				return ReadByte(0x15);
			}
			set
			{
				WriteByte(0x15,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel9
		/// Type: ByteProperty
		/// Offset: 0x16
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel9
		{
			get
			{
				return ReadByte(0x16);
			}
			set
			{
				WriteByte(0x16,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel10
		/// Type: ByteProperty
		/// Offset: 0x17
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel10
		{
			get
			{
				return ReadByte(0x17);
			}
			set
			{
				WriteByte(0x17,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel11
		/// Type: ByteProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel11
		{
			get
			{
				return ReadByte(0x18);
			}
			set
			{
				WriteByte(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel12
		/// Type: ByteProperty
		/// Offset: 0x19
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel12
		{
			get
			{
				return ReadByte(0x19);
			}
			set
			{
				WriteByte(0x19,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel13
		/// Type: ByteProperty
		/// Offset: 0x1A
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel13
		{
			get
			{
				return ReadByte(0x1A);
			}
			set
			{
				WriteByte(0x1A,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel14
		/// Type: ByteProperty
		/// Offset: 0x1B
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel14
		{
			get
			{
				return ReadByte(0x1B);
			}
			set
			{
				WriteByte(0x1B,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel15
		/// Type: ByteProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel15
		{
			get
			{
				return ReadByte(0x1C);
			}
			set
			{
				WriteByte(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel16
		/// Type: ByteProperty
		/// Offset: 0x1D
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel16
		{
			get
			{
				return ReadByte(0x1D);
			}
			set
			{
				WriteByte(0x1D,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel17
		/// Type: ByteProperty
		/// Offset: 0x1E
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel17
		{
			get
			{
				return ReadByte(0x1E);
			}
			set
			{
				WriteByte(0x1E,value);
			}
		}
		
		/// <summary>
		/// Name: GameTraceChannel18
		/// Type: ByteProperty
		/// Offset: 0x1F
		/// Size: 0x01
		/// </summary>
		public byte GameTraceChannel18
		{
			get
			{
				return ReadByte(0x1F);
			}
			set
			{
				WriteByte(0x1F,value);
			}
		}
		
	}


	/// <summary>
	/// FResponseChannel:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FResponseChannel:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Channel
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: response
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte response
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FLightingChannels:
	/// Size: 0x03
	/// Properties: 3
	/// </summary>
	public class FLightingChannels:MemoryObject
	{
		public override int ObjectSize => 3;
		/// <summary>
		/// Name: bChannel0
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bChannel0
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: bChannel1
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bChannel1
		{
			get
			{
				return ReadBool(0x01);
			}
			set
			{
				WriteBool(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: bChannel2
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bChannel2
		{
			get
			{
				return ReadBool(0x02);
			}
			set
			{
				WriteBool(0x02,value);
			}
		}
		
	}


	/// <summary>
	/// FEdGraphPinType:
	/// Size: 0x50
	/// Properties: 7
	/// </summary>
	public class FEdGraphPinType:MemoryObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: PinCategory
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString PinCategory => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: PinSubCategory
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString PinSubCategory => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: PinSubCategoryMemberReference
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x20
		/// </summary>
		public FSimpleMemberReference PinSubCategoryMemberReference => ReadStruct<FSimpleMemberReference>(0x28);
		
		/// <summary>
		/// Name: bIsArray
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool bIsArray
		{
			get
			{
				return ReadBool(0x48);
			}
			set
			{
				WriteBool(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: bIsReference
		/// Type: BoolProperty
		/// Offset: 0x49
		/// Size: 0x01
		/// </summary>
		public bool bIsReference
		{
			get
			{
				return ReadBool(0x49);
			}
			set
			{
				WriteBool(0x49,value);
			}
		}
		
		/// <summary>
		/// Name: bIsConst
		/// Type: BoolProperty
		/// Offset: 0x4A
		/// Size: 0x01
		/// </summary>
		public bool bIsConst
		{
			get
			{
				return ReadBool(0x4A);
			}
			set
			{
				WriteBool(0x4A,value);
			}
		}
		
		/// <summary>
		/// Name: bIsWeakPointer
		/// Type: BoolProperty
		/// Offset: 0x4B
		/// Size: 0x01
		/// </summary>
		public bool bIsWeakPointer
		{
			get
			{
				return ReadBool(0x4B);
			}
			set
			{
				WriteBool(0x4B,value);
			}
		}
		
	}


	/// <summary>
	/// FEditedDocumentInfo:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FEditedDocumentInfo:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: EditedObject
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UObject EditedObject => ReadUObject<UObject>(0x00);
		
		/// <summary>
		/// Name: SavedViewOffset
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public FVector2D SavedViewOffset => ReadStruct<FVector2D>(0x08);
		
		/// <summary>
		/// Name: SavedZoomAmount
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float SavedZoomAmount
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FBPInterfaceDescription:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FBPInterfaceDescription:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Interface
		/// Type: ClassProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Graphs
		/// Type: TArray<UEdGraph>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0xC0
		/// </summary>
		public TArray<UEdGraph> Graphs => new TArray<UEdGraph>(BaseAddress+0x08);
		
	}


	/// <summary>
	/// FBPVariableDescription:
	/// Size: 0xC0
	/// Properties: 9
	/// </summary>
	public class FBPVariableDescription:MemoryObject
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: VarName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: VarGuid
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FGuid VarGuid => ReadStruct<FGuid>(0x08);
		
		/// <summary>
		/// Name: VarType
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x50
		/// </summary>
		public FEdGraphPinType VarType => ReadStruct<FEdGraphPinType>(0x18);
		
		/// <summary>
		/// Name: FriendlyName
		/// Type: StrProperty
		/// Offset: 0x68
		/// Size: 0x10
		/// </summary>
		public FString FriendlyName => new FString(BaseAddress+0x68);
		
		/// <summary>
		/// Name: Category
		/// Type: TextProperty
		/// Offset: 0x78
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: PropertyFlags
		/// Type: UInt64Property
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		public ulong PropertyFlags
		{
			get
			{
				return ReadUInt64(0x90);
			}
			set
			{
				WriteUInt64(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: RepNotifyFunc
		/// Type: NameProperty
		/// Offset: 0x98
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: MetaDataArray
		/// Type: TArray<FBPVariableMetaDataEntry>
		/// Offset: 0xA0
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FBPVariableMetaDataEntry> MetaDataArray => new TArray<FBPVariableMetaDataEntry>(BaseAddress+0xA0);
		
		/// <summary>
		/// Name: DefaultValue
		/// Type: StrProperty
		/// Offset: 0xB0
		/// Size: 0x10
		/// </summary>
		public FString DefaultValue => new FString(BaseAddress+0xB0);
		
	}


	/// <summary>
	/// FBPVariableMetaDataEntry:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FBPVariableMetaDataEntry:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: DataKey
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: DataValue
		/// Type: StrProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FString DataValue => new FString(BaseAddress+0x08);
		
	}


	/// <summary>
	/// FMemberReference:
	/// Size: 0x38
	/// Properties: 6
	/// </summary>
	public class FMemberReference:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: MemberParent
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UObject MemberParent => ReadUObject<UObject>(0x00);
		
		/// <summary>
		/// Name: MemberScope
		/// Type: StrProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FString MemberScope => new FString(BaseAddress+0x08);
		
		/// <summary>
		/// Name: MemberName
		/// Type: NameProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: MemberGuid
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FGuid MemberGuid => ReadStruct<FGuid>(0x20);
		
		/// <summary>
		/// Name: bSelfContext
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bSelfContext
		{
			get
			{
				return ReadBool(0x30);
			}
			set
			{
				WriteBool(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: bWasDeprecated
		/// Type: BoolProperty
		/// Offset: 0x31
		/// Size: 0x01
		/// </summary>
		public bool bWasDeprecated
		{
			get
			{
				return ReadBool(0x31);
			}
			set
			{
				WriteBool(0x31,value);
			}
		}
		
	}


	/// <summary>
	/// FOverlapInfo:
	/// Size: 0x90
	/// Properties: 0
	/// </summary>
	public class FOverlapInfo:MemoryObject
	{
		public override int ObjectSize => 144;
	}


	/// <summary>
	/// FLatentActionManager:
	/// Size: 0xF0
	/// Properties: 0
	/// </summary>
	public class FLatentActionManager:MemoryObject
	{
		public override int ObjectSize => 240;
	}


	/// <summary>
	/// FStartAsyncSimulationFunction:FTickFunction
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class FStartAsyncSimulationFunction:FTickFunction
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// FEndPhysicsTickFunction:FTickFunction
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class FEndPhysicsTickFunction:FTickFunction
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// FStartPhysicsTickFunction:FTickFunction
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class FStartPhysicsTickFunction:FTickFunction
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// FLevelViewportInfo:
	/// Size: 0x20
	/// Properties: 4
	/// </summary>
	public class FLevelViewportInfo:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: CamPosition
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector CamPosition => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: CamRotation
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FRotator CamRotation => ReadStruct<FRotator>(0x0C);
		
		/// <summary>
		/// Name: CamOrthoZoom
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float CamOrthoZoom
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: CamUpdated
		/// Type: BoolProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public bool CamUpdated
		{
			get
			{
				return ReadBool(0x1C);
			}
			set
			{
				WriteBool(0x1C,value);
			}
		}
		
	}


	/// <summary>
	/// FSimplygonMaterialLODSettings:
	/// Size: 0x28
	/// Properties: 14
	/// </summary>
	public class FSimplygonMaterialLODSettings:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: bActive
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bActive
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: MaterialLODType
		/// Type: ByteProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public byte MaterialLODType
		{
			get
			{
				return ReadByte(0x01);
			}
			set
			{
				WriteByte(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: bUseAutomaticSizes
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bUseAutomaticSizes
		{
			get
			{
				return ReadBool(0x02);
			}
			set
			{
				WriteBool(0x02,value);
			}
		}
		
		/// <summary>
		/// Name: TextureWidth
		/// Type: ByteProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public byte TextureWidth
		{
			get
			{
				return ReadByte(0x03);
			}
			set
			{
				WriteByte(0x03,value);
			}
		}
		
		/// <summary>
		/// Name: TextureHeight
		/// Type: ByteProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public byte TextureHeight
		{
			get
			{
				return ReadByte(0x04);
			}
			set
			{
				WriteByte(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: SamplingQuality
		/// Type: ByteProperty
		/// Offset: 0x05
		/// Size: 0x01
		/// </summary>
		public byte SamplingQuality
		{
			get
			{
				return ReadByte(0x05);
			}
			set
			{
				WriteByte(0x05,value);
			}
		}
		
		/// <summary>
		/// Name: GutterSpace
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int GutterSpace
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: TextureStrech
		/// Type: ByteProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public byte TextureStrech
		{
			get
			{
				return ReadByte(0x0C);
			}
			set
			{
				WriteByte(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: bReuseExistingCharts
		/// Type: BoolProperty
		/// Offset: 0x0D
		/// Size: 0x01
		/// </summary>
		public bool bReuseExistingCharts
		{
			get
			{
				return ReadBool(0x0D);
			}
			set
			{
				WriteBool(0x0D,value);
			}
		}
		
		/// <summary>
		/// Name: ChannelsToCast
		/// Type: TArray<FSimplygonChannelCastingSettings>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FSimplygonChannelCastingSettings> ChannelsToCast => new TArray<FSimplygonChannelCastingSettings>(BaseAddress+0x10);
		
		/// <summary>
		/// Name: bBakeVertexData
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool bBakeVertexData
		{
			get
			{
				return ReadBool(0x20);
			}
			set
			{
				WriteBool(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: bBakeActorData
		/// Type: BoolProperty
		/// Offset: 0x21
		/// Size: 0x01
		/// </summary>
		public bool bBakeActorData
		{
			get
			{
				return ReadBool(0x21);
			}
			set
			{
				WriteBool(0x21,value);
			}
		}
		
		/// <summary>
		/// Name: bAllowMultiMaterial
		/// Type: BoolProperty
		/// Offset: 0x22
		/// Size: 0x01
		/// </summary>
		public bool bAllowMultiMaterial
		{
			get
			{
				return ReadBool(0x22);
			}
			set
			{
				WriteBool(0x22,value);
			}
		}
		
		/// <summary>
		/// Name: bPreferTwoSideMaterials
		/// Type: BoolProperty
		/// Offset: 0x23
		/// Size: 0x01
		/// </summary>
		public bool bPreferTwoSideMaterials
		{
			get
			{
				return ReadBool(0x23);
			}
			set
			{
				WriteBool(0x23,value);
			}
		}
		
	}


	/// <summary>
	/// FSimplygonChannelCastingSettings:
	/// Size: 0x10
	/// Properties: 10
	/// </summary>
	public class FSimplygonChannelCastingSettings:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: MaterialChannel
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte MaterialChannel
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Caster
		/// Type: ByteProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public byte Caster
		{
			get
			{
				return ReadByte(0x01);
			}
			set
			{
				WriteByte(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: bActive
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bActive
		{
			get
			{
				return ReadBool(0x02);
			}
			set
			{
				WriteBool(0x02,value);
			}
		}
		
		/// <summary>
		/// Name: ColorChannels
		/// Type: ByteProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public byte ColorChannels
		{
			get
			{
				return ReadByte(0x03);
			}
			set
			{
				WriteByte(0x03,value);
			}
		}
		
		/// <summary>
		/// Name: BitsPerChannel
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int BitsPerChannel
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: bUseSRGB
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bUseSRGB
		{
			get
			{
				return ReadBool(0x08);
			}
			set
			{
				WriteBool(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: bBakeVertexColors
		/// Type: BoolProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public bool bBakeVertexColors
		{
			get
			{
				return ReadBool(0x09);
			}
			set
			{
				WriteBool(0x09,value);
			}
		}
		
		/// <summary>
		/// Name: bFlipBackfacingNormals
		/// Type: BoolProperty
		/// Offset: 0x0A
		/// Size: 0x01
		/// </summary>
		public bool bFlipBackfacingNormals
		{
			get
			{
				return ReadBool(0x0A);
			}
			set
			{
				WriteBool(0x0A,value);
			}
		}
		
		/// <summary>
		/// Name: bUseTangentSpaceNormals
		/// Type: BoolProperty
		/// Offset: 0x0B
		/// Size: 0x01
		/// </summary>
		public bool bUseTangentSpaceNormals
		{
			get
			{
				return ReadBool(0x0B);
			}
			set
			{
				WriteBool(0x0B,value);
			}
		}
		
		/// <summary>
		/// Name: bFlipGreenChannel
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bFlipGreenChannel
		{
			get
			{
				return ReadBool(0x0C);
			}
			set
			{
				WriteBool(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FMaterialProxySettings:
	/// Size: 0x74
	/// Properties: 26
	/// </summary>
	public class FMaterialProxySettings:MemoryObject
	{
		public override int ObjectSize => 116;
		/// <summary>
		/// Name: TextureSize
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public FIntPoint TextureSize => ReadStruct<FIntPoint>(0x00);
		
		/// <summary>
		/// Name: TextureSizingType
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte TextureSizingType
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: GutterSpace
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float GutterSpace
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: SamplingQuality
		/// Type: ByteProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public byte SamplingQuality
		{
			get
			{
				return ReadByte(0x10);
			}
			set
			{
				WriteByte(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: UVStrech
		/// Type: ByteProperty
		/// Offset: 0x11
		/// Size: 0x01
		/// </summary>
		public byte UVStrech
		{
			get
			{
				return ReadByte(0x11);
			}
			set
			{
				WriteByte(0x11,value);
			}
		}
		
		/// <summary>
		/// Name: bSplitProxyMaterialBasedOnType
		/// Type: BoolProperty
		/// Offset: 0x12
		/// Size: 0x01
		/// </summary>
		public bool bSplitProxyMaterialBasedOnType
		{
			get
			{
				return ReadBool(0x12);
			}
			set
			{
				WriteBool(0x12,value);
			}
		}
		
		/// <summary>
		/// Name: bUseTangentSpace
		/// Type: BoolProperty
		/// Offset: 0x13
		/// Size: 0x01
		/// </summary>
		public bool bUseTangentSpace
		{
			get
			{
				return ReadBool(0x13);
			}
			set
			{
				WriteBool(0x13,value);
			}
		}
		
		/// <summary>
		/// Name: bNormalMap
		/// Type: BoolProperty
		/// Offset: 0x14
		/// Size: 0x01
		/// </summary>
		public bool bNormalMap
		{
			get
			{
				return ReadBool(0x14);
			}
			set
			{
				WriteBool(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: bMetallicMap
		/// Type: BoolProperty
		/// Offset: 0x15
		/// Size: 0x01
		/// </summary>
		public bool bMetallicMap
		{
			get
			{
				return ReadBool(0x15);
			}
			set
			{
				WriteBool(0x15,value);
			}
		}
		
		/// <summary>
		/// Name: MetallicConstant
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float MetallicConstant
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: bRoughnessMap
		/// Type: BoolProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public bool bRoughnessMap
		{
			get
			{
				return ReadBool(0x1C);
			}
			set
			{
				WriteBool(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: RoughnessConstant
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float RoughnessConstant
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: bSpecularMap
		/// Type: BoolProperty
		/// Offset: 0x24
		/// Size: 0x01
		/// </summary>
		public bool bSpecularMap
		{
			get
			{
				return ReadBool(0x24);
			}
			set
			{
				WriteBool(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: SpecularConstant
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float SpecularConstant
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: bEmissiveMap
		/// Type: BoolProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public bool bEmissiveMap
		{
			get
			{
				return ReadBool(0x2C);
			}
			set
			{
				WriteBool(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: bOpacityMap
		/// Type: BoolProperty
		/// Offset: 0x2D
		/// Size: 0x01
		/// </summary>
		public bool bOpacityMap
		{
			get
			{
				return ReadBool(0x2D);
			}
			set
			{
				WriteBool(0x2D,value);
			}
		}
		
		/// <summary>
		/// Name: bAmbientOcclusionMap
		/// Type: BoolProperty
		/// Offset: 0x2E
		/// Size: 0x01
		/// </summary>
		public bool bAmbientOcclusionMap
		{
			get
			{
				return ReadBool(0x2E);
			}
			set
			{
				WriteBool(0x2E,value);
			}
		}
		
		/// <summary>
		/// Name: DiffuseTextureSize
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public FIntPoint DiffuseTextureSize => ReadStruct<FIntPoint>(0x30);
		
		/// <summary>
		/// Name: NormalTextureSize
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public FIntPoint NormalTextureSize => ReadStruct<FIntPoint>(0x38);
		
		/// <summary>
		/// Name: MetallicTextureSize
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public FIntPoint MetallicTextureSize => ReadStruct<FIntPoint>(0x40);
		
		/// <summary>
		/// Name: RoughnessTextureSize
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public FIntPoint RoughnessTextureSize => ReadStruct<FIntPoint>(0x48);
		
		/// <summary>
		/// Name: SpecularTextureSize
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public FIntPoint SpecularTextureSize => ReadStruct<FIntPoint>(0x50);
		
		/// <summary>
		/// Name: EmissiveTextureSize
		/// Type: StructProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public FIntPoint EmissiveTextureSize => ReadStruct<FIntPoint>(0x58);
		
		/// <summary>
		/// Name: OpacityTextureSize
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x08
		/// </summary>
		public FIntPoint OpacityTextureSize => ReadStruct<FIntPoint>(0x60);
		
		/// <summary>
		/// Name: AmbientOcclusionTextureSize
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x08
		/// </summary>
		public FIntPoint AmbientOcclusionTextureSize => ReadStruct<FIntPoint>(0x68);
		
		/// <summary>
		/// Name: MaterialMergeType
		/// Type: ByteProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public byte MaterialMergeType
		{
			get
			{
				return ReadByte(0x70);
			}
			set
			{
				WriteByte(0x70,value);
			}
		}
		
	}


	/// <summary>
	/// FMaterialSimplificationSettings:
	/// Size: 0x44
	/// Properties: 12
	/// </summary>
	public class FMaterialSimplificationSettings:MemoryObject
	{
		public override int ObjectSize => 68;
		/// <summary>
		/// Name: BaseColorMapSize
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public FIntPoint BaseColorMapSize => ReadStruct<FIntPoint>(0x00);
		
		/// <summary>
		/// Name: bNormalMap
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bNormalMap
		{
			get
			{
				return ReadBool(0x08);
			}
			set
			{
				WriteBool(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: NormalMapSize
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x08
		/// </summary>
		public FIntPoint NormalMapSize => ReadStruct<FIntPoint>(0x0C);
		
		/// <summary>
		/// Name: MetallicConstant
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float MetallicConstant
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: bMetallicMap
		/// Type: BoolProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public bool bMetallicMap
		{
			get
			{
				return ReadBool(0x18);
			}
			set
			{
				WriteBool(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: MetallicMapSize
		/// Type: StructProperty
		/// Offset: 0x1C
		/// Size: 0x08
		/// </summary>
		public FIntPoint MetallicMapSize => ReadStruct<FIntPoint>(0x1C);
		
		/// <summary>
		/// Name: RoughnessConstant
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float RoughnessConstant
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: bRoughnessMap
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bRoughnessMap
		{
			get
			{
				return ReadBool(0x28);
			}
			set
			{
				WriteBool(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: RoughnessMapSize
		/// Type: StructProperty
		/// Offset: 0x2C
		/// Size: 0x08
		/// </summary>
		public FIntPoint RoughnessMapSize => ReadStruct<FIntPoint>(0x2C);
		
		/// <summary>
		/// Name: SpecularConstant
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float SpecularConstant
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: bSpecularMap
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bSpecularMap
		{
			get
			{
				return ReadBool(0x38);
			}
			set
			{
				WriteBool(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: SpecularMapSize
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x08
		/// </summary>
		public FIntPoint SpecularMapSize => ReadStruct<FIntPoint>(0x3C);
		
	}


	/// <summary>
	/// FLevelSimplificationDetails:
	/// Size: 0x18C
	/// Properties: 18
	/// </summary>
	public class FLevelSimplificationDetails:MemoryObject
	{
		public override int ObjectSize => 396;
		/// <summary>
		/// Name: bCreatePackagePerAsset
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bCreatePackagePerAsset
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: DetailsPercentage
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float DetailsPercentage
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: StaticMeshMaterial
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x44
		/// </summary>
		public FMaterialSimplificationSettings StaticMeshMaterial => ReadStruct<FMaterialSimplificationSettings>(0x08);
		
		/// <summary>
		/// Name: StaticMeshMaterialSettings
		/// Type: StructProperty
		/// Offset: 0x4C
		/// Size: 0x74
		/// </summary>
		public FMaterialProxySettings StaticMeshMaterialSettings => ReadStruct<FMaterialProxySettings>(0x4C);
		
		/// <summary>
		/// Name: bOverrideLandscapeExportLOD
		/// Type: BoolProperty
		/// Offset: 0xC0
		/// Size: 0x01
		/// </summary>
		public bool bOverrideLandscapeExportLOD
		{
			get
			{
				return ReadBool(0xC0);
			}
			set
			{
				WriteBool(0xC0,value);
			}
		}
		
		/// <summary>
		/// Name: LandscapeExportLOD
		/// Type: IntProperty
		/// Offset: 0xC4
		/// Size: 0x04
		/// </summary>
		public int LandscapeExportLOD
		{
			get
			{
				return ReadInt32(0xC4);
			}
			set
			{
				WriteInt32(0xC4,value);
			}
		}
		
		/// <summary>
		/// Name: LandscapeMaterial
		/// Type: StructProperty
		/// Offset: 0xC8
		/// Size: 0x44
		/// </summary>
		public FMaterialSimplificationSettings LandscapeMaterial => ReadStruct<FMaterialSimplificationSettings>(0xC8);
		
		/// <summary>
		/// Name: LandscapeMaterialSettings
		/// Type: StructProperty
		/// Offset: 0x10C
		/// Size: 0x74
		/// </summary>
		public FMaterialProxySettings LandscapeMaterialSettings => ReadStruct<FMaterialProxySettings>(0x10C);
		
		/// <summary>
		/// Name: bBakeFoliageToLandscape
		/// Type: BoolProperty
		/// Offset: 0x180
		/// Size: 0x01
		/// </summary>
		public bool bBakeFoliageToLandscape
		{
			get
			{
				return ReadBool(0x180);
			}
			set
			{
				WriteBool(0x180,value);
			}
		}
		
		/// <summary>
		/// Name: bBakeGrassToLandscape
		/// Type: BoolProperty
		/// Offset: 0x181
		/// Size: 0x01
		/// </summary>
		public bool bBakeGrassToLandscape
		{
			get
			{
				return ReadBool(0x181);
			}
			set
			{
				WriteBool(0x181,value);
			}
		}
		
		/// <summary>
		/// Name: bGenerateMeshNormalMap
		/// Type: BoolProperty
		/// Offset: 0x182
		/// Size: 0x01
		/// </summary>
		public bool bGenerateMeshNormalMap
		{
			get
			{
				return ReadBool(0x182);
			}
			set
			{
				WriteBool(0x182,value);
			}
		}
		
		/// <summary>
		/// Name: bGenerateMeshMetallicMap
		/// Type: BoolProperty
		/// Offset: 0x183
		/// Size: 0x01
		/// </summary>
		public bool bGenerateMeshMetallicMap
		{
			get
			{
				return ReadBool(0x183);
			}
			set
			{
				WriteBool(0x183,value);
			}
		}
		
		/// <summary>
		/// Name: bGenerateMeshRoughnessMap
		/// Type: BoolProperty
		/// Offset: 0x184
		/// Size: 0x01
		/// </summary>
		public bool bGenerateMeshRoughnessMap
		{
			get
			{
				return ReadBool(0x184);
			}
			set
			{
				WriteBool(0x184,value);
			}
		}
		
		/// <summary>
		/// Name: bGenerateMeshSpecularMap
		/// Type: BoolProperty
		/// Offset: 0x185
		/// Size: 0x01
		/// </summary>
		public bool bGenerateMeshSpecularMap
		{
			get
			{
				return ReadBool(0x185);
			}
			set
			{
				WriteBool(0x185,value);
			}
		}
		
		/// <summary>
		/// Name: bGenerateLandscapeNormalMap
		/// Type: BoolProperty
		/// Offset: 0x186
		/// Size: 0x01
		/// </summary>
		public bool bGenerateLandscapeNormalMap
		{
			get
			{
				return ReadBool(0x186);
			}
			set
			{
				WriteBool(0x186,value);
			}
		}
		
		/// <summary>
		/// Name: bGenerateLandscapeMetallicMap
		/// Type: BoolProperty
		/// Offset: 0x187
		/// Size: 0x01
		/// </summary>
		public bool bGenerateLandscapeMetallicMap
		{
			get
			{
				return ReadBool(0x187);
			}
			set
			{
				WriteBool(0x187,value);
			}
		}
		
		/// <summary>
		/// Name: bGenerateLandscapeRoughnessMap
		/// Type: BoolProperty
		/// Offset: 0x188
		/// Size: 0x01
		/// </summary>
		public bool bGenerateLandscapeRoughnessMap
		{
			get
			{
				return ReadBool(0x188);
			}
			set
			{
				WriteBool(0x188,value);
			}
		}
		
		/// <summary>
		/// Name: bGenerateLandscapeSpecularMap
		/// Type: BoolProperty
		/// Offset: 0x189
		/// Size: 0x01
		/// </summary>
		public bool bGenerateLandscapeSpecularMap
		{
			get
			{
				return ReadBool(0x189);
			}
			set
			{
				WriteBool(0x189,value);
			}
		}
		
	}


	/// <summary>
	/// FDynamicTextureInstance:FStreamableTextureInstance
	/// Size: 0x38
	/// Properties: 3
	/// </summary>
	public class FDynamicTextureInstance:FStreamableTextureInstance
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Texture
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UTexture2D Texture => ReadUObject<UTexture2D>(0x28);
		
		/// <summary>
		/// Name: bAttached
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bAttached
		{
			get
			{
				return ReadBool(0x30);
			}
			set
			{
				WriteBool(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: OriginalRadius
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float OriginalRadius
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
	}


	/// <summary>
	/// FStreamableTextureInstance:
	/// Size: 0x28
	/// Properties: 0
	/// </summary>
	public class FStreamableTextureInstance:MemoryObject
	{
		public override int ObjectSize => 40;
	}


	/// <summary>
	/// FGeomSelection:
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FGeomSelection:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: Type
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int Type
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Index
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int Index
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: SelectionIndex
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int SelectionIndex
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FInteriorSettings:
	/// Size: 0x24
	/// Properties: 9
	/// </summary>
	public class FInteriorSettings:MemoryObject
	{
		public override int ObjectSize => 36;
		/// <summary>
		/// Name: bIsWorldSettings
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bIsWorldSettings => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ExteriorVolume
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float ExteriorVolume
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: ExteriorTime
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float ExteriorTime
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: ExteriorLPF
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float ExteriorLPF
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: ExteriorLPFTime
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float ExteriorLPFTime
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: InteriorVolume
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float InteriorVolume
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: InteriorTime
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float InteriorTime
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: InteriorLPF
		/// Type: FloatProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public float InteriorLPF
		{
			get
			{
				return ReadSingle(0x1C);
			}
			set
			{
				WriteSingle(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: InteriorLPFTime
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float InteriorLPFTime
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
	}


	/// <summary>
	/// FReverbSettings:
	/// Size: 0x18
	/// Properties: 5
	/// </summary>
	public class FReverbSettings:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: bApplyReverb
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bApplyReverb => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ReverbType
		/// Type: ByteProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public byte ReverbType
		{
			get
			{
				return ReadByte(0x04);
			}
			set
			{
				WriteByte(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: ReverbEffect
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UReverbEffect ReverbEffect => ReadUObject<UReverbEffect>(0x08);
		
		/// <summary>
		/// Name: Volume
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float Volume
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: FadeTime
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float FadeTime
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
	}


	/// <summary>
	/// FCullDistanceSizePair:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FCullDistanceSizePair:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Size
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Size
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: CullDistance
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float CullDistance
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FNavigationFilterFlags:
	/// Size: 0x04
	/// Properties: 16
	/// </summary>
	public class FNavigationFilterFlags:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: bNavFlag0
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bNavFlag0 => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bNavFlag1
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bNavFlag1 => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bNavFlag2
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bNavFlag2 => (ReadByte(0x0000) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bNavFlag3
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bNavFlag3 => (ReadByte(0x0000) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bNavFlag4
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bNavFlag4 => (ReadByte(0x0000) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bNavFlag5
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bNavFlag5 => (ReadByte(0x0000) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bNavFlag6
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bNavFlag6 => (ReadByte(0x0000) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bNavFlag7
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bNavFlag7 => (ReadByte(0x0000) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bNavFlag8
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bNavFlag8 => (ReadByte(0x0001) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bNavFlag9
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bNavFlag9 => (ReadByte(0x0001) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bNavFlag10
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bNavFlag10 => (ReadByte(0x0001) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bNavFlag11
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bNavFlag11 => (ReadByte(0x0001) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bNavFlag12
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bNavFlag12 => (ReadByte(0x0001) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bNavFlag13
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bNavFlag13 => (ReadByte(0x0001) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bNavFlag14
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bNavFlag14 => (ReadByte(0x0001) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bNavFlag15
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bNavFlag15 => (ReadByte(0x0001) & 0x80) == 0x80;
		
	}


	/// <summary>
	/// FNavigationFilterArea:
	/// Size: 0x18
	/// Properties: 6
	/// </summary>
	public class FNavigationFilterArea:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: AreaClass
		/// Type: ClassProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: TravelCostOverride
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float TravelCostOverride
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: EnteringCostOverride
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float EnteringCostOverride
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: bIsExcluded
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bIsExcluded => (ReadByte(0x0010) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverrideTravelCost
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bOverrideTravelCost => (ReadByte(0x0010) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverrideEnteringCost
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bOverrideEnteringCost => (ReadByte(0x0010) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// FNavDataConfig:FNavAgentProperties
	/// Size: 0x50
	/// Properties: 5
	/// </summary>
	public class FNavDataConfig:FNavAgentProperties
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Color
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public FColor Color => ReadStruct<FColor>(0x28);
		
		/// <summary>
		/// Name: DefaultQueryExtent
		/// Type: StructProperty
		/// Offset: 0x2C
		/// Size: 0x0C
		/// </summary>
		public FVector DefaultQueryExtent => ReadStruct<FVector>(0x2C);
		
		/// <summary>
		/// Name: NavigationDataClass
		/// Type: ClassProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: NavigationDataClassName
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FStringClassReference NavigationDataClassName => ReadStruct<FStringClassReference>(0x40);
		
	}


	/// <summary>
	/// FNavAgentProperties:FMovementProperties
	/// Size: 0x20
	/// Properties: 5
	/// </summary>
	public class FNavAgentProperties:FMovementProperties
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: AgentRadius
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float AgentRadius
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: AgentHeight
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float AgentHeight
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: AgentStepHeight
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float AgentStepHeight
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: NavWalkingSearchHeightScale
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float NavWalkingSearchHeightScale
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: PreferredNavData
		/// Type: ClassProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FMovementProperties:
	/// Size: 0x04
	/// Properties: 5
	/// </summary>
	public class FMovementProperties:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: bCanCrouch
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bCanCrouch => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bCanJump
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bCanJump => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bCanWalk
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bCanWalk => (ReadByte(0x0000) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bCanSwim
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bCanSwim => (ReadByte(0x0000) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bCanFly
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bCanFly => (ReadByte(0x0000) & 0x10) == 0x10;
		
	}


	/// <summary>
	/// FNavAgentSelector:
	/// Size: 0x04
	/// Properties: 16
	/// </summary>
	public class FNavAgentSelector:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: bSupportsAgent0
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent0 => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSupportsAgent1
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent1 => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bSupportsAgent2
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent2 => (ReadByte(0x0000) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bSupportsAgent3
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent3 => (ReadByte(0x0000) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bSupportsAgent4
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent4 => (ReadByte(0x0000) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bSupportsAgent5
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent5 => (ReadByte(0x0000) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bSupportsAgent6
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent6 => (ReadByte(0x0000) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bSupportsAgent7
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent7 => (ReadByte(0x0000) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bSupportsAgent8
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent8 => (ReadByte(0x0001) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSupportsAgent9
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent9 => (ReadByte(0x0001) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bSupportsAgent10
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent10 => (ReadByte(0x0001) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bSupportsAgent11
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent11 => (ReadByte(0x0001) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bSupportsAgent12
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent12 => (ReadByte(0x0001) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bSupportsAgent13
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent13 => (ReadByte(0x0001) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bSupportsAgent14
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent14 => (ReadByte(0x0001) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bSupportsAgent15
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent15 => (ReadByte(0x0001) & 0x80) == 0x80;
		
	}


	/// <summary>
	/// FPostProcessSettings:
	/// Size: 0x3A0
	/// Properties: 250
	/// </summary>
	public class FPostProcessSettings:MemoryObject
	{
		public override int ObjectSize => 928;
		/// <summary>
		/// Name: bOverride_WhiteTemp
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_WhiteTemp => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_WhiteTint
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_WhiteTint => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_ColorSaturation
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_ColorSaturation => (ReadByte(0x0000) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_ColorContrast
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_ColorContrast => (ReadByte(0x0000) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_ColorGamma
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_ColorGamma => (ReadByte(0x0000) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_ColorGain
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_ColorGain => (ReadByte(0x0000) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverride_ColorOffset
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_ColorOffset => (ReadByte(0x0000) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverride_FilmWhitePoint
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmWhitePoint => (ReadByte(0x0000) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverride_FilmSaturation
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmSaturation => (ReadByte(0x0001) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_FilmChannelMixerRed
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmChannelMixerRed => (ReadByte(0x0001) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_FilmChannelMixerGreen
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmChannelMixerGreen => (ReadByte(0x0001) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_FilmChannelMixerBlue
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmChannelMixerBlue => (ReadByte(0x0001) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_FilmContrast
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmContrast => (ReadByte(0x0001) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_FilmDynamicRange
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmDynamicRange => (ReadByte(0x0001) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverride_FilmHealAmount
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmHealAmount => (ReadByte(0x0001) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverride_FilmToeAmount
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmToeAmount => (ReadByte(0x0001) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverride_FilmShadowTint
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmShadowTint => (ReadByte(0x0002) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_FilmShadowTintBlend
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmShadowTintBlend => (ReadByte(0x0002) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_FilmShadowTintAmount
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmShadowTintAmount => (ReadByte(0x0002) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_FilmSlope
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmSlope => (ReadByte(0x0002) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_FilmToe
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmToe => (ReadByte(0x0002) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_FilmShoulder
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmShoulder => (ReadByte(0x0002) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverride_FilmBlackClip
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmBlackClip => (ReadByte(0x0002) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverride_FilmWhiteClip
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bOverride_FilmWhiteClip => (ReadByte(0x0002) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverride_SceneColorTint
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bOverride_SceneColorTint => (ReadByte(0x0003) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_SceneFringeIntensity
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bOverride_SceneFringeIntensity => (ReadByte(0x0003) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_AmbientCubemapTint
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AmbientCubemapTint => (ReadByte(0x0003) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_AmbientCubemapIntensity
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AmbientCubemapIntensity => (ReadByte(0x0003) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_BloomIntensity
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bOverride_BloomIntensity => (ReadByte(0x0003) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_BloomThreshold
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bOverride_BloomThreshold => (ReadByte(0x0003) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverride_Bloom1Tint
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bOverride_Bloom1Tint => (ReadByte(0x0003) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverride_Bloom1Size
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bOverride_Bloom1Size => (ReadByte(0x0003) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverride_Bloom2Size
		/// Type: BoolProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public bool bOverride_Bloom2Size => (ReadByte(0x0004) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_Bloom2Tint
		/// Type: BoolProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public bool bOverride_Bloom2Tint => (ReadByte(0x0004) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_Bloom3Tint
		/// Type: BoolProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public bool bOverride_Bloom3Tint => (ReadByte(0x0004) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_Bloom3Size
		/// Type: BoolProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public bool bOverride_Bloom3Size => (ReadByte(0x0004) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_Bloom4Tint
		/// Type: BoolProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public bool bOverride_Bloom4Tint => (ReadByte(0x0004) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_Bloom4Size
		/// Type: BoolProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public bool bOverride_Bloom4Size => (ReadByte(0x0004) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverride_Bloom5Tint
		/// Type: BoolProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public bool bOverride_Bloom5Tint => (ReadByte(0x0004) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverride_Bloom5Size
		/// Type: BoolProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public bool bOverride_Bloom5Size => (ReadByte(0x0004) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverride_Bloom6Tint
		/// Type: BoolProperty
		/// Offset: 0x05
		/// Size: 0x01
		/// </summary>
		public bool bOverride_Bloom6Tint => (ReadByte(0x0005) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_Bloom6Size
		/// Type: BoolProperty
		/// Offset: 0x05
		/// Size: 0x01
		/// </summary>
		public bool bOverride_Bloom6Size => (ReadByte(0x0005) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_BloomSizeScale
		/// Type: BoolProperty
		/// Offset: 0x05
		/// Size: 0x01
		/// </summary>
		public bool bOverride_BloomSizeScale => (ReadByte(0x0005) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_BloomDirtMaskIntensity
		/// Type: BoolProperty
		/// Offset: 0x05
		/// Size: 0x01
		/// </summary>
		public bool bOverride_BloomDirtMaskIntensity => (ReadByte(0x0005) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_BloomDirtMaskTint
		/// Type: BoolProperty
		/// Offset: 0x05
		/// Size: 0x01
		/// </summary>
		public bool bOverride_BloomDirtMaskTint => (ReadByte(0x0005) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_BloomDirtMask
		/// Type: BoolProperty
		/// Offset: 0x05
		/// Size: 0x01
		/// </summary>
		public bool bOverride_BloomDirtMask => (ReadByte(0x0005) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverride_AutoExposureMethod
		/// Type: BoolProperty
		/// Offset: 0x05
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AutoExposureMethod => (ReadByte(0x0005) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverride_AutoExposureLowPercent
		/// Type: BoolProperty
		/// Offset: 0x05
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AutoExposureLowPercent => (ReadByte(0x0005) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverride_AutoExposureHighPercent
		/// Type: BoolProperty
		/// Offset: 0x06
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AutoExposureHighPercent => (ReadByte(0x0006) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_AutoExposureMinBrightness
		/// Type: BoolProperty
		/// Offset: 0x06
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AutoExposureMinBrightness => (ReadByte(0x0006) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_AutoExposureMaxBrightness
		/// Type: BoolProperty
		/// Offset: 0x06
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AutoExposureMaxBrightness => (ReadByte(0x0006) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_AutoExposureSpeedUp
		/// Type: BoolProperty
		/// Offset: 0x06
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AutoExposureSpeedUp => (ReadByte(0x0006) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_AutoExposureSpeedDown
		/// Type: BoolProperty
		/// Offset: 0x06
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AutoExposureSpeedDown => (ReadByte(0x0006) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_AutoExposureBias
		/// Type: BoolProperty
		/// Offset: 0x06
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AutoExposureBias => (ReadByte(0x0006) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverride_HistogramLogMin
		/// Type: BoolProperty
		/// Offset: 0x06
		/// Size: 0x01
		/// </summary>
		public bool bOverride_HistogramLogMin => (ReadByte(0x0006) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverride_HistogramLogMax
		/// Type: BoolProperty
		/// Offset: 0x06
		/// Size: 0x01
		/// </summary>
		public bool bOverride_HistogramLogMax => (ReadByte(0x0006) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverride_LensFlareIntensity
		/// Type: BoolProperty
		/// Offset: 0x07
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LensFlareIntensity => (ReadByte(0x0007) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_LensFlareTint
		/// Type: BoolProperty
		/// Offset: 0x07
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LensFlareTint => (ReadByte(0x0007) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_LensFlareTints
		/// Type: BoolProperty
		/// Offset: 0x07
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LensFlareTints => (ReadByte(0x0007) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_LensFlareBokehSize
		/// Type: BoolProperty
		/// Offset: 0x07
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LensFlareBokehSize => (ReadByte(0x0007) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_LensFlareBokehShape
		/// Type: BoolProperty
		/// Offset: 0x07
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LensFlareBokehShape => (ReadByte(0x0007) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_LensFlareThreshold
		/// Type: BoolProperty
		/// Offset: 0x07
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LensFlareThreshold => (ReadByte(0x0007) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverride_VignetteIntensity
		/// Type: BoolProperty
		/// Offset: 0x07
		/// Size: 0x01
		/// </summary>
		public bool bOverride_VignetteIntensity => (ReadByte(0x0007) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverride_GrainIntensity
		/// Type: BoolProperty
		/// Offset: 0x07
		/// Size: 0x01
		/// </summary>
		public bool bOverride_GrainIntensity => (ReadByte(0x0007) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverride_GrainJitter
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bOverride_GrainJitter => (ReadByte(0x0008) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_AmbientOcclusionIntensity
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AmbientOcclusionIntensity => (ReadByte(0x0008) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_AmbientOcclusionStaticFraction
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AmbientOcclusionStaticFraction => (ReadByte(0x0008) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_AmbientOcclusionRadius
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AmbientOcclusionRadius => (ReadByte(0x0008) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_AmbientOcclusionFadeDistance
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AmbientOcclusionFadeDistance => (ReadByte(0x0008) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_AmbientOcclusionFadeRadius
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AmbientOcclusionFadeRadius => (ReadByte(0x0008) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverride_AmbientOcclusionDistance
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AmbientOcclusionDistance => (ReadByte(0x0008) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverride_AmbientOcclusionRadiusInWS
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AmbientOcclusionRadiusInWS => (ReadByte(0x0008) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverride_AmbientOcclusionPower
		/// Type: BoolProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AmbientOcclusionPower => (ReadByte(0x0009) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_AmbientOcclusionBias
		/// Type: BoolProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AmbientOcclusionBias => (ReadByte(0x0009) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_AmbientOcclusionQuality
		/// Type: BoolProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AmbientOcclusionQuality => (ReadByte(0x0009) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_AmbientOcclusionMipBlend
		/// Type: BoolProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AmbientOcclusionMipBlend => (ReadByte(0x0009) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_AmbientOcclusionMipScale
		/// Type: BoolProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AmbientOcclusionMipScale => (ReadByte(0x0009) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_AmbientOcclusionMipThreshold
		/// Type: BoolProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AmbientOcclusionMipThreshold => (ReadByte(0x0009) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverride_LPVIntensity
		/// Type: BoolProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVIntensity => (ReadByte(0x0009) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverride_LPVDirectionalOcclusionIntensity
		/// Type: BoolProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVDirectionalOcclusionIntensity => (ReadByte(0x0009) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverride_LPVDirectionalOcclusionRadius
		/// Type: BoolProperty
		/// Offset: 0x0A
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVDirectionalOcclusionRadius => (ReadByte(0x000A) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_LPVDiffuseOcclusionExponent
		/// Type: BoolProperty
		/// Offset: 0x0A
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVDiffuseOcclusionExponent => (ReadByte(0x000A) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_LPVSpecularOcclusionExponent
		/// Type: BoolProperty
		/// Offset: 0x0A
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVSpecularOcclusionExponent => (ReadByte(0x000A) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_LPVDiffuseOcclusionIntensity
		/// Type: BoolProperty
		/// Offset: 0x0A
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVDiffuseOcclusionIntensity => (ReadByte(0x000A) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_LPVSpecularOcclusionIntensity
		/// Type: BoolProperty
		/// Offset: 0x0A
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVSpecularOcclusionIntensity => (ReadByte(0x000A) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_LPVSize
		/// Type: BoolProperty
		/// Offset: 0x0A
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVSize => (ReadByte(0x000A) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverride_LPVSecondaryOcclusionIntensity
		/// Type: BoolProperty
		/// Offset: 0x0A
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVSecondaryOcclusionIntensity => (ReadByte(0x000A) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverride_LPVSecondaryBounceIntensity
		/// Type: BoolProperty
		/// Offset: 0x0A
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVSecondaryBounceIntensity => (ReadByte(0x000A) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverride_LPVGeometryVolumeBias
		/// Type: BoolProperty
		/// Offset: 0x0B
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVGeometryVolumeBias => (ReadByte(0x000B) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_LPVVplInjectionBias
		/// Type: BoolProperty
		/// Offset: 0x0B
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVVplInjectionBias => (ReadByte(0x000B) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_LPVEmissiveInjectionIntensity
		/// Type: BoolProperty
		/// Offset: 0x0B
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVEmissiveInjectionIntensity => (ReadByte(0x000B) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_IndirectLightingColor
		/// Type: BoolProperty
		/// Offset: 0x0B
		/// Size: 0x01
		/// </summary>
		public bool bOverride_IndirectLightingColor => (ReadByte(0x000B) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_IndirectLightingIntensity
		/// Type: BoolProperty
		/// Offset: 0x0B
		/// Size: 0x01
		/// </summary>
		public bool bOverride_IndirectLightingIntensity => (ReadByte(0x000B) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_ColorGradingIntensity
		/// Type: BoolProperty
		/// Offset: 0x0B
		/// Size: 0x01
		/// </summary>
		public bool bOverride_ColorGradingIntensity => (ReadByte(0x000B) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverride_ColorGradingLUT
		/// Type: BoolProperty
		/// Offset: 0x0B
		/// Size: 0x01
		/// </summary>
		public bool bOverride_ColorGradingLUT => (ReadByte(0x000B) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldFocalDistance
		/// Type: BoolProperty
		/// Offset: 0x0B
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldFocalDistance => (ReadByte(0x000B) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldFstop
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldFstop => (ReadByte(0x000C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldSensorWidth
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldSensorWidth => (ReadByte(0x000C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldDepthBlurRadius
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldDepthBlurRadius => (ReadByte(0x000C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldDepthBlurAmount
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldDepthBlurAmount => (ReadByte(0x000C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldFocalRegion
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldFocalRegion => (ReadByte(0x000C) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldNearTransitionRegion
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldNearTransitionRegion => (ReadByte(0x000C) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldFarTransitionRegion
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldFarTransitionRegion => (ReadByte(0x000C) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldScale
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldScale => (ReadByte(0x000C) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldMaxBokehSize
		/// Type: BoolProperty
		/// Offset: 0x0D
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldMaxBokehSize => (ReadByte(0x000D) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldNearBlurSize
		/// Type: BoolProperty
		/// Offset: 0x0D
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldNearBlurSize => (ReadByte(0x000D) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldFarBlurSize
		/// Type: BoolProperty
		/// Offset: 0x0D
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldFarBlurSize => (ReadByte(0x000D) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldMethod
		/// Type: BoolProperty
		/// Offset: 0x0D
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldMethod => (ReadByte(0x000D) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_MobileHQGaussian
		/// Type: BoolProperty
		/// Offset: 0x0D
		/// Size: 0x01
		/// </summary>
		public bool bOverride_MobileHQGaussian => (ReadByte(0x000D) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldBokehShape
		/// Type: BoolProperty
		/// Offset: 0x0D
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldBokehShape => (ReadByte(0x000D) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldOcclusion
		/// Type: BoolProperty
		/// Offset: 0x0D
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldOcclusion => (ReadByte(0x000D) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldColorThreshold
		/// Type: BoolProperty
		/// Offset: 0x0D
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldColorThreshold => (ReadByte(0x000D) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldSizeThreshold
		/// Type: BoolProperty
		/// Offset: 0x0E
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldSizeThreshold => (ReadByte(0x000E) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldSkyFocusDistance
		/// Type: BoolProperty
		/// Offset: 0x0E
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldSkyFocusDistance => (ReadByte(0x000E) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_DepthOfFieldVignetteSize
		/// Type: BoolProperty
		/// Offset: 0x0E
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DepthOfFieldVignetteSize => (ReadByte(0x000E) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_MotionBlurAmount
		/// Type: BoolProperty
		/// Offset: 0x0E
		/// Size: 0x01
		/// </summary>
		public bool bOverride_MotionBlurAmount => (ReadByte(0x000E) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_MotionBlurMax
		/// Type: BoolProperty
		/// Offset: 0x0E
		/// Size: 0x01
		/// </summary>
		public bool bOverride_MotionBlurMax => (ReadByte(0x000E) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_MotionBlurPerObjectSize
		/// Type: BoolProperty
		/// Offset: 0x0E
		/// Size: 0x01
		/// </summary>
		public bool bOverride_MotionBlurPerObjectSize => (ReadByte(0x000E) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverride_ScreenPercentage
		/// Type: BoolProperty
		/// Offset: 0x0E
		/// Size: 0x01
		/// </summary>
		public bool bOverride_ScreenPercentage => (ReadByte(0x000E) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverride_AntiAliasingMethod
		/// Type: BoolProperty
		/// Offset: 0x0E
		/// Size: 0x01
		/// </summary>
		public bool bOverride_AntiAliasingMethod => (ReadByte(0x000E) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverride_ScreenSpaceReflectionIntensity
		/// Type: BoolProperty
		/// Offset: 0x0F
		/// Size: 0x01
		/// </summary>
		public bool bOverride_ScreenSpaceReflectionIntensity => (ReadByte(0x000F) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_ScreenSpaceReflectionQuality
		/// Type: BoolProperty
		/// Offset: 0x0F
		/// Size: 0x01
		/// </summary>
		public bool bOverride_ScreenSpaceReflectionQuality => (ReadByte(0x000F) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_ScreenSpaceReflectionMaxRoughness
		/// Type: BoolProperty
		/// Offset: 0x0F
		/// Size: 0x01
		/// </summary>
		public bool bOverride_ScreenSpaceReflectionMaxRoughness => (ReadByte(0x000F) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_ScreenSpaceReflectionRoughnessScale
		/// Type: BoolProperty
		/// Offset: 0x0F
		/// Size: 0x01
		/// </summary>
		public bool bOverride_ScreenSpaceReflectionRoughnessScale => (ReadByte(0x000F) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: WhiteTemp
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float WhiteTemp
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: WhiteTint
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float WhiteTint
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: ColorSaturation
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x0C
		/// </summary>
		public FVector ColorSaturation => ReadStruct<FVector>(0x18);
		
		/// <summary>
		/// Name: ColorContrast
		/// Type: StructProperty
		/// Offset: 0x24
		/// Size: 0x0C
		/// </summary>
		public FVector ColorContrast => ReadStruct<FVector>(0x24);
		
		/// <summary>
		/// Name: ColorGamma
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x0C
		/// </summary>
		public FVector ColorGamma => ReadStruct<FVector>(0x30);
		
		/// <summary>
		/// Name: ColorGain
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x0C
		/// </summary>
		public FVector ColorGain => ReadStruct<FVector>(0x3C);
		
		/// <summary>
		/// Name: ColorOffset
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x0C
		/// </summary>
		public FVector ColorOffset => ReadStruct<FVector>(0x48);
		
		/// <summary>
		/// Name: FilmWhitePoint
		/// Type: StructProperty
		/// Offset: 0x54
		/// Size: 0x10
		/// </summary>
		public FLinearColor FilmWhitePoint => ReadStruct<FLinearColor>(0x54);
		
		/// <summary>
		/// Name: FilmShadowTint
		/// Type: StructProperty
		/// Offset: 0x64
		/// Size: 0x10
		/// </summary>
		public FLinearColor FilmShadowTint => ReadStruct<FLinearColor>(0x64);
		
		/// <summary>
		/// Name: FilmShadowTintBlend
		/// Type: FloatProperty
		/// Offset: 0x74
		/// Size: 0x04
		/// </summary>
		public float FilmShadowTintBlend
		{
			get
			{
				return ReadSingle(0x74);
			}
			set
			{
				WriteSingle(0x74,value);
			}
		}
		
		/// <summary>
		/// Name: FilmShadowTintAmount
		/// Type: FloatProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public float FilmShadowTintAmount
		{
			get
			{
				return ReadSingle(0x78);
			}
			set
			{
				WriteSingle(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: FilmSaturation
		/// Type: FloatProperty
		/// Offset: 0x7C
		/// Size: 0x04
		/// </summary>
		public float FilmSaturation
		{
			get
			{
				return ReadSingle(0x7C);
			}
			set
			{
				WriteSingle(0x7C,value);
			}
		}
		
		/// <summary>
		/// Name: FilmChannelMixerRed
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FLinearColor FilmChannelMixerRed => ReadStruct<FLinearColor>(0x80);
		
		/// <summary>
		/// Name: FilmChannelMixerGreen
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x10
		/// </summary>
		public FLinearColor FilmChannelMixerGreen => ReadStruct<FLinearColor>(0x90);
		
		/// <summary>
		/// Name: FilmChannelMixerBlue
		/// Type: StructProperty
		/// Offset: 0xA0
		/// Size: 0x10
		/// </summary>
		public FLinearColor FilmChannelMixerBlue => ReadStruct<FLinearColor>(0xA0);
		
		/// <summary>
		/// Name: FilmContrast
		/// Type: FloatProperty
		/// Offset: 0xB0
		/// Size: 0x04
		/// </summary>
		public float FilmContrast
		{
			get
			{
				return ReadSingle(0xB0);
			}
			set
			{
				WriteSingle(0xB0,value);
			}
		}
		
		/// <summary>
		/// Name: FilmToeAmount
		/// Type: FloatProperty
		/// Offset: 0xB4
		/// Size: 0x04
		/// </summary>
		public float FilmToeAmount
		{
			get
			{
				return ReadSingle(0xB4);
			}
			set
			{
				WriteSingle(0xB4,value);
			}
		}
		
		/// <summary>
		/// Name: FilmHealAmount
		/// Type: FloatProperty
		/// Offset: 0xB8
		/// Size: 0x04
		/// </summary>
		public float FilmHealAmount
		{
			get
			{
				return ReadSingle(0xB8);
			}
			set
			{
				WriteSingle(0xB8,value);
			}
		}
		
		/// <summary>
		/// Name: FilmDynamicRange
		/// Type: FloatProperty
		/// Offset: 0xBC
		/// Size: 0x04
		/// </summary>
		public float FilmDynamicRange
		{
			get
			{
				return ReadSingle(0xBC);
			}
			set
			{
				WriteSingle(0xBC,value);
			}
		}
		
		/// <summary>
		/// Name: FilmSlope
		/// Type: FloatProperty
		/// Offset: 0xC0
		/// Size: 0x04
		/// </summary>
		public float FilmSlope
		{
			get
			{
				return ReadSingle(0xC0);
			}
			set
			{
				WriteSingle(0xC0,value);
			}
		}
		
		/// <summary>
		/// Name: FilmToe
		/// Type: FloatProperty
		/// Offset: 0xC4
		/// Size: 0x04
		/// </summary>
		public float FilmToe
		{
			get
			{
				return ReadSingle(0xC4);
			}
			set
			{
				WriteSingle(0xC4,value);
			}
		}
		
		/// <summary>
		/// Name: FilmShoulder
		/// Type: FloatProperty
		/// Offset: 0xC8
		/// Size: 0x04
		/// </summary>
		public float FilmShoulder
		{
			get
			{
				return ReadSingle(0xC8);
			}
			set
			{
				WriteSingle(0xC8,value);
			}
		}
		
		/// <summary>
		/// Name: FilmBlackClip
		/// Type: FloatProperty
		/// Offset: 0xCC
		/// Size: 0x04
		/// </summary>
		public float FilmBlackClip
		{
			get
			{
				return ReadSingle(0xCC);
			}
			set
			{
				WriteSingle(0xCC,value);
			}
		}
		
		/// <summary>
		/// Name: FilmWhiteClip
		/// Type: FloatProperty
		/// Offset: 0xD0
		/// Size: 0x04
		/// </summary>
		public float FilmWhiteClip
		{
			get
			{
				return ReadSingle(0xD0);
			}
			set
			{
				WriteSingle(0xD0,value);
			}
		}
		
		/// <summary>
		/// Name: SceneColorTint
		/// Type: StructProperty
		/// Offset: 0xD4
		/// Size: 0x10
		/// </summary>
		public FLinearColor SceneColorTint => ReadStruct<FLinearColor>(0xD4);
		
		/// <summary>
		/// Name: SceneFringeIntensity
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float SceneFringeIntensity
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
		/// <summary>
		/// Name: BloomIntensity
		/// Type: FloatProperty
		/// Offset: 0xE8
		/// Size: 0x04
		/// </summary>
		public float BloomIntensity
		{
			get
			{
				return ReadSingle(0xE8);
			}
			set
			{
				WriteSingle(0xE8,value);
			}
		}
		
		/// <summary>
		/// Name: BloomThreshold
		/// Type: FloatProperty
		/// Offset: 0xEC
		/// Size: 0x04
		/// </summary>
		public float BloomThreshold
		{
			get
			{
				return ReadSingle(0xEC);
			}
			set
			{
				WriteSingle(0xEC,value);
			}
		}
		
		/// <summary>
		/// Name: BloomSizeScale
		/// Type: FloatProperty
		/// Offset: 0xF0
		/// Size: 0x04
		/// </summary>
		public float BloomSizeScale
		{
			get
			{
				return ReadSingle(0xF0);
			}
			set
			{
				WriteSingle(0xF0,value);
			}
		}
		
		/// <summary>
		/// Name: Bloom1Size
		/// Type: FloatProperty
		/// Offset: 0xF4
		/// Size: 0x04
		/// </summary>
		public float Bloom1Size
		{
			get
			{
				return ReadSingle(0xF4);
			}
			set
			{
				WriteSingle(0xF4,value);
			}
		}
		
		/// <summary>
		/// Name: Bloom2Size
		/// Type: FloatProperty
		/// Offset: 0xF8
		/// Size: 0x04
		/// </summary>
		public float Bloom2Size
		{
			get
			{
				return ReadSingle(0xF8);
			}
			set
			{
				WriteSingle(0xF8,value);
			}
		}
		
		/// <summary>
		/// Name: Bloom3Size
		/// Type: FloatProperty
		/// Offset: 0xFC
		/// Size: 0x04
		/// </summary>
		public float Bloom3Size
		{
			get
			{
				return ReadSingle(0xFC);
			}
			set
			{
				WriteSingle(0xFC,value);
			}
		}
		
		/// <summary>
		/// Name: Bloom4Size
		/// Type: FloatProperty
		/// Offset: 0x100
		/// Size: 0x04
		/// </summary>
		public float Bloom4Size
		{
			get
			{
				return ReadSingle(0x100);
			}
			set
			{
				WriteSingle(0x100,value);
			}
		}
		
		/// <summary>
		/// Name: Bloom5Size
		/// Type: FloatProperty
		/// Offset: 0x104
		/// Size: 0x04
		/// </summary>
		public float Bloom5Size
		{
			get
			{
				return ReadSingle(0x104);
			}
			set
			{
				WriteSingle(0x104,value);
			}
		}
		
		/// <summary>
		/// Name: Bloom6Size
		/// Type: FloatProperty
		/// Offset: 0x108
		/// Size: 0x04
		/// </summary>
		public float Bloom6Size
		{
			get
			{
				return ReadSingle(0x108);
			}
			set
			{
				WriteSingle(0x108,value);
			}
		}
		
		/// <summary>
		/// Name: Bloom1Tint
		/// Type: StructProperty
		/// Offset: 0x10C
		/// Size: 0x10
		/// </summary>
		public FLinearColor Bloom1Tint => ReadStruct<FLinearColor>(0x10C);
		
		/// <summary>
		/// Name: Bloom2Tint
		/// Type: StructProperty
		/// Offset: 0x11C
		/// Size: 0x10
		/// </summary>
		public FLinearColor Bloom2Tint => ReadStruct<FLinearColor>(0x11C);
		
		/// <summary>
		/// Name: Bloom3Tint
		/// Type: StructProperty
		/// Offset: 0x12C
		/// Size: 0x10
		/// </summary>
		public FLinearColor Bloom3Tint => ReadStruct<FLinearColor>(0x12C);
		
		/// <summary>
		/// Name: Bloom4Tint
		/// Type: StructProperty
		/// Offset: 0x13C
		/// Size: 0x10
		/// </summary>
		public FLinearColor Bloom4Tint => ReadStruct<FLinearColor>(0x13C);
		
		/// <summary>
		/// Name: Bloom5Tint
		/// Type: StructProperty
		/// Offset: 0x14C
		/// Size: 0x10
		/// </summary>
		public FLinearColor Bloom5Tint => ReadStruct<FLinearColor>(0x14C);
		
		/// <summary>
		/// Name: Bloom6Tint
		/// Type: StructProperty
		/// Offset: 0x15C
		/// Size: 0x10
		/// </summary>
		public FLinearColor Bloom6Tint => ReadStruct<FLinearColor>(0x15C);
		
		/// <summary>
		/// Name: BloomDirtMaskIntensity
		/// Type: FloatProperty
		/// Offset: 0x16C
		/// Size: 0x04
		/// </summary>
		public float BloomDirtMaskIntensity
		{
			get
			{
				return ReadSingle(0x16C);
			}
			set
			{
				WriteSingle(0x16C,value);
			}
		}
		
		/// <summary>
		/// Name: BloomDirtMaskTint
		/// Type: StructProperty
		/// Offset: 0x170
		/// Size: 0x10
		/// </summary>
		public FLinearColor BloomDirtMaskTint => ReadStruct<FLinearColor>(0x170);
		
		/// <summary>
		/// Name: BloomDirtMask
		/// Type: ObjectProperty
		/// Offset: 0x180
		/// Size: 0x08
		/// </summary>
		public UTexture BloomDirtMask => ReadUObject<UTexture>(0x180);
		
		/// <summary>
		/// Name: LPVIntensity
		/// Type: FloatProperty
		/// Offset: 0x188
		/// Size: 0x04
		/// </summary>
		public float LPVIntensity
		{
			get
			{
				return ReadSingle(0x188);
			}
			set
			{
				WriteSingle(0x188,value);
			}
		}
		
		/// <summary>
		/// Name: LPVVplInjectionBias
		/// Type: FloatProperty
		/// Offset: 0x18C
		/// Size: 0x04
		/// </summary>
		public float LPVVplInjectionBias
		{
			get
			{
				return ReadSingle(0x18C);
			}
			set
			{
				WriteSingle(0x18C,value);
			}
		}
		
		/// <summary>
		/// Name: LPVSize
		/// Type: FloatProperty
		/// Offset: 0x190
		/// Size: 0x04
		/// </summary>
		public float LPVSize
		{
			get
			{
				return ReadSingle(0x190);
			}
			set
			{
				WriteSingle(0x190,value);
			}
		}
		
		/// <summary>
		/// Name: LPVSecondaryOcclusionIntensity
		/// Type: FloatProperty
		/// Offset: 0x194
		/// Size: 0x04
		/// </summary>
		public float LPVSecondaryOcclusionIntensity
		{
			get
			{
				return ReadSingle(0x194);
			}
			set
			{
				WriteSingle(0x194,value);
			}
		}
		
		/// <summary>
		/// Name: LPVSecondaryBounceIntensity
		/// Type: FloatProperty
		/// Offset: 0x198
		/// Size: 0x04
		/// </summary>
		public float LPVSecondaryBounceIntensity
		{
			get
			{
				return ReadSingle(0x198);
			}
			set
			{
				WriteSingle(0x198,value);
			}
		}
		
		/// <summary>
		/// Name: LPVGeometryVolumeBias
		/// Type: FloatProperty
		/// Offset: 0x19C
		/// Size: 0x04
		/// </summary>
		public float LPVGeometryVolumeBias
		{
			get
			{
				return ReadSingle(0x19C);
			}
			set
			{
				WriteSingle(0x19C,value);
			}
		}
		
		/// <summary>
		/// Name: LPVEmissiveInjectionIntensity
		/// Type: FloatProperty
		/// Offset: 0x1A0
		/// Size: 0x04
		/// </summary>
		public float LPVEmissiveInjectionIntensity
		{
			get
			{
				return ReadSingle(0x1A0);
			}
			set
			{
				WriteSingle(0x1A0,value);
			}
		}
		
		/// <summary>
		/// Name: LPVDirectionalOcclusionIntensity
		/// Type: FloatProperty
		/// Offset: 0x1A4
		/// Size: 0x04
		/// </summary>
		public float LPVDirectionalOcclusionIntensity
		{
			get
			{
				return ReadSingle(0x1A4);
			}
			set
			{
				WriteSingle(0x1A4,value);
			}
		}
		
		/// <summary>
		/// Name: LPVDirectionalOcclusionRadius
		/// Type: FloatProperty
		/// Offset: 0x1A8
		/// Size: 0x04
		/// </summary>
		public float LPVDirectionalOcclusionRadius
		{
			get
			{
				return ReadSingle(0x1A8);
			}
			set
			{
				WriteSingle(0x1A8,value);
			}
		}
		
		/// <summary>
		/// Name: LPVDiffuseOcclusionExponent
		/// Type: FloatProperty
		/// Offset: 0x1AC
		/// Size: 0x04
		/// </summary>
		public float LPVDiffuseOcclusionExponent
		{
			get
			{
				return ReadSingle(0x1AC);
			}
			set
			{
				WriteSingle(0x1AC,value);
			}
		}
		
		/// <summary>
		/// Name: LPVSpecularOcclusionExponent
		/// Type: FloatProperty
		/// Offset: 0x1B0
		/// Size: 0x04
		/// </summary>
		public float LPVSpecularOcclusionExponent
		{
			get
			{
				return ReadSingle(0x1B0);
			}
			set
			{
				WriteSingle(0x1B0,value);
			}
		}
		
		/// <summary>
		/// Name: LPVDiffuseOcclusionIntensity
		/// Type: FloatProperty
		/// Offset: 0x1B4
		/// Size: 0x04
		/// </summary>
		public float LPVDiffuseOcclusionIntensity
		{
			get
			{
				return ReadSingle(0x1B4);
			}
			set
			{
				WriteSingle(0x1B4,value);
			}
		}
		
		/// <summary>
		/// Name: LPVSpecularOcclusionIntensity
		/// Type: FloatProperty
		/// Offset: 0x1B8
		/// Size: 0x04
		/// </summary>
		public float LPVSpecularOcclusionIntensity
		{
			get
			{
				return ReadSingle(0x1B8);
			}
			set
			{
				WriteSingle(0x1B8,value);
			}
		}
		
		/// <summary>
		/// Name: AmbientCubemapTint
		/// Type: StructProperty
		/// Offset: 0x1BC
		/// Size: 0x10
		/// </summary>
		public FLinearColor AmbientCubemapTint => ReadStruct<FLinearColor>(0x1BC);
		
		/// <summary>
		/// Name: AmbientCubemapIntensity
		/// Type: FloatProperty
		/// Offset: 0x1CC
		/// Size: 0x04
		/// </summary>
		public float AmbientCubemapIntensity
		{
			get
			{
				return ReadSingle(0x1CC);
			}
			set
			{
				WriteSingle(0x1CC,value);
			}
		}
		
		/// <summary>
		/// Name: AmbientCubemap
		/// Type: ObjectProperty
		/// Offset: 0x1D0
		/// Size: 0x08
		/// </summary>
		public UTextureCube AmbientCubemap => ReadUObject<UTextureCube>(0x1D0);
		
		/// <summary>
		/// Name: AutoExposureMethod
		/// Type: ByteProperty
		/// Offset: 0x1D8
		/// Size: 0x01
		/// </summary>
		public byte AutoExposureMethod
		{
			get
			{
				return ReadByte(0x1D8);
			}
			set
			{
				WriteByte(0x1D8,value);
			}
		}
		
		/// <summary>
		/// Name: AutoExposureLowPercent
		/// Type: FloatProperty
		/// Offset: 0x1DC
		/// Size: 0x04
		/// </summary>
		public float AutoExposureLowPercent
		{
			get
			{
				return ReadSingle(0x1DC);
			}
			set
			{
				WriteSingle(0x1DC,value);
			}
		}
		
		/// <summary>
		/// Name: AutoExposureHighPercent
		/// Type: FloatProperty
		/// Offset: 0x1E0
		/// Size: 0x04
		/// </summary>
		public float AutoExposureHighPercent
		{
			get
			{
				return ReadSingle(0x1E0);
			}
			set
			{
				WriteSingle(0x1E0,value);
			}
		}
		
		/// <summary>
		/// Name: AutoExposureMinBrightness
		/// Type: FloatProperty
		/// Offset: 0x1E4
		/// Size: 0x04
		/// </summary>
		public float AutoExposureMinBrightness
		{
			get
			{
				return ReadSingle(0x1E4);
			}
			set
			{
				WriteSingle(0x1E4,value);
			}
		}
		
		/// <summary>
		/// Name: AutoExposureMaxBrightness
		/// Type: FloatProperty
		/// Offset: 0x1E8
		/// Size: 0x04
		/// </summary>
		public float AutoExposureMaxBrightness
		{
			get
			{
				return ReadSingle(0x1E8);
			}
			set
			{
				WriteSingle(0x1E8,value);
			}
		}
		
		/// <summary>
		/// Name: AutoExposureSpeedUp
		/// Type: FloatProperty
		/// Offset: 0x1EC
		/// Size: 0x04
		/// </summary>
		public float AutoExposureSpeedUp
		{
			get
			{
				return ReadSingle(0x1EC);
			}
			set
			{
				WriteSingle(0x1EC,value);
			}
		}
		
		/// <summary>
		/// Name: AutoExposureSpeedDown
		/// Type: FloatProperty
		/// Offset: 0x1F0
		/// Size: 0x04
		/// </summary>
		public float AutoExposureSpeedDown
		{
			get
			{
				return ReadSingle(0x1F0);
			}
			set
			{
				WriteSingle(0x1F0,value);
			}
		}
		
		/// <summary>
		/// Name: AutoExposureBias
		/// Type: FloatProperty
		/// Offset: 0x1F4
		/// Size: 0x04
		/// </summary>
		public float AutoExposureBias
		{
			get
			{
				return ReadSingle(0x1F4);
			}
			set
			{
				WriteSingle(0x1F4,value);
			}
		}
		
		/// <summary>
		/// Name: HistogramLogMin
		/// Type: FloatProperty
		/// Offset: 0x1F8
		/// Size: 0x04
		/// </summary>
		public float HistogramLogMin
		{
			get
			{
				return ReadSingle(0x1F8);
			}
			set
			{
				WriteSingle(0x1F8,value);
			}
		}
		
		/// <summary>
		/// Name: HistogramLogMax
		/// Type: FloatProperty
		/// Offset: 0x1FC
		/// Size: 0x04
		/// </summary>
		public float HistogramLogMax
		{
			get
			{
				return ReadSingle(0x1FC);
			}
			set
			{
				WriteSingle(0x1FC,value);
			}
		}
		
		/// <summary>
		/// Name: LensFlareIntensity
		/// Type: FloatProperty
		/// Offset: 0x200
		/// Size: 0x04
		/// </summary>
		public float LensFlareIntensity
		{
			get
			{
				return ReadSingle(0x200);
			}
			set
			{
				WriteSingle(0x200,value);
			}
		}
		
		/// <summary>
		/// Name: LensFlareTint
		/// Type: StructProperty
		/// Offset: 0x204
		/// Size: 0x10
		/// </summary>
		public FLinearColor LensFlareTint => ReadStruct<FLinearColor>(0x204);
		
		/// <summary>
		/// Name: LensFlareBokehSize
		/// Type: FloatProperty
		/// Offset: 0x214
		/// Size: 0x04
		/// </summary>
		public float LensFlareBokehSize
		{
			get
			{
				return ReadSingle(0x214);
			}
			set
			{
				WriteSingle(0x214,value);
			}
		}
		
		/// <summary>
		/// Name: LensFlareThreshold
		/// Type: FloatProperty
		/// Offset: 0x218
		/// Size: 0x04
		/// </summary>
		public float LensFlareThreshold
		{
			get
			{
				return ReadSingle(0x218);
			}
			set
			{
				WriteSingle(0x218,value);
			}
		}
		
		/// <summary>
		/// Name: LensFlareBokehShape
		/// Type: ObjectProperty
		/// Offset: 0x220
		/// Size: 0x08
		/// </summary>
		public UTexture LensFlareBokehShape => ReadUObject<UTexture>(0x220);
		
		/// <summary>
		/// Name: LensFlareTints
		/// Type: StructProperty
		/// Offset: 0x228
		/// Size: 0x10
		/// </summary>
		public FLinearColor LensFlareTints => ReadStruct<FLinearColor>(0x228);
		
		/// <summary>
		/// Name: VignetteIntensity
		/// Type: FloatProperty
		/// Offset: 0x2A8
		/// Size: 0x04
		/// </summary>
		public float VignetteIntensity
		{
			get
			{
				return ReadSingle(0x2A8);
			}
			set
			{
				WriteSingle(0x2A8,value);
			}
		}
		
		/// <summary>
		/// Name: GrainJitter
		/// Type: FloatProperty
		/// Offset: 0x2AC
		/// Size: 0x04
		/// </summary>
		public float GrainJitter
		{
			get
			{
				return ReadSingle(0x2AC);
			}
			set
			{
				WriteSingle(0x2AC,value);
			}
		}
		
		/// <summary>
		/// Name: GrainIntensity
		/// Type: FloatProperty
		/// Offset: 0x2B0
		/// Size: 0x04
		/// </summary>
		public float GrainIntensity
		{
			get
			{
				return ReadSingle(0x2B0);
			}
			set
			{
				WriteSingle(0x2B0,value);
			}
		}
		
		/// <summary>
		/// Name: AmbientOcclusionIntensity
		/// Type: FloatProperty
		/// Offset: 0x2B4
		/// Size: 0x04
		/// </summary>
		public float AmbientOcclusionIntensity
		{
			get
			{
				return ReadSingle(0x2B4);
			}
			set
			{
				WriteSingle(0x2B4,value);
			}
		}
		
		/// <summary>
		/// Name: AmbientOcclusionStaticFraction
		/// Type: FloatProperty
		/// Offset: 0x2B8
		/// Size: 0x04
		/// </summary>
		public float AmbientOcclusionStaticFraction
		{
			get
			{
				return ReadSingle(0x2B8);
			}
			set
			{
				WriteSingle(0x2B8,value);
			}
		}
		
		/// <summary>
		/// Name: AmbientOcclusionRadius
		/// Type: FloatProperty
		/// Offset: 0x2BC
		/// Size: 0x04
		/// </summary>
		public float AmbientOcclusionRadius
		{
			get
			{
				return ReadSingle(0x2BC);
			}
			set
			{
				WriteSingle(0x2BC,value);
			}
		}
		
		/// <summary>
		/// Name: AmbientOcclusionRadiusInWS
		/// Type: BoolProperty
		/// Offset: 0x2C0
		/// Size: 0x01
		/// </summary>
		public bool AmbientOcclusionRadiusInWS => (ReadByte(0x02C0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: AmbientOcclusionFadeDistance
		/// Type: FloatProperty
		/// Offset: 0x2C4
		/// Size: 0x04
		/// </summary>
		public float AmbientOcclusionFadeDistance
		{
			get
			{
				return ReadSingle(0x2C4);
			}
			set
			{
				WriteSingle(0x2C4,value);
			}
		}
		
		/// <summary>
		/// Name: AmbientOcclusionFadeRadius
		/// Type: FloatProperty
		/// Offset: 0x2C8
		/// Size: 0x04
		/// </summary>
		public float AmbientOcclusionFadeRadius
		{
			get
			{
				return ReadSingle(0x2C8);
			}
			set
			{
				WriteSingle(0x2C8,value);
			}
		}
		
		/// <summary>
		/// Name: AmbientOcclusionDistance
		/// Type: FloatProperty
		/// Offset: 0x2CC
		/// Size: 0x04
		/// </summary>
		public float AmbientOcclusionDistance
		{
			get
			{
				return ReadSingle(0x2CC);
			}
			set
			{
				WriteSingle(0x2CC,value);
			}
		}
		
		/// <summary>
		/// Name: AmbientOcclusionPower
		/// Type: FloatProperty
		/// Offset: 0x2D0
		/// Size: 0x04
		/// </summary>
		public float AmbientOcclusionPower
		{
			get
			{
				return ReadSingle(0x2D0);
			}
			set
			{
				WriteSingle(0x2D0,value);
			}
		}
		
		/// <summary>
		/// Name: AmbientOcclusionBias
		/// Type: FloatProperty
		/// Offset: 0x2D4
		/// Size: 0x04
		/// </summary>
		public float AmbientOcclusionBias
		{
			get
			{
				return ReadSingle(0x2D4);
			}
			set
			{
				WriteSingle(0x2D4,value);
			}
		}
		
		/// <summary>
		/// Name: AmbientOcclusionQuality
		/// Type: FloatProperty
		/// Offset: 0x2D8
		/// Size: 0x04
		/// </summary>
		public float AmbientOcclusionQuality
		{
			get
			{
				return ReadSingle(0x2D8);
			}
			set
			{
				WriteSingle(0x2D8,value);
			}
		}
		
		/// <summary>
		/// Name: AmbientOcclusionMipBlend
		/// Type: FloatProperty
		/// Offset: 0x2DC
		/// Size: 0x04
		/// </summary>
		public float AmbientOcclusionMipBlend
		{
			get
			{
				return ReadSingle(0x2DC);
			}
			set
			{
				WriteSingle(0x2DC,value);
			}
		}
		
		/// <summary>
		/// Name: AmbientOcclusionMipScale
		/// Type: FloatProperty
		/// Offset: 0x2E0
		/// Size: 0x04
		/// </summary>
		public float AmbientOcclusionMipScale
		{
			get
			{
				return ReadSingle(0x2E0);
			}
			set
			{
				WriteSingle(0x2E0,value);
			}
		}
		
		/// <summary>
		/// Name: AmbientOcclusionMipThreshold
		/// Type: FloatProperty
		/// Offset: 0x2E4
		/// Size: 0x04
		/// </summary>
		public float AmbientOcclusionMipThreshold
		{
			get
			{
				return ReadSingle(0x2E4);
			}
			set
			{
				WriteSingle(0x2E4,value);
			}
		}
		
		/// <summary>
		/// Name: IndirectLightingColor
		/// Type: StructProperty
		/// Offset: 0x2E8
		/// Size: 0x10
		/// </summary>
		public FLinearColor IndirectLightingColor => ReadStruct<FLinearColor>(0x2E8);
		
		/// <summary>
		/// Name: IndirectLightingIntensity
		/// Type: FloatProperty
		/// Offset: 0x2F8
		/// Size: 0x04
		/// </summary>
		public float IndirectLightingIntensity
		{
			get
			{
				return ReadSingle(0x2F8);
			}
			set
			{
				WriteSingle(0x2F8,value);
			}
		}
		
		/// <summary>
		/// Name: ColorGradingIntensity
		/// Type: FloatProperty
		/// Offset: 0x2FC
		/// Size: 0x04
		/// </summary>
		public float ColorGradingIntensity
		{
			get
			{
				return ReadSingle(0x2FC);
			}
			set
			{
				WriteSingle(0x2FC,value);
			}
		}
		
		/// <summary>
		/// Name: ColorGradingLUT
		/// Type: ObjectProperty
		/// Offset: 0x300
		/// Size: 0x08
		/// </summary>
		public UTexture ColorGradingLUT => ReadUObject<UTexture>(0x300);
		
		/// <summary>
		/// Name: DepthOfFieldMethod
		/// Type: ByteProperty
		/// Offset: 0x308
		/// Size: 0x01
		/// </summary>
		public byte DepthOfFieldMethod
		{
			get
			{
				return ReadByte(0x308);
			}
			set
			{
				WriteByte(0x308,value);
			}
		}
		
		/// <summary>
		/// Name: bMobileHQGaussian
		/// Type: BoolProperty
		/// Offset: 0x30C
		/// Size: 0x01
		/// </summary>
		public bool bMobileHQGaussian => (ReadByte(0x030C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: DepthOfFieldFstop
		/// Type: FloatProperty
		/// Offset: 0x310
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldFstop
		{
			get
			{
				return ReadSingle(0x310);
			}
			set
			{
				WriteSingle(0x310,value);
			}
		}
		
		/// <summary>
		/// Name: DepthOfFieldSensorWidth
		/// Type: FloatProperty
		/// Offset: 0x314
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldSensorWidth
		{
			get
			{
				return ReadSingle(0x314);
			}
			set
			{
				WriteSingle(0x314,value);
			}
		}
		
		/// <summary>
		/// Name: DepthOfFieldFocalDistance
		/// Type: FloatProperty
		/// Offset: 0x318
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldFocalDistance
		{
			get
			{
				return ReadSingle(0x318);
			}
			set
			{
				WriteSingle(0x318,value);
			}
		}
		
		/// <summary>
		/// Name: DepthOfFieldDepthBlurAmount
		/// Type: FloatProperty
		/// Offset: 0x31C
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldDepthBlurAmount
		{
			get
			{
				return ReadSingle(0x31C);
			}
			set
			{
				WriteSingle(0x31C,value);
			}
		}
		
		/// <summary>
		/// Name: DepthOfFieldDepthBlurRadius
		/// Type: FloatProperty
		/// Offset: 0x320
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldDepthBlurRadius
		{
			get
			{
				return ReadSingle(0x320);
			}
			set
			{
				WriteSingle(0x320,value);
			}
		}
		
		/// <summary>
		/// Name: DepthOfFieldFocalRegion
		/// Type: FloatProperty
		/// Offset: 0x324
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldFocalRegion
		{
			get
			{
				return ReadSingle(0x324);
			}
			set
			{
				WriteSingle(0x324,value);
			}
		}
		
		/// <summary>
		/// Name: DepthOfFieldNearTransitionRegion
		/// Type: FloatProperty
		/// Offset: 0x328
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldNearTransitionRegion
		{
			get
			{
				return ReadSingle(0x328);
			}
			set
			{
				WriteSingle(0x328,value);
			}
		}
		
		/// <summary>
		/// Name: DepthOfFieldFarTransitionRegion
		/// Type: FloatProperty
		/// Offset: 0x32C
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldFarTransitionRegion
		{
			get
			{
				return ReadSingle(0x32C);
			}
			set
			{
				WriteSingle(0x32C,value);
			}
		}
		
		/// <summary>
		/// Name: DepthOfFieldScale
		/// Type: FloatProperty
		/// Offset: 0x330
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldScale
		{
			get
			{
				return ReadSingle(0x330);
			}
			set
			{
				WriteSingle(0x330,value);
			}
		}
		
		/// <summary>
		/// Name: DepthOfFieldMaxBokehSize
		/// Type: FloatProperty
		/// Offset: 0x334
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldMaxBokehSize
		{
			get
			{
				return ReadSingle(0x334);
			}
			set
			{
				WriteSingle(0x334,value);
			}
		}
		
		/// <summary>
		/// Name: DepthOfFieldNearBlurSize
		/// Type: FloatProperty
		/// Offset: 0x338
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldNearBlurSize
		{
			get
			{
				return ReadSingle(0x338);
			}
			set
			{
				WriteSingle(0x338,value);
			}
		}
		
		/// <summary>
		/// Name: DepthOfFieldFarBlurSize
		/// Type: FloatProperty
		/// Offset: 0x33C
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldFarBlurSize
		{
			get
			{
				return ReadSingle(0x33C);
			}
			set
			{
				WriteSingle(0x33C,value);
			}
		}
		
		/// <summary>
		/// Name: DepthOfFieldBokehShape
		/// Type: ObjectProperty
		/// Offset: 0x340
		/// Size: 0x08
		/// </summary>
		public UTexture DepthOfFieldBokehShape => ReadUObject<UTexture>(0x340);
		
		/// <summary>
		/// Name: DepthOfFieldOcclusion
		/// Type: FloatProperty
		/// Offset: 0x348
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldOcclusion
		{
			get
			{
				return ReadSingle(0x348);
			}
			set
			{
				WriteSingle(0x348,value);
			}
		}
		
		/// <summary>
		/// Name: DepthOfFieldColorThreshold
		/// Type: FloatProperty
		/// Offset: 0x34C
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldColorThreshold
		{
			get
			{
				return ReadSingle(0x34C);
			}
			set
			{
				WriteSingle(0x34C,value);
			}
		}
		
		/// <summary>
		/// Name: DepthOfFieldSizeThreshold
		/// Type: FloatProperty
		/// Offset: 0x350
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldSizeThreshold
		{
			get
			{
				return ReadSingle(0x350);
			}
			set
			{
				WriteSingle(0x350,value);
			}
		}
		
		/// <summary>
		/// Name: DepthOfFieldSkyFocusDistance
		/// Type: FloatProperty
		/// Offset: 0x354
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldSkyFocusDistance
		{
			get
			{
				return ReadSingle(0x354);
			}
			set
			{
				WriteSingle(0x354,value);
			}
		}
		
		/// <summary>
		/// Name: DepthOfFieldVignetteSize
		/// Type: FloatProperty
		/// Offset: 0x358
		/// Size: 0x04
		/// </summary>
		public float DepthOfFieldVignetteSize
		{
			get
			{
				return ReadSingle(0x358);
			}
			set
			{
				WriteSingle(0x358,value);
			}
		}
		
		/// <summary>
		/// Name: MotionBlurAmount
		/// Type: FloatProperty
		/// Offset: 0x35C
		/// Size: 0x04
		/// </summary>
		public float MotionBlurAmount
		{
			get
			{
				return ReadSingle(0x35C);
			}
			set
			{
				WriteSingle(0x35C,value);
			}
		}
		
		/// <summary>
		/// Name: MotionBlurMax
		/// Type: FloatProperty
		/// Offset: 0x360
		/// Size: 0x04
		/// </summary>
		public float MotionBlurMax
		{
			get
			{
				return ReadSingle(0x360);
			}
			set
			{
				WriteSingle(0x360,value);
			}
		}
		
		/// <summary>
		/// Name: MotionBlurPerObjectSize
		/// Type: FloatProperty
		/// Offset: 0x364
		/// Size: 0x04
		/// </summary>
		public float MotionBlurPerObjectSize
		{
			get
			{
				return ReadSingle(0x364);
			}
			set
			{
				WriteSingle(0x364,value);
			}
		}
		
		/// <summary>
		/// Name: ScreenPercentage
		/// Type: FloatProperty
		/// Offset: 0x368
		/// Size: 0x04
		/// </summary>
		public float ScreenPercentage
		{
			get
			{
				return ReadSingle(0x368);
			}
			set
			{
				WriteSingle(0x368,value);
			}
		}
		
		/// <summary>
		/// Name: AntiAliasingMethod
		/// Type: ByteProperty
		/// Offset: 0x36C
		/// Size: 0x01
		/// </summary>
		public byte AntiAliasingMethod
		{
			get
			{
				return ReadByte(0x36C);
			}
			set
			{
				WriteByte(0x36C,value);
			}
		}
		
		/// <summary>
		/// Name: ScreenSpaceReflectionIntensity
		/// Type: FloatProperty
		/// Offset: 0x370
		/// Size: 0x04
		/// </summary>
		public float ScreenSpaceReflectionIntensity
		{
			get
			{
				return ReadSingle(0x370);
			}
			set
			{
				WriteSingle(0x370,value);
			}
		}
		
		/// <summary>
		/// Name: ScreenSpaceReflectionQuality
		/// Type: FloatProperty
		/// Offset: 0x374
		/// Size: 0x04
		/// </summary>
		public float ScreenSpaceReflectionQuality
		{
			get
			{
				return ReadSingle(0x374);
			}
			set
			{
				WriteSingle(0x374,value);
			}
		}
		
		/// <summary>
		/// Name: ScreenSpaceReflectionMaxRoughness
		/// Type: FloatProperty
		/// Offset: 0x378
		/// Size: 0x04
		/// </summary>
		public float ScreenSpaceReflectionMaxRoughness
		{
			get
			{
				return ReadSingle(0x378);
			}
			set
			{
				WriteSingle(0x378,value);
			}
		}
		
		/// <summary>
		/// Name: WeightedBlendables
		/// Type: StructProperty
		/// Offset: 0x380
		/// Size: 0x10
		/// </summary>
		public FWeightedBlendables WeightedBlendables => ReadStruct<FWeightedBlendables>(0x380);
		
		/// <summary>
		/// Name: Blendables
		/// Type: TArray<UObject>
		/// Offset: 0x390
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UObject> Blendables => new TArray<UObject>(BaseAddress+0x390);
		
	}


	/// <summary>
	/// FWeightedBlendables:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FWeightedBlendables:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: array
		/// Type: TArray<FWeightedBlendable>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FWeightedBlendable> array => new TArray<FWeightedBlendable>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FWeightedBlendable:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FWeightedBlendable:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Weight
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Weight
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Object
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UObject Object => ReadUObject<UObject>(0x08);
		
	}


	/// <summary>
	/// FMinimalViewInfo:
	/// Size: 0x3E0
	/// Properties: 13
	/// </summary>
	public class FMinimalViewInfo:MemoryObject
	{
		public override int ObjectSize => 992;
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Location => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FRotator Rotation => ReadStruct<FRotator>(0x0C);
		
		/// <summary>
		/// Name: FOV
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float FOV
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: OrthoWidth
		/// Type: FloatProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public float OrthoWidth
		{
			get
			{
				return ReadSingle(0x1C);
			}
			set
			{
				WriteSingle(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: OrthoNearClipPlane
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float OrthoNearClipPlane
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: OrthoFarClipPlane
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float OrthoFarClipPlane
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: AspectRatio
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float AspectRatio
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: bConstrainAspectRatio
		/// Type: BoolProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public bool bConstrainAspectRatio => (ReadByte(0x002C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUseFieldOfViewForLOD
		/// Type: BoolProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public bool bUseFieldOfViewForLOD => (ReadByte(0x002C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: ProjectionMode
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte ProjectionMode
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: PostProcessBlendWeight
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float PostProcessBlendWeight
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: PostProcessSettings
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x3A0
		/// </summary>
		public FPostProcessSettings PostProcessSettings => ReadStruct<FPostProcessSettings>(0x38);
		
		/// <summary>
		/// Name: OffCenterProjectionOffset
		/// Type: StructProperty
		/// Offset: 0x3D8
		/// Size: 0x08
		/// </summary>
		public FVector2D OffCenterProjectionOffset => ReadStruct<FVector2D>(0x3D8);
		
	}


	/// <summary>
	/// FVOscillator:
	/// Size: 0x24
	/// Properties: 3
	/// </summary>
	public class FVOscillator:MemoryObject
	{
		public override int ObjectSize => 36;
		/// <summary>
		/// Name: X
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FFOscillator X => ReadStruct<FFOscillator>(0x00);
		
		/// <summary>
		/// Name: Y
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FFOscillator Y => ReadStruct<FFOscillator>(0x0C);
		
		/// <summary>
		/// Name: Z
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x0C
		/// </summary>
		public FFOscillator Z => ReadStruct<FFOscillator>(0x18);
		
	}


	/// <summary>
	/// FFOscillator:
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FFOscillator:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: Amplitude
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Amplitude
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Frequency
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Frequency
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: InitialOffset
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte InitialOffset
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FROscillator:
	/// Size: 0x24
	/// Properties: 3
	/// </summary>
	public class FROscillator:MemoryObject
	{
		public override int ObjectSize => 36;
		/// <summary>
		/// Name: Pitch
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FFOscillator Pitch => ReadStruct<FFOscillator>(0x00);
		
		/// <summary>
		/// Name: Yaw
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FFOscillator Yaw => ReadStruct<FFOscillator>(0x0C);
		
		/// <summary>
		/// Name: Roll
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x0C
		/// </summary>
		public FFOscillator Roll => ReadStruct<FFOscillator>(0x18);
		
	}


	/// <summary>
	/// FTViewTarget:
	/// Size: 0x3F0
	/// Properties: 3
	/// </summary>
	public class FTViewTarget:MemoryObject
	{
		public override int ObjectSize => 1008;
		/// <summary>
		/// Name: Target
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public AActor Target => ReadUObject<AActor>(0x00);
		
		/// <summary>
		/// Name: POV
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x3E0
		/// </summary>
		public FMinimalViewInfo POV => ReadStruct<FMinimalViewInfo>(0x08);
		
		/// <summary>
		/// Name: PlayerState
		/// Type: ObjectProperty
		/// Offset: 0x3E8
		/// Size: 0x08
		/// </summary>
		public APlayerState PlayerState => ReadUObject<APlayerState>(0x3E8);
		
	}


	/// <summary>
	/// FCameraCacheEntry:
	/// Size: 0x3E8
	/// Properties: 2
	/// </summary>
	public class FCameraCacheEntry:MemoryObject
	{
		public override int ObjectSize => 1000;
		/// <summary>
		/// Name: timeStamp
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float timeStamp
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: POV
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x3E0
		/// </summary>
		public FMinimalViewInfo POV => ReadStruct<FMinimalViewInfo>(0x08);
		
	}


	/// <summary>
	/// FIntegralCurve:FIndexedCurve
	/// Size: 0x70
	/// Properties: 3
	/// </summary>
	public class FIntegralCurve:FIndexedCurve
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: Keys
		/// Type: TArray<FIntegralKey>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FIntegralKey> Keys => new TArray<FIntegralKey>(BaseAddress+0x58);
		
		/// <summary>
		/// Name: DefaultValue
		/// Type: IntProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public int DefaultValue
		{
			get
			{
				return ReadInt32(0x68);
			}
			set
			{
				WriteInt32(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: bUseDefaultValueBeforeFirstKey
		/// Type: BoolProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public bool bUseDefaultValueBeforeFirstKey
		{
			get
			{
				return ReadBool(0x6C);
			}
			set
			{
				WriteBool(0x6C,value);
			}
		}
		
	}


	/// <summary>
	/// FIntegralKey:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FIntegralKey:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Value
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int Value
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FNameCurve:FIndexedCurve
	/// Size: 0x68
	/// Properties: 1
	/// </summary>
	public class FNameCurve:FIndexedCurve
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: Keys
		/// Type: TArray<FNameCurveKey>
		/// Offset: 0x58
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FNameCurveKey> Keys => new TArray<FNameCurveKey>(BaseAddress+0x58);
		
	}


	/// <summary>
	/// FNameCurveKey:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FNameCurveKey:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Value
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FForceFeedbackChannelDetails:
	/// Size: 0x88
	/// Properties: 5
	/// </summary>
	public class FForceFeedbackChannelDetails:MemoryObject
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: bAffectsLeftLarge
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bAffectsLeftLarge => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bAffectsLeftSmall
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bAffectsLeftSmall => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bAffectsRightLarge
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bAffectsRightLarge => (ReadByte(0x0000) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bAffectsRightSmall
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bAffectsRightSmall => (ReadByte(0x0000) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: Curve
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x80
		/// </summary>
		public FRuntimeFloatCurve Curve => ReadStruct<FRuntimeFloatCurve>(0x08);
		
	}


	/// <summary>
	/// FDebugTextInfo:
	/// Size: 0x60
	/// Properties: 13
	/// </summary>
	public class FDebugTextInfo:MemoryObject
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: SrcActor
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public AActor SrcActor => ReadUObject<AActor>(0x00);
		
		/// <summary>
		/// Name: SrcActorOffset
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x0C
		/// </summary>
		public FVector SrcActorOffset => ReadStruct<FVector>(0x08);
		
		/// <summary>
		/// Name: SrcActorDesiredOffset
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x0C
		/// </summary>
		public FVector SrcActorDesiredOffset => ReadStruct<FVector>(0x14);
		
		/// <summary>
		/// Name: DebugText
		/// Type: StrProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FString DebugText => new FString(BaseAddress+0x20);
		
		/// <summary>
		/// Name: TimeRemaining
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float TimeRemaining
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: Duration
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float Duration
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: TextColor
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public FColor TextColor => ReadStruct<FColor>(0x38);
		
		/// <summary>
		/// Name: bAbsoluteLocation
		/// Type: BoolProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public bool bAbsoluteLocation => (ReadByte(0x003C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bKeepAttachedToActor
		/// Type: BoolProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public bool bKeepAttachedToActor => (ReadByte(0x003C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bDrawShadow
		/// Type: BoolProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public bool bDrawShadow => (ReadByte(0x003C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: OrigActorLocation
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x0C
		/// </summary>
		public FVector OrigActorLocation => ReadStruct<FVector>(0x40);
		
		/// <summary>
		/// Name: Font
		/// Type: ObjectProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public UFont Font => ReadUObject<UFont>(0x50);
		
		/// <summary>
		/// Name: FontScale
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float FontScale
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
	}


	/// <summary>
	/// FGameClassShortName:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FGameClassShortName:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: ShortName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString ShortName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: GameClassName
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString GameClassName => new FString(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FSimplygonRemeshingSettings:
	/// Size: 0x50
	/// Properties: 12
	/// </summary>
	public class FSimplygonRemeshingSettings:MemoryObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: bActive
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bActive
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ScreenSize
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int ScreenSize
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: bRecalculateNormals
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bRecalculateNormals
		{
			get
			{
				return ReadBool(0x08);
			}
			set
			{
				WriteBool(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: HardAngleThreshold
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float HardAngleThreshold
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: MergeDistance
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int MergeDistance
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: bUseClippingPlane
		/// Type: BoolProperty
		/// Offset: 0x14
		/// Size: 0x01
		/// </summary>
		public bool bUseClippingPlane
		{
			get
			{
				return ReadBool(0x14);
			}
			set
			{
				WriteBool(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: ClippingLevel
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float ClippingLevel
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: AxisIndex
		/// Type: IntProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public int AxisIndex
		{
			get
			{
				return ReadInt32(0x1C);
			}
			set
			{
				WriteInt32(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: bPlaneNegativeHalfspace
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool bPlaneNegativeHalfspace
		{
			get
			{
				return ReadBool(0x20);
			}
			set
			{
				WriteBool(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: bUseMassiveLOD
		/// Type: BoolProperty
		/// Offset: 0x21
		/// Size: 0x01
		/// </summary>
		public bool bUseMassiveLOD
		{
			get
			{
				return ReadBool(0x21);
			}
			set
			{
				WriteBool(0x21,value);
			}
		}
		
		/// <summary>
		/// Name: bUseAggregateLOD
		/// Type: BoolProperty
		/// Offset: 0x22
		/// Size: 0x01
		/// </summary>
		public bool bUseAggregateLOD
		{
			get
			{
				return ReadBool(0x22);
			}
			set
			{
				WriteBool(0x22,value);
			}
		}
		
		/// <summary>
		/// Name: MaterialLODSettings
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x28
		/// </summary>
		public FSimplygonMaterialLODSettings MaterialLODSettings => ReadStruct<FSimplygonMaterialLODSettings>(0x28);
		
	}


	/// <summary>
	/// FMeshMergingSettings:
	/// Size: 0x94
	/// Properties: 16
	/// </summary>
	public class FMeshMergingSettings:MemoryObject
	{
		public override int ObjectSize => 148;
		/// <summary>
		/// Name: bGenerateLightMapUV
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bGenerateLightMapUV
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: TargetLightMapUVChannel
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int TargetLightMapUVChannel
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: TargetLightMapResolution
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int TargetLightMapResolution
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: bImportVertexColors
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bImportVertexColors
		{
			get
			{
				return ReadBool(0x0C);
			}
			set
			{
				WriteBool(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: bPivotPointAtZero
		/// Type: BoolProperty
		/// Offset: 0x0D
		/// Size: 0x01
		/// </summary>
		public bool bPivotPointAtZero
		{
			get
			{
				return ReadBool(0x0D);
			}
			set
			{
				WriteBool(0x0D,value);
			}
		}
		
		/// <summary>
		/// Name: bMergePhysicsData
		/// Type: BoolProperty
		/// Offset: 0x0E
		/// Size: 0x01
		/// </summary>
		public bool bMergePhysicsData
		{
			get
			{
				return ReadBool(0x0E);
			}
			set
			{
				WriteBool(0x0E,value);
			}
		}
		
		/// <summary>
		/// Name: bMergeMaterials
		/// Type: BoolProperty
		/// Offset: 0x0F
		/// Size: 0x01
		/// </summary>
		public bool bMergeMaterials
		{
			get
			{
				return ReadBool(0x0F);
			}
			set
			{
				WriteBool(0x0F,value);
			}
		}
		
		/// <summary>
		/// Name: MaterialSettings
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x74
		/// </summary>
		public FMaterialProxySettings MaterialSettings => ReadStruct<FMaterialProxySettings>(0x10);
		
		/// <summary>
		/// Name: bBakeVertexData
		/// Type: BoolProperty
		/// Offset: 0x84
		/// Size: 0x01
		/// </summary>
		public bool bBakeVertexData
		{
			get
			{
				return ReadBool(0x84);
			}
			set
			{
				WriteBool(0x84,value);
			}
		}
		
		/// <summary>
		/// Name: bCalculateCorrectLODModel
		/// Type: BoolProperty
		/// Offset: 0x85
		/// Size: 0x01
		/// </summary>
		public bool bCalculateCorrectLODModel
		{
			get
			{
				return ReadBool(0x85);
			}
			set
			{
				WriteBool(0x85,value);
			}
		}
		
		/// <summary>
		/// Name: ExportSpecificLOD
		/// Type: IntProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public int ExportSpecificLOD
		{
			get
			{
				return ReadInt32(0x88);
			}
			set
			{
				WriteInt32(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: bExportNormalMap
		/// Type: BoolProperty
		/// Offset: 0x8C
		/// Size: 0x01
		/// </summary>
		public bool bExportNormalMap
		{
			get
			{
				return ReadBool(0x8C);
			}
			set
			{
				WriteBool(0x8C,value);
			}
		}
		
		/// <summary>
		/// Name: bExportMetallicMap
		/// Type: BoolProperty
		/// Offset: 0x8D
		/// Size: 0x01
		/// </summary>
		public bool bExportMetallicMap
		{
			get
			{
				return ReadBool(0x8D);
			}
			set
			{
				WriteBool(0x8D,value);
			}
		}
		
		/// <summary>
		/// Name: bExportRoughnessMap
		/// Type: BoolProperty
		/// Offset: 0x8E
		/// Size: 0x01
		/// </summary>
		public bool bExportRoughnessMap
		{
			get
			{
				return ReadBool(0x8E);
			}
			set
			{
				WriteBool(0x8E,value);
			}
		}
		
		/// <summary>
		/// Name: bExportSpecularMap
		/// Type: BoolProperty
		/// Offset: 0x8F
		/// Size: 0x01
		/// </summary>
		public bool bExportSpecularMap
		{
			get
			{
				return ReadBool(0x8F);
			}
			set
			{
				WriteBool(0x8F,value);
			}
		}
		
		/// <summary>
		/// Name: MergedMaterialAtlasResolution
		/// Type: IntProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public int MergedMaterialAtlasResolution
		{
			get
			{
				return ReadInt32(0x90);
			}
			set
			{
				WriteInt32(0x90,value);
			}
		}
		
	}


	/// <summary>
	/// FMeshProxySettings:
	/// Size: 0xEC
	/// Properties: 22
	/// </summary>
	public class FMeshProxySettings:MemoryObject
	{
		public override int ObjectSize => 236;
		/// <summary>
		/// Name: ScreenSize
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int ScreenSize
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: MaterialSettings
		/// Type: StructProperty
		/// Offset: 0x04
		/// Size: 0x74
		/// </summary>
		public FMaterialProxySettings MaterialSettings => ReadStruct<FMaterialProxySettings>(0x04);
		
		/// <summary>
		/// Name: TextureWidth
		/// Type: IntProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public int TextureWidth
		{
			get
			{
				return ReadInt32(0x78);
			}
			set
			{
				WriteInt32(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: TextureHeight
		/// Type: IntProperty
		/// Offset: 0x7C
		/// Size: 0x04
		/// </summary>
		public int TextureHeight
		{
			get
			{
				return ReadInt32(0x7C);
			}
			set
			{
				WriteInt32(0x7C,value);
			}
		}
		
		/// <summary>
		/// Name: bExportNormalMap
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bExportNormalMap
		{
			get
			{
				return ReadBool(0x80);
			}
			set
			{
				WriteBool(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: bExportMetallicMap
		/// Type: BoolProperty
		/// Offset: 0x81
		/// Size: 0x01
		/// </summary>
		public bool bExportMetallicMap
		{
			get
			{
				return ReadBool(0x81);
			}
			set
			{
				WriteBool(0x81,value);
			}
		}
		
		/// <summary>
		/// Name: bExportRoughnessMap
		/// Type: BoolProperty
		/// Offset: 0x82
		/// Size: 0x01
		/// </summary>
		public bool bExportRoughnessMap
		{
			get
			{
				return ReadBool(0x82);
			}
			set
			{
				WriteBool(0x82,value);
			}
		}
		
		/// <summary>
		/// Name: bExportSpecularMap
		/// Type: BoolProperty
		/// Offset: 0x83
		/// Size: 0x01
		/// </summary>
		public bool bExportSpecularMap
		{
			get
			{
				return ReadBool(0x83);
			}
			set
			{
				WriteBool(0x83,value);
			}
		}
		
		/// <summary>
		/// Name: Material
		/// Type: StructProperty
		/// Offset: 0x84
		/// Size: 0x44
		/// </summary>
		public FMaterialSimplificationSettings Material => ReadStruct<FMaterialSimplificationSettings>(0x84);
		
		/// <summary>
		/// Name: bCalculateCorrectLODModel
		/// Type: BoolProperty
		/// Offset: 0xC8
		/// Size: 0x01
		/// </summary>
		public bool bCalculateCorrectLODModel
		{
			get
			{
				return ReadBool(0xC8);
			}
			set
			{
				WriteBool(0xC8,value);
			}
		}
		
		/// <summary>
		/// Name: MergeDistance
		/// Type: FloatProperty
		/// Offset: 0xCC
		/// Size: 0x04
		/// </summary>
		public float MergeDistance
		{
			get
			{
				return ReadSingle(0xCC);
			}
			set
			{
				WriteSingle(0xCC,value);
			}
		}
		
		/// <summary>
		/// Name: HardAngleThreshold
		/// Type: FloatProperty
		/// Offset: 0xD0
		/// Size: 0x04
		/// </summary>
		public float HardAngleThreshold
		{
			get
			{
				return ReadSingle(0xD0);
			}
			set
			{
				WriteSingle(0xD0,value);
			}
		}
		
		/// <summary>
		/// Name: LightMapResolution
		/// Type: IntProperty
		/// Offset: 0xD4
		/// Size: 0x04
		/// </summary>
		public int LightMapResolution
		{
			get
			{
				return ReadInt32(0xD4);
			}
			set
			{
				WriteInt32(0xD4,value);
			}
		}
		
		/// <summary>
		/// Name: bRecalculateNormals
		/// Type: BoolProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public bool bRecalculateNormals
		{
			get
			{
				return ReadBool(0xD8);
			}
			set
			{
				WriteBool(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: bBakeVertexData
		/// Type: BoolProperty
		/// Offset: 0xD9
		/// Size: 0x01
		/// </summary>
		public bool bBakeVertexData
		{
			get
			{
				return ReadBool(0xD9);
			}
			set
			{
				WriteBool(0xD9,value);
			}
		}
		
		/// <summary>
		/// Name: bAggregateMeshes
		/// Type: BoolProperty
		/// Offset: 0xDA
		/// Size: 0x01
		/// </summary>
		public bool bAggregateMeshes
		{
			get
			{
				return ReadBool(0xDA);
			}
			set
			{
				WriteBool(0xDA,value);
			}
		}
		
		/// <summary>
		/// Name: AggregatorMode
		/// Type: ByteProperty
		/// Offset: 0xDB
		/// Size: 0x01
		/// </summary>
		public byte AggregatorMode
		{
			get
			{
				return ReadByte(0xDB);
			}
			set
			{
				WriteByte(0xDB,value);
			}
		}
		
		/// <summary>
		/// Name: bUseCustomHemisphere
		/// Type: BoolProperty
		/// Offset: 0xDC
		/// Size: 0x01
		/// </summary>
		public bool bUseCustomHemisphere
		{
			get
			{
				return ReadBool(0xDC);
			}
			set
			{
				WriteBool(0xDC,value);
			}
		}
		
		/// <summary>
		/// Name: bUseClippingPlane
		/// Type: BoolProperty
		/// Offset: 0xDD
		/// Size: 0x01
		/// </summary>
		public bool bUseClippingPlane
		{
			get
			{
				return ReadBool(0xDD);
			}
			set
			{
				WriteBool(0xDD,value);
			}
		}
		
		/// <summary>
		/// Name: ClippingLevel
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float ClippingLevel
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: AxisIndex
		/// Type: IntProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public int AxisIndex
		{
			get
			{
				return ReadInt32(0xE4);
			}
			set
			{
				WriteInt32(0xE4,value);
			}
		}
		
		/// <summary>
		/// Name: bPlaneNegativeHalfspace
		/// Type: BoolProperty
		/// Offset: 0xE8
		/// Size: 0x01
		/// </summary>
		public bool bPlaneNegativeHalfspace
		{
			get
			{
				return ReadBool(0xE8);
			}
			set
			{
				WriteBool(0xE8,value);
			}
		}
		
	}


	/// <summary>
	/// FMeshReductionSettings:
	/// Size: 0xD0
	/// Properties: 22
	/// </summary>
	public class FMeshReductionSettings:MemoryObject
	{
		public override int ObjectSize => 208;
		/// <summary>
		/// Name: BaseLODModel
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int BaseLODModel
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: MetricToUse
		/// Type: ByteProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public byte MetricToUse
		{
			get
			{
				return ReadByte(0x04);
			}
			set
			{
				WriteByte(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: PercentTriangles
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float PercentTriangles
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: ScreenSize
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float ScreenSize
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxDeviation
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float MaxDeviation
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: WeldingThreshold
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float WeldingThreshold
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: SilhouetteImportance
		/// Type: ByteProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public byte SilhouetteImportance
		{
			get
			{
				return ReadByte(0x18);
			}
			set
			{
				WriteByte(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: TextureImportance
		/// Type: ByteProperty
		/// Offset: 0x19
		/// Size: 0x01
		/// </summary>
		public byte TextureImportance
		{
			get
			{
				return ReadByte(0x19);
			}
			set
			{
				WriteByte(0x19,value);
			}
		}
		
		/// <summary>
		/// Name: ShadingImportance
		/// Type: ByteProperty
		/// Offset: 0x1A
		/// Size: 0x01
		/// </summary>
		public byte ShadingImportance
		{
			get
			{
				return ReadByte(0x1A);
			}
			set
			{
				WriteByte(0x1A,value);
			}
		}
		
		/// <summary>
		/// Name: VertexColorImportance
		/// Type: ByteProperty
		/// Offset: 0x1B
		/// Size: 0x01
		/// </summary>
		public byte VertexColorImportance
		{
			get
			{
				return ReadByte(0x1B);
			}
			set
			{
				WriteByte(0x1B,value);
			}
		}
		
		/// <summary>
		/// Name: bRecalculateNormals
		/// Type: BoolProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public bool bRecalculateNormals
		{
			get
			{
				return ReadBool(0x1C);
			}
			set
			{
				WriteBool(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: HardAngleThreshold
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float HardAngleThreshold
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: bActive
		/// Type: BoolProperty
		/// Offset: 0x24
		/// Size: 0x01
		/// </summary>
		public bool bActive
		{
			get
			{
				return ReadBool(0x24);
			}
			set
			{
				WriteBool(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: bGenerateUniqueLightmapUVs
		/// Type: BoolProperty
		/// Offset: 0x25
		/// Size: 0x01
		/// </summary>
		public bool bGenerateUniqueLightmapUVs
		{
			get
			{
				return ReadBool(0x25);
			}
			set
			{
				WriteBool(0x25,value);
			}
		}
		
		/// <summary>
		/// Name: bKeepSymmetry
		/// Type: BoolProperty
		/// Offset: 0x26
		/// Size: 0x01
		/// </summary>
		public bool bKeepSymmetry
		{
			get
			{
				return ReadBool(0x26);
			}
			set
			{
				WriteBool(0x26,value);
			}
		}
		
		/// <summary>
		/// Name: bVisibilityAided
		/// Type: BoolProperty
		/// Offset: 0x27
		/// Size: 0x01
		/// </summary>
		public bool bVisibilityAided
		{
			get
			{
				return ReadBool(0x27);
			}
			set
			{
				WriteBool(0x27,value);
			}
		}
		
		/// <summary>
		/// Name: bCullOccluded
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bCullOccluded
		{
			get
			{
				return ReadBool(0x28);
			}
			set
			{
				WriteBool(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: VisibilityAggressiveness
		/// Type: ByteProperty
		/// Offset: 0x29
		/// Size: 0x01
		/// </summary>
		public byte VisibilityAggressiveness
		{
			get
			{
				return ReadByte(0x29);
			}
			set
			{
				WriteByte(0x29,value);
			}
		}
		
		/// <summary>
		/// Name: bUseVertexWeights
		/// Type: BoolProperty
		/// Offset: 0x2A
		/// Size: 0x01
		/// </summary>
		public bool bUseVertexWeights
		{
			get
			{
				return ReadBool(0x2A);
			}
			set
			{
				WriteBool(0x2A,value);
			}
		}
		
		/// <summary>
		/// Name: bSimplifyMaterials
		/// Type: BoolProperty
		/// Offset: 0x2B
		/// Size: 0x01
		/// </summary>
		public bool bSimplifyMaterials
		{
			get
			{
				return ReadBool(0x2B);
			}
			set
			{
				WriteBool(0x2B,value);
			}
		}
		
		/// <summary>
		/// Name: MaterialLODSettings
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x28
		/// </summary>
		public FSimplygonMaterialLODSettings MaterialLODSettings => ReadStruct<FSimplygonMaterialLODSettings>(0x30);
		
		/// <summary>
		/// Name: MaterialProxySettings
		/// Type: StructProperty
		/// Offset: 0x58
		/// Size: 0x74
		/// </summary>
		public FMaterialProxySettings MaterialProxySettings => ReadStruct<FMaterialProxySettings>(0x58);
		
	}


	/// <summary>
	/// FHierarchicalSimplification:
	/// Size: 0x198
	/// Properties: 7
	/// </summary>
	public class FHierarchicalSimplification:MemoryObject
	{
		public override int ObjectSize => 408;
		/// <summary>
		/// Name: TransitionScreenSize
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float TransitionScreenSize
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: bSimplifyMesh
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bSimplifyMesh
		{
			get
			{
				return ReadBool(0x08);
			}
			set
			{
				WriteBool(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: ProxySetting
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0xEC
		/// </summary>
		public FMeshProxySettings ProxySetting => ReadStruct<FMeshProxySettings>(0x0C);
		
		/// <summary>
		/// Name: MergeSetting
		/// Type: StructProperty
		/// Offset: 0xF8
		/// Size: 0x94
		/// </summary>
		public FMeshMergingSettings MergeSetting => ReadStruct<FMeshMergingSettings>(0xF8);
		
		/// <summary>
		/// Name: DesiredBoundRadius
		/// Type: FloatProperty
		/// Offset: 0x18C
		/// Size: 0x04
		/// </summary>
		public float DesiredBoundRadius
		{
			get
			{
				return ReadSingle(0x18C);
			}
			set
			{
				WriteSingle(0x18C,value);
			}
		}
		
		/// <summary>
		/// Name: DesiredFillingPercentage
		/// Type: FloatProperty
		/// Offset: 0x190
		/// Size: 0x04
		/// </summary>
		public float DesiredFillingPercentage
		{
			get
			{
				return ReadSingle(0x190);
			}
			set
			{
				WriteSingle(0x190,value);
			}
		}
		
		/// <summary>
		/// Name: MinNumberOfActorsToBuild
		/// Type: IntProperty
		/// Offset: 0x194
		/// Size: 0x04
		/// </summary>
		public int MinNumberOfActorsToBuild
		{
			get
			{
				return ReadInt32(0x194);
			}
			set
			{
				WriteInt32(0x194,value);
			}
		}
		
	}


	/// <summary>
	/// FNetViewer:
	/// Size: 0x30
	/// Properties: 5
	/// </summary>
	public class FNetViewer:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: Connection
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UNetConnection Connection => ReadUObject<UNetConnection>(0x00);
		
		/// <summary>
		/// Name: InViewer
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public AActor InViewer => ReadUObject<AActor>(0x08);
		
		/// <summary>
		/// Name: ViewTarget
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public AActor ViewTarget => ReadUObject<AActor>(0x10);
		
		/// <summary>
		/// Name: ViewLocation
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x0C
		/// </summary>
		public FVector ViewLocation => ReadStruct<FVector>(0x18);
		
		/// <summary>
		/// Name: ViewDir
		/// Type: StructProperty
		/// Offset: 0x24
		/// Size: 0x0C
		/// </summary>
		public FVector ViewDir => ReadStruct<FVector>(0x24);
		
	}


	/// <summary>
	/// FLightmassWorldInfoSettings:
	/// Size: 0x48
	/// Properties: 20
	/// </summary>
	public class FLightmassWorldInfoSettings:MemoryObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: StaticLightingLevelScale
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float StaticLightingLevelScale
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: NumIndirectLightingBounces
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int NumIndirectLightingBounces
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: IndirectLightingQuality
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float IndirectLightingQuality
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: IndirectLightingSmoothness
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float IndirectLightingSmoothness
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: EnvironmentColor
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public FColor EnvironmentColor => ReadStruct<FColor>(0x10);
		
		/// <summary>
		/// Name: EnvironmentIntensity
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float EnvironmentIntensity
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: EmissiveBoost
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float EmissiveBoost
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: DiffuseBoost
		/// Type: FloatProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public float DiffuseBoost
		{
			get
			{
				return ReadSingle(0x1C);
			}
			set
			{
				WriteSingle(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: bUseAmbientOcclusion
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool bUseAmbientOcclusion => (ReadByte(0x0020) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bGenerateAmbientOcclusionMaterialMask
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool bGenerateAmbientOcclusionMaterialMask => (ReadByte(0x0020) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: DirectIlluminationOcclusionFraction
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float DirectIlluminationOcclusionFraction
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: IndirectIlluminationOcclusionFraction
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float IndirectIlluminationOcclusionFraction
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: OcclusionExponent
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float OcclusionExponent
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: FullyOccludedSamplesFraction
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float FullyOccludedSamplesFraction
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: MaxOcclusionDistance
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float MaxOcclusionDistance
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: bVisualizeMaterialDiffuse
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bVisualizeMaterialDiffuse => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bVisualizeAmbientOcclusion
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bVisualizeAmbientOcclusion => (ReadByte(0x0038) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: VolumeLightSamplePlacementScale
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float VolumeLightSamplePlacementScale
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: bCompressLightmaps
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bCompressLightmaps => (ReadByte(0x0040) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: GraniteLightMapCompression
		/// Type: ByteProperty
		/// Offset: 0x44
		/// Size: 0x01
		/// </summary>
		public byte GraniteLightMapCompression
		{
			get
			{
				return ReadByte(0x44);
			}
			set
			{
				WriteByte(0x44,value);
			}
		}
		
	}


	/// <summary>
	/// FGameModePrefix:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FGameModePrefix:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: Prefix
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Prefix => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: GameMode
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString GameMode => new FString(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FInterpGroupActorInfo:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FInterpGroupActorInfo:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: ObjectName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Actors
		/// Type: TArray<AActor>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x3D0
		/// </summary>
		public TArray<AActor> Actors => new TArray<AActor>(BaseAddress+0x08);
		
	}


	/// <summary>
	/// FCameraCutInfo:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FCameraCutInfo:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Location => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: timeStamp
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float timeStamp
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FSupportedAreaData:
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FSupportedAreaData:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: AreaClassName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString AreaClassName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: AreaID
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int AreaID
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: AreaClass
		/// Type: ClassProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FNavGraphNode:
	/// Size: 0x18
	/// Properties: 1
	/// </summary>
	public class FNavGraphNode:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Owner
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UObject Owner => ReadUObject<UObject>(0x00);
		
	}


	/// <summary>
	/// FNavGraphEdge:
	/// Size: 0x18
	/// Properties: 0
	/// </summary>
	public class FNavGraphEdge:MemoryObject
	{
		public override int ObjectSize => 24;
	}


	/// <summary>
	/// FNavigationSegmentLink:FNavigationLinkBase
	/// Size: 0x60
	/// Properties: 4
	/// </summary>
	public class FNavigationSegmentLink:FNavigationLinkBase
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: LeftStart
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x0C
		/// </summary>
		public FVector LeftStart => ReadStruct<FVector>(0x30);
		
		/// <summary>
		/// Name: LeftEnd
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x0C
		/// </summary>
		public FVector LeftEnd => ReadStruct<FVector>(0x3C);
		
		/// <summary>
		/// Name: RightStart
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x0C
		/// </summary>
		public FVector RightStart => ReadStruct<FVector>(0x48);
		
		/// <summary>
		/// Name: RightEnd
		/// Type: StructProperty
		/// Offset: 0x54
		/// Size: 0x0C
		/// </summary>
		public FVector RightEnd => ReadStruct<FVector>(0x54);
		
	}


	/// <summary>
	/// FNavigationLinkBase:
	/// Size: 0x30
	/// Properties: 33
	/// </summary>
	public class FNavigationLinkBase:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: LeftProjectHeight
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float LeftProjectHeight
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: MaxFallDownLength
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float MaxFallDownLength
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Direction
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte Direction
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: SnapRadius
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float SnapRadius
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: SnapHeight
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float SnapHeight
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: AreaClass
		/// Type: ClassProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SupportedAgents
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public FNavAgentSelector SupportedAgents => ReadStruct<FNavAgentSelector>(0x20);
		
		/// <summary>
		/// Name: bSupportsAgent0
		/// Type: BoolProperty
		/// Offset: 0x24
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent0 => (ReadByte(0x0024) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSupportsAgent1
		/// Type: BoolProperty
		/// Offset: 0x24
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent1 => (ReadByte(0x0024) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bSupportsAgent2
		/// Type: BoolProperty
		/// Offset: 0x24
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent2 => (ReadByte(0x0024) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bSupportsAgent3
		/// Type: BoolProperty
		/// Offset: 0x24
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent3 => (ReadByte(0x0024) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bSupportsAgent4
		/// Type: BoolProperty
		/// Offset: 0x24
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent4 => (ReadByte(0x0024) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bSupportsAgent5
		/// Type: BoolProperty
		/// Offset: 0x24
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent5 => (ReadByte(0x0024) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bSupportsAgent6
		/// Type: BoolProperty
		/// Offset: 0x24
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent6 => (ReadByte(0x0024) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bSupportsAgent7
		/// Type: BoolProperty
		/// Offset: 0x24
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent7 => (ReadByte(0x0024) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bSupportsAgent8
		/// Type: BoolProperty
		/// Offset: 0x25
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent8 => (ReadByte(0x0025) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSupportsAgent9
		/// Type: BoolProperty
		/// Offset: 0x25
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent9 => (ReadByte(0x0025) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bSupportsAgent10
		/// Type: BoolProperty
		/// Offset: 0x25
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent10 => (ReadByte(0x0025) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bSupportsAgent11
		/// Type: BoolProperty
		/// Offset: 0x25
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent11 => (ReadByte(0x0025) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bSupportsAgent12
		/// Type: BoolProperty
		/// Offset: 0x25
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent12 => (ReadByte(0x0025) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bSupportsAgent13
		/// Type: BoolProperty
		/// Offset: 0x25
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent13 => (ReadByte(0x0025) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bSupportsAgent14
		/// Type: BoolProperty
		/// Offset: 0x25
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent14 => (ReadByte(0x0025) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bSupportsAgent15
		/// Type: BoolProperty
		/// Offset: 0x25
		/// Size: 0x01
		/// </summary>
		public bool bSupportsAgent15 => (ReadByte(0x0025) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bUseSnapHeight
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bUseSnapHeight => (ReadByte(0x0028) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSnapToCheapestArea
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bSnapToCheapestArea => (ReadByte(0x0028) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bCustomFlag0
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bCustomFlag0 => (ReadByte(0x0028) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bCustomFlag1
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bCustomFlag1 => (ReadByte(0x0028) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bCustomFlag2
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bCustomFlag2 => (ReadByte(0x0028) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bCustomFlag3
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bCustomFlag3 => (ReadByte(0x0028) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bCustomFlag4
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bCustomFlag4 => (ReadByte(0x0028) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bCustomFlag5
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bCustomFlag5 => (ReadByte(0x0028) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bCustomFlag6
		/// Type: BoolProperty
		/// Offset: 0x29
		/// Size: 0x01
		/// </summary>
		public bool bCustomFlag6 => (ReadByte(0x0029) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bCustomFlag7
		/// Type: BoolProperty
		/// Offset: 0x29
		/// Size: 0x01
		/// </summary>
		public bool bCustomFlag7 => (ReadByte(0x0029) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// FNavigationLink:FNavigationLinkBase
	/// Size: 0x48
	/// Properties: 2
	/// </summary>
	public class FNavigationLink:FNavigationLinkBase
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: Left
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x0C
		/// </summary>
		public FVector Left => ReadStruct<FVector>(0x30);
		
		/// <summary>
		/// Name: Right
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x0C
		/// </summary>
		public FVector Right => ReadStruct<FVector>(0x3C);
		
	}


	/// <summary>
	/// FPreviewAssetAttachContainer:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FPreviewAssetAttachContainer:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: AttachedObjects
		/// Type: TArray<FPreviewAttachedObjectPair>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FPreviewAttachedObjectPair> AttachedObjects => new TArray<FPreviewAttachedObjectPair>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FPreviewAttachedObjectPair:
	/// Size: 0x30
	/// Properties: 2
	/// </summary>
	public class FPreviewAttachedObjectPair:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: Object
		/// Type: ObjectProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public UObject Object => ReadUObject<UObject>(0x20);
		
		/// <summary>
		/// Name: AttachedTo
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FSmartNameContainer:
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class FSmartNameContainer:MemoryObject
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// FSmartNameMapping:
	/// Size: 0x68
	/// Properties: 0
	/// </summary>
	public class FSmartNameMapping:MemoryObject
	{
		public override int ObjectSize => 104;
	}


	/// <summary>
	/// FAnimSlotGroup:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FAnimSlotGroup:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: GroupName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SlotNames
		/// Type: TArray<FName>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> SlotNames => new TArray<FName>(BaseAddress+0x08);
		
	}


	/// <summary>
	/// FRigConfiguration:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FRigConfiguration:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Rig
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public URig Rig => ReadUObject<URig>(0x00);
		
		/// <summary>
		/// Name: BoneMappingTable
		/// Type: TArray<FNameMapping>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FNameMapping> BoneMappingTable => new TArray<FNameMapping>(BaseAddress+0x08);
		
	}


	/// <summary>
	/// FNameMapping:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FNameMapping:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: NodeName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: BoneName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FBoneReductionSetting:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FBoneReductionSetting:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: BonesToRemove
		/// Type: TArray<FName>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> BonesToRemove => new TArray<FName>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FReferencePose:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FReferencePose:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: PoseName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ReferencePose
		/// Type: TArray<FTransform>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FTransform> ReferencePose => new TArray<FTransform>(BaseAddress+0x08);
		
	}


	/// <summary>
	/// FBoneNode:
	/// Size: 0x10
	/// Properties: 3
	/// </summary>
	public class FBoneNode:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ParentIndex
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int ParentIndex
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: TranslationRetargetingMode
		/// Type: ByteProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public byte TranslationRetargetingMode
		{
			get
			{
				return ReadByte(0x0C);
			}
			set
			{
				WriteByte(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FSkeletonToMeshLinkup:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FSkeletonToMeshLinkup:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: SkeletonToMeshTable
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: MeshToSkeletonTable
		/// Type: TArray<>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FTriMeshCollisionData:
	/// Size: 0x38
	/// Properties: 3
	/// </summary>
	public class FTriMeshCollisionData:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Vertices
		/// Type: TArray<FVector>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> Vertices => new TArray<FVector>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Indices
		/// Type: TArray<FTriIndices>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FTriIndices> Indices => new TArray<FTriIndices>(BaseAddress+0x10);
		
		/// <summary>
		/// Name: bFlipNormals
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool bFlipNormals => (ReadByte(0x0020) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// FTriIndices:
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FTriIndices:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: v0
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int v0
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: v1
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int v1
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: v2
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int v2
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FSkeletalMaterial:
	/// Size: 0x10
	/// Properties: 3
	/// </summary>
	public class FSkeletalMaterial:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: MaterialInterface
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface MaterialInterface => ReadUObject<UMaterialInterface>(0x00);
		
		/// <summary>
		/// Name: bEnableShadowCasting
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bEnableShadowCasting
		{
			get
			{
				return ReadBool(0x08);
			}
			set
			{
				WriteBool(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: bRecomputeTangent
		/// Type: BoolProperty
		/// Offset: 0x09
		/// Size: 0x01
		/// </summary>
		public bool bRecomputeTangent
		{
			get
			{
				return ReadBool(0x09);
			}
			set
			{
				WriteBool(0x09,value);
			}
		}
		
	}


	/// <summary>
	/// FClothingAssetData:
	/// Size: 0xF0
	/// Properties: 4
	/// </summary>
	public class FClothingAssetData:MemoryObject
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: AssetName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ApexFileName
		/// Type: StrProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FString ApexFileName => new FString(BaseAddress+0x08);
		
		/// <summary>
		/// Name: bClothPropertiesChanged
		/// Type: BoolProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public bool bClothPropertiesChanged
		{
			get
			{
				return ReadBool(0x18);
			}
			set
			{
				WriteBool(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: PhysicsProperties
		/// Type: StructProperty
		/// Offset: 0x1C
		/// Size: 0x50
		/// </summary>
		public FClothPhysicsProperties PhysicsProperties => ReadStruct<FClothPhysicsProperties>(0x1C);
		
	}


	/// <summary>
	/// FClothPhysicsProperties:
	/// Size: 0x50
	/// Properties: 20
	/// </summary>
	public class FClothPhysicsProperties:MemoryObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: VerticalResistance
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float VerticalResistance
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: HorizontalResistance
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float HorizontalResistance
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: BendResistance
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float BendResistance
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: ShearResistance
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float ShearResistance
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: Friction
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float Friction
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: Damping
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float Damping
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: TetherStiffness
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float TetherStiffness
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: TetherLimit
		/// Type: FloatProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public float TetherLimit
		{
			get
			{
				return ReadSingle(0x1C);
			}
			set
			{
				WriteSingle(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: Drag
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float Drag
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: StiffnessFrequency
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float StiffnessFrequency
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: GravityScale
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float GravityScale
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: MassScale
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float MassScale
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: InertiaBlend
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float InertiaBlend
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: SelfCollisionThickness
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float SelfCollisionThickness
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: SelfCollisionSquashScale
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float SelfCollisionSquashScale
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: SelfCollisionStiffness
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float SelfCollisionStiffness
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: SolverFrequency
		/// Type: FloatProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public float SolverFrequency
		{
			get
			{
				return ReadSingle(0x40);
			}
			set
			{
				WriteSingle(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: FiberCompression
		/// Type: FloatProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public float FiberCompression
		{
			get
			{
				return ReadSingle(0x44);
			}
			set
			{
				WriteSingle(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: FiberExpansion
		/// Type: FloatProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public float FiberExpansion
		{
			get
			{
				return ReadSingle(0x48);
			}
			set
			{
				WriteSingle(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: FiberResistance
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float FiberResistance
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
	}


	/// <summary>
	/// FMorphTargetMap:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FMorphTargetMap:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: MorphTarget
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UMorphTarget MorphTarget => ReadUObject<UMorphTarget>(0x08);
		
	}


	/// <summary>
	/// FSkeletalMeshLODInfo:
	/// Size: 0x378
	/// Properties: 10
	/// </summary>
	public class FSkeletalMeshLODInfo:MemoryObject
	{
		public override int ObjectSize => 888;
		/// <summary>
		/// Name: ScreenSize
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float ScreenSize
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: LODHysteresis
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float LODHysteresis
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: LODMaterialMap
		/// Type: TArray<>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: bEnableShadowCasting
		/// Type: TArray<>
		/// Offset: 0x18
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: TriangleSortSettings
		/// Type: TArray<FTriangleSortSettings>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FTriangleSortSettings> TriangleSortSettings => new TArray<FTriangleSortSettings>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: bHasBeenSimplified
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bHasBeenSimplified => (ReadByte(0x0038) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ReductionSettings
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0xF0
		/// </summary>
		public FSkeletalMeshOptimizationSettings ReductionSettings => ReadStruct<FSkeletalMeshOptimizationSettings>(0x40);
		
		/// <summary>
		/// Name: RemeshingSettings
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x50
		/// </summary>
		public FSimplygonRemeshingSettings RemeshingSettings => ReadStruct<FSimplygonRemeshingSettings>(0x130);
		
		/// <summary>
		/// Name: OptimizationSettings
		/// Type: StructProperty
		/// Offset: 0x180
		/// Size: 0x1E8
		/// </summary>
		public FGroupedSkeletalOptimizationSettings OptimizationSettings => ReadStruct<FGroupedSkeletalOptimizationSettings>(0x180);
		
		/// <summary>
		/// Name: RemovedBones
		/// Type: TArray<FName>
		/// Offset: 0x368
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> RemovedBones => new TArray<FName>(BaseAddress+0x368);
		
	}


	/// <summary>
	/// FGroupedSkeletalOptimizationSettings:
	/// Size: 0x1E8
	/// Properties: 5
	/// </summary>
	public class FGroupedSkeletalOptimizationSettings:MemoryObject
	{
		public override int ObjectSize => 488;
		/// <summary>
		/// Name: bAutoComputeLODDistance
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bAutoComputeLODDistance
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: LevelOfDetailType
		/// Type: ByteProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public byte LevelOfDetailType
		{
			get
			{
				return ReadByte(0x01);
			}
			set
			{
				WriteByte(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: ReductionSettings
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0xF0
		/// </summary>
		public FSkeletalMeshOptimizationSettings ReductionSettings => ReadStruct<FSkeletalMeshOptimizationSettings>(0x08);
		
		/// <summary>
		/// Name: ProxySettings
		/// Type: StructProperty
		/// Offset: 0xF8
		/// Size: 0xEC
		/// </summary>
		public FMeshProxySettings ProxySettings => ReadStruct<FMeshProxySettings>(0xF8);
		
		/// <summary>
		/// Name: bForceLODRebuild
		/// Type: BoolProperty
		/// Offset: 0x1E4
		/// Size: 0x01
		/// </summary>
		public bool bForceLODRebuild
		{
			get
			{
				return ReadBool(0x1E4);
			}
			set
			{
				WriteBool(0x1E4,value);
			}
		}
		
	}


	/// <summary>
	/// FSkeletalMeshOptimizationSettings:
	/// Size: 0xF0
	/// Properties: 21
	/// </summary>
	public class FSkeletalMeshOptimizationSettings:MemoryObject
	{
		public override int ObjectSize => 240;
		/// <summary>
		/// Name: ReductionMethod
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte ReductionMethod
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: NumOfTrianglesPercentage
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float NumOfTrianglesPercentage
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: MaxDeviationPercentage
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float MaxDeviationPercentage
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: ScreenSize
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int ScreenSize
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: WeldingThreshold
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float WeldingThreshold
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: bRecalcNormals
		/// Type: BoolProperty
		/// Offset: 0x14
		/// Size: 0x01
		/// </summary>
		public bool bRecalcNormals
		{
			get
			{
				return ReadBool(0x14);
			}
			set
			{
				WriteBool(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: NormalsThreshold
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float NormalsThreshold
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: SilhouetteImportance
		/// Type: ByteProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public byte SilhouetteImportance
		{
			get
			{
				return ReadByte(0x1C);
			}
			set
			{
				WriteByte(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: TextureImportance
		/// Type: ByteProperty
		/// Offset: 0x1D
		/// Size: 0x01
		/// </summary>
		public byte TextureImportance
		{
			get
			{
				return ReadByte(0x1D);
			}
			set
			{
				WriteByte(0x1D,value);
			}
		}
		
		/// <summary>
		/// Name: ShadingImportance
		/// Type: ByteProperty
		/// Offset: 0x1E
		/// Size: 0x01
		/// </summary>
		public byte ShadingImportance
		{
			get
			{
				return ReadByte(0x1E);
			}
			set
			{
				WriteByte(0x1E,value);
			}
		}
		
		/// <summary>
		/// Name: SkinningImportance
		/// Type: ByteProperty
		/// Offset: 0x1F
		/// Size: 0x01
		/// </summary>
		public byte SkinningImportance
		{
			get
			{
				return ReadByte(0x1F);
			}
			set
			{
				WriteByte(0x1F,value);
			}
		}
		
		/// <summary>
		/// Name: BoneReductionRatio
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float BoneReductionRatio
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: MaxBonesPerVertex
		/// Type: IntProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public int MaxBonesPerVertex
		{
			get
			{
				return ReadInt32(0x24);
			}
			set
			{
				WriteInt32(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: bTransferMorphTarget
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bTransferMorphTarget
		{
			get
			{
				return ReadBool(0x28);
			}
			set
			{
				WriteBool(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: BonesToRemove
		/// Type: TArray<FBoneReference>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FBoneReference> BonesToRemove => new TArray<FBoneReference>(BaseAddress+0x30);
		
		/// <summary>
		/// Name: BaseLOD
		/// Type: IntProperty
		/// Offset: 0x40
		/// Size: 0x04
		/// </summary>
		public int BaseLOD
		{
			get
			{
				return ReadInt32(0x40);
			}
			set
			{
				WriteInt32(0x40,value);
			}
		}
		
		/// <summary>
		/// Name: LODChainLastIndex
		/// Type: IntProperty
		/// Offset: 0x44
		/// Size: 0x04
		/// </summary>
		public int LODChainLastIndex
		{
			get
			{
				return ReadInt32(0x44);
			}
			set
			{
				WriteInt32(0x44,value);
			}
		}
		
		/// <summary>
		/// Name: bSimplifyMaterials
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool bSimplifyMaterials
		{
			get
			{
				return ReadBool(0x48);
			}
			set
			{
				WriteBool(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: MaterialLODSettings
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x28
		/// </summary>
		public FSimplygonMaterialLODSettings MaterialLODSettings => ReadStruct<FSimplygonMaterialLODSettings>(0x50);
		
		/// <summary>
		/// Name: MaterialSettings
		/// Type: StructProperty
		/// Offset: 0x78
		/// Size: 0x74
		/// </summary>
		public FMaterialProxySettings MaterialSettings => ReadStruct<FMaterialProxySettings>(0x78);
		
		/// <summary>
		/// Name: bForceRebuild
		/// Type: BoolProperty
		/// Offset: 0xEC
		/// Size: 0x01
		/// </summary>
		public bool bForceRebuild
		{
			get
			{
				return ReadBool(0xEC);
			}
			set
			{
				WriteBool(0xEC,value);
			}
		}
		
	}


	/// <summary>
	/// FTriangleSortSettings:
	/// Size: 0x10
	/// Properties: 3
	/// </summary>
	public class FTriangleSortSettings:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: TriangleSorting
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte TriangleSorting
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: CustomLeftRightAxis
		/// Type: ByteProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public byte CustomLeftRightAxis
		{
			get
			{
				return ReadByte(0x01);
			}
			set
			{
				WriteByte(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: CustomLeftRightBoneName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FBoneMirrorExport:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FBoneMirrorExport:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: BoneName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SourceBoneName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: BoneFlipAxis
		/// Type: ByteProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public byte BoneFlipAxis
		{
			get
			{
				return ReadByte(0x10);
			}
			set
			{
				WriteByte(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FBoneMirrorInfo:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FBoneMirrorInfo:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: SourceIndex
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int SourceIndex
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: BoneFlipAxis
		/// Type: ByteProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public byte BoneFlipAxis
		{
			get
			{
				return ReadByte(0x04);
			}
			set
			{
				WriteByte(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimationGroupReference:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FAnimationGroupReference:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: GroupName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: GroupRole
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte GroupRole
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimGroupInstance:
	/// Size: 0x80
	/// Properties: 0
	/// </summary>
	public class FAnimGroupInstance:MemoryObject
	{
		public override int ObjectSize => 128;
	}


	/// <summary>
	/// FAnimTickRecord:
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class FAnimTickRecord:MemoryObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: SourceAsset
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UAnimationAsset SourceAsset => ReadUObject<UAnimationAsset>(0x00);
		
	}


	/// <summary>
	/// FMarkerSyncAnimPosition:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FMarkerSyncAnimPosition:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: PreviousMarkerName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: NextMarkerName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PositionBetweenMarkers
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float PositionBetweenMarkers
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimExtractContext:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FAnimExtractContext:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: bExtractRootMotion
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bExtractRootMotion
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentTime
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float CurrentTime
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FRootMotionSource_JumpForce:FRootMotionSource
	/// Size: 0xC0
	/// Properties: 6
	/// </summary>
	public class FRootMotionSource_JumpForce:FRootMotionSource
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x0C
		/// </summary>
		public FRotator Rotation => ReadStruct<FRotator>(0x80);
		
		/// <summary>
		/// Name: Distance
		/// Type: FloatProperty
		/// Offset: 0x8C
		/// Size: 0x04
		/// </summary>
		public float Distance
		{
			get
			{
				return ReadSingle(0x8C);
			}
			set
			{
				WriteSingle(0x8C,value);
			}
		}
		
		/// <summary>
		/// Name: Height
		/// Type: FloatProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public float Height
		{
			get
			{
				return ReadSingle(0x90);
			}
			set
			{
				WriteSingle(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: bDisableTimeout
		/// Type: BoolProperty
		/// Offset: 0x94
		/// Size: 0x01
		/// </summary>
		public bool bDisableTimeout
		{
			get
			{
				return ReadBool(0x94);
			}
			set
			{
				WriteBool(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: PathOffsetCurve
		/// Type: ObjectProperty
		/// Offset: 0x98
		/// Size: 0x08
		/// </summary>
		public UCurveVector PathOffsetCurve => ReadUObject<UCurveVector>(0x98);
		
		/// <summary>
		/// Name: TimeMappingCurve
		/// Type: ObjectProperty
		/// Offset: 0xA0
		/// Size: 0x08
		/// </summary>
		public UCurveFloat TimeMappingCurve => ReadUObject<UCurveFloat>(0xA0);
		
	}


	/// <summary>
	/// FRootMotionSource:
	/// Size: 0x80
	/// Properties: 13
	/// </summary>
	public class FRootMotionSource:MemoryObject
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: Priority
		/// Type: UInt16Property
		/// Offset: 0x10
		/// Size: 0x02
		/// </summary>
		public ushort Priority
		{
			get
			{
				return ReadUInt16(0x10);
			}
			set
			{
				WriteUInt16(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: LocalID
		/// Type: UInt16Property
		/// Offset: 0x12
		/// Size: 0x02
		/// </summary>
		public ushort LocalID
		{
			get
			{
				return ReadUInt16(0x12);
			}
			set
			{
				WriteUInt16(0x12,value);
			}
		}
		
		/// <summary>
		/// Name: AccumulateMode
		/// Type: ByteProperty
		/// Offset: 0x14
		/// Size: 0x01
		/// </summary>
		public byte AccumulateMode
		{
			get
			{
				return ReadByte(0x14);
			}
			set
			{
				WriteByte(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: InstanceName
		/// Type: NameProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: StartTime
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float StartTime
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentTime
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float CurrentTime
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: PreviousTime
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float PreviousTime
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: Duration
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float Duration
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: Status
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public FRootMotionSourceStatus Status => ReadStruct<FRootMotionSourceStatus>(0x30);
		
		/// <summary>
		/// Name: Settings
		/// Type: StructProperty
		/// Offset: 0x31
		/// Size: 0x01
		/// </summary>
		public FRootMotionSourceSettings Settings => ReadStruct<FRootMotionSourceSettings>(0x31);
		
		/// <summary>
		/// Name: bInLocalSpace
		/// Type: BoolProperty
		/// Offset: 0x32
		/// Size: 0x01
		/// </summary>
		public bool bInLocalSpace
		{
			get
			{
				return ReadBool(0x32);
			}
			set
			{
				WriteBool(0x32,value);
			}
		}
		
		/// <summary>
		/// Name: bImpartsVelocityOnRemoval
		/// Type: BoolProperty
		/// Offset: 0x33
		/// Size: 0x01
		/// </summary>
		public bool bImpartsVelocityOnRemoval
		{
			get
			{
				return ReadBool(0x33);
			}
			set
			{
				WriteBool(0x33,value);
			}
		}
		
		/// <summary>
		/// Name: RootMotionParams
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x40
		/// </summary>
		public FRootMotionMovementParams RootMotionParams => ReadStruct<FRootMotionMovementParams>(0x40);
		
	}


	/// <summary>
	/// FRootMotionSourceStatus:
	/// Size: 0x01
	/// Properties: 1
	/// </summary>
	public class FRootMotionSourceStatus:MemoryObject
	{
		public override int ObjectSize => 1;
		/// <summary>
		/// Name: flags
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte flags
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
	}


	/// <summary>
	/// FRootMotionSource_MoveToDynamicForce:FRootMotionSource
	/// Size: 0xC0
	/// Properties: 6
	/// </summary>
	public class FRootMotionSource_MoveToDynamicForce:FRootMotionSource
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: StartLocation
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x0C
		/// </summary>
		public FVector StartLocation => ReadStruct<FVector>(0x80);
		
		/// <summary>
		/// Name: InitialTargetLocation
		/// Type: StructProperty
		/// Offset: 0x8C
		/// Size: 0x0C
		/// </summary>
		public FVector InitialTargetLocation => ReadStruct<FVector>(0x8C);
		
		/// <summary>
		/// Name: TargetLocation
		/// Type: StructProperty
		/// Offset: 0x98
		/// Size: 0x0C
		/// </summary>
		public FVector TargetLocation => ReadStruct<FVector>(0x98);
		
		/// <summary>
		/// Name: bRestrictSpeedToExpected
		/// Type: BoolProperty
		/// Offset: 0xA4
		/// Size: 0x01
		/// </summary>
		public bool bRestrictSpeedToExpected
		{
			get
			{
				return ReadBool(0xA4);
			}
			set
			{
				WriteBool(0xA4,value);
			}
		}
		
		/// <summary>
		/// Name: PathOffsetCurve
		/// Type: ObjectProperty
		/// Offset: 0xA8
		/// Size: 0x08
		/// </summary>
		public UCurveVector PathOffsetCurve => ReadUObject<UCurveVector>(0xA8);
		
		/// <summary>
		/// Name: TimeMappingCurve
		/// Type: ObjectProperty
		/// Offset: 0xB0
		/// Size: 0x08
		/// </summary>
		public UCurveFloat TimeMappingCurve => ReadUObject<UCurveFloat>(0xB0);
		
	}


	/// <summary>
	/// FRootMotionSource_MoveToForce:FRootMotionSource
	/// Size: 0xB0
	/// Properties: 4
	/// </summary>
	public class FRootMotionSource_MoveToForce:FRootMotionSource
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: StartLocation
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x0C
		/// </summary>
		public FVector StartLocation => ReadStruct<FVector>(0x80);
		
		/// <summary>
		/// Name: TargetLocation
		/// Type: StructProperty
		/// Offset: 0x8C
		/// Size: 0x0C
		/// </summary>
		public FVector TargetLocation => ReadStruct<FVector>(0x8C);
		
		/// <summary>
		/// Name: bRestrictSpeedToExpected
		/// Type: BoolProperty
		/// Offset: 0x98
		/// Size: 0x01
		/// </summary>
		public bool bRestrictSpeedToExpected
		{
			get
			{
				return ReadBool(0x98);
			}
			set
			{
				WriteBool(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: PathOffsetCurve
		/// Type: ObjectProperty
		/// Offset: 0xA0
		/// Size: 0x08
		/// </summary>
		public UCurveVector PathOffsetCurve => ReadUObject<UCurveVector>(0xA0);
		
	}


	/// <summary>
	/// FRootMotionSource_RadialForce:FRootMotionSource
	/// Size: 0xC0
	/// Properties: 8
	/// </summary>
	public class FRootMotionSource_RadialForce:FRootMotionSource
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x0C
		/// </summary>
		public FVector Location => ReadStruct<FVector>(0x80);
		
		/// <summary>
		/// Name: LocationActor
		/// Type: ObjectProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		public AActor LocationActor => ReadUObject<AActor>(0x90);
		
		/// <summary>
		/// Name: Radius
		/// Type: FloatProperty
		/// Offset: 0x98
		/// Size: 0x04
		/// </summary>
		public float Radius
		{
			get
			{
				return ReadSingle(0x98);
			}
			set
			{
				WriteSingle(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: Strength
		/// Type: FloatProperty
		/// Offset: 0x9C
		/// Size: 0x04
		/// </summary>
		public float Strength
		{
			get
			{
				return ReadSingle(0x9C);
			}
			set
			{
				WriteSingle(0x9C,value);
			}
		}
		
		/// <summary>
		/// Name: bIsPush
		/// Type: BoolProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public bool bIsPush
		{
			get
			{
				return ReadBool(0xA0);
			}
			set
			{
				WriteBool(0xA0,value);
			}
		}
		
		/// <summary>
		/// Name: bNoZForce
		/// Type: BoolProperty
		/// Offset: 0xA1
		/// Size: 0x01
		/// </summary>
		public bool bNoZForce
		{
			get
			{
				return ReadBool(0xA1);
			}
			set
			{
				WriteBool(0xA1,value);
			}
		}
		
		/// <summary>
		/// Name: StrengthDistanceFalloff
		/// Type: ObjectProperty
		/// Offset: 0xA8
		/// Size: 0x08
		/// </summary>
		public UCurveFloat StrengthDistanceFalloff => ReadUObject<UCurveFloat>(0xA8);
		
		/// <summary>
		/// Name: StrengthOverTime
		/// Type: ObjectProperty
		/// Offset: 0xB0
		/// Size: 0x08
		/// </summary>
		public UCurveFloat StrengthOverTime => ReadUObject<UCurveFloat>(0xB0);
		
	}


	/// <summary>
	/// FRootMotionSource_ConstantForce:FRootMotionSource
	/// Size: 0xA0
	/// Properties: 2
	/// </summary>
	public class FRootMotionSource_ConstantForce:FRootMotionSource
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: force
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x0C
		/// </summary>
		public FVector force => ReadStruct<FVector>(0x80);
		
		/// <summary>
		/// Name: StrengthOverTime
		/// Type: ObjectProperty
		/// Offset: 0x90
		/// Size: 0x08
		/// </summary>
		public UCurveFloat StrengthOverTime => ReadUObject<UCurveFloat>(0x90);
		
	}


	/// <summary>
	/// FBodyInstance:
	/// Size: 0x1B0
	/// Properties: 44
	/// </summary>
	public class FBodyInstance:MemoryObject
	{
		public override int ObjectSize => 432;
		/// <summary>
		/// Name: ResponseToChannels
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x20
		/// </summary>
		public FCollisionResponseContainer ResponseToChannels => ReadStruct<FCollisionResponseContainer>(0x14);
		
		/// <summary>
		/// Name: CollisionProfileName
		/// Type: NameProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CollisionResponses
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x30
		/// </summary>
		public FCollisionResponse CollisionResponses => ReadStruct<FCollisionResponse>(0x40);
		
		/// <summary>
		/// Name: bUseCCD
		/// Type: BoolProperty
		/// Offset: 0x74
		/// Size: 0x01
		/// </summary>
		public bool bUseCCD => (ReadByte(0x0074) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bNotifyRigidBodyCollision
		/// Type: BoolProperty
		/// Offset: 0x74
		/// Size: 0x01
		/// </summary>
		public bool bNotifyRigidBodyCollision => (ReadByte(0x0074) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bSimulatePhysics
		/// Type: BoolProperty
		/// Offset: 0x74
		/// Size: 0x01
		/// </summary>
		public bool bSimulatePhysics => (ReadByte(0x0074) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverrideMass
		/// Type: BoolProperty
		/// Offset: 0x74
		/// Size: 0x01
		/// </summary>
		public bool bOverrideMass => (ReadByte(0x0074) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bEnableGravity
		/// Type: BoolProperty
		/// Offset: 0x74
		/// Size: 0x01
		/// </summary>
		public bool bEnableGravity => (ReadByte(0x0074) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bAutoWeld
		/// Type: BoolProperty
		/// Offset: 0x74
		/// Size: 0x01
		/// </summary>
		public bool bAutoWeld => (ReadByte(0x0074) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bStartAwake
		/// Type: BoolProperty
		/// Offset: 0x74
		/// Size: 0x01
		/// </summary>
		public bool bStartAwake => (ReadByte(0x0074) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bGenerateWakeEvents
		/// Type: BoolProperty
		/// Offset: 0x75
		/// Size: 0x01
		/// </summary>
		public bool bGenerateWakeEvents => (ReadByte(0x0075) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bUpdateMassWhenScaleChanges
		/// Type: BoolProperty
		/// Offset: 0x75
		/// Size: 0x01
		/// </summary>
		public bool bUpdateMassWhenScaleChanges => (ReadByte(0x0075) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bLockTranslation
		/// Type: BoolProperty
		/// Offset: 0x75
		/// Size: 0x01
		/// </summary>
		public bool bLockTranslation => (ReadByte(0x0075) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bLockRotation
		/// Type: BoolProperty
		/// Offset: 0x75
		/// Size: 0x01
		/// </summary>
		public bool bLockRotation => (ReadByte(0x0075) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bLockXTranslation
		/// Type: BoolProperty
		/// Offset: 0x75
		/// Size: 0x01
		/// </summary>
		public bool bLockXTranslation => (ReadByte(0x0075) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bLockYTranslation
		/// Type: BoolProperty
		/// Offset: 0x75
		/// Size: 0x01
		/// </summary>
		public bool bLockYTranslation => (ReadByte(0x0075) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bLockZTranslation
		/// Type: BoolProperty
		/// Offset: 0x75
		/// Size: 0x01
		/// </summary>
		public bool bLockZTranslation => (ReadByte(0x0075) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bLockXRotation
		/// Type: BoolProperty
		/// Offset: 0x75
		/// Size: 0x01
		/// </summary>
		public bool bLockXRotation => (ReadByte(0x0075) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bLockYRotation
		/// Type: BoolProperty
		/// Offset: 0x76
		/// Size: 0x01
		/// </summary>
		public bool bLockYRotation => (ReadByte(0x0076) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bLockZRotation
		/// Type: BoolProperty
		/// Offset: 0x76
		/// Size: 0x01
		/// </summary>
		public bool bLockZRotation => (ReadByte(0x0076) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverrideMaxAngularVelocity
		/// Type: BoolProperty
		/// Offset: 0x76
		/// Size: 0x01
		/// </summary>
		public bool bOverrideMaxAngularVelocity => (ReadByte(0x0076) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bUseAsyncScene
		/// Type: BoolProperty
		/// Offset: 0x76
		/// Size: 0x01
		/// </summary>
		public bool bUseAsyncScene => (ReadByte(0x0076) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverrideMaxDepenetrationVelocity
		/// Type: BoolProperty
		/// Offset: 0x76
		/// Size: 0x01
		/// </summary>
		public bool bOverrideMaxDepenetrationVelocity => (ReadByte(0x0076) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverrideWalkableSlopeOnInstance
		/// Type: BoolProperty
		/// Offset: 0x76
		/// Size: 0x01
		/// </summary>
		public bool bOverrideWalkableSlopeOnInstance => (ReadByte(0x0076) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: MaxDepenetrationVelocity
		/// Type: FloatProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public float MaxDepenetrationVelocity
		{
			get
			{
				return ReadSingle(0x78);
			}
			set
			{
				WriteSingle(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: MassInKgOverride
		/// Type: FloatProperty
		/// Offset: 0x84
		/// Size: 0x04
		/// </summary>
		public float MassInKgOverride
		{
			get
			{
				return ReadSingle(0x84);
			}
			set
			{
				WriteSingle(0x84,value);
			}
		}
		
		/// <summary>
		/// Name: LinearDamping
		/// Type: FloatProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public float LinearDamping
		{
			get
			{
				return ReadSingle(0x88);
			}
			set
			{
				WriteSingle(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: AngularDamping
		/// Type: FloatProperty
		/// Offset: 0x8C
		/// Size: 0x04
		/// </summary>
		public float AngularDamping
		{
			get
			{
				return ReadSingle(0x8C);
			}
			set
			{
				WriteSingle(0x8C,value);
			}
		}
		
		/// <summary>
		/// Name: CustomDOFPlaneNormal
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x0C
		/// </summary>
		public FVector CustomDOFPlaneNormal => ReadStruct<FVector>(0x90);
		
		/// <summary>
		/// Name: COMNudge
		/// Type: StructProperty
		/// Offset: 0x9C
		/// Size: 0x0C
		/// </summary>
		public FVector COMNudge => ReadStruct<FVector>(0x9C);
		
		/// <summary>
		/// Name: MassScale
		/// Type: FloatProperty
		/// Offset: 0xA8
		/// Size: 0x04
		/// </summary>
		public float MassScale
		{
			get
			{
				return ReadSingle(0xA8);
			}
			set
			{
				WriteSingle(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: WalkableSlopeOverride
		/// Type: StructProperty
		/// Offset: 0xC0
		/// Size: 0x08
		/// </summary>
		public FWalkableSlopeOverride WalkableSlopeOverride => ReadStruct<FWalkableSlopeOverride>(0xC0);
		
		/// <summary>
		/// Name: PhysMaterialOverride
		/// Type: ObjectProperty
		/// Offset: 0xC8
		/// Size: 0x08
		/// </summary>
		public UPhysicalMaterial PhysMaterialOverride => ReadUObject<UPhysicalMaterial>(0xC8);
		
		/// <summary>
		/// Name: MaxAngularVelocity
		/// Type: FloatProperty
		/// Offset: 0xD0
		/// Size: 0x04
		/// </summary>
		public float MaxAngularVelocity
		{
			get
			{
				return ReadSingle(0xD0);
			}
			set
			{
				WriteSingle(0xD0,value);
			}
		}
		
		/// <summary>
		/// Name: CustomSleepThresholdMultiplier
		/// Type: FloatProperty
		/// Offset: 0xD4
		/// Size: 0x04
		/// </summary>
		public float CustomSleepThresholdMultiplier
		{
			get
			{
				return ReadSingle(0xD4);
			}
			set
			{
				WriteSingle(0xD4,value);
			}
		}
		
		/// <summary>
		/// Name: PhysicsBlendWeight
		/// Type: FloatProperty
		/// Offset: 0xD8
		/// Size: 0x04
		/// </summary>
		public float PhysicsBlendWeight
		{
			get
			{
				return ReadSingle(0xD8);
			}
			set
			{
				WriteSingle(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: PositionSolverIterationCount
		/// Type: IntProperty
		/// Offset: 0xDC
		/// Size: 0x04
		/// </summary>
		public int PositionSolverIterationCount
		{
			get
			{
				return ReadInt32(0xDC);
			}
			set
			{
				WriteInt32(0xDC,value);
			}
		}
		
		/// <summary>
		/// Name: RigidActorSyncId
		/// Type: UInt64Property
		/// Offset: 0x108
		/// Size: 0x08
		/// </summary>
		public ulong RigidActorSyncId
		{
			get
			{
				return ReadUInt64(0x108);
			}
			set
			{
				WriteUInt64(0x108,value);
			}
		}
		
		/// <summary>
		/// Name: RigidActorAsyncId
		/// Type: UInt64Property
		/// Offset: 0x110
		/// Size: 0x08
		/// </summary>
		public ulong RigidActorAsyncId
		{
			get
			{
				return ReadUInt64(0x110);
			}
			set
			{
				WriteUInt64(0x110,value);
			}
		}
		
		/// <summary>
		/// Name: VelocitySolverIterationCount
		/// Type: IntProperty
		/// Offset: 0x118
		/// Size: 0x04
		/// </summary>
		public int VelocitySolverIterationCount
		{
			get
			{
				return ReadInt32(0x118);
			}
			set
			{
				WriteInt32(0x118,value);
			}
		}
		
		/// <summary>
		/// Name: SleepFamily
		/// Type: ByteProperty
		/// Offset: 0x1AC
		/// Size: 0x01
		/// </summary>
		public byte SleepFamily
		{
			get
			{
				return ReadByte(0x1AC);
			}
			set
			{
				WriteByte(0x1AC,value);
			}
		}
		
		/// <summary>
		/// Name: DOFMode
		/// Type: ByteProperty
		/// Offset: 0x1AD
		/// Size: 0x01
		/// </summary>
		public byte DOFMode
		{
			get
			{
				return ReadByte(0x1AD);
			}
			set
			{
				WriteByte(0x1AD,value);
			}
		}
		
		/// <summary>
		/// Name: CollisionEnabled
		/// Type: ByteProperty
		/// Offset: 0x1AE
		/// Size: 0x01
		/// </summary>
		public byte CollisionEnabled
		{
			get
			{
				return ReadByte(0x1AE);
			}
			set
			{
				WriteByte(0x1AE,value);
			}
		}
		
		/// <summary>
		/// Name: ObjectType
		/// Type: ByteProperty
		/// Offset: 0x1AF
		/// Size: 0x01
		/// </summary>
		public byte ObjectType
		{
			get
			{
				return ReadByte(0x1AF);
			}
			set
			{
				WriteByte(0x1AF,value);
			}
		}
		
	}


	/// <summary>
	/// FCollisionResponse:
	/// Size: 0x30
	/// Properties: 2
	/// </summary>
	public class FCollisionResponse:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: ResponseToChannels
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x20
		/// </summary>
		public FCollisionResponseContainer ResponseToChannels => ReadStruct<FCollisionResponseContainer>(0x00);
		
		/// <summary>
		/// Name: ResponseArray
		/// Type: TArray<FResponseChannel>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FResponseChannel> ResponseArray => new TArray<FResponseChannel>(BaseAddress+0x20);
		
	}


	/// <summary>
	/// FSpriteCategoryInfo:
	/// Size: 0x38
	/// Properties: 3
	/// </summary>
	public class FSpriteCategoryInfo:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Category
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: DisplayName
		/// Type: TextProperty
		/// Offset: 0x08
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: Description
		/// Type: TextProperty
		/// Offset: 0x20
		/// Size: 0x18
		/// </summary>
		
	}


	/// <summary>
	/// FSkelMeshComponentLODInfo:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FSkelMeshComponentLODInfo:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: HiddenMaterials
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FActiveVertexAnim:
	/// Size: 0x10
	/// Properties: 3
	/// </summary>
	public class FActiveVertexAnim:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: VertAnim
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UVertexAnimBase VertAnim => ReadUObject<UVertexAnimBase>(0x00);
		
		/// <summary>
		/// Name: Weight
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Weight
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FConstraintInstance:
	/// Size: 0x160
	/// Properties: 68
	/// </summary>
	public class FConstraintInstance:MemoryObject
	{
		public override int ObjectSize => 352;
		/// <summary>
		/// Name: OwnerComponent
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public USceneComponent OwnerComponent => ReadUObject<USceneComponent>(0x08);
		
		/// <summary>
		/// Name: JointName
		/// Type: NameProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ConstraintBone1
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ConstraintBone2
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Pos1
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x0C
		/// </summary>
		public FVector Pos1 => ReadStruct<FVector>(0x38);
		
		/// <summary>
		/// Name: PriAxis1
		/// Type: StructProperty
		/// Offset: 0x44
		/// Size: 0x0C
		/// </summary>
		public FVector PriAxis1 => ReadStruct<FVector>(0x44);
		
		/// <summary>
		/// Name: SecAxis1
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x0C
		/// </summary>
		public FVector SecAxis1 => ReadStruct<FVector>(0x50);
		
		/// <summary>
		/// Name: Pos2
		/// Type: StructProperty
		/// Offset: 0x5C
		/// Size: 0x0C
		/// </summary>
		public FVector Pos2 => ReadStruct<FVector>(0x5C);
		
		/// <summary>
		/// Name: PriAxis2
		/// Type: StructProperty
		/// Offset: 0x68
		/// Size: 0x0C
		/// </summary>
		public FVector PriAxis2 => ReadStruct<FVector>(0x68);
		
		/// <summary>
		/// Name: SecAxis2
		/// Type: StructProperty
		/// Offset: 0x74
		/// Size: 0x0C
		/// </summary>
		public FVector SecAxis2 => ReadStruct<FVector>(0x74);
		
		/// <summary>
		/// Name: bDisableCollision
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bDisableCollision => (ReadByte(0x0080) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bEnableProjection
		/// Type: BoolProperty
		/// Offset: 0x80
		/// Size: 0x01
		/// </summary>
		public bool bEnableProjection => (ReadByte(0x0080) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: ProjectionLinearTolerance
		/// Type: FloatProperty
		/// Offset: 0x84
		/// Size: 0x04
		/// </summary>
		public float ProjectionLinearTolerance
		{
			get
			{
				return ReadSingle(0x84);
			}
			set
			{
				WriteSingle(0x84,value);
			}
		}
		
		/// <summary>
		/// Name: ProjectionAngularTolerance
		/// Type: FloatProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public float ProjectionAngularTolerance
		{
			get
			{
				return ReadSingle(0x88);
			}
			set
			{
				WriteSingle(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: LinearXMotion
		/// Type: ByteProperty
		/// Offset: 0x8C
		/// Size: 0x01
		/// </summary>
		public byte LinearXMotion
		{
			get
			{
				return ReadByte(0x8C);
			}
			set
			{
				WriteByte(0x8C,value);
			}
		}
		
		/// <summary>
		/// Name: LinearYMotion
		/// Type: ByteProperty
		/// Offset: 0x8D
		/// Size: 0x01
		/// </summary>
		public byte LinearYMotion
		{
			get
			{
				return ReadByte(0x8D);
			}
			set
			{
				WriteByte(0x8D,value);
			}
		}
		
		/// <summary>
		/// Name: LinearZMotion
		/// Type: ByteProperty
		/// Offset: 0x8E
		/// Size: 0x01
		/// </summary>
		public byte LinearZMotion
		{
			get
			{
				return ReadByte(0x8E);
			}
			set
			{
				WriteByte(0x8E,value);
			}
		}
		
		/// <summary>
		/// Name: LinearLimitSize
		/// Type: FloatProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public float LinearLimitSize
		{
			get
			{
				return ReadSingle(0x90);
			}
			set
			{
				WriteSingle(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: bLinearLimitSoft
		/// Type: BoolProperty
		/// Offset: 0x94
		/// Size: 0x01
		/// </summary>
		public bool bLinearLimitSoft => (ReadByte(0x0094) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LinearLimitStiffness
		/// Type: FloatProperty
		/// Offset: 0x98
		/// Size: 0x04
		/// </summary>
		public float LinearLimitStiffness
		{
			get
			{
				return ReadSingle(0x98);
			}
			set
			{
				WriteSingle(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: LinearLimitDamping
		/// Type: FloatProperty
		/// Offset: 0x9C
		/// Size: 0x04
		/// </summary>
		public float LinearLimitDamping
		{
			get
			{
				return ReadSingle(0x9C);
			}
			set
			{
				WriteSingle(0x9C,value);
			}
		}
		
		/// <summary>
		/// Name: bLinearBreakable
		/// Type: BoolProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public bool bLinearBreakable => (ReadByte(0x00A0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LinearBreakThreshold
		/// Type: FloatProperty
		/// Offset: 0xA4
		/// Size: 0x04
		/// </summary>
		public float LinearBreakThreshold
		{
			get
			{
				return ReadSingle(0xA4);
			}
			set
			{
				WriteSingle(0xA4,value);
			}
		}
		
		/// <summary>
		/// Name: AngularSwing1Motion
		/// Type: ByteProperty
		/// Offset: 0xA8
		/// Size: 0x01
		/// </summary>
		public byte AngularSwing1Motion
		{
			get
			{
				return ReadByte(0xA8);
			}
			set
			{
				WriteByte(0xA8,value);
			}
		}
		
		/// <summary>
		/// Name: AngularTwistMotion
		/// Type: ByteProperty
		/// Offset: 0xA9
		/// Size: 0x01
		/// </summary>
		public byte AngularTwistMotion
		{
			get
			{
				return ReadByte(0xA9);
			}
			set
			{
				WriteByte(0xA9,value);
			}
		}
		
		/// <summary>
		/// Name: AngularSwing2Motion
		/// Type: ByteProperty
		/// Offset: 0xAA
		/// Size: 0x01
		/// </summary>
		public byte AngularSwing2Motion
		{
			get
			{
				return ReadByte(0xAA);
			}
			set
			{
				WriteByte(0xAA,value);
			}
		}
		
		/// <summary>
		/// Name: bSwingLimitSoft
		/// Type: BoolProperty
		/// Offset: 0xAC
		/// Size: 0x01
		/// </summary>
		public bool bSwingLimitSoft => (ReadByte(0x00AC) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bTwistLimitSoft
		/// Type: BoolProperty
		/// Offset: 0xAC
		/// Size: 0x01
		/// </summary>
		public bool bTwistLimitSoft => (ReadByte(0x00AC) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: Swing1LimitAngle
		/// Type: FloatProperty
		/// Offset: 0xB0
		/// Size: 0x04
		/// </summary>
		public float Swing1LimitAngle
		{
			get
			{
				return ReadSingle(0xB0);
			}
			set
			{
				WriteSingle(0xB0,value);
			}
		}
		
		/// <summary>
		/// Name: TwistLimitAngle
		/// Type: FloatProperty
		/// Offset: 0xB4
		/// Size: 0x04
		/// </summary>
		public float TwistLimitAngle
		{
			get
			{
				return ReadSingle(0xB4);
			}
			set
			{
				WriteSingle(0xB4,value);
			}
		}
		
		/// <summary>
		/// Name: Swing2LimitAngle
		/// Type: FloatProperty
		/// Offset: 0xB8
		/// Size: 0x04
		/// </summary>
		public float Swing2LimitAngle
		{
			get
			{
				return ReadSingle(0xB8);
			}
			set
			{
				WriteSingle(0xB8,value);
			}
		}
		
		/// <summary>
		/// Name: SwingLimitStiffness
		/// Type: FloatProperty
		/// Offset: 0xBC
		/// Size: 0x04
		/// </summary>
		public float SwingLimitStiffness
		{
			get
			{
				return ReadSingle(0xBC);
			}
			set
			{
				WriteSingle(0xBC,value);
			}
		}
		
		/// <summary>
		/// Name: SwingLimitDamping
		/// Type: FloatProperty
		/// Offset: 0xC0
		/// Size: 0x04
		/// </summary>
		public float SwingLimitDamping
		{
			get
			{
				return ReadSingle(0xC0);
			}
			set
			{
				WriteSingle(0xC0,value);
			}
		}
		
		/// <summary>
		/// Name: TwistLimitStiffness
		/// Type: FloatProperty
		/// Offset: 0xC4
		/// Size: 0x04
		/// </summary>
		public float TwistLimitStiffness
		{
			get
			{
				return ReadSingle(0xC4);
			}
			set
			{
				WriteSingle(0xC4,value);
			}
		}
		
		/// <summary>
		/// Name: TwistLimitDamping
		/// Type: FloatProperty
		/// Offset: 0xC8
		/// Size: 0x04
		/// </summary>
		public float TwistLimitDamping
		{
			get
			{
				return ReadSingle(0xC8);
			}
			set
			{
				WriteSingle(0xC8,value);
			}
		}
		
		/// <summary>
		/// Name: AngularRotationOffset
		/// Type: StructProperty
		/// Offset: 0xCC
		/// Size: 0x0C
		/// </summary>
		public FRotator AngularRotationOffset => ReadStruct<FRotator>(0xCC);
		
		/// <summary>
		/// Name: bAngularBreakable
		/// Type: BoolProperty
		/// Offset: 0xD8
		/// Size: 0x01
		/// </summary>
		public bool bAngularBreakable => (ReadByte(0x00D8) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: AngularBreakThreshold
		/// Type: FloatProperty
		/// Offset: 0xDC
		/// Size: 0x04
		/// </summary>
		public float AngularBreakThreshold
		{
			get
			{
				return ReadSingle(0xDC);
			}
			set
			{
				WriteSingle(0xDC,value);
			}
		}
		
		/// <summary>
		/// Name: bScaleLinearLimits
		/// Type: BoolProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public bool bScaleLinearLimits => (ReadByte(0x00E0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bLinearXPositionDrive
		/// Type: BoolProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public bool bLinearXPositionDrive => (ReadByte(0x00E0) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bLinearXVelocityDrive
		/// Type: BoolProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public bool bLinearXVelocityDrive => (ReadByte(0x00E0) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bLinearYPositionDrive
		/// Type: BoolProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public bool bLinearYPositionDrive => (ReadByte(0x00E0) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bLinearYVelocityDrive
		/// Type: BoolProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public bool bLinearYVelocityDrive => (ReadByte(0x00E0) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bLinearZPositionDrive
		/// Type: BoolProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public bool bLinearZPositionDrive => (ReadByte(0x00E0) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bLinearZVelocityDrive
		/// Type: BoolProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public bool bLinearZVelocityDrive => (ReadByte(0x00E0) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bLinearPositionDrive
		/// Type: BoolProperty
		/// Offset: 0xE0
		/// Size: 0x01
		/// </summary>
		public bool bLinearPositionDrive => (ReadByte(0x00E0) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bLinearVelocityDrive
		/// Type: BoolProperty
		/// Offset: 0xE1
		/// Size: 0x01
		/// </summary>
		public bool bLinearVelocityDrive => (ReadByte(0x00E1) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LinearPositionTarget
		/// Type: StructProperty
		/// Offset: 0xE4
		/// Size: 0x0C
		/// </summary>
		public FVector LinearPositionTarget => ReadStruct<FVector>(0xE4);
		
		/// <summary>
		/// Name: LinearVelocityTarget
		/// Type: StructProperty
		/// Offset: 0xF0
		/// Size: 0x0C
		/// </summary>
		public FVector LinearVelocityTarget => ReadStruct<FVector>(0xF0);
		
		/// <summary>
		/// Name: LinearDriveSpring
		/// Type: FloatProperty
		/// Offset: 0xFC
		/// Size: 0x04
		/// </summary>
		public float LinearDriveSpring
		{
			get
			{
				return ReadSingle(0xFC);
			}
			set
			{
				WriteSingle(0xFC,value);
			}
		}
		
		/// <summary>
		/// Name: LinearDriveDamping
		/// Type: FloatProperty
		/// Offset: 0x100
		/// Size: 0x04
		/// </summary>
		public float LinearDriveDamping
		{
			get
			{
				return ReadSingle(0x100);
			}
			set
			{
				WriteSingle(0x100,value);
			}
		}
		
		/// <summary>
		/// Name: LinearDriveForceLimit
		/// Type: FloatProperty
		/// Offset: 0x104
		/// Size: 0x04
		/// </summary>
		public float LinearDriveForceLimit
		{
			get
			{
				return ReadSingle(0x104);
			}
			set
			{
				WriteSingle(0x104,value);
			}
		}
		
		/// <summary>
		/// Name: bSwingPositionDrive
		/// Type: BoolProperty
		/// Offset: 0x108
		/// Size: 0x01
		/// </summary>
		public bool bSwingPositionDrive => (ReadByte(0x0108) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSwingVelocityDrive
		/// Type: BoolProperty
		/// Offset: 0x108
		/// Size: 0x01
		/// </summary>
		public bool bSwingVelocityDrive => (ReadByte(0x0108) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bTwistPositionDrive
		/// Type: BoolProperty
		/// Offset: 0x108
		/// Size: 0x01
		/// </summary>
		public bool bTwistPositionDrive => (ReadByte(0x0108) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bTwistVelocityDrive
		/// Type: BoolProperty
		/// Offset: 0x108
		/// Size: 0x01
		/// </summary>
		public bool bTwistVelocityDrive => (ReadByte(0x0108) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bAngularSlerpDrive
		/// Type: BoolProperty
		/// Offset: 0x108
		/// Size: 0x01
		/// </summary>
		public bool bAngularSlerpDrive => (ReadByte(0x0108) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bAngularOrientationDrive
		/// Type: BoolProperty
		/// Offset: 0x108
		/// Size: 0x01
		/// </summary>
		public bool bAngularOrientationDrive => (ReadByte(0x0108) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bEnableSwingDrive
		/// Type: BoolProperty
		/// Offset: 0x108
		/// Size: 0x01
		/// </summary>
		public bool bEnableSwingDrive => (ReadByte(0x0108) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bEnableTwistDrive
		/// Type: BoolProperty
		/// Offset: 0x108
		/// Size: 0x01
		/// </summary>
		public bool bEnableTwistDrive => (ReadByte(0x0108) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bAngularVelocityDrive
		/// Type: BoolProperty
		/// Offset: 0x109
		/// Size: 0x01
		/// </summary>
		public bool bAngularVelocityDrive => (ReadByte(0x0109) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: AngularPositionTarget
		/// Type: StructProperty
		/// Offset: 0x110
		/// Size: 0x10
		/// </summary>
		public FQuat AngularPositionTarget => ReadStruct<FQuat>(0x110);
		
		/// <summary>
		/// Name: AngularDriveMode
		/// Type: ByteProperty
		/// Offset: 0x120
		/// Size: 0x01
		/// </summary>
		public byte AngularDriveMode
		{
			get
			{
				return ReadByte(0x120);
			}
			set
			{
				WriteByte(0x120,value);
			}
		}
		
		/// <summary>
		/// Name: AngularOrientationTarget
		/// Type: StructProperty
		/// Offset: 0x124
		/// Size: 0x0C
		/// </summary>
		public FRotator AngularOrientationTarget => ReadStruct<FRotator>(0x124);
		
		/// <summary>
		/// Name: AngularVelocityTarget
		/// Type: StructProperty
		/// Offset: 0x130
		/// Size: 0x0C
		/// </summary>
		public FVector AngularVelocityTarget => ReadStruct<FVector>(0x130);
		
		/// <summary>
		/// Name: AngularDriveSpring
		/// Type: FloatProperty
		/// Offset: 0x13C
		/// Size: 0x04
		/// </summary>
		public float AngularDriveSpring
		{
			get
			{
				return ReadSingle(0x13C);
			}
			set
			{
				WriteSingle(0x13C,value);
			}
		}
		
		/// <summary>
		/// Name: AngularDriveDamping
		/// Type: FloatProperty
		/// Offset: 0x140
		/// Size: 0x04
		/// </summary>
		public float AngularDriveDamping
		{
			get
			{
				return ReadSingle(0x140);
			}
			set
			{
				WriteSingle(0x140,value);
			}
		}
		
		/// <summary>
		/// Name: AngularDriveForceLimit
		/// Type: FloatProperty
		/// Offset: 0x144
		/// Size: 0x04
		/// </summary>
		public float AngularDriveForceLimit
		{
			get
			{
				return ReadSingle(0x144);
			}
			set
			{
				WriteSingle(0x144,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimLinkableElement:
	/// Size: 0x30
	/// Properties: 9
	/// </summary>
	public class FAnimLinkableElement:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: LinkedMontage
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UAnimMontage LinkedMontage => ReadUObject<UAnimMontage>(0x08);
		
		/// <summary>
		/// Name: slotIndex
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int slotIndex
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: SegmentIndex
		/// Type: IntProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public int SegmentIndex
		{
			get
			{
				return ReadInt32(0x14);
			}
			set
			{
				WriteInt32(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: LinkMethod
		/// Type: ByteProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public byte LinkMethod
		{
			get
			{
				return ReadByte(0x18);
			}
			set
			{
				WriteByte(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: CachedLinkMethod
		/// Type: ByteProperty
		/// Offset: 0x19
		/// Size: 0x01
		/// </summary>
		public byte CachedLinkMethod
		{
			get
			{
				return ReadByte(0x19);
			}
			set
			{
				WriteByte(0x19,value);
			}
		}
		
		/// <summary>
		/// Name: SegmentBeginTime
		/// Type: FloatProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public float SegmentBeginTime
		{
			get
			{
				return ReadSingle(0x1C);
			}
			set
			{
				WriteSingle(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: SegmentLength
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float SegmentLength
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: LinkValue
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float LinkValue
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: LinkedSequence
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UAnimSequenceBase LinkedSequence => ReadUObject<UAnimSequenceBase>(0x28);
		
	}


	/// <summary>
	/// FMarkerSyncData:
	/// Size: 0x20
	/// Properties: 1
	/// </summary>
	public class FMarkerSyncData:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: AuthoredSyncMarkers
		/// Type: TArray<FAnimSyncMarker>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FAnimSyncMarker> AuthoredSyncMarkers => new TArray<FAnimSyncMarker>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FAnimSyncMarker:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FAnimSyncMarker:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: MarkerName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNotifyTrack:
	/// Size: 0x38
	/// Properties: 2
	/// </summary>
	public class FAnimNotifyTrack:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: TrackName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: TrackColor
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FLinearColor TrackColor => ReadStruct<FLinearColor>(0x08);
		
	}


	/// <summary>
	/// FAnimNotifyEvent:FAnimLinkableElement
	/// Size: 0xA8
	/// Properties: 16
	/// </summary>
	public class FAnimNotifyEvent:FAnimLinkableElement
	{
		public override int ObjectSize => 168;
		/// <summary>
		/// Name: DisplayTime
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float DisplayTime
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: TriggerTimeOffset
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float TriggerTimeOffset
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: EndTriggerTimeOffset
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float EndTriggerTimeOffset
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: TriggerWeightThreshold
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float TriggerWeightThreshold
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: NotifyName
		/// Type: NameProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Notify
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public UAnimNotify Notify => ReadUObject<UAnimNotify>(0x48);
		
		/// <summary>
		/// Name: NotifyStateClass
		/// Type: ObjectProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public UAnimNotifyState NotifyStateClass => ReadUObject<UAnimNotifyState>(0x50);
		
		/// <summary>
		/// Name: Duration
		/// Type: FloatProperty
		/// Offset: 0x58
		/// Size: 0x04
		/// </summary>
		public float Duration
		{
			get
			{
				return ReadSingle(0x58);
			}
			set
			{
				WriteSingle(0x58,value);
			}
		}
		
		/// <summary>
		/// Name: EndLink
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x30
		/// </summary>
		public FAnimLinkableElement EndLink => ReadStruct<FAnimLinkableElement>(0x60);
		
		/// <summary>
		/// Name: bConvertedFromBranchingPoint
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool bConvertedFromBranchingPoint
		{
			get
			{
				return ReadBool(0x90);
			}
			set
			{
				WriteBool(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: MontageTickType
		/// Type: ByteProperty
		/// Offset: 0x91
		/// Size: 0x01
		/// </summary>
		public byte MontageTickType
		{
			get
			{
				return ReadByte(0x91);
			}
			set
			{
				WriteByte(0x91,value);
			}
		}
		
		/// <summary>
		/// Name: NotifyTriggerChance
		/// Type: FloatProperty
		/// Offset: 0x94
		/// Size: 0x04
		/// </summary>
		public float NotifyTriggerChance
		{
			get
			{
				return ReadSingle(0x94);
			}
			set
			{
				WriteSingle(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: NotifyFilterType
		/// Type: ByteProperty
		/// Offset: 0x98
		/// Size: 0x01
		/// </summary>
		public byte NotifyFilterType
		{
			get
			{
				return ReadByte(0x98);
			}
			set
			{
				WriteByte(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: NotifyFilterLOD
		/// Type: IntProperty
		/// Offset: 0x9C
		/// Size: 0x04
		/// </summary>
		public int NotifyFilterLOD
		{
			get
			{
				return ReadInt32(0x9C);
			}
			set
			{
				WriteInt32(0x9C,value);
			}
		}
		
		/// <summary>
		/// Name: bTriggerOnDedicatedServer
		/// Type: BoolProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public bool bTriggerOnDedicatedServer
		{
			get
			{
				return ReadBool(0xA0);
			}
			set
			{
				WriteBool(0xA0,value);
			}
		}
		
		/// <summary>
		/// Name: TrackIndex
		/// Type: IntProperty
		/// Offset: 0xA4
		/// Size: 0x04
		/// </summary>
		public int TrackIndex
		{
			get
			{
				return ReadInt32(0xA4);
			}
			set
			{
				WriteInt32(0xA4,value);
			}
		}
		
	}


	/// <summary>
	/// FRawCurveTracks:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FRawCurveTracks:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: FloatCurves
		/// Type: TArray<FFloatCurve>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x90
		/// </summary>
		public TArray<FFloatCurve> FloatCurves => new TArray<FFloatCurve>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FFloatCurve:FAnimCurveBase
	/// Size: 0x90
	/// Properties: 1
	/// </summary>
	public class FFloatCurve:FAnimCurveBase
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: FloatCurve
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x78
		/// </summary>
		public FRichCurve FloatCurve => ReadStruct<FRichCurve>(0x18);
		
	}


	/// <summary>
	/// FAnimCurveBase:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FAnimCurveBase:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: LastObservedName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CurveTypeFlags
		/// Type: IntProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public int CurveTypeFlags
		{
			get
			{
				return ReadInt32(0x14);
			}
			set
			{
				WriteInt32(0x14,value);
			}
		}
		
	}


	/// <summary>
	/// FTransformCurve:FAnimCurveBase
	/// Size: 0x498
	/// Properties: 3
	/// </summary>
	public class FTransformCurve:FAnimCurveBase
	{
		public override int ObjectSize => 1176;
		/// <summary>
		/// Name: TranslationCurve
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x180
		/// </summary>
		public FVectorCurve TranslationCurve => ReadStruct<FVectorCurve>(0x18);
		
		/// <summary>
		/// Name: RotationCurve
		/// Type: StructProperty
		/// Offset: 0x198
		/// Size: 0x180
		/// </summary>
		public FVectorCurve RotationCurve => ReadStruct<FVectorCurve>(0x198);
		
		/// <summary>
		/// Name: ScaleCurve
		/// Type: StructProperty
		/// Offset: 0x318
		/// Size: 0x180
		/// </summary>
		public FVectorCurve ScaleCurve => ReadStruct<FVectorCurve>(0x318);
		
	}


	/// <summary>
	/// FVectorCurve:FAnimCurveBase
	/// Size: 0x180
	/// Properties: 1
	/// </summary>
	public class FVectorCurve:FAnimCurveBase
	{
		public override int ObjectSize => 384;
		/// <summary>
		/// Name: FloatCurves
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x78
		/// </summary>
		public FRichCurve FloatCurves => ReadStruct<FRichCurve>(0x18);
		
	}


	/// <summary>
	/// FSingleAnimationPlayData:
	/// Size: 0x20
	/// Properties: 6
	/// </summary>
	public class FSingleAnimationPlayData:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: AnimToPlay
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UAnimationAsset AnimToPlay => ReadUObject<UAnimationAsset>(0x00);
		
		/// <summary>
		/// Name: VertexAnimToPlay
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UVertexAnimation VertexAnimToPlay => ReadUObject<UVertexAnimation>(0x08);
		
		/// <summary>
		/// Name: bSavedLooping
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bSavedLooping => (ReadByte(0x0010) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSavedPlaying
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bSavedPlaying => (ReadByte(0x0010) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: SavedPosition
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float SavedPosition
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: SavedPlayRate
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float SavedPlayRate
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FSkeletalMeshComponentClothTickFunction:FTickFunction
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class FSkeletalMeshComponentClothTickFunction:FTickFunction
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// FSkeletalMeshComponentPostPhysicsTickFunction:FTickFunction
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class FSkeletalMeshComponentPostPhysicsTickFunction:FTickFunction
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// FNavAvoidanceMask:
	/// Size: 0x04
	/// Properties: 32
	/// </summary>
	public class FNavAvoidanceMask:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: bGroup0
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bGroup0 => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bGroup1
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bGroup1 => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bGroup2
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bGroup2 => (ReadByte(0x0000) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bGroup3
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bGroup3 => (ReadByte(0x0000) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bGroup4
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bGroup4 => (ReadByte(0x0000) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bGroup5
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bGroup5 => (ReadByte(0x0000) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bGroup6
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bGroup6 => (ReadByte(0x0000) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bGroup7
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bGroup7 => (ReadByte(0x0000) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bGroup8
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bGroup8 => (ReadByte(0x0001) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bGroup9
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bGroup9 => (ReadByte(0x0001) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bGroup10
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bGroup10 => (ReadByte(0x0001) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bGroup11
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bGroup11 => (ReadByte(0x0001) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bGroup12
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bGroup12 => (ReadByte(0x0001) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bGroup13
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bGroup13 => (ReadByte(0x0001) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bGroup14
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bGroup14 => (ReadByte(0x0001) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bGroup15
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bGroup15 => (ReadByte(0x0001) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bGroup16
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bGroup16 => (ReadByte(0x0002) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bGroup17
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bGroup17 => (ReadByte(0x0002) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bGroup18
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bGroup18 => (ReadByte(0x0002) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bGroup19
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bGroup19 => (ReadByte(0x0002) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bGroup20
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bGroup20 => (ReadByte(0x0002) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bGroup21
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bGroup21 => (ReadByte(0x0002) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bGroup22
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bGroup22 => (ReadByte(0x0002) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bGroup23
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bGroup23 => (ReadByte(0x0002) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bGroup24
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bGroup24 => (ReadByte(0x0003) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bGroup25
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bGroup25 => (ReadByte(0x0003) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bGroup26
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bGroup26 => (ReadByte(0x0003) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bGroup27
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bGroup27 => (ReadByte(0x0003) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bGroup28
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bGroup28 => (ReadByte(0x0003) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bGroup29
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bGroup29 => (ReadByte(0x0003) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bGroup30
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bGroup30 => (ReadByte(0x0003) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bGroup31
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bGroup31 => (ReadByte(0x0003) & 0x80) == 0x80;
		
	}


	/// <summary>
	/// FCharacterMovementComponentPostPhysicsTickFunction:FTickFunction
	/// Size: 0x60
	/// Properties: 0
	/// </summary>
	public class FCharacterMovementComponentPostPhysicsTickFunction:FTickFunction
	{
		public override int ObjectSize => 96;
	}


	/// <summary>
	/// FFindFloorResult:
	/// Size: 0x98
	/// Properties: 6
	/// </summary>
	public class FFindFloorResult:MemoryObject
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: bBlockingHit
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bBlockingHit => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bWalkableFloor
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bWalkableFloor => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bLineTrace
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bLineTrace => (ReadByte(0x0000) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: FloorDist
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float FloorDist
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: LineDist
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float LineDist
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: HitResult
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x88
		/// </summary>
		public FHitResult HitResult => ReadStruct<FHitResult>(0x10);
		
	}


	/// <summary>
	/// FVehicleInputRate:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FVehicleInputRate:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: RiseRate
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float RiseRate
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: FallRate
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float FallRate
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FReplicatedVehicleState:
	/// Size: 0x14
	/// Properties: 5
	/// </summary>
	public class FReplicatedVehicleState:MemoryObject
	{
		public override int ObjectSize => 20;
		/// <summary>
		/// Name: SteeringInput
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float SteeringInput
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ThrottleInput
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float ThrottleInput
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: BrakeInput
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float BrakeInput
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: HandbrakeInput
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float HandbrakeInput
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentGear
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int CurrentGear
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FWheelSetup:
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FWheelSetup:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: WheelClass
		/// Type: ClassProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: BoneName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AdditionalOffset
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x0C
		/// </summary>
		public FVector AdditionalOffset => ReadStruct<FVector>(0x10);
		
	}


	/// <summary>
	/// FVehicleTransmissionData:
	/// Size: 0x30
	/// Properties: 8
	/// </summary>
	public class FVehicleTransmissionData:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: bUseGearAutoBox
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bUseGearAutoBox
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: GearSwitchTime
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float GearSwitchTime
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: GearAutoBoxLatency
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float GearAutoBoxLatency
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: FinalRatio
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float FinalRatio
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: ForwardGears
		/// Type: TArray<FVehicleGearData>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVehicleGearData> ForwardGears => new TArray<FVehicleGearData>(BaseAddress+0x10);
		
		/// <summary>
		/// Name: ReverseGearRatio
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float ReverseGearRatio
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: NeutralGearUpRatio
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float NeutralGearUpRatio
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: ClutchStrength
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float ClutchStrength
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// FVehicleGearData:
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FVehicleGearData:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: Ratio
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Ratio
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: DownRatio
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float DownRatio
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: UpRatio
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float UpRatio
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FVehicleEngineData:
	/// Size: 0x98
	/// Properties: 6
	/// </summary>
	public class FVehicleEngineData:MemoryObject
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: TorqueCurve
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x80
		/// </summary>
		public FRuntimeFloatCurve TorqueCurve => ReadStruct<FRuntimeFloatCurve>(0x00);
		
		/// <summary>
		/// Name: MaxRPM
		/// Type: FloatProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public float MaxRPM
		{
			get
			{
				return ReadSingle(0x80);
			}
			set
			{
				WriteSingle(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: MOI
		/// Type: FloatProperty
		/// Offset: 0x84
		/// Size: 0x04
		/// </summary>
		public float MOI
		{
			get
			{
				return ReadSingle(0x84);
			}
			set
			{
				WriteSingle(0x84,value);
			}
		}
		
		/// <summary>
		/// Name: DampingRateFullThrottle
		/// Type: FloatProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public float DampingRateFullThrottle
		{
			get
			{
				return ReadSingle(0x88);
			}
			set
			{
				WriteSingle(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: DampingRateZeroThrottleClutchEngaged
		/// Type: FloatProperty
		/// Offset: 0x8C
		/// Size: 0x04
		/// </summary>
		public float DampingRateZeroThrottleClutchEngaged
		{
			get
			{
				return ReadSingle(0x8C);
			}
			set
			{
				WriteSingle(0x8C,value);
			}
		}
		
		/// <summary>
		/// Name: DampingRateZeroThrottleClutchDisengaged
		/// Type: FloatProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public float DampingRateZeroThrottleClutchDisengaged
		{
			get
			{
				return ReadSingle(0x90);
			}
			set
			{
				WriteSingle(0x90,value);
			}
		}
		
	}


	/// <summary>
	/// FVehicleDifferential4WData:
	/// Size: 0x1C
	/// Properties: 7
	/// </summary>
	public class FVehicleDifferential4WData:MemoryObject
	{
		public override int ObjectSize => 28;
		/// <summary>
		/// Name: DifferentialType
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte DifferentialType
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: FrontRearSplit
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float FrontRearSplit
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: FrontLeftRightSplit
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float FrontLeftRightSplit
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: RearLeftRightSplit
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float RearLeftRightSplit
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: CentreBias
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float CentreBias
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: FrontBias
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float FrontBias
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: RearBias
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float RearBias
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FAtmospherePrecomputeParameters:
	/// Size: 0x2C
	/// Properties: 11
	/// </summary>
	public class FAtmospherePrecomputeParameters:MemoryObject
	{
		public override int ObjectSize => 44;
		/// <summary>
		/// Name: DensityHeight
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float DensityHeight
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: DecayHeight
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float DecayHeight
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: MaxScatteringOrder
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int MaxScatteringOrder
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: TransmittanceTexWidth
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int TransmittanceTexWidth
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: TransmittanceTexHeight
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int TransmittanceTexHeight
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: IrradianceTexWidth
		/// Type: IntProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public int IrradianceTexWidth
		{
			get
			{
				return ReadInt32(0x14);
			}
			set
			{
				WriteInt32(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: IrradianceTexHeight
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int IrradianceTexHeight
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: InscatterAltitudeSampleNum
		/// Type: IntProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public int InscatterAltitudeSampleNum
		{
			get
			{
				return ReadInt32(0x1C);
			}
			set
			{
				WriteInt32(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: InscatterMuNum
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int InscatterMuNum
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: InscatterMuSNum
		/// Type: IntProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public int InscatterMuSNum
		{
			get
			{
				return ReadInt32(0x24);
			}
			set
			{
				WriteInt32(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: InscatterNuNum
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int InscatterNuNum
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// FAttenuationSettings:
	/// Size: 0xF8
	/// Properties: 35
	/// </summary>
	public class FAttenuationSettings:MemoryObject
	{
		public override int ObjectSize => 248;
		/// <summary>
		/// Name: bAttenuate
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bAttenuate => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSpatialize
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bSpatialize => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bAttenuateWithLPF
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bAttenuateWithLPF => (ReadByte(0x0000) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bEnableListenerFocus
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bEnableListenerFocus => (ReadByte(0x0000) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bEnableOcclusion
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bEnableOcclusion => (ReadByte(0x0000) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bUseComplexCollisionForOcclusion
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bUseComplexCollisionForOcclusion => (ReadByte(0x0000) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: DistanceAlgorithm
		/// Type: ByteProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public byte DistanceAlgorithm
		{
			get
			{
				return ReadByte(0x04);
			}
			set
			{
				WriteByte(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: CustomAttenuationCurve
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x80
		/// </summary>
		public FRuntimeFloatCurve CustomAttenuationCurve => ReadStruct<FRuntimeFloatCurve>(0x08);
		
		/// <summary>
		/// Name: DistanceType
		/// Type: ByteProperty
		/// Offset: 0x88
		/// Size: 0x01
		/// </summary>
		public byte DistanceType
		{
			get
			{
				return ReadByte(0x88);
			}
			set
			{
				WriteByte(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: AttenuationShape
		/// Type: ByteProperty
		/// Offset: 0x89
		/// Size: 0x01
		/// </summary>
		public byte AttenuationShape
		{
			get
			{
				return ReadByte(0x89);
			}
			set
			{
				WriteByte(0x89,value);
			}
		}
		
		/// <summary>
		/// Name: dBAttenuationAtMax
		/// Type: FloatProperty
		/// Offset: 0x8C
		/// Size: 0x04
		/// </summary>
		public float dBAttenuationAtMax
		{
			get
			{
				return ReadSingle(0x8C);
			}
			set
			{
				WriteSingle(0x8C,value);
			}
		}
		
		/// <summary>
		/// Name: OmniRadius
		/// Type: FloatProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public float OmniRadius
		{
			get
			{
				return ReadSingle(0x90);
			}
			set
			{
				WriteSingle(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: StereoSpread
		/// Type: FloatProperty
		/// Offset: 0x94
		/// Size: 0x04
		/// </summary>
		public float StereoSpread
		{
			get
			{
				return ReadSingle(0x94);
			}
			set
			{
				WriteSingle(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: SpatializationAlgorithm
		/// Type: ByteProperty
		/// Offset: 0x98
		/// Size: 0x01
		/// </summary>
		public byte SpatializationAlgorithm
		{
			get
			{
				return ReadByte(0x98);
			}
			set
			{
				WriteByte(0x98,value);
			}
		}
		
		/// <summary>
		/// Name: RadiusMin
		/// Type: FloatProperty
		/// Offset: 0x9C
		/// Size: 0x04
		/// </summary>
		public float RadiusMin
		{
			get
			{
				return ReadSingle(0x9C);
			}
			set
			{
				WriteSingle(0x9C,value);
			}
		}
		
		/// <summary>
		/// Name: RadiusMax
		/// Type: FloatProperty
		/// Offset: 0xA0
		/// Size: 0x04
		/// </summary>
		public float RadiusMax
		{
			get
			{
				return ReadSingle(0xA0);
			}
			set
			{
				WriteSingle(0xA0,value);
			}
		}
		
		/// <summary>
		/// Name: AttenuationShapeExtents
		/// Type: StructProperty
		/// Offset: 0xA4
		/// Size: 0x0C
		/// </summary>
		public FVector AttenuationShapeExtents => ReadStruct<FVector>(0xA4);
		
		/// <summary>
		/// Name: ConeOffset
		/// Type: FloatProperty
		/// Offset: 0xB0
		/// Size: 0x04
		/// </summary>
		public float ConeOffset
		{
			get
			{
				return ReadSingle(0xB0);
			}
			set
			{
				WriteSingle(0xB0,value);
			}
		}
		
		/// <summary>
		/// Name: FalloffDistance
		/// Type: FloatProperty
		/// Offset: 0xB4
		/// Size: 0x04
		/// </summary>
		public float FalloffDistance
		{
			get
			{
				return ReadSingle(0xB4);
			}
			set
			{
				WriteSingle(0xB4,value);
			}
		}
		
		/// <summary>
		/// Name: LPFRadiusMin
		/// Type: FloatProperty
		/// Offset: 0xB8
		/// Size: 0x04
		/// </summary>
		public float LPFRadiusMin
		{
			get
			{
				return ReadSingle(0xB8);
			}
			set
			{
				WriteSingle(0xB8,value);
			}
		}
		
		/// <summary>
		/// Name: LPFRadiusMax
		/// Type: FloatProperty
		/// Offset: 0xBC
		/// Size: 0x04
		/// </summary>
		public float LPFRadiusMax
		{
			get
			{
				return ReadSingle(0xBC);
			}
			set
			{
				WriteSingle(0xBC,value);
			}
		}
		
		/// <summary>
		/// Name: LPFFrequencyAtMin
		/// Type: FloatProperty
		/// Offset: 0xC0
		/// Size: 0x04
		/// </summary>
		public float LPFFrequencyAtMin
		{
			get
			{
				return ReadSingle(0xC0);
			}
			set
			{
				WriteSingle(0xC0,value);
			}
		}
		
		/// <summary>
		/// Name: LPFFrequencyAtMax
		/// Type: FloatProperty
		/// Offset: 0xC4
		/// Size: 0x04
		/// </summary>
		public float LPFFrequencyAtMax
		{
			get
			{
				return ReadSingle(0xC4);
			}
			set
			{
				WriteSingle(0xC4,value);
			}
		}
		
		/// <summary>
		/// Name: FocusAzimuth
		/// Type: FloatProperty
		/// Offset: 0xC8
		/// Size: 0x04
		/// </summary>
		public float FocusAzimuth
		{
			get
			{
				return ReadSingle(0xC8);
			}
			set
			{
				WriteSingle(0xC8,value);
			}
		}
		
		/// <summary>
		/// Name: NonFocusAzimuth
		/// Type: FloatProperty
		/// Offset: 0xCC
		/// Size: 0x04
		/// </summary>
		public float NonFocusAzimuth
		{
			get
			{
				return ReadSingle(0xCC);
			}
			set
			{
				WriteSingle(0xCC,value);
			}
		}
		
		/// <summary>
		/// Name: FocusDistanceScale
		/// Type: FloatProperty
		/// Offset: 0xD0
		/// Size: 0x04
		/// </summary>
		public float FocusDistanceScale
		{
			get
			{
				return ReadSingle(0xD0);
			}
			set
			{
				WriteSingle(0xD0,value);
			}
		}
		
		/// <summary>
		/// Name: NonFocusDistanceScale
		/// Type: FloatProperty
		/// Offset: 0xD4
		/// Size: 0x04
		/// </summary>
		public float NonFocusDistanceScale
		{
			get
			{
				return ReadSingle(0xD4);
			}
			set
			{
				WriteSingle(0xD4,value);
			}
		}
		
		/// <summary>
		/// Name: FocusPriorityScale
		/// Type: FloatProperty
		/// Offset: 0xD8
		/// Size: 0x04
		/// </summary>
		public float FocusPriorityScale
		{
			get
			{
				return ReadSingle(0xD8);
			}
			set
			{
				WriteSingle(0xD8,value);
			}
		}
		
		/// <summary>
		/// Name: NonFocusPriorityScale
		/// Type: FloatProperty
		/// Offset: 0xDC
		/// Size: 0x04
		/// </summary>
		public float NonFocusPriorityScale
		{
			get
			{
				return ReadSingle(0xDC);
			}
			set
			{
				WriteSingle(0xDC,value);
			}
		}
		
		/// <summary>
		/// Name: FocusVolumeAttenuation
		/// Type: FloatProperty
		/// Offset: 0xE0
		/// Size: 0x04
		/// </summary>
		public float FocusVolumeAttenuation
		{
			get
			{
				return ReadSingle(0xE0);
			}
			set
			{
				WriteSingle(0xE0,value);
			}
		}
		
		/// <summary>
		/// Name: NonFocusVolumeAttenuation
		/// Type: FloatProperty
		/// Offset: 0xE4
		/// Size: 0x04
		/// </summary>
		public float NonFocusVolumeAttenuation
		{
			get
			{
				return ReadSingle(0xE4);
			}
			set
			{
				WriteSingle(0xE4,value);
			}
		}
		
		/// <summary>
		/// Name: OcclusionTraceChannel
		/// Type: ByteProperty
		/// Offset: 0xE8
		/// Size: 0x01
		/// </summary>
		public byte OcclusionTraceChannel
		{
			get
			{
				return ReadByte(0xE8);
			}
			set
			{
				WriteByte(0xE8,value);
			}
		}
		
		/// <summary>
		/// Name: OcclusionLowPassFilterFrequency
		/// Type: FloatProperty
		/// Offset: 0xEC
		/// Size: 0x04
		/// </summary>
		public float OcclusionLowPassFilterFrequency
		{
			get
			{
				return ReadSingle(0xEC);
			}
			set
			{
				WriteSingle(0xEC,value);
			}
		}
		
		/// <summary>
		/// Name: OcclusionVolumeAttenuation
		/// Type: FloatProperty
		/// Offset: 0xF0
		/// Size: 0x04
		/// </summary>
		public float OcclusionVolumeAttenuation
		{
			get
			{
				return ReadSingle(0xF0);
			}
			set
			{
				WriteSingle(0xF0,value);
			}
		}
		
		/// <summary>
		/// Name: OcclusionInterpolationTime
		/// Type: FloatProperty
		/// Offset: 0xF4
		/// Size: 0x04
		/// </summary>
		public float OcclusionInterpolationTime
		{
			get
			{
				return ReadSingle(0xF4);
			}
			set
			{
				WriteSingle(0xF4,value);
			}
		}
		
	}


	/// <summary>
	/// FAudioComponentParam:
	/// Size: 0x20
	/// Properties: 5
	/// </summary>
	public class FAudioComponentParam:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: ParamName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: FloatParam
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float FloatParam
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: BoolParam
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool BoolParam
		{
			get
			{
				return ReadBool(0x0C);
			}
			set
			{
				WriteBool(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: IntParam
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int IntParam
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: SoundWaveParam
		/// Type: ObjectProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		public USoundWave SoundWaveParam => ReadUObject<USoundWave>(0x18);
		
	}


	/// <summary>
	/// FEngineShowFlagsSetting:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FEngineShowFlagsSetting:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: ShowFlagName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString ShowFlagName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Enabled
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool Enabled
		{
			get
			{
				return ReadBool(0x10);
			}
			set
			{
				WriteBool(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FImprintQualitySettings:
	/// Size: 0x10
	/// Properties: 4
	/// </summary>
	public class FImprintQualitySettings:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Enabled
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool Enabled
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ImprintTextureWidth
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int ImprintTextureWidth
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: ImprintTextureHeight
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int ImprintTextureHeight
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: GridScale
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int GridScale
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FBatchedPoint:
	/// Size: 0x28
	/// Properties: 5
	/// </summary>
	public class FBatchedPoint:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Position
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Position => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: Color
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x10
		/// </summary>
		public FLinearColor Color => ReadStruct<FLinearColor>(0x0C);
		
		/// <summary>
		/// Name: PointSize
		/// Type: FloatProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public float PointSize
		{
			get
			{
				return ReadSingle(0x1C);
			}
			set
			{
				WriteSingle(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: RemainingLifeTime
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float RemainingLifeTime
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: DepthPriority
		/// Type: ByteProperty
		/// Offset: 0x24
		/// Size: 0x01
		/// </summary>
		public byte DepthPriority
		{
			get
			{
				return ReadByte(0x24);
			}
			set
			{
				WriteByte(0x24,value);
			}
		}
		
	}


	/// <summary>
	/// FBatchedLine:
	/// Size: 0x34
	/// Properties: 6
	/// </summary>
	public class FBatchedLine:MemoryObject
	{
		public override int ObjectSize => 52;
		/// <summary>
		/// Name: Start
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Start => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: End
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector End => ReadStruct<FVector>(0x0C);
		
		/// <summary>
		/// Name: Color
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FLinearColor Color => ReadStruct<FLinearColor>(0x18);
		
		/// <summary>
		/// Name: Thickness
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float Thickness
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: RemainingLifeTime
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float RemainingLifeTime
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: DepthPriority
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte DepthPriority
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
	}


	/// <summary>
	/// FMaterialSpriteElement:
	/// Size: 0x28
	/// Properties: 6
	/// </summary>
	public class FMaterialSpriteElement:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Material
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface Material => ReadUObject<UMaterialInterface>(0x00);
		
		/// <summary>
		/// Name: DistanceToOpacityCurve
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UCurveFloat DistanceToOpacityCurve => ReadUObject<UCurveFloat>(0x08);
		
		/// <summary>
		/// Name: bSizeIsInScreenSpace
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bSizeIsInScreenSpace => (ReadByte(0x0010) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: BaseSizeX
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float BaseSizeX
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: BaseSizeY
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float BaseSizeY
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: DistanceToSizeCurve
		/// Type: ObjectProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public UCurveFloat DistanceToSizeCurve => ReadUObject<UCurveFloat>(0x20);
		
	}


	/// <summary>
	/// FStreamingTextureBuildInfo:
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FStreamingTextureBuildInfo:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: PackedRelativeBox
		/// Type: UInt32Property
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: TextureLevelIndex
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int TextureLevelIndex
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: TexelFactor
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float TexelFactor
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FStreamingTexturePrimitiveInfo:
	/// Size: 0x28
	/// Properties: 3
	/// </summary>
	public class FStreamingTexturePrimitiveInfo:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Texture
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UTexture Texture => ReadUObject<UTexture>(0x00);
		
		/// <summary>
		/// Name: Bounds
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x1C
		/// </summary>
		public FBoxSphereBounds Bounds => ReadStruct<FBoxSphereBounds>(0x08);
		
		/// <summary>
		/// Name: TexelFactor
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float TexelFactor
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
	}


	/// <summary>
	/// FStaticMeshComponentLODInfo:
	/// Size: 0x98
	/// Properties: 1
	/// </summary>
	public class FStaticMeshComponentLODInfo:MemoryObject
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: PaintedVertices
		/// Type: TArray<FPaintedVertex>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x14
		/// </summary>
		public TArray<FPaintedVertex> PaintedVertices => new TArray<FPaintedVertex>(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FPaintedVertex:
	/// Size: 0x14
	/// Properties: 3
	/// </summary>
	public class FPaintedVertex:MemoryObject
	{
		public override int ObjectSize => 20;
		/// <summary>
		/// Name: Position
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Position => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: Normal
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public FPackedNormal Normal => ReadStruct<FPackedNormal>(0x0C);
		
		/// <summary>
		/// Name: Color
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public FColor Color => ReadStruct<FColor>(0x10);
		
	}


	/// <summary>
	/// FInstancedStaticMeshMappingInfo:
	/// Size: 0x08
	/// Properties: 0
	/// </summary>
	public class FInstancedStaticMeshMappingInfo:MemoryObject
	{
		public override int ObjectSize => 8;
	}


	/// <summary>
	/// FInstancedStaticMeshInstanceData:
	/// Size: 0x50
	/// Properties: 3
	/// </summary>
	public class FInstancedStaticMeshInstanceData:MemoryObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: Transform
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x40
		/// </summary>
		public FMatrix Transform => ReadStruct<FMatrix>(0x00);
		
		/// <summary>
		/// Name: LightmapUVBias
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public FVector2D LightmapUVBias => ReadStruct<FVector2D>(0x40);
		
		/// <summary>
		/// Name: ShadowmapUVBias
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public FVector2D ShadowmapUVBias => ReadStruct<FVector2D>(0x48);
		
	}


	/// <summary>
	/// FClusterNode:
	/// Size: 0x28
	/// Properties: 6
	/// </summary>
	public class FClusterNode:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: BoundMin
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector BoundMin => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: FirstChild
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int FirstChild
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: BoundMax
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x0C
		/// </summary>
		public FVector BoundMax => ReadStruct<FVector>(0x10);
		
		/// <summary>
		/// Name: LastChild
		/// Type: IntProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public int LastChild
		{
			get
			{
				return ReadInt32(0x1C);
			}
			set
			{
				WriteInt32(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: FirstInstance
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int FirstInstance
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: LastInstance
		/// Type: IntProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public int LastInstance
		{
			get
			{
				return ReadInt32(0x24);
			}
			set
			{
				WriteInt32(0x24,value);
			}
		}
		
	}


	/// <summary>
	/// FSplineMeshParams:
	/// Size: 0x58
	/// Properties: 10
	/// </summary>
	public class FSplineMeshParams:MemoryObject
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: StartPos
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector StartPos => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: StartTangent
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector StartTangent => ReadStruct<FVector>(0x0C);
		
		/// <summary>
		/// Name: StartScale
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		public FVector2D StartScale => ReadStruct<FVector2D>(0x18);
		
		/// <summary>
		/// Name: StartRoll
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float StartRoll
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: StartOffset
		/// Type: StructProperty
		/// Offset: 0x24
		/// Size: 0x08
		/// </summary>
		public FVector2D StartOffset => ReadStruct<FVector2D>(0x24);
		
		/// <summary>
		/// Name: EndPos
		/// Type: StructProperty
		/// Offset: 0x2C
		/// Size: 0x0C
		/// </summary>
		public FVector EndPos => ReadStruct<FVector>(0x2C);
		
		/// <summary>
		/// Name: EndTangent
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x0C
		/// </summary>
		public FVector EndTangent => ReadStruct<FVector>(0x38);
		
		/// <summary>
		/// Name: EndScale
		/// Type: StructProperty
		/// Offset: 0x44
		/// Size: 0x08
		/// </summary>
		public FVector2D EndScale => ReadStruct<FVector2D>(0x44);
		
		/// <summary>
		/// Name: EndRoll
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float EndRoll
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
		/// <summary>
		/// Name: EndOffset
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x08
		/// </summary>
		public FVector2D EndOffset => ReadStruct<FVector2D>(0x50);
		
	}


	/// <summary>
	/// FLightmassMaterialInterfaceSettings:
	/// Size: 0x14
	/// Properties: 8
	/// </summary>
	public class FLightmassMaterialInterfaceSettings:MemoryObject
	{
		public override int ObjectSize => 20;
		/// <summary>
		/// Name: bCastShadowAsMasked
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bCastShadowAsMasked => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: EmissiveBoost
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float EmissiveBoost
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: DiffuseBoost
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float DiffuseBoost
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: ExportResolutionScale
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float ExportResolutionScale
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: bOverrideCastShadowAsMasked
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bOverrideCastShadowAsMasked => (ReadByte(0x0010) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverrideEmissiveBoost
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bOverrideEmissiveBoost => (ReadByte(0x0010) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverrideDiffuseBoost
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bOverrideDiffuseBoost => (ReadByte(0x0010) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverrideExportResolutionScale
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bOverrideExportResolutionScale => (ReadByte(0x0010) & 0x08) == 0x08;
		
	}


	/// <summary>
	/// FMaterialRelevance:
	/// Size: 0x08
	/// Properties: 10
	/// </summary>
	public class FMaterialRelevance:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: bOpaque
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOpaque => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bMasked
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bMasked => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bDistortion
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bDistortion => (ReadByte(0x0000) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bSeparateTranslucency
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bSeparateTranslucency => (ReadByte(0x0000) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bMobileSeparateTranslucency
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bMobileSeparateTranslucency => (ReadByte(0x0000) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bNormalTranslucency
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bNormalTranslucency => (ReadByte(0x0000) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bDisableDepthTest
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bDisableDepthTest => (ReadByte(0x0000) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOutputsVelocityInBasePass
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOutputsVelocityInBasePass => (ReadByte(0x0000) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bUsesGlobalDistanceField
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bUsesGlobalDistanceField => (ReadByte(0x0001) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ShadingModelMask
		/// Type: UInt16Property
		/// Offset: 0x04
		/// Size: 0x02
		/// </summary>
		public ushort ShadingModelMask
		{
			get
			{
				return ReadUInt16(0x04);
			}
			set
			{
				WriteUInt16(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FNamedEmitterMaterial:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FNamedEmitterMaterial:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Material
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface Material => ReadUObject<UMaterialInterface>(0x08);
		
	}


	/// <summary>
	/// FLODSoloTrack:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FLODSoloTrack:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: SoloEnableSetting
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FParticleSystemLOD:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FParticleSystemLOD:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FParticleBurst:
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FParticleBurst:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: count
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int count
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: CountLow
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int CountLow
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FParticleSysParam:
	/// Size: 0x80
	/// Properties: 9
	/// </summary>
	public class FParticleSysParam:MemoryObject
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ParamType
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte ParamType
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: Scalar
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float Scalar
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: Scalar_Low
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float Scalar_Low
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: Vector
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x0C
		/// </summary>
		public FVector Vector => ReadStruct<FVector>(0x14);
		
		/// <summary>
		/// Name: Vector_Low
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x0C
		/// </summary>
		public FVector Vector_Low => ReadStruct<FVector>(0x20);
		
		/// <summary>
		/// Name: Color
		/// Type: StructProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public FColor Color => ReadStruct<FColor>(0x2C);
		
		/// <summary>
		/// Name: Actor
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public AActor Actor => ReadUObject<AActor>(0x30);
		
		/// <summary>
		/// Name: Material
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UMaterialInterface Material => ReadUObject<UMaterialInterface>(0x38);
		
	}


	/// <summary>
	/// FTimeline:
	/// Size: 0xE0
	/// Properties: 15
	/// </summary>
	public class FTimeline:MemoryObject
	{
		public override int ObjectSize => 224;
		/// <summary>
		/// Name: LengthMode
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte LengthMode
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Length
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Length
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: bLooping
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bLooping => (ReadByte(0x0008) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bReversePlayback
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bReversePlayback => (ReadByte(0x0008) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bPlaying
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bPlaying => (ReadByte(0x0008) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: PlayRate
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float PlayRate
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: Position
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float Position
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: Events
		/// Type: TArray<FTimelineEventEntry>
		/// Offset: 0x18
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FTimelineEventEntry> Events => new TArray<FTimelineEventEntry>(BaseAddress+0x18);
		
		/// <summary>
		/// Name: InterpVectors
		/// Type: TArray<FTimelineVectorTrack>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x70
		/// </summary>
		public TArray<FTimelineVectorTrack> InterpVectors => new TArray<FTimelineVectorTrack>(BaseAddress+0x28);
		
		/// <summary>
		/// Name: InterpFloats
		/// Type: TArray<FTimelineFloatTrack>
		/// Offset: 0x38
		/// Size: 0x10
		/// SubElement Size: 0x70
		/// </summary>
		public TArray<FTimelineFloatTrack> InterpFloats => new TArray<FTimelineFloatTrack>(BaseAddress+0x38);
		
		/// <summary>
		/// Name: InterpLinearColors
		/// Type: TArray<FTimelineLinearColorTrack>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x70
		/// </summary>
		public TArray<FTimelineLinearColorTrack> InterpLinearColors => new TArray<FTimelineLinearColorTrack>(BaseAddress+0x48);
		
		/// <summary>
		/// Name: TimelinePostUpdateFunc
		/// Type: DelegateProperty
		/// Offset: 0x58
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: TimelineFinishedFunc
		/// Type: DelegateProperty
		/// Offset: 0x68
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: DirectionPropertyName
		/// Type: NameProperty
		/// Offset: 0xC8
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: DirectionProperty
		/// Type: ObjectProperty
		/// Offset: 0xD0
		/// Size: 0x08
		/// </summary>
		public UByteProperty DirectionProperty => ReadUObject<UByteProperty>(0xD0);
		
	}


	/// <summary>
	/// FTimelineLinearColorTrack:
	/// Size: 0x70
	/// Properties: 4
	/// </summary>
	public class FTimelineLinearColorTrack:MemoryObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: LinearColorCurve
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UCurveLinearColor LinearColorCurve => ReadUObject<UCurveLinearColor>(0x00);
		
		/// <summary>
		/// Name: InterpFunc
		/// Type: DelegateProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: LinearColorPropertyName
		/// Type: NameProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: LinearColorProperty
		/// Type: ObjectProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public UStructProperty LinearColorProperty => ReadUObject<UStructProperty>(0x20);
		
	}


	/// <summary>
	/// FTimelineFloatTrack:
	/// Size: 0x70
	/// Properties: 4
	/// </summary>
	public class FTimelineFloatTrack:MemoryObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: FloatCurve
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UCurveFloat FloatCurve => ReadUObject<UCurveFloat>(0x00);
		
		/// <summary>
		/// Name: InterpFunc
		/// Type: DelegateProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: FloatPropertyName
		/// Type: NameProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: FloatProperty
		/// Type: ObjectProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public UFloatProperty FloatProperty => ReadUObject<UFloatProperty>(0x20);
		
	}


	/// <summary>
	/// FTimelineVectorTrack:
	/// Size: 0x70
	/// Properties: 4
	/// </summary>
	public class FTimelineVectorTrack:MemoryObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: VectorCurve
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UCurveVector VectorCurve => ReadUObject<UCurveVector>(0x00);
		
		/// <summary>
		/// Name: InterpFunc
		/// Type: DelegateProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		
		/// <summary>
		/// Name: VectorPropertyName
		/// Type: NameProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: VectorProperty
		/// Type: ObjectProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public UStructProperty VectorProperty => ReadUObject<UStructProperty>(0x20);
		
	}


	/// <summary>
	/// FTimelineEventEntry:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FTimelineEventEntry:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: EventFunc
		/// Type: DelegateProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		
	}


	/// <summary>
	/// FAnimTrack:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FAnimTrack:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: AnimSegments
		/// Type: TArray<FAnimSegment>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FAnimSegment> AnimSegments => new TArray<FAnimSegment>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FAnimSegment:
	/// Size: 0x20
	/// Properties: 6
	/// </summary>
	public class FAnimSegment:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: AnimReference
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UAnimSequenceBase AnimReference => ReadUObject<UAnimSequenceBase>(0x00);
		
		/// <summary>
		/// Name: StartPos
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float StartPos
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: AnimStartTime
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float AnimStartTime
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: AnimEndTime
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float AnimEndTime
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: AnimPlayRate
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float AnimPlayRate
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: LoopingCount
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int LoopingCount
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FRootMotionExtractionStep:
	/// Size: 0x10
	/// Properties: 3
	/// </summary>
	public class FRootMotionExtractionStep:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: AnimSequence
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UAnimSequence AnimSequence => ReadUObject<UAnimSequence>(0x00);
		
		/// <summary>
		/// Name: StartPosition
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float StartPosition
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: EndPosition
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float EndPosition
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FBakedAnimationStateMachine:
	/// Size: 0x30
	/// Properties: 4
	/// </summary>
	public class FBakedAnimationStateMachine:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: MachineName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: InitialState
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int InitialState
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: States
		/// Type: TArray<FBakedAnimationState>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x48
		/// </summary>
		public TArray<FBakedAnimationState> States => new TArray<FBakedAnimationState>(BaseAddress+0x10);
		
		/// <summary>
		/// Name: Transitions
		/// Type: TArray<FAnimationTransitionBetweenStates>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<FAnimationTransitionBetweenStates> Transitions => new TArray<FAnimationTransitionBetweenStates>(BaseAddress+0x20);
		
	}


	/// <summary>
	/// FAnimationTransitionBetweenStates:FAnimationStateBase
	/// Size: 0x40
	/// Properties: 10
	/// </summary>
	public class FAnimationTransitionBetweenStates:FAnimationStateBase
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: PreviousState
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int PreviousState
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: NextState
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int NextState
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: CrossfadeDuration
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float CrossfadeDuration
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: StartNotify
		/// Type: IntProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public int StartNotify
		{
			get
			{
				return ReadInt32(0x14);
			}
			set
			{
				WriteInt32(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: EndNotify
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int EndNotify
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: InterruptNotify
		/// Type: IntProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public int InterruptNotify
		{
			get
			{
				return ReadInt32(0x1C);
			}
			set
			{
				WriteInt32(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: BlendMode
		/// Type: ByteProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public byte BlendMode
		{
			get
			{
				return ReadByte(0x20);
			}
			set
			{
				WriteByte(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: CustomCurve
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public UCurveFloat CustomCurve => ReadUObject<UCurveFloat>(0x28);
		
		/// <summary>
		/// Name: BlendProfile
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UBlendProfile BlendProfile => ReadUObject<UBlendProfile>(0x30);
		
		/// <summary>
		/// Name: LogicType
		/// Type: ByteProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public byte LogicType
		{
			get
			{
				return ReadByte(0x38);
			}
			set
			{
				WriteByte(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimationStateBase:
	/// Size: 0x08
	/// Properties: 1
	/// </summary>
	public class FAnimationStateBase:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: StateName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FBakedAnimationState:
	/// Size: 0x48
	/// Properties: 10
	/// </summary>
	public class FBakedAnimationState:MemoryObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: StateName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Transitions
		/// Type: TArray<FBakedStateExitTransition>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FBakedStateExitTransition> Transitions => new TArray<FBakedStateExitTransition>(BaseAddress+0x08);
		
		/// <summary>
		/// Name: StateRootNodeIndex
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int StateRootNodeIndex
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: StartNotify
		/// Type: IntProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public int StartNotify
		{
			get
			{
				return ReadInt32(0x1C);
			}
			set
			{
				WriteInt32(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: EndNotify
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int EndNotify
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: FullyBlendedNotify
		/// Type: IntProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public int FullyBlendedNotify
		{
			get
			{
				return ReadInt32(0x24);
			}
			set
			{
				WriteInt32(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: bIsAConduit
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bIsAConduit
		{
			get
			{
				return ReadBool(0x28);
			}
			set
			{
				WriteBool(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: EntryRuleNodeIndex
		/// Type: IntProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public int EntryRuleNodeIndex
		{
			get
			{
				return ReadInt32(0x2C);
			}
			set
			{
				WriteInt32(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: PlayerNodeIndices
		/// Type: TArray<>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: bAlwaysResetOnEntry
		/// Type: BoolProperty
		/// Offset: 0x40
		/// Size: 0x01
		/// </summary>
		public bool bAlwaysResetOnEntry
		{
			get
			{
				return ReadBool(0x40);
			}
			set
			{
				WriteBool(0x40,value);
			}
		}
		
	}


	/// <summary>
	/// FBakedStateExitTransition:
	/// Size: 0x20
	/// Properties: 6
	/// </summary>
	public class FBakedStateExitTransition:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: CanTakeDelegateIndex
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int CanTakeDelegateIndex
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: CustomResultNodeIndex
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int CustomResultNodeIndex
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: TransitionIndex
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int TransitionIndex
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: bDesiredTransitionReturnValue
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bDesiredTransitionReturnValue
		{
			get
			{
				return ReadBool(0x0C);
			}
			set
			{
				WriteBool(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: bAutomaticRemainingTimeRule
		/// Type: BoolProperty
		/// Offset: 0x0D
		/// Size: 0x01
		/// </summary>
		public bool bAutomaticRemainingTimeRule
		{
			get
			{
				return ReadBool(0x0D);
			}
			set
			{
				WriteBool(0x0D,value);
			}
		}
		
		/// <summary>
		/// Name: PoseEvaluatorLinks
		/// Type: TArray<>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FAnimationState:FAnimationStateBase
	/// Size: 0x28
	/// Properties: 5
	/// </summary>
	public class FAnimationState:FAnimationStateBase
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Transitions
		/// Type: TArray<FAnimationTransitionRule>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FAnimationTransitionRule> Transitions => new TArray<FAnimationTransitionRule>(BaseAddress+0x08);
		
		/// <summary>
		/// Name: StateRootNodeIndex
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int StateRootNodeIndex
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: StartNotify
		/// Type: IntProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public int StartNotify
		{
			get
			{
				return ReadInt32(0x1C);
			}
			set
			{
				WriteInt32(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: EndNotify
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int EndNotify
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: FullyBlendedNotify
		/// Type: IntProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public int FullyBlendedNotify
		{
			get
			{
				return ReadInt32(0x24);
			}
			set
			{
				WriteInt32(0x24,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimationTransitionRule:
	/// Size: 0x10
	/// Properties: 3
	/// </summary>
	public class FAnimationTransitionRule:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: RuleToExecute
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: TransitionReturnVal
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool TransitionReturnVal
		{
			get
			{
				return ReadBool(0x08);
			}
			set
			{
				WriteBool(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: TransitionIndex
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int TransitionIndex
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FSlotEvaluationPose:
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class FSlotEvaluationPose:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: AdditiveType
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte AdditiveType
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Weight
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Weight
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FPerBoneBlendWeights:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FPerBoneBlendWeights:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: BoneBlendWeights
		/// Type: TArray<FPerBoneBlendWeight>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FPerBoneBlendWeight> BoneBlendWeights => new TArray<FPerBoneBlendWeight>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FPerBoneBlendWeight:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FPerBoneBlendWeight:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: SourceIndex
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int SourceIndex
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: BlendWeight
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float BlendWeight
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FA2CSPose:FA2Pose
	/// Size: 0x28
	/// Properties: 1
	/// </summary>
	public class FA2CSPose:FA2Pose
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: ComponentSpaceFlags
		/// Type: TArray<>
		/// Offset: 0x18
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FA2Pose:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FA2Pose:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Bones
		/// Type: TArray<FTransform>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FTransform> Bones => new TArray<FTransform>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FAnimMontageInstance:
	/// Size: 0x180
	/// Properties: 9
	/// </summary>
	public class FAnimMontageInstance:MemoryObject
	{
		public override int ObjectSize => 384;
		/// <summary>
		/// Name: Montage
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UAnimMontage Montage => ReadUObject<UAnimMontage>(0x00);
		
		/// <summary>
		/// Name: bPlaying
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool bPlaying
		{
			get
			{
				return ReadBool(0x90);
			}
			set
			{
				WriteBool(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultBlendTimeMultiplier
		/// Type: FloatProperty
		/// Offset: 0x94
		/// Size: 0x04
		/// </summary>
		public float DefaultBlendTimeMultiplier
		{
			get
			{
				return ReadSingle(0x94);
			}
			set
			{
				WriteSingle(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: NextSections
		/// Type: TArray<>
		/// Offset: 0xC0
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: PrevSections
		/// Type: TArray<>
		/// Offset: 0xD0
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: ActiveStateBranchingPoints
		/// Type: TArray<FAnimNotifyEvent>
		/// Offset: 0xF0
		/// Size: 0x10
		/// SubElement Size: 0xA8
		/// </summary>
		public TArray<FAnimNotifyEvent> ActiveStateBranchingPoints => new TArray<FAnimNotifyEvent>(BaseAddress+0xF0);
		
		/// <summary>
		/// Name: Position
		/// Type: FloatProperty
		/// Offset: 0x100
		/// Size: 0x04
		/// </summary>
		public float Position
		{
			get
			{
				return ReadSingle(0x100);
			}
			set
			{
				WriteSingle(0x100,value);
			}
		}
		
		/// <summary>
		/// Name: PlayRate
		/// Type: FloatProperty
		/// Offset: 0x104
		/// Size: 0x04
		/// </summary>
		public float PlayRate
		{
			get
			{
				return ReadSingle(0x104);
			}
			set
			{
				WriteSingle(0x104,value);
			}
		}
		
		/// <summary>
		/// Name: Blend
		/// Type: StructProperty
		/// Offset: 0x108
		/// Size: 0x38
		/// </summary>
		public FAlphaBlend Blend => ReadStruct<FAlphaBlend>(0x108);
		
	}


	/// <summary>
	/// FBranchingPointMarker:
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FBranchingPointMarker:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: NotifyIndex
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int NotifyIndex
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: TriggerTime
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float TriggerTime
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: NotifyEventType
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte NotifyEventType
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FBranchingPoint:FAnimLinkableElement
	/// Size: 0x40
	/// Properties: 3
	/// </summary>
	public class FBranchingPoint:FAnimLinkableElement
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: EventName
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: DisplayTime
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float DisplayTime
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: TriggerTimeOffset
		/// Type: FloatProperty
		/// Offset: 0x3C
		/// Size: 0x04
		/// </summary>
		public float TriggerTimeOffset
		{
			get
			{
				return ReadSingle(0x3C);
			}
			set
			{
				WriteSingle(0x3C,value);
			}
		}
		
	}


	/// <summary>
	/// FSlotAnimationTrack:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FSlotAnimationTrack:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: SlotName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AnimTrack
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FAnimTrack AnimTrack => ReadStruct<FAnimTrack>(0x08);
		
	}


	/// <summary>
	/// FCompositeSection:FAnimLinkableElement
	/// Size: 0x58
	/// Properties: 4
	/// </summary>
	public class FCompositeSection:FAnimLinkableElement
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: SectionName
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: StartTime
		/// Type: FloatProperty
		/// Offset: 0x38
		/// Size: 0x04
		/// </summary>
		public float StartTime
		{
			get
			{
				return ReadSingle(0x38);
			}
			set
			{
				WriteSingle(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: NextSectionName
		/// Type: NameProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: MetaData
		/// Type: TArray<UAnimMetaData>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UAnimMetaData> MetaData => new TArray<UAnimMetaData>(BaseAddress+0x48);
		
	}


	/// <summary>
	/// FCompressedTrack:
	/// Size: 0x38
	/// Properties: 4
	/// </summary>
	public class FCompressedTrack:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: ByteStream
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Times
		/// Type: TArray<>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Mins
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float Mins
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: Ranges
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float Ranges
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
	}


	/// <summary>
	/// FCurveTrack:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FCurveTrack:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: CurveName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CurveWeights
		/// Type: TArray<>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FScaleTrack:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FScaleTrack:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: ScaleKeys
		/// Type: TArray<FVector>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> ScaleKeys => new TArray<FVector>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Times
		/// Type: TArray<>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FRotationTrack:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FRotationTrack:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: RotKeys
		/// Type: TArray<FQuat>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FQuat> RotKeys => new TArray<FQuat>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Times
		/// Type: TArray<>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FTranslationTrack:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FTranslationTrack:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: PosKeys
		/// Type: TArray<FVector>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> PosKeys => new TArray<FVector>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Times
		/// Type: TArray<>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FTrackToSkeletonMap:
	/// Size: 0x04
	/// Properties: 1
	/// </summary>
	public class FTrackToSkeletonMap:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: BoneTreeIndex
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int BoneTreeIndex
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimSequenceTrackContainer:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FAnimSequenceTrackContainer:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: AnimationTracks
		/// Type: TArray<FRawAnimSequenceTrack>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FRawAnimSequenceTrack> AnimationTracks => new TArray<FRawAnimSequenceTrack>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: TrackNames
		/// Type: TArray<FName>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> TrackNames => new TArray<FName>(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FRawAnimSequenceTrack:
	/// Size: 0x30
	/// Properties: 3
	/// </summary>
	public class FRawAnimSequenceTrack:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: PosKeys
		/// Type: TArray<FVector>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> PosKeys => new TArray<FVector>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: RotKeys
		/// Type: TArray<FQuat>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FQuat> RotKeys => new TArray<FQuat>(BaseAddress+0x10);
		
		/// <summary>
		/// Name: ScaleKeys
		/// Type: TArray<FVector>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> ScaleKeys => new TArray<FVector>(BaseAddress+0x20);
		
	}


	/// <summary>
	/// FPerBoneInterpolation:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FPerBoneInterpolation:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: BoneReference
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FBoneReference BoneReference => ReadStruct<FBoneReference>(0x00);
		
		/// <summary>
		/// Name: InterpolationSpeedPerSec
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float InterpolationSpeedPerSec
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FGridBlendSample:
	/// Size: 0x1C
	/// Properties: 2
	/// </summary>
	public class FGridBlendSample:MemoryObject
	{
		public override int ObjectSize => 28;
		/// <summary>
		/// Name: GridElement
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x18
		/// </summary>
		public FEditorElement GridElement => ReadStruct<FEditorElement>(0x00);
		
		/// <summary>
		/// Name: BlendWeight
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float BlendWeight
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FEditorElement:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FEditorElement:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Indices
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int Indices
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Weights
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float Weights
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FBlendSample:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FBlendSample:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Animation
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UAnimSequence Animation => ReadUObject<UAnimSequence>(0x00);
		
		/// <summary>
		/// Name: SampleValue
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x0C
		/// </summary>
		public FVector SampleValue => ReadStruct<FVector>(0x08);
		
	}


	/// <summary>
	/// FBlendParameter:
	/// Size: 0x20
	/// Properties: 4
	/// </summary>
	public class FBlendParameter:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: DisplayName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString DisplayName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Min
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float Min
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: Max
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float Max
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: GridNum
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int GridNum
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FInterpolationParameter:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FInterpolationParameter:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: InterpolationTime
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float InterpolationTime
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: InterpolationType
		/// Type: ByteProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public byte InterpolationType
		{
			get
			{
				return ReadByte(0x04);
			}
			set
			{
				WriteByte(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FBranchingPointNotifyPayload:
	/// Size: 0x20
	/// Properties: 0
	/// </summary>
	public class FBranchingPointNotifyPayload:MemoryObject
	{
		public override int ObjectSize => 32;
	}


	/// <summary>
	/// FAnimSetMeshLinkup:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FAnimSetMeshLinkup:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: BoneToTrackTable
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FAssetImportInfo:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FAssetImportInfo:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FLaunchOnTestSettings:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FLaunchOnTestSettings:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: LaunchOnTestmap
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FFilePath LaunchOnTestmap => ReadStruct<FFilePath>(0x00);
		
		/// <summary>
		/// Name: DeviceID
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString DeviceID => new FString(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FEditorMapPerformanceTestDefinition:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FEditorMapPerformanceTestDefinition:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: PerformanceTestmap
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FFilePath PerformanceTestmap => ReadStruct<FFilePath>(0x00);
		
		/// <summary>
		/// Name: TestTimer
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int TestTimer
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FBuildPromotionTestSettings:
	/// Size: 0x1F0
	/// Properties: 5
	/// </summary>
	public class FBuildPromotionTestSettings:MemoryObject
	{
		public override int ObjectSize => 496;
		/// <summary>
		/// Name: DefaultStaticMeshAsset
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FFilePath DefaultStaticMeshAsset => ReadStruct<FFilePath>(0x00);
		
		/// <summary>
		/// Name: ImportWorkflow
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x150
		/// </summary>
		public FBuildPromotionImportWorkflowSettings ImportWorkflow => ReadStruct<FBuildPromotionImportWorkflowSettings>(0x10);
		
		/// <summary>
		/// Name: OpenAssets
		/// Type: StructProperty
		/// Offset: 0x160
		/// Size: 0x60
		/// </summary>
		public FBuildPromotionOpenAssetSettings OpenAssets => ReadStruct<FBuildPromotionOpenAssetSettings>(0x160);
		
		/// <summary>
		/// Name: NewProjectSettings
		/// Type: StructProperty
		/// Offset: 0x1C0
		/// Size: 0x20
		/// </summary>
		public FBuildPromotionNewProjectSettings NewProjectSettings => ReadStruct<FBuildPromotionNewProjectSettings>(0x1C0);
		
		/// <summary>
		/// Name: SourceControlMaterial
		/// Type: StructProperty
		/// Offset: 0x1E0
		/// Size: 0x10
		/// </summary>
		public FFilePath SourceControlMaterial => ReadStruct<FFilePath>(0x1E0);
		
	}


	/// <summary>
	/// FBuildPromotionNewProjectSettings:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FBuildPromotionNewProjectSettings:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: NewProjectFolderOverride
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FDirectoryPath NewProjectFolderOverride => ReadStruct<FDirectoryPath>(0x00);
		
		/// <summary>
		/// Name: NewProjectNameOverride
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString NewProjectNameOverride => new FString(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FBuildPromotionOpenAssetSettings:
	/// Size: 0x60
	/// Properties: 6
	/// </summary>
	public class FBuildPromotionOpenAssetSettings:MemoryObject
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: BlueprintAsset
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FFilePath BlueprintAsset => ReadStruct<FFilePath>(0x00);
		
		/// <summary>
		/// Name: MaterialAsset
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FFilePath MaterialAsset => ReadStruct<FFilePath>(0x10);
		
		/// <summary>
		/// Name: ParticleSystemAsset
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FFilePath ParticleSystemAsset => ReadStruct<FFilePath>(0x20);
		
		/// <summary>
		/// Name: SkeletalMeshAsset
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FFilePath SkeletalMeshAsset => ReadStruct<FFilePath>(0x30);
		
		/// <summary>
		/// Name: StaticMeshAsset
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FFilePath StaticMeshAsset => ReadStruct<FFilePath>(0x40);
		
		/// <summary>
		/// Name: TextureAsset
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FFilePath TextureAsset => ReadStruct<FFilePath>(0x50);
		
	}


	/// <summary>
	/// FBuildPromotionImportWorkflowSettings:
	/// Size: 0x150
	/// Properties: 11
	/// </summary>
	public class FBuildPromotionImportWorkflowSettings:MemoryObject
	{
		public override int ObjectSize => 336;
		/// <summary>
		/// Name: Diffuse
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x20
		/// </summary>
		public FEditorImportWorkflowDefinition Diffuse => ReadStruct<FEditorImportWorkflowDefinition>(0x00);
		
		/// <summary>
		/// Name: Normal
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x20
		/// </summary>
		public FEditorImportWorkflowDefinition Normal => ReadStruct<FEditorImportWorkflowDefinition>(0x20);
		
		/// <summary>
		/// Name: StaticMesh
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x20
		/// </summary>
		public FEditorImportWorkflowDefinition StaticMesh => ReadStruct<FEditorImportWorkflowDefinition>(0x40);
		
		/// <summary>
		/// Name: ReimportStaticMesh
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x20
		/// </summary>
		public FEditorImportWorkflowDefinition ReimportStaticMesh => ReadStruct<FEditorImportWorkflowDefinition>(0x60);
		
		/// <summary>
		/// Name: BlendShapeMesh
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x20
		/// </summary>
		public FEditorImportWorkflowDefinition BlendShapeMesh => ReadStruct<FEditorImportWorkflowDefinition>(0x80);
		
		/// <summary>
		/// Name: MorphMesh
		/// Type: StructProperty
		/// Offset: 0xA0
		/// Size: 0x20
		/// </summary>
		public FEditorImportWorkflowDefinition MorphMesh => ReadStruct<FEditorImportWorkflowDefinition>(0xA0);
		
		/// <summary>
		/// Name: SkeletalMesh
		/// Type: StructProperty
		/// Offset: 0xC0
		/// Size: 0x20
		/// </summary>
		public FEditorImportWorkflowDefinition SkeletalMesh => ReadStruct<FEditorImportWorkflowDefinition>(0xC0);
		
		/// <summary>
		/// Name: Animation
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x20
		/// </summary>
		public FEditorImportWorkflowDefinition Animation => ReadStruct<FEditorImportWorkflowDefinition>(0xE0);
		
		/// <summary>
		/// Name: Sound
		/// Type: StructProperty
		/// Offset: 0x100
		/// Size: 0x20
		/// </summary>
		public FEditorImportWorkflowDefinition Sound => ReadStruct<FEditorImportWorkflowDefinition>(0x100);
		
		/// <summary>
		/// Name: SurroundSound
		/// Type: StructProperty
		/// Offset: 0x120
		/// Size: 0x20
		/// </summary>
		public FEditorImportWorkflowDefinition SurroundSound => ReadStruct<FEditorImportWorkflowDefinition>(0x120);
		
		/// <summary>
		/// Name: OtherAssetsToImport
		/// Type: TArray<FEditorImportWorkflowDefinition>
		/// Offset: 0x140
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FEditorImportWorkflowDefinition> OtherAssetsToImport => new TArray<FEditorImportWorkflowDefinition>(BaseAddress+0x140);
		
	}


	/// <summary>
	/// FEditorImportWorkflowDefinition:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FEditorImportWorkflowDefinition:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: ImportFilePath
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FFilePath ImportFilePath => ReadStruct<FFilePath>(0x00);
		
		/// <summary>
		/// Name: FactorySettings
		/// Type: TArray<FImportFactorySettingValues>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FImportFactorySettingValues> FactorySettings => new TArray<FImportFactorySettingValues>(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FImportFactorySettingValues:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FImportFactorySettingValues:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: SettingName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString SettingName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Value
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString Value => new FString(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FBlueprintEditorPromotionSettings:
	/// Size: 0x30
	/// Properties: 3
	/// </summary>
	public class FBlueprintEditorPromotionSettings:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: FirstMeshPath
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FFilePath FirstMeshPath => ReadStruct<FFilePath>(0x00);
		
		/// <summary>
		/// Name: SecondMeshPath
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FFilePath SecondMeshPath => ReadStruct<FFilePath>(0x10);
		
		/// <summary>
		/// Name: DefaultParticleAsset
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FFilePath DefaultParticleAsset => ReadStruct<FFilePath>(0x20);
		
	}


	/// <summary>
	/// FParticleEditorPromotionSettings:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FParticleEditorPromotionSettings:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: DefaultParticleAsset
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FFilePath DefaultParticleAsset => ReadStruct<FFilePath>(0x00);
		
	}


	/// <summary>
	/// FMaterialEditorPromotionSettings:
	/// Size: 0x30
	/// Properties: 3
	/// </summary>
	public class FMaterialEditorPromotionSettings:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: DefaultMaterialAsset
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FFilePath DefaultMaterialAsset => ReadStruct<FFilePath>(0x00);
		
		/// <summary>
		/// Name: DefaultDiffuseTexture
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FFilePath DefaultDiffuseTexture => ReadStruct<FFilePath>(0x10);
		
		/// <summary>
		/// Name: DefaultNormalTexture
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FFilePath DefaultNormalTexture => ReadStruct<FFilePath>(0x20);
		
	}


	/// <summary>
	/// FEditorImportExportTestDefinition:
	/// Size: 0x38
	/// Properties: 4
	/// </summary>
	public class FEditorImportExportTestDefinition:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: ImportFilePath
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FFilePath ImportFilePath => ReadStruct<FFilePath>(0x00);
		
		/// <summary>
		/// Name: ExportFileExtension
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString ExportFileExtension => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: bSkipExport
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool bSkipExport
		{
			get
			{
				return ReadBool(0x20);
			}
			set
			{
				WriteBool(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: FactorySettings
		/// Type: TArray<FImportFactorySettingValues>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x20
		/// </summary>
		public TArray<FImportFactorySettingValues> FactorySettings => new TArray<FImportFactorySettingValues>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// FExternalToolDefinition:
	/// Size: 0x60
	/// Properties: 6
	/// </summary>
	public class FExternalToolDefinition:MemoryObject
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: ToolName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString ToolName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: ExecutablePath
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FFilePath ExecutablePath => ReadStruct<FFilePath>(0x10);
		
		/// <summary>
		/// Name: CommandLineOptions
		/// Type: StrProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FString CommandLineOptions => new FString(BaseAddress+0x20);
		
		/// <summary>
		/// Name: WorkingDirectory
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FDirectoryPath WorkingDirectory => ReadStruct<FDirectoryPath>(0x30);
		
		/// <summary>
		/// Name: ScriptExtension
		/// Type: StrProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FString ScriptExtension => new FString(BaseAddress+0x40);
		
		/// <summary>
		/// Name: ScriptDirectory
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FDirectoryPath ScriptDirectory => ReadStruct<FDirectoryPath>(0x50);
		
	}


	/// <summary>
	/// FOpenTestAsset:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FOpenTestAsset:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: AssetToOpen
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FFilePath AssetToOpen => ReadStruct<FFilePath>(0x00);
		
		/// <summary>
		/// Name: bSkipTestWhenUnAttended
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bSkipTestWhenUnAttended
		{
			get
			{
				return ReadBool(0x10);
			}
			set
			{
				WriteBool(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FNavAvoidanceData:
	/// Size: 0x3C
	/// Properties: 0
	/// </summary>
	public class FNavAvoidanceData:MemoryObject
	{
		public override int ObjectSize => 60;
	}


	/// <summary>
	/// FBlendProfileBoneEntry:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FBlendProfileBoneEntry:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: BoneReference
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FBoneReference BoneReference => ReadStruct<FBoneReference>(0x00);
		
		/// <summary>
		/// Name: BlendScale
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float BlendScale
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimParentNodeAssetOverride:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FAnimParentNodeAssetOverride:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: NewAsset
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UAnimationAsset NewAsset => ReadUObject<UAnimationAsset>(0x00);
		
		/// <summary>
		/// Name: ParentNodeGuid
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FGuid ParentNodeGuid => ReadStruct<FGuid>(0x08);
		
	}


	/// <summary>
	/// FAnimGroupInfo:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FAnimGroupInfo:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Color
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FLinearColor Color => ReadStruct<FLinearColor>(0x08);
		
	}


	/// <summary>
	/// FDataTableCategoryHandle:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FDataTableCategoryHandle:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: DataTable
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UDataTable DataTable => ReadUObject<UDataTable>(0x00);
		
		/// <summary>
		/// Name: ColumnName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: RowContents
		/// Type: NameProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FDialogueWaveParameter:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FDialogueWaveParameter:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: DialogueWave
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UDialogueWave DialogueWave => ReadUObject<UDialogueWave>(0x00);
		
		/// <summary>
		/// Name: Context
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x18
		/// </summary>
		public FDialogueContext Context => ReadStruct<FDialogueContext>(0x08);
		
	}


	/// <summary>
	/// FDialogueContext:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FDialogueContext:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Speaker
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UDialogueVoice Speaker => ReadUObject<UDialogueVoice>(0x00);
		
		/// <summary>
		/// Name: Targets
		/// Type: TArray<UDialogueVoice>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x40
		/// </summary>
		public TArray<UDialogueVoice> Targets => new TArray<UDialogueVoice>(BaseAddress+0x08);
		
	}


	/// <summary>
	/// FCustomProfile:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FCustomProfile:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CustomResponses
		/// Type: TArray<FResponseChannel>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FResponseChannel> CustomResponses => new TArray<FResponseChannel>(BaseAddress+0x08);
		
	}


	/// <summary>
	/// FCustomChannelSetup:
	/// Size: 0x18
	/// Properties: 5
	/// </summary>
	public class FCustomChannelSetup:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Channel
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte Channel
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: DefaultResponse
		/// Type: ByteProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public byte DefaultResponse
		{
			get
			{
				return ReadByte(0x10);
			}
			set
			{
				WriteByte(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: bTraceType
		/// Type: BoolProperty
		/// Offset: 0x11
		/// Size: 0x01
		/// </summary>
		public bool bTraceType
		{
			get
			{
				return ReadBool(0x11);
			}
			set
			{
				WriteBool(0x11,value);
			}
		}
		
		/// <summary>
		/// Name: bStaticObject
		/// Type: BoolProperty
		/// Offset: 0x12
		/// Size: 0x01
		/// </summary>
		public bool bStaticObject
		{
			get
			{
				return ReadBool(0x12);
			}
			set
			{
				WriteBool(0x12,value);
			}
		}
		
	}


	/// <summary>
	/// FCollisionResponseTemplate:
	/// Size: 0x60
	/// Properties: 6
	/// </summary>
	public class FCollisionResponseTemplate:MemoryObject
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CollisionEnabled
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte CollisionEnabled
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: ObjectTypeName
		/// Type: NameProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CustomResponses
		/// Type: TArray<FResponseChannel>
		/// Offset: 0x18
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FResponseChannel> CustomResponses => new TArray<FResponseChannel>(BaseAddress+0x18);
		
		/// <summary>
		/// Name: HelpMessage
		/// Type: StrProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FString HelpMessage => new FString(BaseAddress+0x28);
		
		/// <summary>
		/// Name: bCanModify
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bCanModify
		{
			get
			{
				return ReadBool(0x38);
			}
			set
			{
				WriteBool(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// FBlueprintCookedComponentInstancingData:
	/// Size: 0x50
	/// Properties: 2
	/// </summary>
	public class FBlueprintCookedComponentInstancingData:MemoryObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: bIsValid
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bIsValid
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ChangedPropertyList
		/// Type: TArray<FBlueprintComponentChangedPropertyInfo>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FBlueprintComponentChangedPropertyInfo> ChangedPropertyList => new TArray<FBlueprintComponentChangedPropertyInfo>(BaseAddress+0x08);
		
	}


	/// <summary>
	/// FBlueprintComponentChangedPropertyInfo:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FBlueprintComponentChangedPropertyInfo:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: PropertyName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ArrayIndex
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int ArrayIndex
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: PropertyScope
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UStruct PropertyScope => ReadUObject<UStruct>(0x10);
		
	}


	/// <summary>
	/// FEventGraphFastCallPair:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FEventGraphFastCallPair:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: FunctionToPatch
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UFunction FunctionToPatch => ReadUObject<UFunction>(0x00);
		
		/// <summary>
		/// Name: EventGraphCallOffset
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int EventGraphCallOffset
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FBlueprintDebugData:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FBlueprintDebugData:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FPointerToUberGraphFrame:
	/// Size: 0x08
	/// Properties: 0
	/// </summary>
	public class FPointerToUberGraphFrame:MemoryObject
	{
		public override int ObjectSize => 8;
	}


	/// <summary>
	/// FDebuggingInfoForSingleFunction:
	/// Size: 0x1E0
	/// Properties: 0
	/// </summary>
	public class FDebuggingInfoForSingleFunction:MemoryObject
	{
		public override int ObjectSize => 480;
	}


	/// <summary>
	/// FNodeToCodeAssociation:
	/// Size: 0x14
	/// Properties: 0
	/// </summary>
	public class FNodeToCodeAssociation:MemoryObject
	{
		public override int ObjectSize => 20;
	}


	/// <summary>
	/// FAnimBlueprintDebugData:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FAnimBlueprintDebugData:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FAnimationFrameSnapshot:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FAnimationFrameSnapshot:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FStateMachineDebugData:
	/// Size: 0xB0
	/// Properties: 0
	/// </summary>
	public class FStateMachineDebugData:MemoryObject
	{
		public override int ObjectSize => 176;
	}


	/// <summary>
	/// FKShapeElem:
	/// Size: 0x20
	/// Properties: 0
	/// </summary>
	public class FKShapeElem:MemoryObject
	{
		public override int ObjectSize => 32;
	}


	/// <summary>
	/// FKConvexElem:FKShapeElem
	/// Size: 0x90
	/// Properties: 3
	/// </summary>
	public class FKConvexElem:FKShapeElem
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: VertexData
		/// Type: TArray<FVector>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> VertexData => new TArray<FVector>(BaseAddress+0x20);
		
		/// <summary>
		/// Name: ElemBox
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x1C
		/// </summary>
		public FBox ElemBox => ReadStruct<FBox>(0x30);
		
		/// <summary>
		/// Name: Transform
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x30
		/// </summary>
		public FTransform Transform => ReadStruct<FTransform>(0x50);
		
	}


	/// <summary>
	/// FKBoxElem:FKShapeElem
	/// Size: 0x90
	/// Properties: 6
	/// </summary>
	public class FKBoxElem:FKShapeElem
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: TM
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x40
		/// </summary>
		public FMatrix TM => ReadStruct<FMatrix>(0x20);
		
		/// <summary>
		/// Name: Center
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x0C
		/// </summary>
		public FVector Center => ReadStruct<FVector>(0x60);
		
		/// <summary>
		/// Name: Orientation
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FQuat Orientation => ReadStruct<FQuat>(0x70);
		
		/// <summary>
		/// Name: X
		/// Type: FloatProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public float X
		{
			get
			{
				return ReadSingle(0x80);
			}
			set
			{
				WriteSingle(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: Y
		/// Type: FloatProperty
		/// Offset: 0x84
		/// Size: 0x04
		/// </summary>
		public float Y
		{
			get
			{
				return ReadSingle(0x84);
			}
			set
			{
				WriteSingle(0x84,value);
			}
		}
		
		/// <summary>
		/// Name: Z
		/// Type: FloatProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public float Z
		{
			get
			{
				return ReadSingle(0x88);
			}
			set
			{
				WriteSingle(0x88,value);
			}
		}
		
	}


	/// <summary>
	/// FKSphereElem:FKShapeElem
	/// Size: 0x70
	/// Properties: 3
	/// </summary>
	public class FKSphereElem:FKShapeElem
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: TM
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x40
		/// </summary>
		public FMatrix TM => ReadStruct<FMatrix>(0x20);
		
		/// <summary>
		/// Name: Center
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x0C
		/// </summary>
		public FVector Center => ReadStruct<FVector>(0x60);
		
		/// <summary>
		/// Name: Radius
		/// Type: FloatProperty
		/// Offset: 0x6C
		/// Size: 0x04
		/// </summary>
		public float Radius
		{
			get
			{
				return ReadSingle(0x6C);
			}
			set
			{
				WriteSingle(0x6C,value);
			}
		}
		
	}


	/// <summary>
	/// FKSphylElem:FKShapeElem
	/// Size: 0x90
	/// Properties: 5
	/// </summary>
	public class FKSphylElem:FKShapeElem
	{
		public override int ObjectSize => 144;
		/// <summary>
		/// Name: TM
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x40
		/// </summary>
		public FMatrix TM => ReadStruct<FMatrix>(0x20);
		
		/// <summary>
		/// Name: Center
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x0C
		/// </summary>
		public FVector Center => ReadStruct<FVector>(0x60);
		
		/// <summary>
		/// Name: Orientation
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FQuat Orientation => ReadStruct<FQuat>(0x70);
		
		/// <summary>
		/// Name: Radius
		/// Type: FloatProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public float Radius
		{
			get
			{
				return ReadSingle(0x80);
			}
			set
			{
				WriteSingle(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: Length
		/// Type: FloatProperty
		/// Offset: 0x84
		/// Size: 0x04
		/// </summary>
		public float Length
		{
			get
			{
				return ReadSingle(0x84);
			}
			set
			{
				WriteSingle(0x84,value);
			}
		}
		
	}


	/// <summary>
	/// FKAggregateGeom:
	/// Size: 0x48
	/// Properties: 4
	/// </summary>
	public class FKAggregateGeom:MemoryObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: SphereElems
		/// Type: TArray<FKSphereElem>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x70
		/// </summary>
		public TArray<FKSphereElem> SphereElems => new TArray<FKSphereElem>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: BoxElems
		/// Type: TArray<FKBoxElem>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x90
		/// </summary>
		public TArray<FKBoxElem> BoxElems => new TArray<FKBoxElem>(BaseAddress+0x10);
		
		/// <summary>
		/// Name: SphylElems
		/// Type: TArray<FKSphylElem>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x90
		/// </summary>
		public TArray<FKSphylElem> SphylElems => new TArray<FKSphylElem>(BaseAddress+0x20);
		
		/// <summary>
		/// Name: ConvexElems
		/// Type: TArray<FKConvexElem>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x90
		/// </summary>
		public TArray<FKConvexElem> ConvexElems => new TArray<FKConvexElem>(BaseAddress+0x30);
		
	}


	/// <summary>
	/// FAggregateGeometry2D:
	/// Size: 0x30
	/// Properties: 3
	/// </summary>
	public class FAggregateGeometry2D:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: CircleElements
		/// Type: TArray<FCircleElement2D>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FCircleElement2D> CircleElements => new TArray<FCircleElement2D>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: BoxElements
		/// Type: TArray<FBoxElement2D>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x14
		/// </summary>
		public TArray<FBoxElement2D> BoxElements => new TArray<FBoxElement2D>(BaseAddress+0x10);
		
		/// <summary>
		/// Name: ConvexElements
		/// Type: TArray<FConvexElement2D>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FConvexElement2D> ConvexElements => new TArray<FConvexElement2D>(BaseAddress+0x20);
		
	}


	/// <summary>
	/// FConvexElement2D:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FConvexElement2D:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: VertexData
		/// Type: TArray<FVector2D>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FVector2D> VertexData => new TArray<FVector2D>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FBoxElement2D:
	/// Size: 0x14
	/// Properties: 4
	/// </summary>
	public class FBoxElement2D:MemoryObject
	{
		public override int ObjectSize => 20;
		/// <summary>
		/// Name: Center
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public FVector2D Center => ReadStruct<FVector2D>(0x00);
		
		/// <summary>
		/// Name: Width
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Width
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: Height
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float Height
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: Angle
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float Angle
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FCircleElement2D:
	/// Size: 0x0C
	/// Properties: 2
	/// </summary>
	public class FCircleElement2D:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: Center
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public FVector2D Center => ReadStruct<FVector2D>(0x00);
		
		/// <summary>
		/// Name: Radius
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Radius
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FBuilderPoly:
	/// Size: 0x28
	/// Properties: 4
	/// </summary>
	public class FBuilderPoly:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: VertexIndices
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Direction
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int Direction
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: ItemName
		/// Type: NameProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: PolyFlags
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int PolyFlags
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
	}


	/// <summary>
	/// FPluginRedirect:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FPluginRedirect:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: OldPluginName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString OldPluginName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: NewPluginName
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString NewPluginName => new FString(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FStructRedirect:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FStructRedirect:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: OldStructName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: NewStructName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FClassRedirect:
	/// Size: 0x40
	/// Properties: 8
	/// </summary>
	public class FClassRedirect:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: ObjectName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: OldClassName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: NewClassName
		/// Type: NameProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: OldSubobjName
		/// Type: NameProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: NewSubobjName
		/// Type: NameProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: NewClassClass
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: NewClassPackage
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: InstanceOnly
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool InstanceOnly
		{
			get
			{
				return ReadBool(0x38);
			}
			set
			{
				WriteBool(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// FGameNameRedirect:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FGameNameRedirect:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: OldGameName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: NewGameName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FScreenMessageString:
	/// Size: 0x30
	/// Properties: 6
	/// </summary>
	public class FScreenMessageString:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: Key
		/// Type: UInt64Property
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public ulong Key
		{
			get
			{
				return ReadUInt64(0x00);
			}
			set
			{
				WriteUInt64(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ScreenMessage
		/// Type: StrProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FString ScreenMessage => new FString(BaseAddress+0x08);
		
		/// <summary>
		/// Name: DisplayColor
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public FColor DisplayColor => ReadStruct<FColor>(0x18);
		
		/// <summary>
		/// Name: TimeToDisplay
		/// Type: FloatProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public float TimeToDisplay
		{
			get
			{
				return ReadSingle(0x1C);
			}
			set
			{
				WriteSingle(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentTimeDisplayed
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float CurrentTimeDisplayed
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: TextScale
		/// Type: StructProperty
		/// Offset: 0x24
		/// Size: 0x08
		/// </summary>
		public FVector2D TextScale => ReadStruct<FVector2D>(0x24);
		
	}


	/// <summary>
	/// FDropNoteInfo:
	/// Size: 0x28
	/// Properties: 3
	/// </summary>
	public class FDropNoteInfo:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Location => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FRotator Rotation => ReadStruct<FRotator>(0x0C);
		
		/// <summary>
		/// Name: Comment
		/// Type: StrProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FString Comment => new FString(BaseAddress+0x18);
		
	}


	/// <summary>
	/// FStatColorMapping:
	/// Size: 0x28
	/// Properties: 3
	/// </summary>
	public class FStatColorMapping:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: StatName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString StatName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: ColorMap
		/// Type: TArray<FStatColorMapEntry>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FStatColorMapEntry> ColorMap => new TArray<FStatColorMapEntry>(BaseAddress+0x10);
		
		/// <summary>
		/// Name: DisableBlend
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool DisableBlend => (ReadByte(0x0020) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// FStatColorMapEntry:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FStatColorMapEntry:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: In
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float In
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Out
		/// Type: StructProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public FColor Out => ReadStruct<FColor>(0x04);
		
	}


	/// <summary>
	/// FWorldContext:
	/// Size: 0x2A0
	/// Properties: 10
	/// </summary>
	public class FWorldContext:MemoryObject
	{
		public override int ObjectSize => 672;
		/// <summary>
		/// Name: LastURL
		/// Type: StructProperty
		/// Offset: 0xE8
		/// Size: 0x70
		/// </summary>
		public FURL LastURL => ReadStruct<FURL>(0xE8);
		
		/// <summary>
		/// Name: LastRemoteURL
		/// Type: StructProperty
		/// Offset: 0x158
		/// Size: 0x70
		/// </summary>
		public FURL LastRemoteURL => ReadStruct<FURL>(0x158);
		
		/// <summary>
		/// Name: PendingNetGame
		/// Type: ObjectProperty
		/// Offset: 0x1C8
		/// Size: 0x08
		/// </summary>
		public UPendingNetGame PendingNetGame => ReadUObject<UPendingNetGame>(0x1C8);
		
		/// <summary>
		/// Name: PackagesToFullyLoad
		/// Type: TArray<FFullyLoadedPackagesInfo>
		/// Offset: 0x1D0
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FFullyLoadedPackagesInfo> PackagesToFullyLoad => new TArray<FFullyLoadedPackagesInfo>(BaseAddress+0x1D0);
		
		/// <summary>
		/// Name: LoadedLevelsForPendingMapChange
		/// Type: TArray<ULevel>
		/// Offset: 0x1F0
		/// Size: 0x10
		/// SubElement Size: 0x3D0
		/// </summary>
		public TArray<ULevel> LoadedLevelsForPendingMapChange => new TArray<ULevel>(BaseAddress+0x1F0);
		
		/// <summary>
		/// Name: ObjectReferencers
		/// Type: TArray<UObjectReferencer>
		/// Offset: 0x218
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<UObjectReferencer> ObjectReferencers => new TArray<UObjectReferencer>(BaseAddress+0x218);
		
		/// <summary>
		/// Name: PendingLevelStreamingStatusUpdates
		/// Type: TArray<FLevelStreamingStatus>
		/// Offset: 0x228
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FLevelStreamingStatus> PendingLevelStreamingStatusUpdates => new TArray<FLevelStreamingStatus>(BaseAddress+0x228);
		
		/// <summary>
		/// Name: GameViewport
		/// Type: ObjectProperty
		/// Offset: 0x238
		/// Size: 0x08
		/// </summary>
		public UGameViewportClient GameViewport => ReadUObject<UGameViewportClient>(0x238);
		
		/// <summary>
		/// Name: OwningGameInstance
		/// Type: ObjectProperty
		/// Offset: 0x240
		/// Size: 0x08
		/// </summary>
		public UGameInstance OwningGameInstance => ReadUObject<UGameInstance>(0x240);
		
		/// <summary>
		/// Name: ActiveNetDrivers
		/// Type: TArray<FNamedNetDriver>
		/// Offset: 0x248
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FNamedNetDriver> ActiveNetDrivers => new TArray<FNamedNetDriver>(BaseAddress+0x248);
		
	}


	/// <summary>
	/// FNamedNetDriver:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FNamedNetDriver:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: NetDriver
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UNetDriver NetDriver => ReadUObject<UNetDriver>(0x00);
		
	}


	/// <summary>
	/// FLevelStreamingStatus:
	/// Size: 0x10
	/// Properties: 4
	/// </summary>
	public class FLevelStreamingStatus:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: PackageName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bShouldBeLoaded
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bShouldBeLoaded => (ReadByte(0x0008) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bShouldBeVisible
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bShouldBeVisible => (ReadByte(0x0008) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: LODIndex
		/// Type: UInt32Property
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		
	}


	/// <summary>
	/// FFullyLoadedPackagesInfo:
	/// Size: 0x38
	/// Properties: 4
	/// </summary>
	public class FFullyLoadedPackagesInfo:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: FullyLoadType
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte FullyLoadType
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Tag
		/// Type: StrProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FString Tag => new FString(BaseAddress+0x08);
		
		/// <summary>
		/// Name: PackagesToLoad
		/// Type: TArray<FName>
		/// Offset: 0x18
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		public TArray<FName> PackagesToLoad => new TArray<FName>(BaseAddress+0x18);
		
		/// <summary>
		/// Name: LoadedObjects
		/// Type: TArray<UObject>
		/// Offset: 0x28
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UObject> LoadedObjects => new TArray<UObject>(BaseAddress+0x28);
		
	}


	/// <summary>
	/// FNetDriverDefinition:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FNetDriverDefinition:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: DefName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: DriverClassName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: DriverClassNameFallback
		/// Type: NameProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FWrappedStringElement:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FWrappedStringElement:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Value
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Value => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: LineExtent
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public FVector2D LineExtent => ReadStruct<FVector2D>(0x10);
		
	}


	/// <summary>
	/// FTextSizingParameters:
	/// Size: 0x28
	/// Properties: 7
	/// </summary>
	public class FTextSizingParameters:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: DrawX
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float DrawX
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: DrawY
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float DrawY
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: DrawXL
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float DrawXL
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: DrawYL
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float DrawYL
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: Scaling
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public FVector2D Scaling => ReadStruct<FVector2D>(0x10);
		
		/// <summary>
		/// Name: DrawFont
		/// Type: ObjectProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		public UFont DrawFont => ReadUObject<UFont>(0x18);
		
		/// <summary>
		/// Name: SpacingAdjust
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public FVector2D SpacingAdjust => ReadStruct<FVector2D>(0x20);
		
	}


	/// <summary>
	/// FCanvasIcon:
	/// Size: 0x18
	/// Properties: 5
	/// </summary>
	public class FCanvasIcon:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Texture
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UTexture Texture => ReadUObject<UTexture>(0x00);
		
		/// <summary>
		/// Name: U
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float U
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: V
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float V
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: UL
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float UL
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: VL
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float VL
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
	}


	/// <summary>
	/// FAutoCompleteNode:
	/// Size: 0x28
	/// Properties: 2
	/// </summary>
	public class FAutoCompleteNode:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: IndexChar
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int IndexChar
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: AutoCompleteListIndices
		/// Type: TArray<>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FRuntimeCurveLinearColor:
	/// Size: 0x1E8
	/// Properties: 2
	/// </summary>
	public class FRuntimeCurveLinearColor:MemoryObject
	{
		public override int ObjectSize => 488;
		/// <summary>
		/// Name: ColorCurves
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x78
		/// </summary>
		public FRichCurve ColorCurves => ReadStruct<FRichCurve>(0x00);
		
		/// <summary>
		/// Name: ExternalCurve
		/// Type: ObjectProperty
		/// Offset: 0x1E0
		/// Size: 0x08
		/// </summary>
		public UCurveLinearColor ExternalCurve => ReadUObject<UCurveLinearColor>(0x1E0);
		
	}


	/// <summary>
	/// FCurveTableRowHandle:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FCurveTableRowHandle:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: CurveTable
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UCurveTable CurveTable => ReadUObject<UCurveTable>(0x00);
		
		/// <summary>
		/// Name: RowName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FDestructibleChunkParameters:
	/// Size: 0x04
	/// Properties: 4
	/// </summary>
	public class FDestructibleChunkParameters:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: bIsSupportChunk
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bIsSupportChunk
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: bDoNotFracture
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bDoNotFracture
		{
			get
			{
				return ReadBool(0x01);
			}
			set
			{
				WriteBool(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: bDoNotDamage
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bDoNotDamage
		{
			get
			{
				return ReadBool(0x02);
			}
			set
			{
				WriteBool(0x02,value);
			}
		}
		
		/// <summary>
		/// Name: bDoNotCrumble
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bDoNotCrumble
		{
			get
			{
				return ReadBool(0x03);
			}
			set
			{
				WriteBool(0x03,value);
			}
		}
		
	}


	/// <summary>
	/// FFractureMaterial:
	/// Size: 0x24
	/// Properties: 5
	/// </summary>
	public class FFractureMaterial:MemoryObject
	{
		public override int ObjectSize => 36;
		/// <summary>
		/// Name: UVScale
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public FVector2D UVScale => ReadStruct<FVector2D>(0x00);
		
		/// <summary>
		/// Name: UVOffset
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public FVector2D UVOffset => ReadStruct<FVector2D>(0x08);
		
		/// <summary>
		/// Name: Tangent
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x0C
		/// </summary>
		public FVector Tangent => ReadStruct<FVector>(0x10);
		
		/// <summary>
		/// Name: UAngle
		/// Type: FloatProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public float UAngle
		{
			get
			{
				return ReadSingle(0x1C);
			}
			set
			{
				WriteSingle(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: InteriorElementIndex
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int InteriorElementIndex
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
	}


	/// <summary>
	/// FAudioQualitySettings:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FAudioQualitySettings:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: DisplayName
		/// Type: TextProperty
		/// Offset: 0x00
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: MaxChannels
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int MaxChannels
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FPhysicalSurfaceName:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FPhysicalSurfaceName:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Type
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte Type
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FTextureLODGroup:
	/// Size: 0x38
	/// Properties: 8
	/// </summary>
	public class FTextureLODGroup:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Group
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte Group
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: LODBias
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int LODBias
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: NumStreamedMips
		/// Type: IntProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public int NumStreamedMips
		{
			get
			{
				return ReadInt32(0x14);
			}
			set
			{
				WriteInt32(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: MipGenSettings
		/// Type: ByteProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public byte MipGenSettings
		{
			get
			{
				return ReadByte(0x18);
			}
			set
			{
				WriteByte(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: MinLODSize
		/// Type: IntProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public int MinLODSize
		{
			get
			{
				return ReadInt32(0x1C);
			}
			set
			{
				WriteInt32(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxLODSize
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int MaxLODSize
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: MinMagFilter
		/// Type: NameProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: MipFilter
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FDialogueContextMapping:
	/// Size: 0x38
	/// Properties: 4
	/// </summary>
	public class FDialogueContextMapping:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Context
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x18
		/// </summary>
		public FDialogueContext Context => ReadStruct<FDialogueContext>(0x00);
		
		/// <summary>
		/// Name: SoundWave
		/// Type: ObjectProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		public USoundWave SoundWave => ReadUObject<USoundWave>(0x18);
		
		/// <summary>
		/// Name: LocalizationKeyFormat
		/// Type: StrProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FString LocalizationKeyFormat => new FString(BaseAddress+0x20);
		
		/// <summary>
		/// Name: Proxy
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UDialogueSoundWaveProxy Proxy => ReadUObject<UDialogueSoundWaveProxy>(0x30);
		
	}


	/// <summary>
	/// FRawDistributionFloat:FRawDistribution
	/// Size: 0x38
	/// Properties: 3
	/// </summary>
	public class FRawDistributionFloat:FRawDistribution
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: MinValue
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float MinValue
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: MaxValue
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float MaxValue
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: Distribution
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public UDistributionFloat Distribution => ReadUObject<UDistributionFloat>(0x30);
		
	}


	/// <summary>
	/// FRawDistributionVector:FRawDistribution
	/// Size: 0x50
	/// Properties: 5
	/// </summary>
	public class FRawDistributionVector:FRawDistribution
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: MinValue
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float MinValue
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: MaxValue
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float MaxValue
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: MinValueVec
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x0C
		/// </summary>
		public FVector MinValueVec => ReadStruct<FVector>(0x30);
		
		/// <summary>
		/// Name: MaxValueVec
		/// Type: StructProperty
		/// Offset: 0x3C
		/// Size: 0x0C
		/// </summary>
		public FVector MaxValueVec => ReadStruct<FVector>(0x3C);
		
		/// <summary>
		/// Name: Distribution
		/// Type: ObjectProperty
		/// Offset: 0x48
		/// Size: 0x08
		/// </summary>
		public UDistributionVector Distribution => ReadUObject<UDistributionVector>(0x48);
		
	}


	/// <summary>
	/// FBlueprintComponentDelegateBinding:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FBlueprintComponentDelegateBinding:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: ComponentPropertyName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: DelegatePropertyName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: FunctionNameToBind
		/// Type: NameProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FBlueprintInputDelegateBinding:
	/// Size: 0x04
	/// Properties: 3
	/// </summary>
	public class FBlueprintInputDelegateBinding:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: bConsumeInput
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bConsumeInput => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bExecuteWhenPaused
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bExecuteWhenPaused => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverrideParentBinding
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverrideParentBinding => (ReadByte(0x0000) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// FBlueprintInputActionDelegateBinding:FBlueprintInputDelegateBinding
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FBlueprintInputActionDelegateBinding:FBlueprintInputDelegateBinding
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: InputActionName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: InputKeyEvent
		/// Type: ByteProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public byte InputKeyEvent
		{
			get
			{
				return ReadByte(0x10);
			}
			set
			{
				WriteByte(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: FunctionNameToBind
		/// Type: NameProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FBlueprintInputAxisDelegateBinding:FBlueprintInputDelegateBinding
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FBlueprintInputAxisDelegateBinding:FBlueprintInputDelegateBinding
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: InputAxisName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: FunctionNameToBind
		/// Type: NameProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FBlueprintInputAxisKeyDelegateBinding:FBlueprintInputDelegateBinding
	/// Size: 0x28
	/// Properties: 2
	/// </summary>
	public class FBlueprintInputAxisKeyDelegateBinding:FBlueprintInputDelegateBinding
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: AxisKey
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x18
		/// </summary>
		public FKey AxisKey => ReadStruct<FKey>(0x08);
		
		/// <summary>
		/// Name: FunctionNameToBind
		/// Type: NameProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FBlueprintInputKeyDelegateBinding:FBlueprintInputDelegateBinding
	/// Size: 0x38
	/// Properties: 3
	/// </summary>
	public class FBlueprintInputKeyDelegateBinding:FBlueprintInputDelegateBinding
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: InputChord
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x20
		/// </summary>
		public FInputChord InputChord => ReadStruct<FInputChord>(0x08);
		
		/// <summary>
		/// Name: InputKeyEvent
		/// Type: ByteProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public byte InputKeyEvent
		{
			get
			{
				return ReadByte(0x28);
			}
			set
			{
				WriteByte(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: FunctionNameToBind
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FBlueprintInputTouchDelegateBinding:FBlueprintInputDelegateBinding
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FBlueprintInputTouchDelegateBinding:FBlueprintInputDelegateBinding
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: InputKeyEvent
		/// Type: ByteProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public byte InputKeyEvent
		{
			get
			{
				return ReadByte(0x04);
			}
			set
			{
				WriteByte(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: FunctionNameToBind
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FGraphReference:
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FGraphReference:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: MacroGraph
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UEdGraph MacroGraph => ReadUObject<UEdGraph>(0x00);
		
		/// <summary>
		/// Name: GraphBlueprint
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UBlueprint GraphBlueprint => ReadUObject<UBlueprint>(0x08);
		
		/// <summary>
		/// Name: GraphGuid
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FGuid GraphGuid => ReadStruct<FGuid>(0x10);
		
	}


	/// <summary>
	/// FEdGraphSchemaAction_NewNode:FEdGraphSchemaAction
	/// Size: 0xC0
	/// Properties: 1
	/// </summary>
	public class FEdGraphSchemaAction_NewNode:FEdGraphSchemaAction
	{
		public override int ObjectSize => 192;
		/// <summary>
		/// Name: NodeTemplate
		/// Type: ObjectProperty
		/// Offset: 0xB8
		/// Size: 0x08
		/// </summary>
		public UEdGraphNode NodeTemplate => ReadUObject<UEdGraphNode>(0xB8);
		
	}


	/// <summary>
	/// FEdGraphSchemaAction:
	/// Size: 0xB8
	/// Properties: 11
	/// </summary>
	public class FEdGraphSchemaAction:MemoryObject
	{
		public override int ObjectSize => 184;
		/// <summary>
		/// Name: MenuDescription
		/// Type: TextProperty
		/// Offset: 0x08
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: TooltipDescription
		/// Type: StrProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FString TooltipDescription => new FString(BaseAddress+0x20);
		
		/// <summary>
		/// Name: Category
		/// Type: TextProperty
		/// Offset: 0x30
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: Keywords
		/// Type: TextProperty
		/// Offset: 0x48
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: Grouping
		/// Type: IntProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public int Grouping
		{
			get
			{
				return ReadInt32(0x60);
			}
			set
			{
				WriteInt32(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: SectionID
		/// Type: IntProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public int SectionID
		{
			get
			{
				return ReadInt32(0x64);
			}
			set
			{
				WriteInt32(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: MenuDescriptionArray
		/// Type: TArray<>
		/// Offset: 0x68
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: FullSearchTitlesArray
		/// Type: TArray<>
		/// Offset: 0x78
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: FullSearchKeywordsArray
		/// Type: TArray<>
		/// Offset: 0x88
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: FullSearchCategoryArray
		/// Type: TArray<>
		/// Offset: 0x98
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: searchText
		/// Type: StrProperty
		/// Offset: 0xA8
		/// Size: 0x10
		/// </summary>
		public FString searchText => new FString(BaseAddress+0xA8);
		
	}


	/// <summary>
	/// FFontImportOptionsData:
	/// Size: 0xB0
	/// Properties: 29
	/// </summary>
	public class FFontImportOptionsData:MemoryObject
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: FontName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString FontName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Height
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float Height
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableAntialiasing
		/// Type: BoolProperty
		/// Offset: 0x14
		/// Size: 0x01
		/// </summary>
		public bool bEnableAntialiasing => (ReadByte(0x0014) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bEnableBold
		/// Type: BoolProperty
		/// Offset: 0x14
		/// Size: 0x01
		/// </summary>
		public bool bEnableBold => (ReadByte(0x0014) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bEnableItalic
		/// Type: BoolProperty
		/// Offset: 0x14
		/// Size: 0x01
		/// </summary>
		public bool bEnableItalic => (ReadByte(0x0014) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bEnableUnderline
		/// Type: BoolProperty
		/// Offset: 0x14
		/// Size: 0x01
		/// </summary>
		public bool bEnableUnderline => (ReadByte(0x0014) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bAlphaOnly
		/// Type: BoolProperty
		/// Offset: 0x14
		/// Size: 0x01
		/// </summary>
		public bool bAlphaOnly => (ReadByte(0x0014) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: CharacterSet
		/// Type: ByteProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public byte CharacterSet
		{
			get
			{
				return ReadByte(0x18);
			}
			set
			{
				WriteByte(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: Chars
		/// Type: StrProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FString Chars => new FString(BaseAddress+0x20);
		
		/// <summary>
		/// Name: UnicodeRange
		/// Type: StrProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FString UnicodeRange => new FString(BaseAddress+0x30);
		
		/// <summary>
		/// Name: CharsFilePath
		/// Type: StrProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FString CharsFilePath => new FString(BaseAddress+0x40);
		
		/// <summary>
		/// Name: CharsFileWildcard
		/// Type: StrProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FString CharsFileWildcard => new FString(BaseAddress+0x50);
		
		/// <summary>
		/// Name: bCreatePrintableOnly
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bCreatePrintableOnly => (ReadByte(0x0060) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bIncludeASCIIRange
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bIncludeASCIIRange => (ReadByte(0x0060) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: ForegroundColor
		/// Type: StructProperty
		/// Offset: 0x64
		/// Size: 0x10
		/// </summary>
		public FLinearColor ForegroundColor => ReadStruct<FLinearColor>(0x64);
		
		/// <summary>
		/// Name: bEnableDropShadow
		/// Type: BoolProperty
		/// Offset: 0x74
		/// Size: 0x01
		/// </summary>
		public bool bEnableDropShadow => (ReadByte(0x0074) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: TexturePageWidth
		/// Type: IntProperty
		/// Offset: 0x78
		/// Size: 0x04
		/// </summary>
		public int TexturePageWidth
		{
			get
			{
				return ReadInt32(0x78);
			}
			set
			{
				WriteInt32(0x78,value);
			}
		}
		
		/// <summary>
		/// Name: TexturePageMaxHeight
		/// Type: IntProperty
		/// Offset: 0x7C
		/// Size: 0x04
		/// </summary>
		public int TexturePageMaxHeight
		{
			get
			{
				return ReadInt32(0x7C);
			}
			set
			{
				WriteInt32(0x7C,value);
			}
		}
		
		/// <summary>
		/// Name: XPadding
		/// Type: IntProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public int XPadding
		{
			get
			{
				return ReadInt32(0x80);
			}
			set
			{
				WriteInt32(0x80,value);
			}
		}
		
		/// <summary>
		/// Name: YPadding
		/// Type: IntProperty
		/// Offset: 0x84
		/// Size: 0x04
		/// </summary>
		public int YPadding
		{
			get
			{
				return ReadInt32(0x84);
			}
			set
			{
				WriteInt32(0x84,value);
			}
		}
		
		/// <summary>
		/// Name: ExtendBoxTop
		/// Type: IntProperty
		/// Offset: 0x88
		/// Size: 0x04
		/// </summary>
		public int ExtendBoxTop
		{
			get
			{
				return ReadInt32(0x88);
			}
			set
			{
				WriteInt32(0x88,value);
			}
		}
		
		/// <summary>
		/// Name: ExtendBoxBottom
		/// Type: IntProperty
		/// Offset: 0x8C
		/// Size: 0x04
		/// </summary>
		public int ExtendBoxBottom
		{
			get
			{
				return ReadInt32(0x8C);
			}
			set
			{
				WriteInt32(0x8C,value);
			}
		}
		
		/// <summary>
		/// Name: ExtendBoxRight
		/// Type: IntProperty
		/// Offset: 0x90
		/// Size: 0x04
		/// </summary>
		public int ExtendBoxRight
		{
			get
			{
				return ReadInt32(0x90);
			}
			set
			{
				WriteInt32(0x90,value);
			}
		}
		
		/// <summary>
		/// Name: ExtendBoxLeft
		/// Type: IntProperty
		/// Offset: 0x94
		/// Size: 0x04
		/// </summary>
		public int ExtendBoxLeft
		{
			get
			{
				return ReadInt32(0x94);
			}
			set
			{
				WriteInt32(0x94,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableLegacyMode
		/// Type: BoolProperty
		/// Offset: 0x98
		/// Size: 0x01
		/// </summary>
		public bool bEnableLegacyMode => (ReadByte(0x0098) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Kerning
		/// Type: IntProperty
		/// Offset: 0x9C
		/// Size: 0x04
		/// </summary>
		public int Kerning
		{
			get
			{
				return ReadInt32(0x9C);
			}
			set
			{
				WriteInt32(0x9C,value);
			}
		}
		
		/// <summary>
		/// Name: bUseDistanceFieldAlpha
		/// Type: BoolProperty
		/// Offset: 0xA0
		/// Size: 0x01
		/// </summary>
		public bool bUseDistanceFieldAlpha => (ReadByte(0x00A0) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: DistanceFieldScaleFactor
		/// Type: IntProperty
		/// Offset: 0xA4
		/// Size: 0x04
		/// </summary>
		public int DistanceFieldScaleFactor
		{
			get
			{
				return ReadInt32(0xA4);
			}
			set
			{
				WriteInt32(0xA4,value);
			}
		}
		
		/// <summary>
		/// Name: DistanceFieldScanRadiusScale
		/// Type: FloatProperty
		/// Offset: 0xA8
		/// Size: 0x04
		/// </summary>
		public float DistanceFieldScanRadiusScale
		{
			get
			{
				return ReadSingle(0xA8);
			}
			set
			{
				WriteSingle(0xA8,value);
			}
		}
		
	}


	/// <summary>
	/// FFontCharacter:
	/// Size: 0x18
	/// Properties: 6
	/// </summary>
	public class FFontCharacter:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: StartU
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int StartU
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: StartV
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int StartV
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: USize
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int USize
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: VSize
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int VSize
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: TextureIndex
		/// Type: ByteProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public byte TextureIndex
		{
			get
			{
				return ReadByte(0x10);
			}
			set
			{
				WriteByte(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: VerticalOffset
		/// Type: IntProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public int VerticalOffset
		{
			get
			{
				return ReadInt32(0x14);
			}
			set
			{
				WriteInt32(0x14,value);
			}
		}
		
	}


	/// <summary>
	/// FGraniteBakerLayerLayout:
	/// Size: 0x78
	/// Properties: 3
	/// </summary>
	public class FGraniteBakerLayerLayout:MemoryObject
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: PresetName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString PresetName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Layers
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x18
		/// </summary>
		public FGraniteBakerLayer Layers => ReadStruct<FGraniteBakerLayer>(0x10);
		
		/// <summary>
		/// Name: customEditor
		/// Type: BoolProperty
		/// Offset: 0x70
		/// Size: 0x01
		/// </summary>
		public bool customEditor
		{
			get
			{
				return ReadBool(0x70);
			}
			set
			{
				WriteBool(0x70,value);
			}
		}
		
	}


	/// <summary>
	/// FGraniteBakerLayer:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FGraniteBakerLayer:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: DataType
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte DataType
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Name
		/// Type: StrProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FString Name => new FString(BaseAddress+0x08);
		
	}


	/// <summary>
	/// FGraniteLightmapFlags:
	/// Size: 0x04
	/// Properties: 5
	/// </summary>
	public class FGraniteLightmapFlags:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: isLQ
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool isLQ => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: isHQ
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool isHQ => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: isShadow
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool isShadow => (ReadByte(0x0000) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: withSkyOcc
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool withSkyOcc => (ReadByte(0x0000) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: withAOMask
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool withAOMask => (ReadByte(0x0000) & 0x10) == 0x10;
		
	}


	/// <summary>
	/// FGraniteGpuCache:
	/// Size: 0x28
	/// Properties: 7
	/// </summary>
	public class FGraniteGpuCache:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: SizeInMegabyte
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int SizeInMegabyte
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: TextureFormat
		/// Type: ByteProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public byte TextureFormat
		{
			get
			{
				return ReadByte(0x04);
			}
			set
			{
				WriteByte(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: ChannelTransform
		/// Type: ByteProperty
		/// Offset: 0x05
		/// Size: 0x01
		/// </summary>
		public byte ChannelTransform
		{
			get
			{
				return ReadByte(0x05);
			}
			set
			{
				WriteByte(0x05,value);
			}
		}
		
		/// <summary>
		/// Name: TileWidth
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int TileWidth
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: TileHeight
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int TileHeight
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: TileSetLayers
		/// Type: TArray<FGraniteTileSetLayer>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FGraniteTileSetLayer> TileSetLayers => new TArray<FGraniteTileSetLayer>(BaseAddress+0x10);
		
		/// <summary>
		/// Name: gpuCacheGroup
		/// Type: ByteProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public byte gpuCacheGroup
		{
			get
			{
				return ReadByte(0x20);
			}
			set
			{
				WriteByte(0x20,value);
			}
		}
		
	}


	/// <summary>
	/// FGraniteTileSetLayer:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FGraniteTileSetLayer:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: TileSet
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString TileSet => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Layer
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int Layer
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FGraniteCpuCache:
	/// Size: 0x20
	/// Properties: 4
	/// </summary>
	public class FGraniteCpuCache:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: SizeInMegabyte
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int SizeInMegabyte
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: PageSizeInByte
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int PageSizeInByte
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: TileSets
		/// Type: TArray<>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: NumLayersUsed
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int NumLayersUsed
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FActiveHapticFeedbackEffect:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FActiveHapticFeedbackEffect:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: HapticEffect
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UHapticFeedbackEffect HapticEffect => ReadUObject<UHapticFeedbackEffect>(0x00);
		
	}


	/// <summary>
	/// FHapticFeedbackDetails:
	/// Size: 0x100
	/// Properties: 2
	/// </summary>
	public class FHapticFeedbackDetails:MemoryObject
	{
		public override int ObjectSize => 256;
		/// <summary>
		/// Name: Frequency
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x80
		/// </summary>
		public FRuntimeFloatCurve Frequency => ReadStruct<FRuntimeFloatCurve>(0x00);
		
		/// <summary>
		/// Name: Amplitude
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x80
		/// </summary>
		public FRuntimeFloatCurve Amplitude => ReadStruct<FRuntimeFloatCurve>(0x80);
		
	}


	/// <summary>
	/// FComponentOverrideRecord:
	/// Size: 0x78
	/// Properties: 3
	/// </summary>
	public class FComponentOverrideRecord:MemoryObject
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: ComponentTemplate
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UActorComponent ComponentTemplate => ReadUObject<UActorComponent>(0x00);
		
		/// <summary>
		/// Name: ComponentKey
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x20
		/// </summary>
		public FComponentKey ComponentKey => ReadStruct<FComponentKey>(0x08);
		
		/// <summary>
		/// Name: CookedComponentInstancingData
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x50
		/// </summary>
		public FBlueprintCookedComponentInstancingData CookedComponentInstancingData => ReadStruct<FBlueprintCookedComponentInstancingData>(0x28);
		
	}


	/// <summary>
	/// FComponentKey:
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FComponentKey:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: OwnerClass
		/// Type: ClassProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SCSVariableName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AssociatedGuid
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FGuid AssociatedGuid => ReadStruct<FGuid>(0x10);
		
	}


	/// <summary>
	/// FInputAxisKeyMapping:
	/// Size: 0x28
	/// Properties: 3
	/// </summary>
	public class FInputAxisKeyMapping:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: AxisName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Key
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x18
		/// </summary>
		public FKey Key => ReadStruct<FKey>(0x08);
		
		/// <summary>
		/// Name: Scale
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float Scale
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
	}


	/// <summary>
	/// FInputActionKeyMapping:
	/// Size: 0x28
	/// Properties: 6
	/// </summary>
	public class FInputActionKeyMapping:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: ActionName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Key
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x18
		/// </summary>
		public FKey Key => ReadStruct<FKey>(0x08);
		
		/// <summary>
		/// Name: bShift
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool bShift => (ReadByte(0x0020) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bCtrl
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool bCtrl => (ReadByte(0x0020) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bAlt
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool bAlt => (ReadByte(0x0020) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bCmd
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool bCmd => (ReadByte(0x0020) & 0x08) == 0x08;
		
	}


	/// <summary>
	/// FInputAxisConfigEntry:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FInputAxisConfigEntry:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: AxisKeyName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AxisProperties
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FInputAxisProperties AxisProperties => ReadStruct<FInputAxisProperties>(0x08);
		
	}


	/// <summary>
	/// FInputAxisProperties:
	/// Size: 0x10
	/// Properties: 4
	/// </summary>
	public class FInputAxisProperties:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: DeadZone
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float DeadZone
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Sensitivity
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Sensitivity
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Exponent
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Exponent
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: bInvert
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bInvert => (ReadByte(0x000C) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// FKeyBind:
	/// Size: 0x30
	/// Properties: 11
	/// </summary>
	public class FKeyBind:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: Key
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x18
		/// </summary>
		public FKey Key => ReadStruct<FKey>(0x00);
		
		/// <summary>
		/// Name: Command
		/// Type: StrProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FString Command => new FString(BaseAddress+0x18);
		
		/// <summary>
		/// Name: Control
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool Control => (ReadByte(0x0028) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: Shift
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool Shift => (ReadByte(0x0028) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: Alt
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool Alt => (ReadByte(0x0028) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: Cmd
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool Cmd => (ReadByte(0x0028) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bIgnoreCtrl
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreCtrl => (ReadByte(0x0028) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bIgnoreShift
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreShift => (ReadByte(0x0028) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bIgnoreAlt
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreAlt => (ReadByte(0x0028) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bIgnoreCmd
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreCmd => (ReadByte(0x0028) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bDisabled
		/// Type: BoolProperty
		/// Offset: 0x29
		/// Size: 0x01
		/// </summary>
		public bool bDisabled => (ReadByte(0x0029) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// FCurveEdTab:
	/// Size: 0x30
	/// Properties: 6
	/// </summary>
	public class FCurveEdTab:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: TabName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString TabName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Curves
		/// Type: TArray<FCurveEdEntry>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x38
		/// </summary>
		public TArray<FCurveEdEntry> Curves => new TArray<FCurveEdEntry>(BaseAddress+0x10);
		
		/// <summary>
		/// Name: ViewStartInput
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float ViewStartInput
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: ViewEndInput
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float ViewEndInput
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: ViewStartOutput
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float ViewStartOutput
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: ViewEndOutput
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float ViewEndOutput
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
	}


	/// <summary>
	/// FCurveEdEntry:
	/// Size: 0x38
	/// Properties: 9
	/// </summary>
	public class FCurveEdEntry:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: CurveObject
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UObject CurveObject => ReadUObject<UObject>(0x00);
		
		/// <summary>
		/// Name: CurveColor
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public FColor CurveColor => ReadStruct<FColor>(0x08);
		
		/// <summary>
		/// Name: CurveName
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString CurveName => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: bHideCurve
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int bHideCurve
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: bColorCurve
		/// Type: IntProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public int bColorCurve
		{
			get
			{
				return ReadInt32(0x24);
			}
			set
			{
				WriteInt32(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: bFloatingPointColorCurve
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int bFloatingPointColorCurve
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: bClamp
		/// Type: IntProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public int bClamp
		{
			get
			{
				return ReadInt32(0x2C);
			}
			set
			{
				WriteInt32(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: ClampLow
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float ClampLow
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: ClampHigh
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float ClampHigh
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
	}


	/// <summary>
	/// FInterpEdSelKey:
	/// Size: 0x18
	/// Properties: 4
	/// </summary>
	public class FInterpEdSelKey:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Group
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UInterpGroup Group => ReadUObject<UInterpGroup>(0x00);
		
		/// <summary>
		/// Name: Track
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UInterpTrack Track => ReadUObject<UInterpTrack>(0x08);
		
		/// <summary>
		/// Name: KeyIndex
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int KeyIndex
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: UnsnappedPosition
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float UnsnappedPosition
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
	}


	/// <summary>
	/// FCameraPreviewInfo:
	/// Size: 0x30
	/// Properties: 5
	/// </summary>
	public class FCameraPreviewInfo:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: PawnClass
		/// Type: ClassProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: AnimSeq
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UAnimSequence AnimSeq => ReadUObject<UAnimSequence>(0x08);
		
		/// <summary>
		/// Name: Location
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x0C
		/// </summary>
		public FVector Location => ReadStruct<FVector>(0x10);
		
		/// <summary>
		/// Name: Rotation
		/// Type: StructProperty
		/// Offset: 0x1C
		/// Size: 0x0C
		/// </summary>
		public FRotator Rotation => ReadStruct<FRotator>(0x1C);
		
		/// <summary>
		/// Name: PawnInst
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public APawn PawnInst => ReadUObject<APawn>(0x28);
		
	}


	/// <summary>
	/// FSubTrackGroup:
	/// Size: 0x28
	/// Properties: 4
	/// </summary>
	public class FSubTrackGroup:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: GroupName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString GroupName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: TrackIndices
		/// Type: TArray<>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: bIsCollapsed
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool bIsCollapsed => (ReadByte(0x0020) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bIsSelected
		/// Type: BoolProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public bool bIsSelected => (ReadByte(0x0020) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// FSupportedSubTrackInfo:
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FSupportedSubTrackInfo:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: SupportedClass
		/// Type: ClassProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: SubTrackName
		/// Type: StrProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FString SubTrackName => new FString(BaseAddress+0x08);
		
		/// <summary>
		/// Name: GroupIndex
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int GroupIndex
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FBoolTrackKey:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FBoolTrackKey:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Value
		/// Type: BoolProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public bool Value => (ReadByte(0x0004) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// FDirectorTrackCut:
	/// Size: 0x18
	/// Properties: 4
	/// </summary>
	public class FDirectorTrackCut:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: TransitionTime
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float TransitionTime
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: TargetCamGroup
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ShotNumber
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int ShotNumber
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FEventTrackKey:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FEventTrackKey:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: EventName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FAnimControlTrackKey:
	/// Size: 0x20
	/// Properties: 7
	/// </summary>
	public class FAnimControlTrackKey:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: StartTime
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float StartTime
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: AnimSeq
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UAnimSequence AnimSeq => ReadUObject<UAnimSequence>(0x08);
		
		/// <summary>
		/// Name: AnimStartOffset
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float AnimStartOffset
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: AnimEndOffset
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float AnimEndOffset
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: AnimPlayRate
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float AnimPlayRate
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: bLooping
		/// Type: BoolProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public bool bLooping => (ReadByte(0x001C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bReverse
		/// Type: BoolProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public bool bReverse => (ReadByte(0x001C) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// FInterpLookupTrack:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FInterpLookupTrack:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Points
		/// Type: TArray<FInterpLookupPoint>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x10
		/// </summary>
		public TArray<FInterpLookupPoint> Points => new TArray<FInterpLookupPoint>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FInterpLookupPoint:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FInterpLookupPoint:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: GroupName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FParticleReplayTrackKey:
	/// Size: 0x0C
	/// Properties: 3
	/// </summary>
	public class FParticleReplayTrackKey:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Duration
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Duration
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: ClipIDNumber
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int ClipIDNumber
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FToggleTrackKey:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FToggleTrackKey:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ToggleAction
		/// Type: ByteProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public byte ToggleAction
		{
			get
			{
				return ReadByte(0x04);
			}
			set
			{
				WriteByte(0x04,value);
			}
		}
		
	}


	/// <summary>
	/// FSoundTrackKey:
	/// Size: 0x18
	/// Properties: 4
	/// </summary>
	public class FSoundTrackKey:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Volume
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Volume
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Pitch
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Pitch
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: Sound
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public USoundBase Sound => ReadUObject<USoundBase>(0x10);
		
	}


	/// <summary>
	/// FVisibilityTrackKey:
	/// Size: 0x08
	/// Properties: 3
	/// </summary>
	public class FVisibilityTrackKey:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: Time
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Time
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Action
		/// Type: ByteProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public byte Action
		{
			get
			{
				return ReadByte(0x04);
			}
			set
			{
				WriteByte(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: ActiveCondition
		/// Type: ByteProperty
		/// Offset: 0x05
		/// Size: 0x01
		/// </summary>
		public byte ActiveCondition
		{
			get
			{
				return ReadByte(0x05);
			}
			set
			{
				WriteByte(0x05,value);
			}
		}
		
	}


	/// <summary>
	/// FLayerActorStats:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FLayerActorStats:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Type
		/// Type: ClassProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: total
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int total
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FClientReceiveData:
	/// Size: 0x40
	/// Properties: 7
	/// </summary>
	public class FClientReceiveData:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: LocalPC
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public APlayerController LocalPC => ReadUObject<APlayerController>(0x00);
		
		/// <summary>
		/// Name: MessageType
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: MessageIndex
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int MessageIndex
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: MessageString
		/// Type: StrProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FString MessageString => new FString(BaseAddress+0x18);
		
		/// <summary>
		/// Name: RelatedPlayerState
		/// Type: ObjectProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public APlayerState RelatedPlayerState => ReadUObject<APlayerState>(0x28);
		
		/// <summary>
		/// Name: RelatedPlayerState1
		/// Type: ObjectProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public APlayerState RelatedPlayerState1 => ReadUObject<APlayerState>(0x30);
		
		/// <summary>
		/// Name: OptionalObject
		/// Type: ObjectProperty
		/// Offset: 0x38
		/// Size: 0x08
		/// </summary>
		public UObject OptionalObject => ReadUObject<UObject>(0x38);
		
	}


	/// <summary>
	/// FCustomInput:
	/// Size: 0x48
	/// Properties: 2
	/// </summary>
	public class FCustomInput:MemoryObject
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: InputName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString InputName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x10);
		
	}


	/// <summary>
	/// FFunctionExpressionOutput:
	/// Size: 0x40
	/// Properties: 3
	/// </summary>
	public class FFunctionExpressionOutput:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: ExpressionOutput
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UMaterialExpressionFunctionOutput ExpressionOutput => ReadUObject<UMaterialExpressionFunctionOutput>(0x00);
		
		/// <summary>
		/// Name: ExpressionOutputId
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FGuid ExpressionOutputId => ReadStruct<FGuid>(0x08);
		
		/// <summary>
		/// Name: Output
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x28
		/// </summary>
		public FExpressionOutput Output => ReadStruct<FExpressionOutput>(0x18);
		
	}


	/// <summary>
	/// FFunctionExpressionInput:
	/// Size: 0x50
	/// Properties: 3
	/// </summary>
	public class FFunctionExpressionInput:MemoryObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: ExpressionInput
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UMaterialExpressionFunctionInput ExpressionInput => ReadUObject<UMaterialExpressionFunctionInput>(0x00);
		
		/// <summary>
		/// Name: ExpressionInputId
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FGuid ExpressionInputId => ReadStruct<FGuid>(0x08);
		
		/// <summary>
		/// Name: Input
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x38
		/// </summary>
		public FExpressionInput Input => ReadStruct<FExpressionInput>(0x18);
		
	}


	/// <summary>
	/// FMaterialParameterCollectionInfo:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FMaterialParameterCollectionInfo:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: StateId
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FGuid StateId => ReadStruct<FGuid>(0x00);
		
		/// <summary>
		/// Name: ParameterCollection
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UMaterialParameterCollection ParameterCollection => ReadUObject<UMaterialParameterCollection>(0x10);
		
	}


	/// <summary>
	/// FMaterialFunctionInfo:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FMaterialFunctionInfo:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: StateId
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FGuid StateId => ReadStruct<FGuid>(0x00);
		
		/// <summary>
		/// Name: Function
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UMaterialFunction Function => ReadUObject<UMaterialFunction>(0x10);
		
	}


	/// <summary>
	/// FMaterialInstanceBasePropertyOverrides:
	/// Size: 0x14
	/// Properties: 10
	/// </summary>
	public class FMaterialInstanceBasePropertyOverrides:MemoryObject
	{
		public override int ObjectSize => 20;
		/// <summary>
		/// Name: bOverride_OpacityMaskClipValue
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_OpacityMaskClipValue
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: bOverride_BlendMode
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bOverride_BlendMode
		{
			get
			{
				return ReadBool(0x01);
			}
			set
			{
				WriteBool(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: bOverride_ShadingModel
		/// Type: BoolProperty
		/// Offset: 0x02
		/// Size: 0x01
		/// </summary>
		public bool bOverride_ShadingModel
		{
			get
			{
				return ReadBool(0x02);
			}
			set
			{
				WriteBool(0x02,value);
			}
		}
		
		/// <summary>
		/// Name: bOverride_DitheredLODTransition
		/// Type: BoolProperty
		/// Offset: 0x03
		/// Size: 0x01
		/// </summary>
		public bool bOverride_DitheredLODTransition
		{
			get
			{
				return ReadBool(0x03);
			}
			set
			{
				WriteBool(0x03,value);
			}
		}
		
		/// <summary>
		/// Name: bOverride_TwoSided
		/// Type: BoolProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public bool bOverride_TwoSided
		{
			get
			{
				return ReadBool(0x04);
			}
			set
			{
				WriteBool(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: OpacityMaskClipValue
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float OpacityMaskClipValue
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: BlendMode
		/// Type: ByteProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public byte BlendMode
		{
			get
			{
				return ReadByte(0x0C);
			}
			set
			{
				WriteByte(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: ShadingModel
		/// Type: ByteProperty
		/// Offset: 0x0D
		/// Size: 0x01
		/// </summary>
		public byte ShadingModel
		{
			get
			{
				return ReadByte(0x0D);
			}
			set
			{
				WriteByte(0x0D,value);
			}
		}
		
		/// <summary>
		/// Name: TwoSided
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool TwoSided => (ReadByte(0x0010) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: DitheredLODTransition
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool DitheredLODTransition => (ReadByte(0x0010) & 0x02) == 0x02;
		
	}


	/// <summary>
	/// FGraniteTextureParameterValue:
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FGraniteTextureParameterValue:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ParameterValue
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UGraniteTexture ParameterValue => ReadUObject<UGraniteTexture>(0x08);
		
		/// <summary>
		/// Name: ExpressionGUID
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FGuid ExpressionGUID => ReadStruct<FGuid>(0x10);
		
	}


	/// <summary>
	/// FVectorParameterValue:
	/// Size: 0x28
	/// Properties: 3
	/// </summary>
	public class FVectorParameterValue:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ParameterValue
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FLinearColor ParameterValue => ReadStruct<FLinearColor>(0x08);
		
		/// <summary>
		/// Name: ExpressionGUID
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FGuid ExpressionGUID => ReadStruct<FGuid>(0x18);
		
	}


	/// <summary>
	/// FTextureParameterValue:
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FTextureParameterValue:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ParameterValue
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UTexture ParameterValue => ReadUObject<UTexture>(0x08);
		
		/// <summary>
		/// Name: ExpressionGUID
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FGuid ExpressionGUID => ReadStruct<FGuid>(0x10);
		
	}


	/// <summary>
	/// FScalarParameterValue:
	/// Size: 0x20
	/// Properties: 3
	/// </summary>
	public class FScalarParameterValue:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ParameterValue
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float ParameterValue
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: ExpressionGUID
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x10
		/// </summary>
		public FGuid ExpressionGUID => ReadStruct<FGuid>(0x0C);
		
	}


	/// <summary>
	/// FFontParameterValue:
	/// Size: 0x28
	/// Properties: 4
	/// </summary>
	public class FFontParameterValue:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: FontValue
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UFont FontValue => ReadUObject<UFont>(0x08);
		
		/// <summary>
		/// Name: FontPage
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int FontPage
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: ExpressionGUID
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x10
		/// </summary>
		public FGuid ExpressionGUID => ReadStruct<FGuid>(0x14);
		
	}


	/// <summary>
	/// FCollectionVectorParameter:FCollectionParameterBase
	/// Size: 0x28
	/// Properties: 1
	/// </summary>
	public class FCollectionVectorParameter:FCollectionParameterBase
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: DefaultValue
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FLinearColor DefaultValue => ReadStruct<FLinearColor>(0x18);
		
	}


	/// <summary>
	/// FCollectionParameterBase:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FCollectionParameterBase:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ID
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FGuid ID => ReadStruct<FGuid>(0x08);
		
	}


	/// <summary>
	/// FCollectionScalarParameter:FCollectionParameterBase
	/// Size: 0x20
	/// Properties: 1
	/// </summary>
	public class FCollectionScalarParameter:FCollectionParameterBase
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: DefaultValue
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float DefaultValue
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FNavCollisionBox:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FNavCollisionBox:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: Offset
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Offset => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: Extent
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector Extent => ReadStruct<FVector>(0x0C);
		
	}


	/// <summary>
	/// FNavCollisionCylinder:
	/// Size: 0x14
	/// Properties: 3
	/// </summary>
	public class FNavCollisionCylinder:MemoryObject
	{
		public override int ObjectSize => 20;
		/// <summary>
		/// Name: Offset
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Offset => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: Radius
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float Radius
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: Height
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float Height
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FPacketSimulationSettings:
	/// Size: 0x14
	/// Properties: 5
	/// </summary>
	public class FPacketSimulationSettings:MemoryObject
	{
		public override int ObjectSize => 20;
		/// <summary>
		/// Name: PktLoss
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int PktLoss
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: PktOrder
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int PktOrder
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: PktDup
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int PktDup
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: PktLag
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int PktLag
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: PktLagVariance
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int PktLagVariance
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FParticleRandomSeedInfo:
	/// Size: 0x20
	/// Properties: 6
	/// </summary>
	public class FParticleRandomSeedInfo:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bGetSeedFromInstance
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bGetSeedFromInstance => (ReadByte(0x0008) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bInstanceSeedIsIndex
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bInstanceSeedIsIndex => (ReadByte(0x0008) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bResetSeedOnEmitterLooping
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bResetSeedOnEmitterLooping => (ReadByte(0x0008) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bRandomlySelectSeedArray
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bRandomlySelectSeedArray => (ReadByte(0x0008) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: RandomSeeds
		/// Type: TArray<>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FParticleCurvePair:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FParticleCurvePair:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: CurveName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString CurveName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: CurveObject
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UObject CurveObject => ReadUObject<UObject>(0x10);
		
	}


	/// <summary>
	/// FBeamModifierOptions:
	/// Size: 0x04
	/// Properties: 3
	/// </summary>
	public class FBeamModifierOptions:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: bModify
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bModify => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bScale
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bScale => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bLock
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bLock => (ReadByte(0x0000) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// FParticleEvent_GenerateInfo:
	/// Size: 0x28
	/// Properties: 9
	/// </summary>
	public class FParticleEvent_GenerateInfo:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Type
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte Type
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Frequency
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int Frequency
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: ParticleFrequency
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int ParticleFrequency
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: FirstTimeOnly
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool FirstTimeOnly => (ReadByte(0x000C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: LastTimeOnly
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool LastTimeOnly => (ReadByte(0x000C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: UseReflectedImpactVector
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool UseReflectedImpactVector => (ReadByte(0x000C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bUseOrbitOffset
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bUseOrbitOffset => (ReadByte(0x000C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: CustomName
		/// Type: NameProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ParticleModuleEventsToSendToGame
		/// Type: TArray<UParticleModuleEventSendToGame>
		/// Offset: 0x18
		/// Size: 0x10
		/// SubElement Size: 0x28
		/// </summary>
		public TArray<UParticleModuleEventSendToGame> ParticleModuleEventsToSendToGame => new TArray<UParticleModuleEventSendToGame>(BaseAddress+0x18);
		
	}


	/// <summary>
	/// FLocationBoneSocketInfo:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FLocationBoneSocketInfo:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: BoneSocketName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Offset
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x0C
		/// </summary>
		public FVector Offset => ReadStruct<FVector>(0x08);
		
	}


	/// <summary>
	/// FOrbitOptions:
	/// Size: 0x04
	/// Properties: 3
	/// </summary>
	public class FOrbitOptions:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: bProcessDuringSpawn
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bProcessDuringSpawn => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bProcessDuringUpdate
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bProcessDuringUpdate => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bUseEmitterTime
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bUseEmitterTime => (ReadByte(0x0000) & 0x04) == 0x04;
		
	}


	/// <summary>
	/// FEmitterDynamicParameter:
	/// Size: 0x50
	/// Properties: 6
	/// </summary>
	public class FEmitterDynamicParameter:MemoryObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: ParamName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bUseEmitterTime
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bUseEmitterTime => (ReadByte(0x0008) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bSpawnTimeOnly
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bSpawnTimeOnly => (ReadByte(0x0008) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: ValueMethod
		/// Type: ByteProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public byte ValueMethod
		{
			get
			{
				return ReadByte(0x0C);
			}
			set
			{
				WriteByte(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: bScaleVelocityByParamValue
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bScaleVelocityByParamValue => (ReadByte(0x0010) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ParamValue
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat ParamValue => ReadStruct<FRawDistributionFloat>(0x18);
		
	}


	/// <summary>
	/// FBeamTargetData:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FBeamTargetData:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: TargetName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: TargetPercentage
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float TargetPercentage
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FGPUSpriteResourceData:
	/// Size: 0x150
	/// Properties: 35
	/// </summary>
	public class FGPUSpriteResourceData:MemoryObject
	{
		public override int ObjectSize => 336;
		/// <summary>
		/// Name: QuantizedColorSamples
		/// Type: TArray<FColor>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x04
		/// </summary>
		public TArray<FColor> QuantizedColorSamples => new TArray<FColor>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: QuantizedMiscSamples
		/// Type: TArray<FColor>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x04
		/// </summary>
		public TArray<FColor> QuantizedMiscSamples => new TArray<FColor>(BaseAddress+0x10);
		
		/// <summary>
		/// Name: QuantizedSimulationAttrSamples
		/// Type: TArray<FColor>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x04
		/// </summary>
		public TArray<FColor> QuantizedSimulationAttrSamples => new TArray<FColor>(BaseAddress+0x20);
		
		/// <summary>
		/// Name: ColorScale
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FVector4 ColorScale => ReadStruct<FVector4>(0x30);
		
		/// <summary>
		/// Name: ColorBias
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FVector4 ColorBias => ReadStruct<FVector4>(0x40);
		
		/// <summary>
		/// Name: MiscScale
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FVector4 MiscScale => ReadStruct<FVector4>(0x50);
		
		/// <summary>
		/// Name: MiscBias
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x10
		/// </summary>
		public FVector4 MiscBias => ReadStruct<FVector4>(0x60);
		
		/// <summary>
		/// Name: SimulationAttrCurveScale
		/// Type: StructProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FVector4 SimulationAttrCurveScale => ReadStruct<FVector4>(0x70);
		
		/// <summary>
		/// Name: SimulationAttrCurveBias
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FVector4 SimulationAttrCurveBias => ReadStruct<FVector4>(0x80);
		
		/// <summary>
		/// Name: SubImageSize
		/// Type: StructProperty
		/// Offset: 0x90
		/// Size: 0x10
		/// </summary>
		public FVector4 SubImageSize => ReadStruct<FVector4>(0x90);
		
		/// <summary>
		/// Name: SizeBySpeed
		/// Type: StructProperty
		/// Offset: 0xA0
		/// Size: 0x10
		/// </summary>
		public FVector4 SizeBySpeed => ReadStruct<FVector4>(0xA0);
		
		/// <summary>
		/// Name: ConstantAcceleration
		/// Type: StructProperty
		/// Offset: 0xB0
		/// Size: 0x0C
		/// </summary>
		public FVector ConstantAcceleration => ReadStruct<FVector>(0xB0);
		
		/// <summary>
		/// Name: OrbitOffsetBase
		/// Type: StructProperty
		/// Offset: 0xBC
		/// Size: 0x0C
		/// </summary>
		public FVector OrbitOffsetBase => ReadStruct<FVector>(0xBC);
		
		/// <summary>
		/// Name: OrbitOffsetRange
		/// Type: StructProperty
		/// Offset: 0xC8
		/// Size: 0x0C
		/// </summary>
		public FVector OrbitOffsetRange => ReadStruct<FVector>(0xC8);
		
		/// <summary>
		/// Name: OrbitFrequencyBase
		/// Type: StructProperty
		/// Offset: 0xD4
		/// Size: 0x0C
		/// </summary>
		public FVector OrbitFrequencyBase => ReadStruct<FVector>(0xD4);
		
		/// <summary>
		/// Name: OrbitFrequencyRange
		/// Type: StructProperty
		/// Offset: 0xE0
		/// Size: 0x0C
		/// </summary>
		public FVector OrbitFrequencyRange => ReadStruct<FVector>(0xE0);
		
		/// <summary>
		/// Name: OrbitPhaseBase
		/// Type: StructProperty
		/// Offset: 0xEC
		/// Size: 0x0C
		/// </summary>
		public FVector OrbitPhaseBase => ReadStruct<FVector>(0xEC);
		
		/// <summary>
		/// Name: OrbitPhaseRange
		/// Type: StructProperty
		/// Offset: 0xF8
		/// Size: 0x0C
		/// </summary>
		public FVector OrbitPhaseRange => ReadStruct<FVector>(0xF8);
		
		/// <summary>
		/// Name: GlobalVectorFieldScale
		/// Type: FloatProperty
		/// Offset: 0x104
		/// Size: 0x04
		/// </summary>
		public float GlobalVectorFieldScale
		{
			get
			{
				return ReadSingle(0x104);
			}
			set
			{
				WriteSingle(0x104,value);
			}
		}
		
		/// <summary>
		/// Name: GlobalVectorFieldTightness
		/// Type: FloatProperty
		/// Offset: 0x108
		/// Size: 0x04
		/// </summary>
		public float GlobalVectorFieldTightness
		{
			get
			{
				return ReadSingle(0x108);
			}
			set
			{
				WriteSingle(0x108,value);
			}
		}
		
		/// <summary>
		/// Name: PerParticleVectorFieldScale
		/// Type: FloatProperty
		/// Offset: 0x10C
		/// Size: 0x04
		/// </summary>
		public float PerParticleVectorFieldScale
		{
			get
			{
				return ReadSingle(0x10C);
			}
			set
			{
				WriteSingle(0x10C,value);
			}
		}
		
		/// <summary>
		/// Name: PerParticleVectorFieldBias
		/// Type: FloatProperty
		/// Offset: 0x110
		/// Size: 0x04
		/// </summary>
		public float PerParticleVectorFieldBias
		{
			get
			{
				return ReadSingle(0x110);
			}
			set
			{
				WriteSingle(0x110,value);
			}
		}
		
		/// <summary>
		/// Name: DragCoefficientScale
		/// Type: FloatProperty
		/// Offset: 0x114
		/// Size: 0x04
		/// </summary>
		public float DragCoefficientScale
		{
			get
			{
				return ReadSingle(0x114);
			}
			set
			{
				WriteSingle(0x114,value);
			}
		}
		
		/// <summary>
		/// Name: DragCoefficientBias
		/// Type: FloatProperty
		/// Offset: 0x118
		/// Size: 0x04
		/// </summary>
		public float DragCoefficientBias
		{
			get
			{
				return ReadSingle(0x118);
			}
			set
			{
				WriteSingle(0x118,value);
			}
		}
		
		/// <summary>
		/// Name: ResilienceScale
		/// Type: FloatProperty
		/// Offset: 0x11C
		/// Size: 0x04
		/// </summary>
		public float ResilienceScale
		{
			get
			{
				return ReadSingle(0x11C);
			}
			set
			{
				WriteSingle(0x11C,value);
			}
		}
		
		/// <summary>
		/// Name: ResilienceBias
		/// Type: FloatProperty
		/// Offset: 0x120
		/// Size: 0x04
		/// </summary>
		public float ResilienceBias
		{
			get
			{
				return ReadSingle(0x120);
			}
			set
			{
				WriteSingle(0x120,value);
			}
		}
		
		/// <summary>
		/// Name: CollisionRadiusScale
		/// Type: FloatProperty
		/// Offset: 0x124
		/// Size: 0x04
		/// </summary>
		public float CollisionRadiusScale
		{
			get
			{
				return ReadSingle(0x124);
			}
			set
			{
				WriteSingle(0x124,value);
			}
		}
		
		/// <summary>
		/// Name: CollisionRadiusBias
		/// Type: FloatProperty
		/// Offset: 0x128
		/// Size: 0x04
		/// </summary>
		public float CollisionRadiusBias
		{
			get
			{
				return ReadSingle(0x128);
			}
			set
			{
				WriteSingle(0x128,value);
			}
		}
		
		/// <summary>
		/// Name: CollisionTimeBias
		/// Type: FloatProperty
		/// Offset: 0x12C
		/// Size: 0x04
		/// </summary>
		public float CollisionTimeBias
		{
			get
			{
				return ReadSingle(0x12C);
			}
			set
			{
				WriteSingle(0x12C,value);
			}
		}
		
		/// <summary>
		/// Name: OneMinusFriction
		/// Type: FloatProperty
		/// Offset: 0x130
		/// Size: 0x04
		/// </summary>
		public float OneMinusFriction
		{
			get
			{
				return ReadSingle(0x130);
			}
			set
			{
				WriteSingle(0x130,value);
			}
		}
		
		/// <summary>
		/// Name: RotationRateScale
		/// Type: FloatProperty
		/// Offset: 0x134
		/// Size: 0x04
		/// </summary>
		public float RotationRateScale
		{
			get
			{
				return ReadSingle(0x134);
			}
			set
			{
				WriteSingle(0x134,value);
			}
		}
		
		/// <summary>
		/// Name: CameraMotionBlurAmount
		/// Type: FloatProperty
		/// Offset: 0x138
		/// Size: 0x04
		/// </summary>
		public float CameraMotionBlurAmount
		{
			get
			{
				return ReadSingle(0x138);
			}
			set
			{
				WriteSingle(0x138,value);
			}
		}
		
		/// <summary>
		/// Name: ScreenAlignment
		/// Type: ByteProperty
		/// Offset: 0x13C
		/// Size: 0x01
		/// </summary>
		public byte ScreenAlignment
		{
			get
			{
				return ReadByte(0x13C);
			}
			set
			{
				WriteByte(0x13C,value);
			}
		}
		
		/// <summary>
		/// Name: LockAxisFlag
		/// Type: ByteProperty
		/// Offset: 0x13D
		/// Size: 0x01
		/// </summary>
		public byte LockAxisFlag
		{
			get
			{
				return ReadByte(0x13D);
			}
			set
			{
				WriteByte(0x13D,value);
			}
		}
		
		/// <summary>
		/// Name: PivotOffset
		/// Type: StructProperty
		/// Offset: 0x140
		/// Size: 0x08
		/// </summary>
		public FVector2D PivotOffset => ReadStruct<FVector2D>(0x140);
		
	}


	/// <summary>
	/// FGPUSpriteEmitterInfo:
	/// Size: 0x2B0
	/// Properties: 26
	/// </summary>
	public class FGPUSpriteEmitterInfo:MemoryObject
	{
		public override int ObjectSize => 688;
		/// <summary>
		/// Name: RequiredModule
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UParticleModuleRequired RequiredModule => ReadUObject<UParticleModuleRequired>(0x00);
		
		/// <summary>
		/// Name: SpawnModule
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UParticleModuleSpawn SpawnModule => ReadUObject<UParticleModuleSpawn>(0x08);
		
		/// <summary>
		/// Name: SpawnPerUnitModule
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UParticleModuleSpawnPerUnit SpawnPerUnitModule => ReadUObject<UParticleModuleSpawnPerUnit>(0x10);
		
		/// <summary>
		/// Name: SpawnModules
		/// Type: TArray<UParticleModule>
		/// Offset: 0x18
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<UParticleModule> SpawnModules => new TArray<UParticleModule>(BaseAddress+0x18);
		
		/// <summary>
		/// Name: LocalVectorField
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x70
		/// </summary>
		public FGPUSpriteLocalVectorFieldInfo LocalVectorField => ReadStruct<FGPUSpriteLocalVectorFieldInfo>(0x30);
		
		/// <summary>
		/// Name: VectorFieldScale
		/// Type: StructProperty
		/// Offset: 0xA0
		/// Size: 0x28
		/// </summary>
		public FFloatDistribution VectorFieldScale => ReadStruct<FFloatDistribution>(0xA0);
		
		/// <summary>
		/// Name: DragCoefficient
		/// Type: StructProperty
		/// Offset: 0xC8
		/// Size: 0x28
		/// </summary>
		public FFloatDistribution DragCoefficient => ReadStruct<FFloatDistribution>(0xC8);
		
		/// <summary>
		/// Name: PointAttractorStrength
		/// Type: StructProperty
		/// Offset: 0xF0
		/// Size: 0x28
		/// </summary>
		public FFloatDistribution PointAttractorStrength => ReadStruct<FFloatDistribution>(0xF0);
		
		/// <summary>
		/// Name: Resilience
		/// Type: StructProperty
		/// Offset: 0x118
		/// Size: 0x28
		/// </summary>
		public FFloatDistribution Resilience => ReadStruct<FFloatDistribution>(0x118);
		
		/// <summary>
		/// Name: ConstantAcceleration
		/// Type: StructProperty
		/// Offset: 0x140
		/// Size: 0x0C
		/// </summary>
		public FVector ConstantAcceleration => ReadStruct<FVector>(0x140);
		
		/// <summary>
		/// Name: PointAttractorPosition
		/// Type: StructProperty
		/// Offset: 0x14C
		/// Size: 0x0C
		/// </summary>
		public FVector PointAttractorPosition => ReadStruct<FVector>(0x14C);
		
		/// <summary>
		/// Name: PointAttractorRadiusSq
		/// Type: FloatProperty
		/// Offset: 0x158
		/// Size: 0x04
		/// </summary>
		public float PointAttractorRadiusSq
		{
			get
			{
				return ReadSingle(0x158);
			}
			set
			{
				WriteSingle(0x158,value);
			}
		}
		
		/// <summary>
		/// Name: OrbitOffsetBase
		/// Type: StructProperty
		/// Offset: 0x15C
		/// Size: 0x0C
		/// </summary>
		public FVector OrbitOffsetBase => ReadStruct<FVector>(0x15C);
		
		/// <summary>
		/// Name: OrbitOffsetRange
		/// Type: StructProperty
		/// Offset: 0x168
		/// Size: 0x0C
		/// </summary>
		public FVector OrbitOffsetRange => ReadStruct<FVector>(0x168);
		
		/// <summary>
		/// Name: InvMaxSize
		/// Type: StructProperty
		/// Offset: 0x174
		/// Size: 0x08
		/// </summary>
		public FVector2D InvMaxSize => ReadStruct<FVector2D>(0x174);
		
		/// <summary>
		/// Name: InvRotationRateScale
		/// Type: FloatProperty
		/// Offset: 0x17C
		/// Size: 0x04
		/// </summary>
		public float InvRotationRateScale
		{
			get
			{
				return ReadSingle(0x17C);
			}
			set
			{
				WriteSingle(0x17C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxLifetime
		/// Type: FloatProperty
		/// Offset: 0x180
		/// Size: 0x04
		/// </summary>
		public float MaxLifetime
		{
			get
			{
				return ReadSingle(0x180);
			}
			set
			{
				WriteSingle(0x180,value);
			}
		}
		
		/// <summary>
		/// Name: MaxParticleCount
		/// Type: IntProperty
		/// Offset: 0x184
		/// Size: 0x04
		/// </summary>
		public int MaxParticleCount
		{
			get
			{
				return ReadInt32(0x184);
			}
			set
			{
				WriteInt32(0x184,value);
			}
		}
		
		/// <summary>
		/// Name: ScreenAlignment
		/// Type: ByteProperty
		/// Offset: 0x188
		/// Size: 0x01
		/// </summary>
		public byte ScreenAlignment
		{
			get
			{
				return ReadByte(0x188);
			}
			set
			{
				WriteByte(0x188,value);
			}
		}
		
		/// <summary>
		/// Name: LockAxisFlag
		/// Type: ByteProperty
		/// Offset: 0x189
		/// Size: 0x01
		/// </summary>
		public byte LockAxisFlag
		{
			get
			{
				return ReadByte(0x189);
			}
			set
			{
				WriteByte(0x189,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableCollision
		/// Type: BoolProperty
		/// Offset: 0x18C
		/// Size: 0x01
		/// </summary>
		public bool bEnableCollision => (ReadByte(0x018C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: CollisionMode
		/// Type: ByteProperty
		/// Offset: 0x190
		/// Size: 0x01
		/// </summary>
		public byte CollisionMode
		{
			get
			{
				return ReadByte(0x190);
			}
			set
			{
				WriteByte(0x190,value);
			}
		}
		
		/// <summary>
		/// Name: DynamicColor
		/// Type: StructProperty
		/// Offset: 0x198
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector DynamicColor => ReadStruct<FRawDistributionVector>(0x198);
		
		/// <summary>
		/// Name: DynamicAlpha
		/// Type: StructProperty
		/// Offset: 0x1E8
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat DynamicAlpha => ReadStruct<FRawDistributionFloat>(0x1E8);
		
		/// <summary>
		/// Name: DynamicColorScale
		/// Type: StructProperty
		/// Offset: 0x220
		/// Size: 0x50
		/// </summary>
		public FRawDistributionVector DynamicColorScale => ReadStruct<FRawDistributionVector>(0x220);
		
		/// <summary>
		/// Name: DynamicAlphaScale
		/// Type: StructProperty
		/// Offset: 0x270
		/// Size: 0x38
		/// </summary>
		public FRawDistributionFloat DynamicAlphaScale => ReadStruct<FRawDistributionFloat>(0x270);
		
	}


	/// <summary>
	/// FGPUSpriteLocalVectorFieldInfo:
	/// Size: 0x70
	/// Properties: 11
	/// </summary>
	public class FGPUSpriteLocalVectorFieldInfo:MemoryObject
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: Field
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UVectorField Field => ReadUObject<UVectorField>(0x00);
		
		/// <summary>
		/// Name: Transform
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x30
		/// </summary>
		public FTransform Transform => ReadStruct<FTransform>(0x10);
		
		/// <summary>
		/// Name: MinInitialRotation
		/// Type: StructProperty
		/// Offset: 0x40
		/// Size: 0x0C
		/// </summary>
		public FRotator MinInitialRotation => ReadStruct<FRotator>(0x40);
		
		/// <summary>
		/// Name: MaxInitialRotation
		/// Type: StructProperty
		/// Offset: 0x4C
		/// Size: 0x0C
		/// </summary>
		public FRotator MaxInitialRotation => ReadStruct<FRotator>(0x4C);
		
		/// <summary>
		/// Name: RotationRate
		/// Type: StructProperty
		/// Offset: 0x58
		/// Size: 0x0C
		/// </summary>
		public FRotator RotationRate => ReadStruct<FRotator>(0x58);
		
		/// <summary>
		/// Name: Intensity
		/// Type: FloatProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public float Intensity
		{
			get
			{
				return ReadSingle(0x64);
			}
			set
			{
				WriteSingle(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: Tightness
		/// Type: FloatProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public float Tightness
		{
			get
			{
				return ReadSingle(0x68);
			}
			set
			{
				WriteSingle(0x68,value);
			}
		}
		
		/// <summary>
		/// Name: bIgnoreComponentTransform
		/// Type: BoolProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public bool bIgnoreComponentTransform => (ReadByte(0x006C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bTileX
		/// Type: BoolProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public bool bTileX => (ReadByte(0x006C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bTileY
		/// Type: BoolProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public bool bTileY => (ReadByte(0x006C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bTileZ
		/// Type: BoolProperty
		/// Offset: 0x6C
		/// Size: 0x01
		/// </summary>
		public bool bTileZ => (ReadByte(0x006C) & 0x08) == 0x08;
		
	}


	/// <summary>
	/// FParticleSystemReplayFrame:
	/// Size: 0x10
	/// Properties: 0
	/// </summary>
	public class FParticleSystemReplayFrame:MemoryObject
	{
		public override int ObjectSize => 16;
	}


	/// <summary>
	/// FParticleEmitterReplayFrame:
	/// Size: 0x10
	/// Properties: 0
	/// </summary>
	public class FParticleEmitterReplayFrame:MemoryObject
	{
		public override int ObjectSize => 16;
	}


	/// <summary>
	/// FTireFrictionScalePair:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FTireFrictionScalePair:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: TireType
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UTireType TireType => ReadUObject<UTireType>(0x00);
		
		/// <summary>
		/// Name: FrictionScale
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float FrictionScale
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FDelegateArray:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FDelegateArray:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Delegates
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FPurchaseInfo:
	/// Size: 0x40
	/// Properties: 4
	/// </summary>
	public class FPurchaseInfo:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Identifier
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Identifier => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: DisplayName
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString DisplayName => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: DisplayDescription
		/// Type: StrProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FString DisplayDescription => new FString(BaseAddress+0x20);
		
		/// <summary>
		/// Name: DisplayPrice
		/// Type: StrProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FString DisplayPrice => new FString(BaseAddress+0x30);
		
	}


	/// <summary>
	/// FTransformBase:
	/// Size: 0x28
	/// Properties: 2
	/// </summary>
	public class FTransformBase:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: Node
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Constraints
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FTransformBaseConstraint Constraints => ReadStruct<FTransformBaseConstraint>(0x08);
		
	}


	/// <summary>
	/// FTransformBaseConstraint:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FTransformBaseConstraint:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: TransformConstraints
		/// Type: TArray<FRigTransformConstraint>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x18
		/// </summary>
		public TArray<FRigTransformConstraint> TransformConstraints => new TArray<FRigTransformConstraint>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FRigTransformConstraint:
	/// Size: 0x18
	/// Properties: 3
	/// </summary>
	public class FRigTransformConstraint:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: TranformType
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte TranformType
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ParentSpace
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Weight
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float Weight
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FNode:
	/// Size: 0x60
	/// Properties: 5
	/// </summary>
	public class FNode:MemoryObject
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ParentName
		/// Type: NameProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Transform
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x30
		/// </summary>
		public FTransform Transform => ReadStruct<FTransform>(0x10);
		
		/// <summary>
		/// Name: DisplayName
		/// Type: StrProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FString DisplayName => new FString(BaseAddress+0x40);
		
		/// <summary>
		/// Name: bAdvanced
		/// Type: BoolProperty
		/// Offset: 0x50
		/// Size: 0x01
		/// </summary>
		public bool bAdvanced
		{
			get
			{
				return ReadBool(0x50);
			}
			set
			{
				WriteBool(0x50,value);
			}
		}
		
	}


	/// <summary>
	/// FDebugDisplayProperty:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FDebugDisplayProperty:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: Obj
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UObject Obj => ReadUObject<UObject>(0x00);
		
		/// <summary>
		/// Name: WithinClass
		/// Type: ClassProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FDestructibleParameters:
	/// Size: 0x88
	/// Properties: 6
	/// </summary>
	public class FDestructibleParameters:MemoryObject
	{
		public override int ObjectSize => 136;
		/// <summary>
		/// Name: DamageParameters
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x1C
		/// </summary>
		public FDestructibleDamageParameters DamageParameters => ReadStruct<FDestructibleDamageParameters>(0x00);
		
		/// <summary>
		/// Name: DebrisParameters
		/// Type: StructProperty
		/// Offset: 0x1C
		/// Size: 0x2C
		/// </summary>
		public FDestructibleDebrisParameters DebrisParameters => ReadStruct<FDestructibleDebrisParameters>(0x1C);
		
		/// <summary>
		/// Name: AdvancedParameters
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x10
		/// </summary>
		public FDestructibleAdvancedParameters AdvancedParameters => ReadStruct<FDestructibleAdvancedParameters>(0x48);
		
		/// <summary>
		/// Name: SpecialHierarchyDepths
		/// Type: StructProperty
		/// Offset: 0x58
		/// Size: 0x14
		/// </summary>
		public FDestructibleSpecialHierarchyDepths SpecialHierarchyDepths => ReadStruct<FDestructibleSpecialHierarchyDepths>(0x58);
		
		/// <summary>
		/// Name: DepthParameters
		/// Type: TArray<FDestructibleDepthParameters>
		/// Offset: 0x70
		/// Size: 0x10
		/// SubElement Size: 0x01
		/// </summary>
		public TArray<FDestructibleDepthParameters> DepthParameters => new TArray<FDestructibleDepthParameters>(BaseAddress+0x70);
		
		/// <summary>
		/// Name: flags
		/// Type: StructProperty
		/// Offset: 0x80
		/// Size: 0x04
		/// </summary>
		public FDestructibleParametersFlag flags => ReadStruct<FDestructibleParametersFlag>(0x80);
		
	}


	/// <summary>
	/// FDestructibleParametersFlag:
	/// Size: 0x04
	/// Properties: 9
	/// </summary>
	public class FDestructibleParametersFlag:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: bAccumulateDamage
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bAccumulateDamage => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bAssetDefinedSupport
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bAssetDefinedSupport => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bWorldSupport
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bWorldSupport => (ReadByte(0x0000) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bDebrisTimeout
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bDebrisTimeout => (ReadByte(0x0000) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bDebrisMaxSeparation
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bDebrisMaxSeparation => (ReadByte(0x0000) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bCrumbleSmallestChunks
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bCrumbleSmallestChunks => (ReadByte(0x0000) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bAccurateRaycasts
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bAccurateRaycasts => (ReadByte(0x0000) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bUseValidBounds
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bUseValidBounds => (ReadByte(0x0000) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bFormExtendedStructures
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bFormExtendedStructures => (ReadByte(0x0001) & 0x01) == 0x01;
		
	}


	/// <summary>
	/// FDestructibleDepthParameters:
	/// Size: 0x01
	/// Properties: 1
	/// </summary>
	public class FDestructibleDepthParameters:MemoryObject
	{
		public override int ObjectSize => 1;
		/// <summary>
		/// Name: ImpactDamageOverride
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte ImpactDamageOverride
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
	}


	/// <summary>
	/// FDestructibleSpecialHierarchyDepths:
	/// Size: 0x14
	/// Properties: 5
	/// </summary>
	public class FDestructibleSpecialHierarchyDepths:MemoryObject
	{
		public override int ObjectSize => 20;
		/// <summary>
		/// Name: SupportDepth
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int SupportDepth
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: MinimumFractureDepth
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int MinimumFractureDepth
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableDebris
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bEnableDebris
		{
			get
			{
				return ReadBool(0x08);
			}
			set
			{
				WriteBool(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: DebrisDepth
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int DebrisDepth
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: EssentialDepth
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int EssentialDepth
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FDestructibleAdvancedParameters:
	/// Size: 0x10
	/// Properties: 4
	/// </summary>
	public class FDestructibleAdvancedParameters:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: DamageCap
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float DamageCap
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ImpactVelocityThreshold
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float ImpactVelocityThreshold
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: MaxChunkSpeed
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float MaxChunkSpeed
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: FractureImpulseScale
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float FractureImpulseScale
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FDestructibleDebrisParameters:
	/// Size: 0x2C
	/// Properties: 5
	/// </summary>
	public class FDestructibleDebrisParameters:MemoryObject
	{
		public override int ObjectSize => 44;
		/// <summary>
		/// Name: DebrisLifetimeMin
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float DebrisLifetimeMin
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: DebrisLifetimeMax
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float DebrisLifetimeMax
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: DebrisMaxSeparationMin
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float DebrisMaxSeparationMin
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: DebrisMaxSeparationMax
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float DebrisMaxSeparationMax
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: ValidBounds
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x1C
		/// </summary>
		public FBox ValidBounds => ReadStruct<FBox>(0x10);
		
	}


	/// <summary>
	/// FDestructibleDamageParameters:
	/// Size: 0x1C
	/// Properties: 7
	/// </summary>
	public class FDestructibleDamageParameters:MemoryObject
	{
		public override int ObjectSize => 28;
		/// <summary>
		/// Name: DamageThreshold
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float DamageThreshold
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: DamageSpread
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float DamageSpread
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableImpactDamage
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bEnableImpactDamage
		{
			get
			{
				return ReadBool(0x08);
			}
			set
			{
				WriteBool(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: ImpactDamage
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float ImpactDamage
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: DefaultImpactDamageDepth
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int DefaultImpactDamageDepth
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: bCustomImpactResistance
		/// Type: BoolProperty
		/// Offset: 0x14
		/// Size: 0x01
		/// </summary>
		public bool bCustomImpactResistance
		{
			get
			{
				return ReadBool(0x14);
			}
			set
			{
				WriteBool(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: ImpactResistance
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float ImpactResistance
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
	}


	/// <summary>
	/// FSkeletalMeshLODGroupSettings:
	/// Size: 0xF8
	/// Properties: 2
	/// </summary>
	public class FSkeletalMeshLODGroupSettings:MemoryObject
	{
		public override int ObjectSize => 248;
		/// <summary>
		/// Name: ScreenSize
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float ScreenSize
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: OptimizationSettings
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0xF0
		/// </summary>
		public FSkeletalMeshOptimizationSettings OptimizationSettings => ReadStruct<FSkeletalMeshOptimizationSettings>(0x08);
		
	}


	/// <summary>
	/// FSoundConcurrencySettings:
	/// Size: 0x10
	/// Properties: 4
	/// </summary>
	public class FSoundConcurrencySettings:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: MaxCount
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int MaxCount
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: bLimitToOwner
		/// Type: BoolProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public bool bLimitToOwner => (ReadByte(0x0004) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: ResolutionRule
		/// Type: ByteProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public byte ResolutionRule
		{
			get
			{
				return ReadByte(0x08);
			}
			set
			{
				WriteByte(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: VolumeScale
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float VolumeScale
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FSoundNodeEditorData:
	/// Size: 0x08
	/// Properties: 0
	/// </summary>
	public class FSoundNodeEditorData:MemoryObject
	{
		public override int ObjectSize => 8;
	}


	/// <summary>
	/// FSoundGroup:
	/// Size: 0x20
	/// Properties: 4
	/// </summary>
	public class FSoundGroup:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: SoundGroup
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte SoundGroup
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: DisplayName
		/// Type: StrProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FString DisplayName => new FString(BaseAddress+0x08);
		
		/// <summary>
		/// Name: bAlwaysDecompressOnLoad
		/// Type: BoolProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public bool bAlwaysDecompressOnLoad => (ReadByte(0x0018) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: DecompressedDuration
		/// Type: FloatProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public float DecompressedDuration
		{
			get
			{
				return ReadSingle(0x1C);
			}
			set
			{
				WriteSingle(0x1C,value);
			}
		}
		
	}


	/// <summary>
	/// FStreamedAudioPlatformData:
	/// Size: 0x20
	/// Properties: 0
	/// </summary>
	public class FStreamedAudioPlatformData:MemoryObject
	{
		public override int ObjectSize => 32;
	}


	/// <summary>
	/// FPassiveSoundMixModifier:
	/// Size: 0x10
	/// Properties: 3
	/// </summary>
	public class FPassiveSoundMixModifier:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: SoundMix
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public USoundMix SoundMix => ReadUObject<USoundMix>(0x00);
		
		/// <summary>
		/// Name: MinVolumeThreshold
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float MinVolumeThreshold
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: MaxVolumeThreshold
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float MaxVolumeThreshold
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FSoundClassProperties:
	/// Size: 0x24
	/// Properties: 15
	/// </summary>
	public class FSoundClassProperties:MemoryObject
	{
		public override int ObjectSize => 36;
		/// <summary>
		/// Name: Volume
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Volume
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Pitch
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float Pitch
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: StereoBleed
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float StereoBleed
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: LFEBleed
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float LFEBleed
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: VoiceCenterChannelVolume
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float VoiceCenterChannelVolume
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: RadioFilterVolume
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float RadioFilterVolume
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: RadioFilterVolumeThreshold
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float RadioFilterVolumeThreshold
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: bApplyEffects
		/// Type: BoolProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public bool bApplyEffects => (ReadByte(0x001C) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bAlwaysPlay
		/// Type: BoolProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public bool bAlwaysPlay => (ReadByte(0x001C) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bIsUISound
		/// Type: BoolProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public bool bIsUISound => (ReadByte(0x001C) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bIsMusic
		/// Type: BoolProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public bool bIsMusic => (ReadByte(0x001C) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bReverb
		/// Type: BoolProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public bool bReverb => (ReadByte(0x001C) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bCenterChannelOnly
		/// Type: BoolProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public bool bCenterChannelOnly => (ReadByte(0x001C) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bApplyAmbientVolumes
		/// Type: BoolProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public bool bApplyAmbientVolumes => (ReadByte(0x001C) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: OutputTarget
		/// Type: ByteProperty
		/// Offset: 0x20
		/// Size: 0x01
		/// </summary>
		public byte OutputTarget
		{
			get
			{
				return ReadByte(0x20);
			}
			set
			{
				WriteByte(0x20,value);
			}
		}
		
	}


	/// <summary>
	/// FSoundClassEditorData:
	/// Size: 0x08
	/// Properties: 0
	/// </summary>
	public class FSoundClassEditorData:MemoryObject
	{
		public override int ObjectSize => 8;
	}


	/// <summary>
	/// FSoundClassAdjuster:
	/// Size: 0x18
	/// Properties: 5
	/// </summary>
	public class FSoundClassAdjuster:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: SoundClassObject
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public USoundClass SoundClassObject => ReadUObject<USoundClass>(0x00);
		
		/// <summary>
		/// Name: VolumeAdjuster
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float VolumeAdjuster
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: PitchAdjuster
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float PitchAdjuster
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: bApplyToChildren
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bApplyToChildren => (ReadByte(0x0010) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: VoiceCenterChannelVolumeAdjuster
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float VoiceCenterChannelVolumeAdjuster
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
	}


	/// <summary>
	/// FAudioEQEffect:
	/// Size: 0x38
	/// Properties: 12
	/// </summary>
	public class FAudioEQEffect:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: FrequencyCenter0
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float FrequencyCenter0
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: Gain0
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float Gain0
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: Bandwidth0
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float Bandwidth0
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: FrequencyCenter1
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float FrequencyCenter1
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: Gain1
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float Gain1
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: Bandwidth1
		/// Type: FloatProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public float Bandwidth1
		{
			get
			{
				return ReadSingle(0x1C);
			}
			set
			{
				WriteSingle(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: FrequencyCenter2
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float FrequencyCenter2
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: Gain2
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float Gain2
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: Bandwidth2
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float Bandwidth2
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: FrequencyCenter3
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float FrequencyCenter3
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: Gain3
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float Gain3
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: Bandwidth3
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float Bandwidth3
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
	}


	/// <summary>
	/// FDistanceDatum:
	/// Size: 0x14
	/// Properties: 5
	/// </summary>
	public class FDistanceDatum:MemoryObject
	{
		public override int ObjectSize => 20;
		/// <summary>
		/// Name: FadeInDistanceStart
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float FadeInDistanceStart
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: FadeInDistanceEnd
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float FadeInDistanceEnd
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: FadeOutDistanceStart
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float FadeOutDistanceStart
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: FadeOutDistanceEnd
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float FadeOutDistanceEnd
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: Volume
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float Volume
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FModulatorContinuousParams:
	/// Size: 0x20
	/// Properties: 7
	/// </summary>
	public class FModulatorContinuousParams:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: ParameterName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Default
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Default
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: MinInput
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float MinInput
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: MaxInput
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float MaxInput
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: MinOutput
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float MinOutput
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: MaxOutput
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float MaxOutput
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: ParamMode
		/// Type: ByteProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public byte ParamMode
		{
			get
			{
				return ReadByte(0x1C);
			}
			set
			{
				WriteByte(0x1C,value);
			}
		}
		
	}


	/// <summary>
	/// FAssetEditorOrbitCameraPosition:
	/// Size: 0x28
	/// Properties: 4
	/// </summary>
	public class FAssetEditorOrbitCameraPosition:MemoryObject
	{
		public override int ObjectSize => 40;
		/// <summary>
		/// Name: bIsSet
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bIsSet
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: CamOrbitPoint
		/// Type: StructProperty
		/// Offset: 0x04
		/// Size: 0x0C
		/// </summary>
		public FVector CamOrbitPoint => ReadStruct<FVector>(0x04);
		
		/// <summary>
		/// Name: CamOrbitZoom
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x0C
		/// </summary>
		public FVector CamOrbitZoom => ReadStruct<FVector>(0x10);
		
		/// <summary>
		/// Name: CamOrbitRotation
		/// Type: StructProperty
		/// Offset: 0x1C
		/// Size: 0x0C
		/// </summary>
		public FRotator CamOrbitRotation => ReadStruct<FRotator>(0x1C);
		
	}


	/// <summary>
	/// FMeshSectionInfoMap:
	/// Size: 0x50
	/// Properties: 0
	/// </summary>
	public class FMeshSectionInfoMap:MemoryObject
	{
		public override int ObjectSize => 80;
	}


	/// <summary>
	/// FMeshSectionInfo:
	/// Size: 0x08
	/// Properties: 3
	/// </summary>
	public class FMeshSectionInfo:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: MaterialIndex
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int MaterialIndex
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableCollision
		/// Type: BoolProperty
		/// Offset: 0x04
		/// Size: 0x01
		/// </summary>
		public bool bEnableCollision
		{
			get
			{
				return ReadBool(0x04);
			}
			set
			{
				WriteBool(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: bCastShadow
		/// Type: BoolProperty
		/// Offset: 0x05
		/// Size: 0x01
		/// </summary>
		public bool bCastShadow
		{
			get
			{
				return ReadBool(0x05);
			}
			set
			{
				WriteBool(0x05,value);
			}
		}
		
	}


	/// <summary>
	/// FStaticMeshSourceModel:
	/// Size: 0x330
	/// Properties: 7
	/// </summary>
	public class FStaticMeshSourceModel:MemoryObject
	{
		public override int ObjectSize => 816;
		/// <summary>
		/// Name: BuildSettings
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x38
		/// </summary>
		public FMeshBuildSettings BuildSettings => ReadStruct<FMeshBuildSettings>(0x00);
		
		/// <summary>
		/// Name: ReductionSettings
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0xD0
		/// </summary>
		public FMeshReductionSettings ReductionSettings => ReadStruct<FMeshReductionSettings>(0x38);
		
		/// <summary>
		/// Name: RemeshingSettings
		/// Type: StructProperty
		/// Offset: 0x108
		/// Size: 0x50
		/// </summary>
		public FSimplygonRemeshingSettings RemeshingSettings => ReadStruct<FSimplygonRemeshingSettings>(0x108);
		
		/// <summary>
		/// Name: bHasBeenSimplified
		/// Type: BoolProperty
		/// Offset: 0x158
		/// Size: 0x01
		/// </summary>
		public bool bHasBeenSimplified
		{
			get
			{
				return ReadBool(0x158);
			}
			set
			{
				WriteBool(0x158,value);
			}
		}
		
		/// <summary>
		/// Name: OptimizationSettings
		/// Type: StructProperty
		/// Offset: 0x160
		/// Size: 0x1C8
		/// </summary>
		public FGroupedStaticMeshOptimizationSettings OptimizationSettings => ReadStruct<FGroupedStaticMeshOptimizationSettings>(0x160);
		
		/// <summary>
		/// Name: LODDistance
		/// Type: FloatProperty
		/// Offset: 0x328
		/// Size: 0x04
		/// </summary>
		public float LODDistance
		{
			get
			{
				return ReadSingle(0x328);
			}
			set
			{
				WriteSingle(0x328,value);
			}
		}
		
		/// <summary>
		/// Name: ScreenSize
		/// Type: FloatProperty
		/// Offset: 0x32C
		/// Size: 0x04
		/// </summary>
		public float ScreenSize
		{
			get
			{
				return ReadSingle(0x32C);
			}
			set
			{
				WriteSingle(0x32C,value);
			}
		}
		
	}


	/// <summary>
	/// FGroupedStaticMeshOptimizationSettings:
	/// Size: 0x1C8
	/// Properties: 3
	/// </summary>
	public class FGroupedStaticMeshOptimizationSettings:MemoryObject
	{
		public override int ObjectSize => 456;
		/// <summary>
		/// Name: LevelOfDetailType
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte LevelOfDetailType
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: ReductionSettings
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0xD0
		/// </summary>
		public FMeshReductionSettings ReductionSettings => ReadStruct<FMeshReductionSettings>(0x08);
		
		/// <summary>
		/// Name: ProxySettings
		/// Type: StructProperty
		/// Offset: 0xD8
		/// Size: 0xEC
		/// </summary>
		public FMeshProxySettings ProxySettings => ReadStruct<FMeshProxySettings>(0xD8);
		
	}


	/// <summary>
	/// FStaticMeshOptimizationSettings:
	/// Size: 0x1C
	/// Properties: 9
	/// </summary>
	public class FStaticMeshOptimizationSettings:MemoryObject
	{
		public override int ObjectSize => 28;
		/// <summary>
		/// Name: ReductionMethod
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte ReductionMethod
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: NumOfTrianglesPercentage
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float NumOfTrianglesPercentage
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: MaxDeviationPercentage
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float MaxDeviationPercentage
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: WeldingThreshold
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float WeldingThreshold
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: bRecalcNormals
		/// Type: BoolProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public bool bRecalcNormals
		{
			get
			{
				return ReadBool(0x10);
			}
			set
			{
				WriteBool(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: NormalsThreshold
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float NormalsThreshold
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: SilhouetteImportance
		/// Type: ByteProperty
		/// Offset: 0x18
		/// Size: 0x01
		/// </summary>
		public byte SilhouetteImportance
		{
			get
			{
				return ReadByte(0x18);
			}
			set
			{
				WriteByte(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: TextureImportance
		/// Type: ByteProperty
		/// Offset: 0x19
		/// Size: 0x01
		/// </summary>
		public byte TextureImportance
		{
			get
			{
				return ReadByte(0x19);
			}
			set
			{
				WriteByte(0x19,value);
			}
		}
		
		/// <summary>
		/// Name: ShadingImportance
		/// Type: ByteProperty
		/// Offset: 0x1A
		/// Size: 0x01
		/// </summary>
		public byte ShadingImportance
		{
			get
			{
				return ReadByte(0x1A);
			}
			set
			{
				WriteByte(0x1A,value);
			}
		}
		
	}


	/// <summary>
	/// FSubsurfaceProfileStruct:
	/// Size: 0x24
	/// Properties: 3
	/// </summary>
	public class FSubsurfaceProfileStruct:MemoryObject
	{
		public override int ObjectSize => 36;
		/// <summary>
		/// Name: ScatterRadius
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float ScatterRadius
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: SubsurfaceColor
		/// Type: StructProperty
		/// Offset: 0x04
		/// Size: 0x10
		/// </summary>
		public FLinearColor SubsurfaceColor => ReadStruct<FLinearColor>(0x04);
		
		/// <summary>
		/// Name: FalloffColor
		/// Type: StructProperty
		/// Offset: 0x14
		/// Size: 0x10
		/// </summary>
		public FLinearColor FalloffColor => ReadStruct<FLinearColor>(0x14);
		
	}


	/// <summary>
	/// FTexturePlatformData:
	/// Size: 0x20
	/// Properties: 0
	/// </summary>
	public class FTexturePlatformData:MemoryObject
	{
		public override int ObjectSize => 32;
	}


	/// <summary>
	/// FTextureSource:
	/// Size: 0x80
	/// Properties: 0
	/// </summary>
	public class FTextureSource:MemoryObject
	{
		public override int ObjectSize => 128;
	}


	/// <summary>
	/// FTTLinearColorTrack:FTTTrackBase
	/// Size: 0x18
	/// Properties: 1
	/// </summary>
	public class FTTLinearColorTrack:FTTTrackBase
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: CurveLinearColor
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UCurveLinearColor CurveLinearColor => ReadUObject<UCurveLinearColor>(0x10);
		
	}


	/// <summary>
	/// FTTTrackBase:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FTTTrackBase:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: TrackName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: bIsExternalCurve
		/// Type: BoolProperty
		/// Offset: 0x08
		/// Size: 0x01
		/// </summary>
		public bool bIsExternalCurve
		{
			get
			{
				return ReadBool(0x08);
			}
			set
			{
				WriteBool(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FTTVectorTrack:FTTTrackBase
	/// Size: 0x18
	/// Properties: 1
	/// </summary>
	public class FTTVectorTrack:FTTTrackBase
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: CurveVector
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UCurveVector CurveVector => ReadUObject<UCurveVector>(0x10);
		
	}


	/// <summary>
	/// FTTFloatTrack:FTTTrackBase
	/// Size: 0x18
	/// Properties: 1
	/// </summary>
	public class FTTFloatTrack:FTTTrackBase
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: CurveFloat
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UCurveFloat CurveFloat => ReadUObject<UCurveFloat>(0x10);
		
	}


	/// <summary>
	/// FTTEventTrack:FTTTrackBase
	/// Size: 0x18
	/// Properties: 1
	/// </summary>
	public class FTTEventTrack:FTTTrackBase
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: CurveKeys
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UCurveFloat CurveKeys => ReadUObject<UCurveFloat>(0x10);
		
	}


	/// <summary>
	/// FTouchInputControl:
	/// Size: 0x68
	/// Properties: 9
	/// </summary>
	public class FTouchInputControl:MemoryObject
	{
		public override int ObjectSize => 104;
		/// <summary>
		/// Name: Image1
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UTexture2D Image1 => ReadUObject<UTexture2D>(0x00);
		
		/// <summary>
		/// Name: Image2
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UTexture2D Image2 => ReadUObject<UTexture2D>(0x08);
		
		/// <summary>
		/// Name: Center
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public FVector2D Center => ReadStruct<FVector2D>(0x10);
		
		/// <summary>
		/// Name: VisualSize
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		public FVector2D VisualSize => ReadStruct<FVector2D>(0x18);
		
		/// <summary>
		/// Name: ThumbSize
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public FVector2D ThumbSize => ReadStruct<FVector2D>(0x20);
		
		/// <summary>
		/// Name: InteractionSize
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public FVector2D InteractionSize => ReadStruct<FVector2D>(0x28);
		
		/// <summary>
		/// Name: InputScale
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public FVector2D InputScale => ReadStruct<FVector2D>(0x30);
		
		/// <summary>
		/// Name: MainInputKey
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x18
		/// </summary>
		public FKey MainInputKey => ReadStruct<FKey>(0x38);
		
		/// <summary>
		/// Name: AltInputKey
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x18
		/// </summary>
		public FKey AltInputKey => ReadStruct<FKey>(0x50);
		
	}


	/// <summary>
	/// FAnimationRecordingSettings:
	/// Size: 0x0C
	/// Properties: 4
	/// </summary>
	public class FAnimationRecordingSettings:MemoryObject
	{
		public override int ObjectSize => 12;
		/// <summary>
		/// Name: bRecordInWorldSpace
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bRecordInWorldSpace
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: bAutoSaveAsset
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bAutoSaveAsset
		{
			get
			{
				return ReadBool(0x01);
			}
			set
			{
				WriteBool(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: SampleRate
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float SampleRate
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Length
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float Length
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_ApplyMeshSpaceAdditive:FAnimNode_Base
	/// Size: 0x78
	/// Properties: 6
	/// </summary>
	public class FAnimNode_ApplyMeshSpaceAdditive:FAnimNode_Base
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: Base
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x18
		/// </summary>
		public FPoseLink Base => ReadStruct<FPoseLink>(0x30);
		
		/// <summary>
		/// Name: Additive
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x18
		/// </summary>
		public FPoseLink Additive => ReadStruct<FPoseLink>(0x48);
		
		/// <summary>
		/// Name: Alpha
		/// Type: FloatProperty
		/// Offset: 0x60
		/// Size: 0x04
		/// </summary>
		public float Alpha
		{
			get
			{
				return ReadSingle(0x60);
			}
			set
			{
				WriteSingle(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: AlphaScaleBias
		/// Type: StructProperty
		/// Offset: 0x64
		/// Size: 0x08
		/// </summary>
		public FInputScaleBias AlphaScaleBias => ReadStruct<FInputScaleBias>(0x64);
		
		/// <summary>
		/// Name: LODThreshold
		/// Type: IntProperty
		/// Offset: 0x6C
		/// Size: 0x04
		/// </summary>
		public int LODThreshold
		{
			get
			{
				return ReadInt32(0x6C);
			}
			set
			{
				WriteInt32(0x6C,value);
			}
		}
		
		/// <summary>
		/// Name: ActualAlpha
		/// Type: FloatProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public float ActualAlpha
		{
			get
			{
				return ReadSingle(0x70);
			}
			set
			{
				WriteSingle(0x70,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_SequencePlayer:FAnimNode_AssetPlayerBase
	/// Size: 0x70
	/// Properties: 4
	/// </summary>
	public class FAnimNode_SequencePlayer:FAnimNode_AssetPlayerBase
	{
		public override int ObjectSize => 112;
		/// <summary>
		/// Name: Sequence
		/// Type: ObjectProperty
		/// Offset: 0x58
		/// Size: 0x08
		/// </summary>
		public UAnimSequenceBase Sequence => ReadUObject<UAnimSequenceBase>(0x58);
		
		/// <summary>
		/// Name: bLoopAnimation
		/// Type: BoolProperty
		/// Offset: 0x60
		/// Size: 0x01
		/// </summary>
		public bool bLoopAnimation
		{
			get
			{
				return ReadBool(0x60);
			}
			set
			{
				WriteBool(0x60,value);
			}
		}
		
		/// <summary>
		/// Name: PlayRate
		/// Type: FloatProperty
		/// Offset: 0x64
		/// Size: 0x04
		/// </summary>
		public float PlayRate
		{
			get
			{
				return ReadSingle(0x64);
			}
			set
			{
				WriteSingle(0x64,value);
			}
		}
		
		/// <summary>
		/// Name: StartPosition
		/// Type: FloatProperty
		/// Offset: 0x68
		/// Size: 0x04
		/// </summary>
		public float StartPosition
		{
			get
			{
				return ReadSingle(0x68);
			}
			set
			{
				WriteSingle(0x68,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_StateMachine:FAnimNode_Base
	/// Size: 0xD8
	/// Properties: 5
	/// </summary>
	public class FAnimNode_StateMachine:FAnimNode_Base
	{
		public override int ObjectSize => 216;
		/// <summary>
		/// Name: StateMachineIndexInClass
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int StateMachineIndexInClass
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: MaxTransitionsPerFrame
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int MaxTransitionsPerFrame
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: bSkipFirstUpdateTransition
		/// Type: BoolProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public bool bSkipFirstUpdateTransition
		{
			get
			{
				return ReadBool(0x38);
			}
			set
			{
				WriteBool(0x38,value);
			}
		}
		
		/// <summary>
		/// Name: CurrentState
		/// Type: IntProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public int CurrentState
		{
			get
			{
				return ReadInt32(0x48);
			}
			set
			{
				WriteInt32(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: ElapsedTime
		/// Type: FloatProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public float ElapsedTime
		{
			get
			{
				return ReadSingle(0x4C);
			}
			set
			{
				WriteSingle(0x4C,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimationPotentialTransition:
	/// Size: 0x10
	/// Properties: 0
	/// </summary>
	public class FAnimationPotentialTransition:MemoryObject
	{
		public override int ObjectSize => 16;
	}


	/// <summary>
	/// FAnimationActiveTransitionEntry:
	/// Size: 0xB0
	/// Properties: 1
	/// </summary>
	public class FAnimationActiveTransitionEntry:MemoryObject
	{
		public override int ObjectSize => 176;
		/// <summary>
		/// Name: BlendProfile
		/// Type: ObjectProperty
		/// Offset: 0x70
		/// Size: 0x08
		/// </summary>
		public UBlendProfile BlendProfile => ReadUObject<UBlendProfile>(0x70);
		
	}


	/// <summary>
	/// FAnimNode_TransitionPoseEvaluator:FAnimNode_Base
	/// Size: 0x78
	/// Properties: 4
	/// </summary>
	public class FAnimNode_TransitionPoseEvaluator:FAnimNode_Base
	{
		public override int ObjectSize => 120;
		/// <summary>
		/// Name: DataSource
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte DataSource
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: EvaluatorMode
		/// Type: ByteProperty
		/// Offset: 0x31
		/// Size: 0x01
		/// </summary>
		public byte EvaluatorMode
		{
			get
			{
				return ReadByte(0x31);
			}
			set
			{
				WriteByte(0x31,value);
			}
		}
		
		/// <summary>
		/// Name: FramesToCachePose
		/// Type: IntProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public int FramesToCachePose
		{
			get
			{
				return ReadInt32(0x34);
			}
			set
			{
				WriteInt32(0x34,value);
			}
		}
		
		/// <summary>
		/// Name: CacheFramesRemaining
		/// Type: IntProperty
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		public int CacheFramesRemaining
		{
			get
			{
				return ReadInt32(0x70);
			}
			set
			{
				WriteInt32(0x70,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_TransitionResult:FAnimNode_Base
	/// Size: 0x80
	/// Properties: 1
	/// </summary>
	public class FAnimNode_TransitionResult:FAnimNode_Base
	{
		public override int ObjectSize => 128;
		/// <summary>
		/// Name: bCanEnterTransition
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool bCanEnterTransition
		{
			get
			{
				return ReadBool(0x30);
			}
			set
			{
				WriteBool(0x30,value);
			}
		}
		
	}


	/// <summary>
	/// FAnimNode_UseCachedPose:FAnimNode_Base
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class FAnimNode_UseCachedPose:FAnimNode_Base
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: LinkToCachingNode
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x18
		/// </summary>
		public FPoseLink LinkToCachingNode => ReadStruct<FPoseLink>(0x30);
		
	}


	/// <summary>
	/// FAnimNode_ConvertLocalToComponentSpace:FAnimNode_Base
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class FAnimNode_ConvertLocalToComponentSpace:FAnimNode_Base
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: LocalPose
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x18
		/// </summary>
		public FPoseLink LocalPose => ReadStruct<FPoseLink>(0x30);
		
	}


	/// <summary>
	/// FAnimNode_ConvertComponentToLocalSpace:FAnimNode_Base
	/// Size: 0x48
	/// Properties: 1
	/// </summary>
	public class FAnimNode_ConvertComponentToLocalSpace:FAnimNode_Base
	{
		public override int ObjectSize => 72;
		/// <summary>
		/// Name: ComponentPose
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x18
		/// </summary>
		public FComponentSpacePoseLink ComponentPose => ReadStruct<FComponentSpacePoseLink>(0x30);
		
	}


	/// <summary>
	/// FDummySpacerCameraTypes:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FDummySpacerCameraTypes:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FRenderGraniteTileSetManager:
	/// Size: 0x08
	/// Properties: 0
	/// </summary>
	public class FRenderGraniteTileSetManager:MemoryObject
	{
		public override int ObjectSize => 8;
	}


	/// <summary>
	/// FGameGraniteTileSetManager:
	/// Size: 0x08
	/// Properties: 0
	/// </summary>
	public class FGameGraniteTileSetManager:MemoryObject
	{
		public override int ObjectSize => 8;
	}


	/// <summary>
	/// FGraniteTileSetManager:
	/// Size: 0x30
	/// Properties: 0
	/// </summary>
	public class FGraniteTileSetManager:MemoryObject
	{
		public override int ObjectSize => 48;
	}


	/// <summary>
	/// FStreamableManager:
	/// Size: 0xA0
	/// Properties: 0
	/// </summary>
	public class FStreamableManager:MemoryObject
	{
		public override int ObjectSize => 160;
	}


	/// <summary>
	/// FAnimInstanceProxy:
	/// Size: 0x3F0
	/// Properties: 0
	/// </summary>
	public class FAnimInstanceProxy:MemoryObject
	{
		public override int ObjectSize => 1008;
	}


	/// <summary>
	/// FAnimSingleNodeInstanceProxy:FAnimInstanceProxy
	/// Size: 0x4E0
	/// Properties: 0
	/// </summary>
	public class FAnimSingleNodeInstanceProxy:FAnimInstanceProxy
	{
		public override int ObjectSize => 1248;
	}


	/// <summary>
	/// FStructSerializerTestStruct:
	/// Size: 0x188
	/// Properties: 6
	/// </summary>
	public class FStructSerializerTestStruct:MemoryObject
	{
		public override int ObjectSize => 392;
		/// <summary>
		/// Name: Numerics
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x30
		/// </summary>
		public FStructSerializerNumericTestStruct Numerics => ReadStruct<FStructSerializerNumericTestStruct>(0x00);
		
		/// <summary>
		/// Name: Booleans
		/// Type: StructProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		public FStructSerializerBooleanTestStruct Booleans => ReadStruct<FStructSerializerBooleanTestStruct>(0x30);
		
		/// <summary>
		/// Name: Objects
		/// Type: StructProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FStructSerializerObjectTestStruct Objects => ReadStruct<FStructSerializerObjectTestStruct>(0x38);
		
		/// <summary>
		/// Name: Builtins
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x60
		/// </summary>
		public FStructSerializerBuiltinTestStruct Builtins => ReadStruct<FStructSerializerBuiltinTestStruct>(0x48);
		
		/// <summary>
		/// Name: Arrays
		/// Type: StructProperty
		/// Offset: 0xA8
		/// Size: 0x40
		/// </summary>
		public FStructSerializerArrayTestStruct Arrays => ReadStruct<FStructSerializerArrayTestStruct>(0xA8);
		
		/// <summary>
		/// Name: Maps
		/// Type: StructProperty
		/// Offset: 0xE8
		/// Size: 0xA0
		/// </summary>
		public FStructSerializerMapTestStruct Maps => ReadStruct<FStructSerializerMapTestStruct>(0xE8);
		
	}


	/// <summary>
	/// FStructSerializerMapTestStruct:
	/// Size: 0xA0
	/// Properties: 2
	/// </summary>
	public class FStructSerializerMapTestStruct:MemoryObject
	{
		public override int ObjectSize => 160;
		/// <summary>
		/// Name: IntToStr
		/// Type: MapProperty
		/// Offset: 0x00
		/// Size: 0x50
		/// </summary>
		
		/// <summary>
		/// Name: StrToVec
		/// Type: MapProperty
		/// Offset: 0x50
		/// Size: 0x50
		/// </summary>
		
	}


	/// <summary>
	/// FStructSerializerArrayTestStruct:
	/// Size: 0x40
	/// Properties: 5
	/// </summary>
	public class FStructSerializerArrayTestStruct:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: Int32Array
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: StaticSingleElement
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int StaticSingleElement
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: StaticInt32Array
		/// Type: IntProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public int StaticInt32Array
		{
			get
			{
				return ReadInt32(0x14);
			}
			set
			{
				WriteInt32(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: StaticFloatArray
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float StaticFloatArray
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: VectorArray
		/// Type: TArray<FVector>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x0C
		/// </summary>
		public TArray<FVector> VectorArray => new TArray<FVector>(BaseAddress+0x30);
		
	}


	/// <summary>
	/// FStructSerializerBuiltinTestStruct:
	/// Size: 0x60
	/// Properties: 6
	/// </summary>
	public class FStructSerializerBuiltinTestStruct:MemoryObject
	{
		public override int ObjectSize => 96;
		/// <summary>
		/// Name: Guid
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FGuid Guid => ReadStruct<FGuid>(0x00);
		
		/// <summary>
		/// Name: Name
		/// Type: NameProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: String
		/// Type: StrProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FString String => new FString(BaseAddress+0x18);
		
		/// <summary>
		/// Name: Rotator
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x0C
		/// </summary>
		public FRotator Rotator => ReadStruct<FRotator>(0x28);
		
		/// <summary>
		/// Name: Text
		/// Type: TextProperty
		/// Offset: 0x38
		/// Size: 0x18
		/// </summary>
		
		/// <summary>
		/// Name: Vector
		/// Type: StructProperty
		/// Offset: 0x50
		/// Size: 0x0C
		/// </summary>
		public FVector Vector => ReadStruct<FVector>(0x50);
		
	}


	/// <summary>
	/// FStructSerializerObjectTestStruct:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FStructSerializerObjectTestStruct:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Class
		/// Type: ClassProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: ObjectPtr
		/// Type: ObjectProperty
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public UObject ObjectPtr => ReadUObject<UObject>(0x08);
		
	}


	/// <summary>
	/// FStructSerializerBooleanTestStruct:
	/// Size: 0x08
	/// Properties: 3
	/// </summary>
	public class FStructSerializerBooleanTestStruct:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: BoolFalse
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool BoolFalse
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: BoolTrue
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool BoolTrue
		{
			get
			{
				return ReadBool(0x01);
			}
			set
			{
				WriteBool(0x01,value);
			}
		}
		
		/// <summary>
		/// Name: Bitfield
		/// Type: UInt32Property
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		
	}


	/// <summary>
	/// FStructSerializerNumericTestStruct:
	/// Size: 0x30
	/// Properties: 10
	/// </summary>
	public class FStructSerializerNumericTestStruct:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: Int8
		/// Type: Int8Property
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		
		/// <summary>
		/// Name: Int16
		/// Type: Int16Property
		/// Offset: 0x02
		/// Size: 0x02
		/// </summary>
		public short Int16
		{
			get
			{
				return ReadInt16(0x02);
			}
			set
			{
				WriteInt16(0x02,value);
			}
		}
		
		/// <summary>
		/// Name: Int32
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int Int32
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Int64
		/// Type: Int64Property
		/// Offset: 0x08
		/// Size: 0x08
		/// </summary>
		public long Int64
		{
			get
			{
				return ReadInt64(0x08);
			}
			set
			{
				WriteInt64(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: UInt8
		/// Type: ByteProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public byte UInt8
		{
			get
			{
				return ReadByte(0x10);
			}
			set
			{
				WriteByte(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: UInt16
		/// Type: UInt16Property
		/// Offset: 0x12
		/// Size: 0x02
		/// </summary>
		public ushort UInt16
		{
			get
			{
				return ReadUInt16(0x12);
			}
			set
			{
				WriteUInt16(0x12,value);
			}
		}
		
		/// <summary>
		/// Name: UInt32
		/// Type: UInt32Property
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: UInt64
		/// Type: UInt64Property
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		public ulong UInt64
		{
			get
			{
				return ReadUInt64(0x18);
			}
			set
			{
				WriteUInt64(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: Float
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float Float
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: Double
		/// Type: DoubleProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public double Double
		{
			get
			{
				return ReadDouble(0x28);
			}
			set
			{
				WriteDouble(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// FAutomationWorkerScreenImage:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FAutomationWorkerScreenImage:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: ScreenImage
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: ScreenShotName
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString ScreenShotName => new FString(BaseAddress+0x10);
		
	}


	/// <summary>
	/// FAutomationWorkerNextNetworkCommandReply:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FAutomationWorkerNextNetworkCommandReply:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FAutomationWorkerRequestNextNetworkCommand:
	/// Size: 0x04
	/// Properties: 1
	/// </summary>
	public class FAutomationWorkerRequestNextNetworkCommand:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: ExecutionCount
		/// Type: UInt32Property
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		
	}


	/// <summary>
	/// FAutomationWorkerRunTestsReply:
	/// Size: 0x58
	/// Properties: 7
	/// </summary>
	public class FAutomationWorkerRunTestsReply:MemoryObject
	{
		public override int ObjectSize => 88;
		/// <summary>
		/// Name: Duration
		/// Type: FloatProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public float Duration
		{
			get
			{
				return ReadSingle(0x00);
			}
			set
			{
				WriteSingle(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Errors
		/// Type: TArray<>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: ExecutionCount
		/// Type: UInt32Property
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: Logs
		/// Type: TArray<>
		/// Offset: 0x20
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: Success
		/// Type: BoolProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public bool Success
		{
			get
			{
				return ReadBool(0x30);
			}
			set
			{
				WriteBool(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: TestName
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString TestName => new FString(BaseAddress+0x38);
		
		/// <summary>
		/// Name: Warnings
		/// Type: TArray<>
		/// Offset: 0x48
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FAutomationWorkerRunTests:
	/// Size: 0x30
	/// Properties: 7
	/// </summary>
	public class FAutomationWorkerRunTests:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: ExecutionCount
		/// Type: UInt32Property
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: RoleIndex
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int RoleIndex
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: TestName
		/// Type: StrProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FString TestName => new FString(BaseAddress+0x08);
		
		/// <summary>
		/// Name: BeautifiedTestName
		/// Type: StrProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FString BeautifiedTestName => new FString(BaseAddress+0x18);
		
		/// <summary>
		/// Name: bScreenshotsEnabled
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bScreenshotsEnabled
		{
			get
			{
				return ReadBool(0x28);
			}
			set
			{
				WriteBool(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: bUseFullSizeScreenShots
		/// Type: BoolProperty
		/// Offset: 0x29
		/// Size: 0x01
		/// </summary>
		public bool bUseFullSizeScreenShots
		{
			get
			{
				return ReadBool(0x29);
			}
			set
			{
				WriteBool(0x29,value);
			}
		}
		
		/// <summary>
		/// Name: bSendAnalytics
		/// Type: BoolProperty
		/// Offset: 0x2A
		/// Size: 0x01
		/// </summary>
		public bool bSendAnalytics
		{
			get
			{
				return ReadBool(0x2A);
			}
			set
			{
				WriteBool(0x2A,value);
			}
		}
		
	}


	/// <summary>
	/// FAutomationWorkerRequestTestsReplyComplete:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FAutomationWorkerRequestTestsReplyComplete:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FAutomationWorkerRequestTestsReply:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FAutomationWorkerRequestTestsReply:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: TestInfo
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString TestInfo => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: TotalNumTests
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int TotalNumTests
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FAutomationWorkerRequestTests:
	/// Size: 0x08
	/// Properties: 2
	/// </summary>
	public class FAutomationWorkerRequestTests:MemoryObject
	{
		public override int ObjectSize => 8;
		/// <summary>
		/// Name: DeveloperDirectoryIncluded
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool DeveloperDirectoryIncluded
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: RequestedTestFlags
		/// Type: UInt32Property
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		
	}


	/// <summary>
	/// FAutomationWorkerPong:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FAutomationWorkerPong:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FAutomationWorkerResetTests:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FAutomationWorkerResetTests:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FAutomationWorkerPing:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FAutomationWorkerPing:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FAutomationWorkerWorkerOffline:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FAutomationWorkerWorkerOffline:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FAutomationWorkerFindWorkersResponse:
	/// Size: 0x98
	/// Properties: 10
	/// </summary>
	public class FAutomationWorkerFindWorkersResponse:MemoryObject
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: DeviceName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString DeviceName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: InstanceName
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString InstanceName => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: Platform
		/// Type: StrProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FString Platform => new FString(BaseAddress+0x20);
		
		/// <summary>
		/// Name: OSVersionName
		/// Type: StrProperty
		/// Offset: 0x30
		/// Size: 0x10
		/// </summary>
		public FString OSVersionName => new FString(BaseAddress+0x30);
		
		/// <summary>
		/// Name: ModelName
		/// Type: StrProperty
		/// Offset: 0x40
		/// Size: 0x10
		/// </summary>
		public FString ModelName => new FString(BaseAddress+0x40);
		
		/// <summary>
		/// Name: GPUName
		/// Type: StrProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FString GPUName => new FString(BaseAddress+0x50);
		
		/// <summary>
		/// Name: CPUModelName
		/// Type: StrProperty
		/// Offset: 0x60
		/// Size: 0x10
		/// </summary>
		public FString CPUModelName => new FString(BaseAddress+0x60);
		
		/// <summary>
		/// Name: RAMInGB
		/// Type: UInt32Property
		/// Offset: 0x70
		/// Size: 0x04
		/// </summary>
		
		/// <summary>
		/// Name: RenderModeName
		/// Type: StrProperty
		/// Offset: 0x78
		/// Size: 0x10
		/// </summary>
		public FString RenderModeName => new FString(BaseAddress+0x78);
		
		/// <summary>
		/// Name: SessionId
		/// Type: StructProperty
		/// Offset: 0x88
		/// Size: 0x10
		/// </summary>
		public FGuid SessionId => ReadStruct<FGuid>(0x88);
		
	}


	/// <summary>
	/// FAutomationWorkerFindWorkers:
	/// Size: 0x38
	/// Properties: 4
	/// </summary>
	public class FAutomationWorkerFindWorkers:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Changelist
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int Changelist
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: GameName
		/// Type: StrProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FString GameName => new FString(BaseAddress+0x08);
		
		/// <summary>
		/// Name: ProcessName
		/// Type: StrProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FString ProcessName => new FString(BaseAddress+0x18);
		
		/// <summary>
		/// Name: SessionId
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FGuid SessionId => ReadStruct<FGuid>(0x28);
		
	}


	/// <summary>
	/// FSessionServiceLogUnsubscribe:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FSessionServiceLogUnsubscribe:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FSessionServiceLogSubscribe:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FSessionServiceLogSubscribe:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FSessionServiceLog:
	/// Size: 0x38
	/// Properties: 5
	/// </summary>
	public class FSessionServiceLog:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: Category
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: Data
		/// Type: StrProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FString Data => new FString(BaseAddress+0x08);
		
		/// <summary>
		/// Name: InstanceId
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FGuid InstanceId => ReadStruct<FGuid>(0x18);
		
		/// <summary>
		/// Name: TimeSeconds
		/// Type: DoubleProperty
		/// Offset: 0x28
		/// Size: 0x08
		/// </summary>
		public double TimeSeconds
		{
			get
			{
				return ReadDouble(0x28);
			}
			set
			{
				WriteDouble(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: Verbosity
		/// Type: ByteProperty
		/// Offset: 0x30
		/// Size: 0x01
		/// </summary>
		public byte Verbosity
		{
			get
			{
				return ReadByte(0x30);
			}
			set
			{
				WriteByte(0x30,value);
			}
		}
		
	}


	/// <summary>
	/// FSessionServicePong:
	/// Size: 0x98
	/// Properties: 11
	/// </summary>
	public class FSessionServicePong:MemoryObject
	{
		public override int ObjectSize => 152;
		/// <summary>
		/// Name: Authorized
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool Authorized
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: BuildDate
		/// Type: StrProperty
		/// Offset: 0x08
		/// Size: 0x10
		/// </summary>
		public FString BuildDate => new FString(BaseAddress+0x08);
		
		/// <summary>
		/// Name: DeviceName
		/// Type: StrProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FString DeviceName => new FString(BaseAddress+0x18);
		
		/// <summary>
		/// Name: InstanceId
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x10
		/// </summary>
		public FGuid InstanceId => ReadStruct<FGuid>(0x28);
		
		/// <summary>
		/// Name: InstanceName
		/// Type: StrProperty
		/// Offset: 0x38
		/// Size: 0x10
		/// </summary>
		public FString InstanceName => new FString(BaseAddress+0x38);
		
		/// <summary>
		/// Name: IsConsoleBuild
		/// Type: BoolProperty
		/// Offset: 0x48
		/// Size: 0x01
		/// </summary>
		public bool IsConsoleBuild
		{
			get
			{
				return ReadBool(0x48);
			}
			set
			{
				WriteBool(0x48,value);
			}
		}
		
		/// <summary>
		/// Name: PlatformName
		/// Type: StrProperty
		/// Offset: 0x50
		/// Size: 0x10
		/// </summary>
		public FString PlatformName => new FString(BaseAddress+0x50);
		
		/// <summary>
		/// Name: SessionId
		/// Type: StructProperty
		/// Offset: 0x60
		/// Size: 0x10
		/// </summary>
		public FGuid SessionId => ReadStruct<FGuid>(0x60);
		
		/// <summary>
		/// Name: SessionName
		/// Type: StrProperty
		/// Offset: 0x70
		/// Size: 0x10
		/// </summary>
		public FString SessionName => new FString(BaseAddress+0x70);
		
		/// <summary>
		/// Name: SessionOwner
		/// Type: StrProperty
		/// Offset: 0x80
		/// Size: 0x10
		/// </summary>
		public FString SessionOwner => new FString(BaseAddress+0x80);
		
		/// <summary>
		/// Name: Standalone
		/// Type: BoolProperty
		/// Offset: 0x90
		/// Size: 0x01
		/// </summary>
		public bool Standalone
		{
			get
			{
				return ReadBool(0x90);
			}
			set
			{
				WriteBool(0x90,value);
			}
		}
		
	}


	/// <summary>
	/// FSessionServicePing:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FSessionServicePing:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: userName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString userName => new FString(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FProfilerServiceRequest:
	/// Size: 0x04
	/// Properties: 1
	/// </summary>
	public class FProfilerServiceRequest:MemoryObject
	{
		public override int ObjectSize => 4;
		/// <summary>
		/// Name: Request
		/// Type: UInt32Property
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		
	}


	/// <summary>
	/// FProfilerServicePreview:
	/// Size: 0x01
	/// Properties: 1
	/// </summary>
	public class FProfilerServicePreview:MemoryObject
	{
		public override int ObjectSize => 1;
		/// <summary>
		/// Name: bRequestedPreviewState
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bRequestedPreviewState
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
	}


	/// <summary>
	/// FProfilerServiceCapture:
	/// Size: 0x01
	/// Properties: 1
	/// </summary>
	public class FProfilerServiceCapture:MemoryObject
	{
		public override int ObjectSize => 1;
		/// <summary>
		/// Name: bRequestedCaptureState
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bRequestedCaptureState
		{
			get
			{
				return ReadBool(0x00);
			}
			set
			{
				WriteBool(0x00,value);
			}
		}
		
	}


	/// <summary>
	/// FProfilerServiceUnsubscribe:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FProfilerServiceUnsubscribe:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: SessionId
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FGuid SessionId => ReadStruct<FGuid>(0x00);
		
		/// <summary>
		/// Name: InstanceId
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FGuid InstanceId => ReadStruct<FGuid>(0x10);
		
	}


	/// <summary>
	/// FProfilerServiceSubscribe:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FProfilerServiceSubscribe:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: SessionId
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FGuid SessionId => ReadStruct<FGuid>(0x00);
		
		/// <summary>
		/// Name: InstanceId
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FGuid InstanceId => ReadStruct<FGuid>(0x10);
		
	}


	/// <summary>
	/// FProfilerServicePong:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FProfilerServicePong:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FProfilerServicePing:
	/// Size: 0x01
	/// Properties: 0
	/// </summary>
	public class FProfilerServicePing:MemoryObject
	{
		public override int ObjectSize => 1;
	}


	/// <summary>
	/// FProfilerServiceFileChunk:
	/// Size: 0x50
	/// Properties: 5
	/// </summary>
	public class FProfilerServiceFileChunk:MemoryObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: InstanceId
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FGuid InstanceId => ReadStruct<FGuid>(0x00);
		
		/// <summary>
		/// Name: Filename
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString Filename => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: HexData
		/// Type: StrProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FString HexData => new FString(BaseAddress+0x20);
		
		/// <summary>
		/// Name: Header
		/// Type: TArray<>
		/// Offset: 0x30
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: ChunkHash
		/// Type: TArray<>
		/// Offset: 0x40
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FProfilerServicePreviewAck:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FProfilerServicePreviewAck:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: InstanceId
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FGuid InstanceId => ReadStruct<FGuid>(0x00);
		
	}


	/// <summary>
	/// FProfilerServiceData2:
	/// Size: 0x30
	/// Properties: 5
	/// </summary>
	public class FProfilerServiceData2:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: InstanceId
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FGuid InstanceId => ReadStruct<FGuid>(0x00);
		
		/// <summary>
		/// Name: Frame
		/// Type: Int64Property
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public long Frame
		{
			get
			{
				return ReadInt64(0x10);
			}
			set
			{
				WriteInt64(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: CompressedSize
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int CompressedSize
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: UncompressedSize
		/// Type: IntProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public int UncompressedSize
		{
			get
			{
				return ReadInt32(0x1C);
			}
			set
			{
				WriteInt32(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: HexData
		/// Type: StrProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FString HexData => new FString(BaseAddress+0x20);
		
	}


	/// <summary>
	/// FProfilerServiceAuthorize:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FProfilerServiceAuthorize:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: SessionId
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FGuid SessionId => ReadStruct<FGuid>(0x00);
		
		/// <summary>
		/// Name: InstanceId
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FGuid InstanceId => ReadStruct<FGuid>(0x10);
		
	}


	/// <summary>
	/// FAssetEditorRequestOpenAsset:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FAssetEditorRequestOpenAsset:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: AssetName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString AssetName => new FString(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FFileServerReady:
	/// Size: 0x20
	/// Properties: 2
	/// </summary>
	public class FFileServerReady:MemoryObject
	{
		public override int ObjectSize => 32;
		/// <summary>
		/// Name: AddressList
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: InstanceId
		/// Type: StructProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FGuid InstanceId => ReadStruct<FGuid>(0x10);
		
	}


	/// <summary>
	/// FPolarUtilityVector:
	/// Size: 0x18
	/// Properties: 0
	/// </summary>
	public class FPolarUtilityVector:MemoryObject
	{
		public override int ObjectSize => 24;
	}


	/// <summary>
	/// FCompactModList:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FCompactModList:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: ModList
		/// Type: TArray<FCompactModInfo>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FCompactModInfo> ModList => new TArray<FCompactModInfo>(BaseAddress+0x00);
		
	}


	/// <summary>
	/// FCompactModInfo:
	/// Size: 0x30
	/// Properties: 3
	/// </summary>
	public class FCompactModInfo:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: Name
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString Name => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: SteamPublishedFileId
		/// Type: StrProperty
		/// Offset: 0x10
		/// Size: 0x10
		/// </summary>
		public FString SteamPublishedFileId => new FString(BaseAddress+0x10);
		
		/// <summary>
		/// Name: MD5Hash
		/// Type: StrProperty
		/// Offset: 0x20
		/// Size: 0x10
		/// </summary>
		public FString MD5Hash => new FString(BaseAddress+0x20);
		
	}


	/// <summary>
	/// FSpriteAssetInitParameters:
	/// Size: 0x40
	/// Properties: 0
	/// </summary>
	public class FSpriteAssetInitParameters:MemoryObject
	{
		public override int ObjectSize => 64;
	}


	/// <summary>
	/// FSpriteGeometryCollection:
	/// Size: 0x30
	/// Properties: 8
	/// </summary>
	public class FSpriteGeometryCollection:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: Shapes
		/// Type: TArray<FSpriteGeometryShape>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x30
		/// </summary>
		public TArray<FSpriteGeometryShape> Shapes => new TArray<FSpriteGeometryShape>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: GeometryType
		/// Type: ByteProperty
		/// Offset: 0x10
		/// Size: 0x01
		/// </summary>
		public byte GeometryType
		{
			get
			{
				return ReadByte(0x10);
			}
			set
			{
				WriteByte(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: PixelsPerSubdivisionX
		/// Type: IntProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public int PixelsPerSubdivisionX
		{
			get
			{
				return ReadInt32(0x14);
			}
			set
			{
				WriteInt32(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: PixelsPerSubdivisionY
		/// Type: IntProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public int PixelsPerSubdivisionY
		{
			get
			{
				return ReadInt32(0x18);
			}
			set
			{
				WriteInt32(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: bAvoidVertexMerging
		/// Type: BoolProperty
		/// Offset: 0x1C
		/// Size: 0x01
		/// </summary>
		public bool bAvoidVertexMerging
		{
			get
			{
				return ReadBool(0x1C);
			}
			set
			{
				WriteBool(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: AlphaThreshold
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float AlphaThreshold
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: DetailAmount
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float DetailAmount
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: SimplifyEpsilon
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float SimplifyEpsilon
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
	}


	/// <summary>
	/// FSpriteGeometryShape:
	/// Size: 0x30
	/// Properties: 6
	/// </summary>
	public class FSpriteGeometryShape:MemoryObject
	{
		public override int ObjectSize => 48;
		/// <summary>
		/// Name: ShapeType
		/// Type: ByteProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public byte ShapeType
		{
			get
			{
				return ReadByte(0x00);
			}
			set
			{
				WriteByte(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Vertices
		/// Type: TArray<FVector2D>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x08
		/// </summary>
		public TArray<FVector2D> Vertices => new TArray<FVector2D>(BaseAddress+0x08);
		
		/// <summary>
		/// Name: BoxSize
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		public FVector2D BoxSize => ReadStruct<FVector2D>(0x18);
		
		/// <summary>
		/// Name: BoxPosition
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x08
		/// </summary>
		public FVector2D BoxPosition => ReadStruct<FVector2D>(0x20);
		
		/// <summary>
		/// Name: Rotation
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float Rotation
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: bNegativeWinding
		/// Type: BoolProperty
		/// Offset: 0x2C
		/// Size: 0x01
		/// </summary>
		public bool bNegativeWinding
		{
			get
			{
				return ReadBool(0x2C);
			}
			set
			{
				WriteBool(0x2C,value);
			}
		}
		
	}


	/// <summary>
	/// FPaperSpriteSocket:
	/// Size: 0x40
	/// Properties: 2
	/// </summary>
	public class FPaperSpriteSocket:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: LocalTransform
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x30
		/// </summary>
		public FTransform LocalTransform => ReadStruct<FTransform>(0x00);
		
		/// <summary>
		/// Name: SocketName
		/// Type: NameProperty
		/// Offset: 0x30
		/// Size: 0x08
		/// </summary>
		
	}


	/// <summary>
	/// FPaperFlipbookKeyFrame:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FPaperFlipbookKeyFrame:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Sprite
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UPaperSprite Sprite => ReadUObject<UPaperSprite>(0x00);
		
		/// <summary>
		/// Name: FrameRun
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int FrameRun
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FSpriteInstanceData:
	/// Size: 0x50
	/// Properties: 4
	/// </summary>
	public class FSpriteInstanceData:MemoryObject
	{
		public override int ObjectSize => 80;
		/// <summary>
		/// Name: Transform
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x40
		/// </summary>
		public FMatrix Transform => ReadStruct<FMatrix>(0x00);
		
		/// <summary>
		/// Name: SourceSprite
		/// Type: ObjectProperty
		/// Offset: 0x40
		/// Size: 0x08
		/// </summary>
		public UPaperSprite SourceSprite => ReadUObject<UPaperSprite>(0x40);
		
		/// <summary>
		/// Name: VertexColor
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public FColor VertexColor => ReadStruct<FColor>(0x48);
		
		/// <summary>
		/// Name: MaterialIndex
		/// Type: IntProperty
		/// Offset: 0x4C
		/// Size: 0x04
		/// </summary>
		public int MaterialIndex
		{
			get
			{
				return ReadInt32(0x4C);
			}
			set
			{
				WriteInt32(0x4C,value);
			}
		}
		
	}


	/// <summary>
	/// FPaperSpriteAtlasSlot:
	/// Size: 0x38
	/// Properties: 5
	/// </summary>
	public class FPaperSpriteAtlasSlot:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: AtlasIndex
		/// Type: IntProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public int AtlasIndex
		{
			get
			{
				return ReadInt32(0x20);
			}
			set
			{
				WriteInt32(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: X
		/// Type: IntProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public int X
		{
			get
			{
				return ReadInt32(0x24);
			}
			set
			{
				WriteInt32(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: Y
		/// Type: IntProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public int Y
		{
			get
			{
				return ReadInt32(0x28);
			}
			set
			{
				WriteInt32(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: Width
		/// Type: IntProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public int Width
		{
			get
			{
				return ReadInt32(0x2C);
			}
			set
			{
				WriteInt32(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: Height
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int Height
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
	}


	/// <summary>
	/// FSpriteDrawCallRecord:
	/// Size: 0xD0
	/// Properties: 3
	/// </summary>
	public class FSpriteDrawCallRecord:MemoryObject
	{
		public override int ObjectSize => 208;
		/// <summary>
		/// Name: Destination
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Destination => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: BaseTexture
		/// Type: ObjectProperty
		/// Offset: 0x10
		/// Size: 0x08
		/// </summary>
		public UTexture BaseTexture => ReadUObject<UTexture>(0x10);
		
		/// <summary>
		/// Name: Color
		/// Type: StructProperty
		/// Offset: 0x48
		/// Size: 0x04
		/// </summary>
		public FColor Color => ReadStruct<FColor>(0x48);
		
	}


	/// <summary>
	/// FPaperTerrainMaterialRule:
	/// Size: 0x38
	/// Properties: 8
	/// </summary>
	public class FPaperTerrainMaterialRule:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: StartCap
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UPaperSprite StartCap => ReadUObject<UPaperSprite>(0x00);
		
		/// <summary>
		/// Name: Body
		/// Type: TArray<UPaperSprite>
		/// Offset: 0x08
		/// Size: 0x10
		/// SubElement Size: 0x98
		/// </summary>
		public TArray<UPaperSprite> Body => new TArray<UPaperSprite>(BaseAddress+0x08);
		
		/// <summary>
		/// Name: EndCap
		/// Type: ObjectProperty
		/// Offset: 0x18
		/// Size: 0x08
		/// </summary>
		public UPaperSprite EndCap => ReadUObject<UPaperSprite>(0x18);
		
		/// <summary>
		/// Name: MinimumAngle
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float MinimumAngle
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: MaximumAngle
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float MaximumAngle
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: bEnableCollision
		/// Type: BoolProperty
		/// Offset: 0x28
		/// Size: 0x01
		/// </summary>
		public bool bEnableCollision
		{
			get
			{
				return ReadBool(0x28);
			}
			set
			{
				WriteBool(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: CollisionOffset
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float CollisionOffset
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: DrawOrder
		/// Type: IntProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public int DrawOrder
		{
			get
			{
				return ReadInt32(0x30);
			}
			set
			{
				WriteInt32(0x30,value);
			}
		}
		
	}


	/// <summary>
	/// FIntMargin:
	/// Size: 0x10
	/// Properties: 4
	/// </summary>
	public class FIntMargin:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Left
		/// Type: IntProperty
		/// Offset: 0x00
		/// Size: 0x04
		/// </summary>
		public int Left
		{
			get
			{
				return ReadInt32(0x00);
			}
			set
			{
				WriteInt32(0x00,value);
			}
		}
		
		/// <summary>
		/// Name: Top
		/// Type: IntProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public int Top
		{
			get
			{
				return ReadInt32(0x04);
			}
			set
			{
				WriteInt32(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: Right
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int Right
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: Bottom
		/// Type: IntProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public int Bottom
		{
			get
			{
				return ReadInt32(0x0C);
			}
			set
			{
				WriteInt32(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// FPaperTileSetTerrain:
	/// Size: 0x18
	/// Properties: 2
	/// </summary>
	public class FPaperTileSetTerrain:MemoryObject
	{
		public override int ObjectSize => 24;
		/// <summary>
		/// Name: TerrainName
		/// Type: StrProperty
		/// Offset: 0x00
		/// Size: 0x10
		/// </summary>
		public FString TerrainName => new FString(BaseAddress+0x00);
		
		/// <summary>
		/// Name: CenterTileIndex
		/// Type: IntProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public int CenterTileIndex
		{
			get
			{
				return ReadInt32(0x10);
			}
			set
			{
				WriteInt32(0x10,value);
			}
		}
		
	}


	/// <summary>
	/// FPaperTileMetadata:
	/// Size: 0x40
	/// Properties: 3
	/// </summary>
	public class FPaperTileMetadata:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: UserDataName
		/// Type: NameProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		
		/// <summary>
		/// Name: CollisionData
		/// Type: StructProperty
		/// Offset: 0x08
		/// Size: 0x30
		/// </summary>
		public FSpriteGeometryCollection CollisionData => ReadStruct<FSpriteGeometryCollection>(0x08);
		
		/// <summary>
		/// Name: TerrainMembership
		/// Type: ByteProperty
		/// Offset: 0x38
		/// Size: 0x01
		/// </summary>
		public byte TerrainMembership
		{
			get
			{
				return ReadByte(0x38);
			}
			set
			{
				WriteByte(0x38,value);
			}
		}
		
	}


	/// <summary>
	/// FPaperTileInfo:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FPaperTileInfo:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: TileSet
		/// Type: ObjectProperty
		/// Offset: 0x00
		/// Size: 0x08
		/// </summary>
		public UPaperTileSet TileSet => ReadUObject<UPaperTileSet>(0x00);
		
		/// <summary>
		/// Name: PackedTileIndex
		/// Type: IntProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public int PackedTileIndex
		{
			get
			{
				return ReadInt32(0x08);
			}
			set
			{
				WriteInt32(0x08,value);
			}
		}
		
	}


	/// <summary>
	/// FLightPropagationVolumeSettings:
	/// Size: 0x38
	/// Properties: 26
	/// </summary>
	public class FLightPropagationVolumeSettings:MemoryObject
	{
		public override int ObjectSize => 56;
		/// <summary>
		/// Name: bOverride_LPVIntensity
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVIntensity => (ReadByte(0x0000) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_LPVDirectionalOcclusionIntensity
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVDirectionalOcclusionIntensity => (ReadByte(0x0000) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_LPVDirectionalOcclusionRadius
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVDirectionalOcclusionRadius => (ReadByte(0x0000) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_LPVDiffuseOcclusionExponent
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVDiffuseOcclusionExponent => (ReadByte(0x0000) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_LPVSpecularOcclusionExponent
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVSpecularOcclusionExponent => (ReadByte(0x0000) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: bOverride_LPVDiffuseOcclusionIntensity
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVDiffuseOcclusionIntensity => (ReadByte(0x0000) & 0x20) == 0x20;
		
		/// <summary>
		/// Name: bOverride_LPVSpecularOcclusionIntensity
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVSpecularOcclusionIntensity => (ReadByte(0x0000) & 0x40) == 0x40;
		
		/// <summary>
		/// Name: bOverride_LPVSize
		/// Type: BoolProperty
		/// Offset: 0x00
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVSize => (ReadByte(0x0000) & 0x80) == 0x80;
		
		/// <summary>
		/// Name: bOverride_LPVSecondaryOcclusionIntensity
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVSecondaryOcclusionIntensity => (ReadByte(0x0001) & 0x01) == 0x01;
		
		/// <summary>
		/// Name: bOverride_LPVSecondaryBounceIntensity
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVSecondaryBounceIntensity => (ReadByte(0x0001) & 0x02) == 0x02;
		
		/// <summary>
		/// Name: bOverride_LPVGeometryVolumeBias
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVGeometryVolumeBias => (ReadByte(0x0001) & 0x04) == 0x04;
		
		/// <summary>
		/// Name: bOverride_LPVVplInjectionBias
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVVplInjectionBias => (ReadByte(0x0001) & 0x08) == 0x08;
		
		/// <summary>
		/// Name: bOverride_LPVEmissiveInjectionIntensity
		/// Type: BoolProperty
		/// Offset: 0x01
		/// Size: 0x01
		/// </summary>
		public bool bOverride_LPVEmissiveInjectionIntensity => (ReadByte(0x0001) & 0x10) == 0x10;
		
		/// <summary>
		/// Name: LPVIntensity
		/// Type: FloatProperty
		/// Offset: 0x04
		/// Size: 0x04
		/// </summary>
		public float LPVIntensity
		{
			get
			{
				return ReadSingle(0x04);
			}
			set
			{
				WriteSingle(0x04,value);
			}
		}
		
		/// <summary>
		/// Name: LPVVplInjectionBias
		/// Type: FloatProperty
		/// Offset: 0x08
		/// Size: 0x04
		/// </summary>
		public float LPVVplInjectionBias
		{
			get
			{
				return ReadSingle(0x08);
			}
			set
			{
				WriteSingle(0x08,value);
			}
		}
		
		/// <summary>
		/// Name: LPVSize
		/// Type: FloatProperty
		/// Offset: 0x0C
		/// Size: 0x04
		/// </summary>
		public float LPVSize
		{
			get
			{
				return ReadSingle(0x0C);
			}
			set
			{
				WriteSingle(0x0C,value);
			}
		}
		
		/// <summary>
		/// Name: LPVSecondaryOcclusionIntensity
		/// Type: FloatProperty
		/// Offset: 0x10
		/// Size: 0x04
		/// </summary>
		public float LPVSecondaryOcclusionIntensity
		{
			get
			{
				return ReadSingle(0x10);
			}
			set
			{
				WriteSingle(0x10,value);
			}
		}
		
		/// <summary>
		/// Name: LPVSecondaryBounceIntensity
		/// Type: FloatProperty
		/// Offset: 0x14
		/// Size: 0x04
		/// </summary>
		public float LPVSecondaryBounceIntensity
		{
			get
			{
				return ReadSingle(0x14);
			}
			set
			{
				WriteSingle(0x14,value);
			}
		}
		
		/// <summary>
		/// Name: LPVGeometryVolumeBias
		/// Type: FloatProperty
		/// Offset: 0x18
		/// Size: 0x04
		/// </summary>
		public float LPVGeometryVolumeBias
		{
			get
			{
				return ReadSingle(0x18);
			}
			set
			{
				WriteSingle(0x18,value);
			}
		}
		
		/// <summary>
		/// Name: LPVEmissiveInjectionIntensity
		/// Type: FloatProperty
		/// Offset: 0x1C
		/// Size: 0x04
		/// </summary>
		public float LPVEmissiveInjectionIntensity
		{
			get
			{
				return ReadSingle(0x1C);
			}
			set
			{
				WriteSingle(0x1C,value);
			}
		}
		
		/// <summary>
		/// Name: LPVDirectionalOcclusionIntensity
		/// Type: FloatProperty
		/// Offset: 0x20
		/// Size: 0x04
		/// </summary>
		public float LPVDirectionalOcclusionIntensity
		{
			get
			{
				return ReadSingle(0x20);
			}
			set
			{
				WriteSingle(0x20,value);
			}
		}
		
		/// <summary>
		/// Name: LPVDirectionalOcclusionRadius
		/// Type: FloatProperty
		/// Offset: 0x24
		/// Size: 0x04
		/// </summary>
		public float LPVDirectionalOcclusionRadius
		{
			get
			{
				return ReadSingle(0x24);
			}
			set
			{
				WriteSingle(0x24,value);
			}
		}
		
		/// <summary>
		/// Name: LPVDiffuseOcclusionExponent
		/// Type: FloatProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public float LPVDiffuseOcclusionExponent
		{
			get
			{
				return ReadSingle(0x28);
			}
			set
			{
				WriteSingle(0x28,value);
			}
		}
		
		/// <summary>
		/// Name: LPVSpecularOcclusionExponent
		/// Type: FloatProperty
		/// Offset: 0x2C
		/// Size: 0x04
		/// </summary>
		public float LPVSpecularOcclusionExponent
		{
			get
			{
				return ReadSingle(0x2C);
			}
			set
			{
				WriteSingle(0x2C,value);
			}
		}
		
		/// <summary>
		/// Name: LPVDiffuseOcclusionIntensity
		/// Type: FloatProperty
		/// Offset: 0x30
		/// Size: 0x04
		/// </summary>
		public float LPVDiffuseOcclusionIntensity
		{
			get
			{
				return ReadSingle(0x30);
			}
			set
			{
				WriteSingle(0x30,value);
			}
		}
		
		/// <summary>
		/// Name: LPVSpecularOcclusionIntensity
		/// Type: FloatProperty
		/// Offset: 0x34
		/// Size: 0x04
		/// </summary>
		public float LPVSpecularOcclusionIntensity
		{
			get
			{
				return ReadSingle(0x34);
			}
			set
			{
				WriteSingle(0x34,value);
			}
		}
		
	}


	/// <summary>
	/// FUdpMockMessage:
	/// Size: 0x10
	/// Properties: 1
	/// </summary>
	public class FUdpMockMessage:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: Data
		/// Type: TArray<>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
	}


	/// <summary>
	/// FCustomMeshTriangle:
	/// Size: 0x24
	/// Properties: 3
	/// </summary>
	public class FCustomMeshTriangle:MemoryObject
	{
		public override int ObjectSize => 36;
		/// <summary>
		/// Name: Vertex0
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Vertex0 => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: Vertex1
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector Vertex1 => ReadStruct<FVector>(0x0C);
		
		/// <summary>
		/// Name: Vertex2
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x0C
		/// </summary>
		public FVector Vertex2 => ReadStruct<FVector>(0x18);
		
	}


	/// <summary>
	/// FProcMeshSection:
	/// Size: 0x40
	/// Properties: 5
	/// </summary>
	public class FProcMeshSection:MemoryObject
	{
		public override int ObjectSize => 64;
		/// <summary>
		/// Name: ProcVertexBuffer
		/// Type: TArray<FProcMeshVertex>
		/// Offset: 0x00
		/// Size: 0x10
		/// SubElement Size: 0x34
		/// </summary>
		public TArray<FProcMeshVertex> ProcVertexBuffer => new TArray<FProcMeshVertex>(BaseAddress+0x00);
		
		/// <summary>
		/// Name: ProcIndexBuffer
		/// Type: TArray<>
		/// Offset: 0x10
		/// Size: 0x10
		/// SubElement Size: 0x00
		/// </summary>
		
		/// <summary>
		/// Name: SectionLocalBox
		/// Type: StructProperty
		/// Offset: 0x20
		/// Size: 0x1C
		/// </summary>
		public FBox SectionLocalBox => ReadStruct<FBox>(0x20);
		
		/// <summary>
		/// Name: bEnableCollision
		/// Type: BoolProperty
		/// Offset: 0x3C
		/// Size: 0x01
		/// </summary>
		public bool bEnableCollision
		{
			get
			{
				return ReadBool(0x3C);
			}
			set
			{
				WriteBool(0x3C,value);
			}
		}
		
		/// <summary>
		/// Name: bSectionVisible
		/// Type: BoolProperty
		/// Offset: 0x3D
		/// Size: 0x01
		/// </summary>
		public bool bSectionVisible
		{
			get
			{
				return ReadBool(0x3D);
			}
			set
			{
				WriteBool(0x3D,value);
			}
		}
		
	}


	/// <summary>
	/// FProcMeshVertex:
	/// Size: 0x34
	/// Properties: 5
	/// </summary>
	public class FProcMeshVertex:MemoryObject
	{
		public override int ObjectSize => 52;
		/// <summary>
		/// Name: Position
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector Position => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: Normal
		/// Type: StructProperty
		/// Offset: 0x0C
		/// Size: 0x0C
		/// </summary>
		public FVector Normal => ReadStruct<FVector>(0x0C);
		
		/// <summary>
		/// Name: Tangent
		/// Type: StructProperty
		/// Offset: 0x18
		/// Size: 0x10
		/// </summary>
		public FProcMeshTangent Tangent => ReadStruct<FProcMeshTangent>(0x18);
		
		/// <summary>
		/// Name: Color
		/// Type: StructProperty
		/// Offset: 0x28
		/// Size: 0x04
		/// </summary>
		public FColor Color => ReadStruct<FColor>(0x28);
		
		/// <summary>
		/// Name: UV0
		/// Type: StructProperty
		/// Offset: 0x2C
		/// Size: 0x08
		/// </summary>
		public FVector2D UV0 => ReadStruct<FVector2D>(0x2C);
		
	}


	/// <summary>
	/// FProcMeshTangent:
	/// Size: 0x10
	/// Properties: 2
	/// </summary>
	public class FProcMeshTangent:MemoryObject
	{
		public override int ObjectSize => 16;
		/// <summary>
		/// Name: TangentX
		/// Type: StructProperty
		/// Offset: 0x00
		/// Size: 0x0C
		/// </summary>
		public FVector TangentX => ReadStruct<FVector>(0x00);
		
		/// <summary>
		/// Name: bFlipTangentY
		/// Type: BoolProperty
		/// Offset: 0x0C
		/// Size: 0x01
		/// </summary>
		public bool bFlipTangentY
		{
			get
			{
				return ReadBool(0x0C);
			}
			set
			{
				WriteBool(0x0C,value);
			}
		}
		
	}


	/// <summary>
	/// UDefault__Class:
	/// Size: 0x00
	/// Properties: 0
	/// </summary>
	public class UDefault__Class:MemoryObject
	{
		public override int ObjectSize => 0;
	}


	/// <summary>
	/// UDefault__BlueprintGeneratedClass:
	/// Size: 0x00
	/// Properties: 0
	/// </summary>
	public class UDefault__BlueprintGeneratedClass:MemoryObject
	{
		public override int ObjectSize => 0;
	}


	/// <summary>
	/// UDefault__DynamicClass:
	/// Size: 0x00
	/// Properties: 0
	/// </summary>
	public class UDefault__DynamicClass:MemoryObject
	{
		public override int ObjectSize => 0;
	}


	/// <summary>
	/// UDefault__LinkerPlaceholderClass:
	/// Size: 0x00
	/// Properties: 0
	/// </summary>
	public class UDefault__LinkerPlaceholderClass:MemoryObject
	{
		public override int ObjectSize => 0;
	}


	/// <summary>
	/// UDefault__WidgetBlueprintGeneratedClass:
	/// Size: 0x00
	/// Properties: 0
	/// </summary>
	public class UDefault__WidgetBlueprintGeneratedClass:MemoryObject
	{
		public override int ObjectSize => 0;
	}


	/// <summary>
	/// FDefault__UserDefinedStruct:
	/// Size: 0x00
	/// Properties: 0
	/// </summary>
	public class FDefault__UserDefinedStruct:MemoryObject
	{
		public override int ObjectSize => 0;
	}


	/// <summary>
	/// FDefault__AISenseBlueprintListener:
	/// Size: 0x00
	/// Properties: 0
	/// </summary>
	public class FDefault__AISenseBlueprintListener:MemoryObject
	{
		public override int ObjectSize => 0;
	}


	/// <summary>
	/// UDefault__AnimBlueprintGeneratedClass:
	/// Size: 0x00
	/// Properties: 0
	/// </summary>
	public class UDefault__AnimBlueprintGeneratedClass:MemoryObject
	{
		public override int ObjectSize => 0;
	}


}
